
winchcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e20  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08007fac  08007fac  00017fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084ec  080084ec  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080084ec  080084ec  000184ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084f4  080084f4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084f4  080084f4  000184f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084f8  080084f8  000184f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080084fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000024  08008520  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08008520  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013d9b  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cf5  00000000  00000000  00033e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  00036b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e15  00000000  00000000  00037d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002259c  00000000  00000000  00038b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019560  00000000  00000000  0005b101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5c5f  00000000  00000000  00074661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b08  00000000  00000000  0013a2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0013edc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08007f94 	.word	0x08007f94

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	08007f94 	.word	0x08007f94

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d2:	4804      	ldr	r0, [pc, #16]	; (80004e4 <SELECT+0x1c>)
 80004d4:	f001 fc98 	bl	8001e08 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80004d8:	2001      	movs	r0, #1
 80004da:	f001 fa21 	bl	8001920 <HAL_Delay>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	48000400 	.word	0x48000400

080004e8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f2:	4804      	ldr	r0, [pc, #16]	; (8000504 <DESELECT+0x1c>)
 80004f4:	f001 fc88 	bl	8001e08 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f001 fa11 	bl	8001920 <HAL_Delay>
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	48000400 	.word	0x48000400

08000508 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000512:	bf00      	nop
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <SPI_TxByte+0x30>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b02      	cmp	r3, #2
 8000520:	d1f8      	bne.n	8000514 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000522:	1df9      	adds	r1, r7, #7
 8000524:	2364      	movs	r3, #100	; 0x64
 8000526:	2201      	movs	r2, #1
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <SPI_TxByte+0x30>)
 800052a:	f003 fb28 	bl	8003b7e <HAL_SPI_Transmit>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	2000009c 	.word	0x2000009c

0800053c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000548:	bf00      	nop
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <SPI_TxBuffer+0x30>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f003 0302 	and.w	r3, r3, #2
 8000554:	2b02      	cmp	r3, #2
 8000556:	d1f8      	bne.n	800054a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000558:	887a      	ldrh	r2, [r7, #2]
 800055a:	2364      	movs	r3, #100	; 0x64
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	4803      	ldr	r0, [pc, #12]	; (800056c <SPI_TxBuffer+0x30>)
 8000560:	f003 fb0d 	bl	8003b7e <HAL_SPI_Transmit>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000009c 	.word	0x2000009c

08000570 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000576:	23ff      	movs	r3, #255	; 0xff
 8000578:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800057a:	bf00      	nop
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <SPI_RxByte+0x34>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	2b02      	cmp	r3, #2
 8000588:	d1f8      	bne.n	800057c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800058a:	1dba      	adds	r2, r7, #6
 800058c:	1df9      	adds	r1, r7, #7
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <SPI_RxByte+0x34>)
 8000596:	f003 fc67 	bl	8003e68 <HAL_SPI_TransmitReceive>

  return data;
 800059a:	79bb      	ldrb	r3, [r7, #6]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000009c 	.word	0x2000009c

080005a8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80005b0:	f7ff ffde 	bl	8000570 <SPI_RxByte>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	701a      	strb	r2, [r3, #0]
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <SD_ReadyWait+0x30>)
 80005cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d0:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80005d2:	f7ff ffcd 	bl	8000570 <SPI_RxByte>
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2bff      	cmp	r3, #255	; 0xff
 80005de:	d003      	beq.n	80005e8 <SD_ReadyWait+0x24>
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <SD_ReadyWait+0x30>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1f4      	bne.n	80005d2 <SD_ReadyWait+0xe>

  return res;
 80005e8:	79fb      	ldrb	r3, [r7, #7]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000042 	.word	0x20000042

080005f8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80005fe:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000602:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8000604:	f7ff ff70 	bl	80004e8 <DESELECT>
  for(int i = 0; i < 10; i++)
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	e005      	b.n	800061a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800060e:	20ff      	movs	r0, #255	; 0xff
 8000610:	f7ff ff7a 	bl	8000508 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	3301      	adds	r3, #1
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	2b09      	cmp	r3, #9
 800061e:	ddf6      	ble.n	800060e <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8000620:	f7ff ff52 	bl	80004c8 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000624:	2340      	movs	r3, #64	; 0x40
 8000626:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000638:	2395      	movs	r3, #149	; 0x95
 800063a:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 800063c:	463b      	mov	r3, r7
 800063e:	2106      	movs	r1, #6
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff7b 	bl	800053c <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000646:	e002      	b.n	800064e <SD_PowerOn+0x56>
  {
    cnt--;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3b01      	subs	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800064e:	f7ff ff8f 	bl	8000570 <SPI_RxByte>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	d002      	beq.n	800065e <SD_PowerOn+0x66>
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f4      	bne.n	8000648 <SD_PowerOn+0x50>
  }

  DESELECT();
 800065e:	f7ff ff43 	bl	80004e8 <DESELECT>
  SPI_TxByte(0XFF);
 8000662:	20ff      	movs	r0, #255	; 0xff
 8000664:	f7ff ff50 	bl	8000508 <SPI_TxByte>

  PowerFlag = 1;
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <SD_PowerOn+0x80>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000045 	.word	0x20000045

0800067c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <SD_PowerOff+0x14>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	20000045 	.word	0x20000045

08000694 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <SD_CheckPower+0x14>)
 800069a:	781b      	ldrb	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000045 	.word	0x20000045

080006ac <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SD_RxDataBlock+0x58>)
 80006b8:	22c8      	movs	r2, #200	; 0xc8
 80006ba:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80006bc:	f7ff ff58 	bl	8000570 <SPI_RxByte>
 80006c0:	4603      	mov	r3, r0
 80006c2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2bff      	cmp	r3, #255	; 0xff
 80006c8:	d103      	bne.n	80006d2 <SD_RxDataBlock+0x26>
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <SD_RxDataBlock+0x58>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1f4      	bne.n	80006bc <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	2bfe      	cmp	r3, #254	; 0xfe
 80006d6:	d001      	beq.n	80006dc <SD_RxDataBlock+0x30>
 80006d8:	2300      	movs	r3, #0
 80006da:	e00f      	b.n	80006fc <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	607a      	str	r2, [r7, #4]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff60 	bl	80005a8 <SPI_RxBytePtr>
  } while(len--);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	1e5a      	subs	r2, r3, #1
 80006ec:	603a      	str	r2, [r7, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1f4      	bne.n	80006dc <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80006f2:	f7ff ff3d 	bl	8000570 <SPI_RxByte>
  SPI_RxByte();
 80006f6:	f7ff ff3b 	bl	8000570 <SPI_RxByte>

  return TRUE;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000040 	.word	0x20000040

08000708 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000718:	f7ff ff54 	bl	80005c4 <SD_ReadyWait>
 800071c:	4603      	mov	r3, r0
 800071e:	2bff      	cmp	r3, #255	; 0xff
 8000720:	d001      	beq.n	8000726 <SD_TxDataBlock+0x1e>
 8000722:	2300      	movs	r3, #0
 8000724:	e02f      	b.n	8000786 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff feed 	bl	8000508 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	2bfd      	cmp	r3, #253	; 0xfd
 8000732:	d020      	beq.n	8000776 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff feff 	bl	800053c <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800073e:	f7ff ff17 	bl	8000570 <SPI_RxByte>
    SPI_RxByte();
 8000742:	f7ff ff15 	bl	8000570 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8000746:	e00b      	b.n	8000760 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000748:	f7ff ff12 	bl	8000570 <SPI_RxByte>
 800074c:	4603      	mov	r3, r0
 800074e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	f003 031f 	and.w	r3, r3, #31
 8000756:	2b05      	cmp	r3, #5
 8000758:	d006      	beq.n	8000768 <SD_TxDataBlock+0x60>
      i++;
 800075a:	7bbb      	ldrb	r3, [r7, #14]
 800075c:	3301      	adds	r3, #1
 800075e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	2b40      	cmp	r3, #64	; 0x40
 8000764:	d9f0      	bls.n	8000748 <SD_TxDataBlock+0x40>
 8000766:	e000      	b.n	800076a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000768:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800076a:	bf00      	nop
 800076c:	f7ff ff00 	bl	8000570 <SPI_RxByte>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d0fa      	beq.n	800076c <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	f003 031f 	and.w	r3, r3, #31
 800077c:	2b05      	cmp	r3, #5
 800077e:	d101      	bne.n	8000784 <SD_TxDataBlock+0x7c>
 8000780:	2301      	movs	r3, #1
 8000782:	e000      	b.n	8000786 <SD_TxDataBlock+0x7e>

  return FALSE;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b084      	sub	sp, #16
 8000792:	af00      	add	r7, sp, #0
 8000794:	4603      	mov	r3, r0
 8000796:	6039      	str	r1, [r7, #0]
 8000798:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800079a:	f7ff ff13 	bl	80005c4 <SD_ReadyWait>
 800079e:	4603      	mov	r3, r0
 80007a0:	2bff      	cmp	r3, #255	; 0xff
 80007a2:	d001      	beq.n	80007a8 <SD_SendCmd+0x1a>
 80007a4:	23ff      	movs	r3, #255	; 0xff
 80007a6:	e042      	b.n	800082e <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff feac 	bl	8000508 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	0e1b      	lsrs	r3, r3, #24
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fea6 	bl	8000508 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	0c1b      	lsrs	r3, r3, #16
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fea0 	bl	8000508 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	0a1b      	lsrs	r3, r3, #8
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe9a 	bl	8000508 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fe95 	bl	8000508 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b40      	cmp	r3, #64	; 0x40
 80007e2:	d102      	bne.n	80007ea <SD_SendCmd+0x5c>
 80007e4:	2395      	movs	r3, #149	; 0x95
 80007e6:	73fb      	strb	r3, [r7, #15]
 80007e8:	e007      	b.n	80007fa <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b48      	cmp	r3, #72	; 0x48
 80007ee:	d102      	bne.n	80007f6 <SD_SendCmd+0x68>
 80007f0:	2387      	movs	r3, #135	; 0x87
 80007f2:	73fb      	strb	r3, [r7, #15]
 80007f4:	e001      	b.n	80007fa <SD_SendCmd+0x6c>
  else crc = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fe83 	bl	8000508 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b4c      	cmp	r3, #76	; 0x4c
 8000806:	d101      	bne.n	800080c <SD_SendCmd+0x7e>
 8000808:	f7ff feb2 	bl	8000570 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 800080c:	230a      	movs	r3, #10
 800080e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000810:	f7ff feae 	bl	8000570 <SPI_RxByte>
 8000814:	4603      	mov	r3, r0
 8000816:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000818:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800081c:	2b00      	cmp	r3, #0
 800081e:	da05      	bge.n	800082c <SD_SendCmd+0x9e>
 8000820:	7bbb      	ldrb	r3, [r7, #14]
 8000822:	3b01      	subs	r3, #1
 8000824:	73bb      	strb	r3, [r7, #14]
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f1      	bne.n	8000810 <SD_SendCmd+0x82>

  return res;
 800082c:	7b7b      	ldrb	r3, [r7, #13]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SD_disk_initialize+0x14>
 8000848:	2301      	movs	r3, #1
 800084a:	e0d1      	b.n	80009f0 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800084c:	4b6a      	ldr	r3, [pc, #424]	; (80009f8 <SD_disk_initialize+0x1c0>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <SD_disk_initialize+0x2a>
 800085a:	4b67      	ldr	r3, [pc, #412]	; (80009f8 <SD_disk_initialize+0x1c0>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	e0c6      	b.n	80009f0 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000862:	f7ff fec9 	bl	80005f8 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000866:	f7ff fe2f 	bl	80004c8 <SELECT>

  /* check disk type */
  type = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800086e:	2100      	movs	r1, #0
 8000870:	2040      	movs	r0, #64	; 0x40
 8000872:	f7ff ff8c 	bl	800078e <SD_SendCmd>
 8000876:	4603      	mov	r3, r0
 8000878:	2b01      	cmp	r3, #1
 800087a:	f040 80a1 	bne.w	80009c0 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800087e:	4b5f      	ldr	r3, [pc, #380]	; (80009fc <SD_disk_initialize+0x1c4>)
 8000880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000884:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000886:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800088a:	2048      	movs	r0, #72	; 0x48
 800088c:	f7ff ff7f 	bl	800078e <SD_SendCmd>
 8000890:	4603      	mov	r3, r0
 8000892:	2b01      	cmp	r3, #1
 8000894:	d155      	bne.n	8000942 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000896:	2300      	movs	r3, #0
 8000898:	73fb      	strb	r3, [r7, #15]
 800089a:	e00c      	b.n	80008b6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800089c:	7bfc      	ldrb	r4, [r7, #15]
 800089e:	f7ff fe67 	bl	8000570 <SPI_RxByte>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	f104 0310 	add.w	r3, r4, #16
 80008aa:	443b      	add	r3, r7
 80008ac:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	3301      	adds	r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d9ef      	bls.n	800089c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008bc:	7abb      	ldrb	r3, [r7, #10]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d17e      	bne.n	80009c0 <SD_disk_initialize+0x188>
 80008c2:	7afb      	ldrb	r3, [r7, #11]
 80008c4:	2baa      	cmp	r3, #170	; 0xaa
 80008c6:	d17b      	bne.n	80009c0 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008c8:	2100      	movs	r1, #0
 80008ca:	2077      	movs	r0, #119	; 0x77
 80008cc:	f7ff ff5f 	bl	800078e <SD_SendCmd>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d807      	bhi.n	80008e6 <SD_disk_initialize+0xae>
 80008d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008da:	2069      	movs	r0, #105	; 0x69
 80008dc:	f7ff ff57 	bl	800078e <SD_SendCmd>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d004      	beq.n	80008f0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80008e6:	4b45      	ldr	r3, [pc, #276]	; (80009fc <SD_disk_initialize+0x1c4>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1ec      	bne.n	80008c8 <SD_disk_initialize+0x90>
 80008ee:	e000      	b.n	80008f2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008f0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008f2:	4b42      	ldr	r3, [pc, #264]	; (80009fc <SD_disk_initialize+0x1c4>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d062      	beq.n	80009c0 <SD_disk_initialize+0x188>
 80008fa:	2100      	movs	r1, #0
 80008fc:	207a      	movs	r0, #122	; 0x7a
 80008fe:	f7ff ff46 	bl	800078e <SD_SendCmd>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d15b      	bne.n	80009c0 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000908:	2300      	movs	r3, #0
 800090a:	73fb      	strb	r3, [r7, #15]
 800090c:	e00c      	b.n	8000928 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800090e:	7bfc      	ldrb	r4, [r7, #15]
 8000910:	f7ff fe2e 	bl	8000570 <SPI_RxByte>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	f104 0310 	add.w	r3, r4, #16
 800091c:	443b      	add	r3, r7
 800091e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	3301      	adds	r3, #1
 8000926:	73fb      	strb	r3, [r7, #15]
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d9ef      	bls.n	800090e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800092e:	7a3b      	ldrb	r3, [r7, #8]
 8000930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SD_disk_initialize+0x104>
 8000938:	230c      	movs	r3, #12
 800093a:	e000      	b.n	800093e <SD_disk_initialize+0x106>
 800093c:	2304      	movs	r3, #4
 800093e:	73bb      	strb	r3, [r7, #14]
 8000940:	e03e      	b.n	80009c0 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000942:	2100      	movs	r1, #0
 8000944:	2077      	movs	r0, #119	; 0x77
 8000946:	f7ff ff22 	bl	800078e <SD_SendCmd>
 800094a:	4603      	mov	r3, r0
 800094c:	2b01      	cmp	r3, #1
 800094e:	d808      	bhi.n	8000962 <SD_disk_initialize+0x12a>
 8000950:	2100      	movs	r1, #0
 8000952:	2069      	movs	r0, #105	; 0x69
 8000954:	f7ff ff1b 	bl	800078e <SD_SendCmd>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d801      	bhi.n	8000962 <SD_disk_initialize+0x12a>
 800095e:	2302      	movs	r3, #2
 8000960:	e000      	b.n	8000964 <SD_disk_initialize+0x12c>
 8000962:	2301      	movs	r3, #1
 8000964:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000966:	7bbb      	ldrb	r3, [r7, #14]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d10e      	bne.n	800098a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800096c:	2100      	movs	r1, #0
 800096e:	2077      	movs	r0, #119	; 0x77
 8000970:	f7ff ff0d 	bl	800078e <SD_SendCmd>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d80e      	bhi.n	8000998 <SD_disk_initialize+0x160>
 800097a:	2100      	movs	r1, #0
 800097c:	2069      	movs	r0, #105	; 0x69
 800097e:	f7ff ff06 	bl	800078e <SD_SendCmd>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d107      	bne.n	8000998 <SD_disk_initialize+0x160>
 8000988:	e00c      	b.n	80009a4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800098a:	2100      	movs	r1, #0
 800098c:	2041      	movs	r0, #65	; 0x41
 800098e:	f7ff fefe 	bl	800078e <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d004      	beq.n	80009a2 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <SD_disk_initialize+0x1c4>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1e2      	bne.n	8000966 <SD_disk_initialize+0x12e>
 80009a0:	e000      	b.n	80009a4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009a2:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <SD_disk_initialize+0x1c4>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d007      	beq.n	80009bc <SD_disk_initialize+0x184>
 80009ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b0:	2050      	movs	r0, #80	; 0x50
 80009b2:	f7ff feec 	bl	800078e <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SD_disk_initialize+0x188>
 80009bc:	2300      	movs	r3, #0
 80009be:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80009c0:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <SD_disk_initialize+0x1c8>)
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80009c6:	f7ff fd8f 	bl	80004e8 <DESELECT>
  SPI_RxByte();
 80009ca:	f7ff fdd1 	bl	8000570 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d008      	beq.n	80009e6 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <SD_disk_initialize+0x1c0>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <SD_disk_initialize+0x1c0>)
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e001      	b.n	80009ea <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80009e6:	f7ff fe49 	bl	800067c <SD_PowerOff>
  }

  return Stat;
 80009ea:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <SD_disk_initialize+0x1c0>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000040 	.word	0x20000040
 8000a00:	20000044 	.word	0x20000044

08000a04 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SD_disk_status+0x14>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e002      	b.n	8000a1e <SD_disk_status+0x1a>
  return Stat;
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SD_disk_status+0x28>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000000 	.word	0x20000000

08000a30 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d102      	bne.n	8000a4c <SD_disk_read+0x1c>
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d101      	bne.n	8000a50 <SD_disk_read+0x20>
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	e051      	b.n	8000af4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a50:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <SD_disk_read+0xcc>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SD_disk_read+0x32>
 8000a5e:	2303      	movs	r3, #3
 8000a60:	e048      	b.n	8000af4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000a62:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <SD_disk_read+0xd0>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d102      	bne.n	8000a74 <SD_disk_read+0x44>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	025b      	lsls	r3, r3, #9
 8000a72:	607b      	str	r3, [r7, #4]

  SELECT();
 8000a74:	f7ff fd28 	bl	80004c8 <SELECT>

  if (count == 1)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d111      	bne.n	8000aa2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	2051      	movs	r0, #81	; 0x51
 8000a82:	f7ff fe84 	bl	800078e <SD_SendCmd>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d129      	bne.n	8000ae0 <SD_disk_read+0xb0>
 8000a8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a90:	68b8      	ldr	r0, [r7, #8]
 8000a92:	f7ff fe0b 	bl	80006ac <SD_RxDataBlock>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d021      	beq.n	8000ae0 <SD_disk_read+0xb0>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	e01e      	b.n	8000ae0 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2052      	movs	r0, #82	; 0x52
 8000aa6:	f7ff fe72 	bl	800078e <SD_SendCmd>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d117      	bne.n	8000ae0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000ab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab4:	68b8      	ldr	r0, [r7, #8]
 8000ab6:	f7ff fdf9 	bl	80006ac <SD_RxDataBlock>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00a      	beq.n	8000ad6 <SD_disk_read+0xa6>
        buff += 512;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ac6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1ed      	bne.n	8000ab0 <SD_disk_read+0x80>
 8000ad4:	e000      	b.n	8000ad8 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000ad6:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	204c      	movs	r0, #76	; 0x4c
 8000adc:	f7ff fe57 	bl	800078e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8000ae0:	f7ff fd02 	bl	80004e8 <DESELECT>
  SPI_RxByte();
 8000ae4:	f7ff fd44 	bl	8000570 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf14      	ite	ne
 8000aee:	2301      	movne	r3, #1
 8000af0:	2300      	moveq	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000044 	.word	0x20000044

08000b04 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <SD_disk_write+0x1c>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <SD_disk_write+0x20>
 8000b20:	2304      	movs	r3, #4
 8000b22:	e06b      	b.n	8000bfc <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b24:	4b37      	ldr	r3, [pc, #220]	; (8000c04 <SD_disk_write+0x100>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SD_disk_write+0x32>
 8000b32:	2303      	movs	r3, #3
 8000b34:	e062      	b.n	8000bfc <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <SD_disk_write+0x100>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SD_disk_write+0x44>
 8000b44:	2302      	movs	r3, #2
 8000b46:	e059      	b.n	8000bfc <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <SD_disk_write+0x104>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <SD_disk_write+0x56>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	025b      	lsls	r3, r3, #9
 8000b58:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b5a:	f7ff fcb5 	bl	80004c8 <SELECT>

  if (count == 1)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d110      	bne.n	8000b86 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b64:	6879      	ldr	r1, [r7, #4]
 8000b66:	2058      	movs	r0, #88	; 0x58
 8000b68:	f7ff fe11 	bl	800078e <SD_SendCmd>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d13a      	bne.n	8000be8 <SD_disk_write+0xe4>
 8000b72:	21fe      	movs	r1, #254	; 0xfe
 8000b74:	68b8      	ldr	r0, [r7, #8]
 8000b76:	f7ff fdc7 	bl	8000708 <SD_TxDataBlock>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d033      	beq.n	8000be8 <SD_disk_write+0xe4>
      count = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	e030      	b.n	8000be8 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <SD_disk_write+0x104>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d007      	beq.n	8000ba2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2077      	movs	r0, #119	; 0x77
 8000b96:	f7ff fdfa 	bl	800078e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b9a:	6839      	ldr	r1, [r7, #0]
 8000b9c:	2057      	movs	r0, #87	; 0x57
 8000b9e:	f7ff fdf6 	bl	800078e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	2059      	movs	r0, #89	; 0x59
 8000ba6:	f7ff fdf2 	bl	800078e <SD_SendCmd>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d11b      	bne.n	8000be8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bb0:	21fc      	movs	r1, #252	; 0xfc
 8000bb2:	68b8      	ldr	r0, [r7, #8]
 8000bb4:	f7ff fda8 	bl	8000708 <SD_TxDataBlock>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00a      	beq.n	8000bd4 <SD_disk_write+0xd0>
        buff += 512;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1ee      	bne.n	8000bb0 <SD_disk_write+0xac>
 8000bd2:	e000      	b.n	8000bd6 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bd4:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000bd6:	21fd      	movs	r1, #253	; 0xfd
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fd95 	bl	8000708 <SD_TxDataBlock>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <SD_disk_write+0xe4>
      {
        count = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8000be8:	f7ff fc7e 	bl	80004e8 <DESELECT>
  SPI_RxByte();
 8000bec:	f7ff fcc0 	bl	8000570 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf14      	ite	ne
 8000bf6:	2301      	movne	r3, #1
 8000bf8:	2300      	moveq	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000044 	.word	0x20000044

08000c0c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b08b      	sub	sp, #44	; 0x2c
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	603a      	str	r2, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SD_disk_ioctl+0x1e>
 8000c26:	2304      	movs	r3, #4
 8000c28:	e115      	b.n	8000e56 <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	2b05      	cmp	r3, #5
 8000c34:	d124      	bne.n	8000c80 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d012      	beq.n	8000c64 <SD_disk_ioctl+0x58>
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	dc1a      	bgt.n	8000c78 <SD_disk_ioctl+0x6c>
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <SD_disk_ioctl+0x40>
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d006      	beq.n	8000c58 <SD_disk_ioctl+0x4c>
 8000c4a:	e015      	b.n	8000c78 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8000c4c:	f7ff fd16 	bl	800067c <SD_PowerOff>
      res = RES_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c56:	e0fc      	b.n	8000e52 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8000c58:	f7ff fcce 	bl	80005f8 <SD_PowerOn>
      res = RES_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c62:	e0f6      	b.n	8000e52 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	1c5c      	adds	r4, r3, #1
 8000c68:	f7ff fd14 	bl	8000694 <SD_CheckPower>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c76:	e0ec      	b.n	8000e52 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c7e:	e0e8      	b.n	8000e52 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c80:	4b77      	ldr	r3, [pc, #476]	; (8000e60 <SD_disk_ioctl+0x254>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SD_disk_ioctl+0x86>
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e0e1      	b.n	8000e56 <SD_disk_ioctl+0x24a>

    SELECT();
 8000c92:	f7ff fc19 	bl	80004c8 <SELECT>

    switch (ctrl)
 8000c96:	79bb      	ldrb	r3, [r7, #6]
 8000c98:	2b0d      	cmp	r3, #13
 8000c9a:	f200 80cb 	bhi.w	8000e34 <SD_disk_ioctl+0x228>
 8000c9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ca4 <SD_disk_ioctl+0x98>)
 8000ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca4:	08000d9f 	.word	0x08000d9f
 8000ca8:	08000cdd 	.word	0x08000cdd
 8000cac:	08000d8f 	.word	0x08000d8f
 8000cb0:	08000e35 	.word	0x08000e35
 8000cb4:	08000e35 	.word	0x08000e35
 8000cb8:	08000e35 	.word	0x08000e35
 8000cbc:	08000e35 	.word	0x08000e35
 8000cc0:	08000e35 	.word	0x08000e35
 8000cc4:	08000e35 	.word	0x08000e35
 8000cc8:	08000e35 	.word	0x08000e35
 8000ccc:	08000e35 	.word	0x08000e35
 8000cd0:	08000db1 	.word	0x08000db1
 8000cd4:	08000dd5 	.word	0x08000dd5
 8000cd8:	08000df9 	.word	0x08000df9
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2049      	movs	r0, #73	; 0x49
 8000ce0:	f7ff fd55 	bl	800078e <SD_SendCmd>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f040 80a8 	bne.w	8000e3c <SD_disk_ioctl+0x230>
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fcda 	bl	80006ac <SD_RxDataBlock>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 809e 	beq.w	8000e3c <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8000d00:	7b3b      	ldrb	r3, [r7, #12]
 8000d02:	099b      	lsrs	r3, r3, #6
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d10e      	bne.n	8000d28 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d0a:	7d7b      	ldrb	r3, [r7, #21]
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	7d3b      	ldrb	r3, [r7, #20]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	4413      	add	r3, r2
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000d1e:	8bfb      	ldrh	r3, [r7, #30]
 8000d20:	029a      	lsls	r2, r3, #10
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	e02e      	b.n	8000d86 <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d28:	7c7b      	ldrb	r3, [r7, #17]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	7dbb      	ldrb	r3, [r7, #22]
 8000d32:	09db      	lsrs	r3, r3, #7
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4413      	add	r3, r2
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	7d7b      	ldrb	r3, [r7, #21]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	f003 0306 	and.w	r3, r3, #6
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	4413      	add	r3, r2
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d50:	7d3b      	ldrb	r3, [r7, #20]
 8000d52:	099b      	lsrs	r3, r3, #6
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	4413      	add	r3, r2
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	7cbb      	ldrb	r3, [r7, #18]
 8000d66:	029b      	lsls	r3, r3, #10
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	4413      	add	r3, r2
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	3301      	adds	r3, #1
 8000d76:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d78:	8bfa      	ldrh	r2, [r7, #30]
 8000d7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d7e:	3b09      	subs	r3, #9
 8000d80:	409a      	lsls	r2, r3
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000d8c:	e056      	b.n	8000e3c <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d94:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d9c:	e055      	b.n	8000e4a <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000d9e:	f7ff fc11 	bl	80005c4 <SD_ReadyWait>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2bff      	cmp	r3, #255	; 0xff
 8000da6:	d14b      	bne.n	8000e40 <SD_disk_ioctl+0x234>
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000dae:	e047      	b.n	8000e40 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000db0:	2100      	movs	r1, #0
 8000db2:	2049      	movs	r0, #73	; 0x49
 8000db4:	f7ff fceb 	bl	800078e <SD_SendCmd>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d142      	bne.n	8000e44 <SD_disk_ioctl+0x238>
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	6a38      	ldr	r0, [r7, #32]
 8000dc2:	f7ff fc73 	bl	80006ac <SD_RxDataBlock>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d03b      	beq.n	8000e44 <SD_disk_ioctl+0x238>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000dd2:	e037      	b.n	8000e44 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	204a      	movs	r0, #74	; 0x4a
 8000dd8:	f7ff fcd9 	bl	800078e <SD_SendCmd>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d132      	bne.n	8000e48 <SD_disk_ioctl+0x23c>
 8000de2:	2110      	movs	r1, #16
 8000de4:	6a38      	ldr	r0, [r7, #32]
 8000de6:	f7ff fc61 	bl	80006ac <SD_RxDataBlock>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d02b      	beq.n	8000e48 <SD_disk_ioctl+0x23c>
 8000df0:	2300      	movs	r3, #0
 8000df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000df6:	e027      	b.n	8000e48 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	207a      	movs	r0, #122	; 0x7a
 8000dfc:	f7ff fcc7 	bl	800078e <SD_SendCmd>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d116      	bne.n	8000e34 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e0c:	e00b      	b.n	8000e26 <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8000e0e:	6a3c      	ldr	r4, [r7, #32]
 8000e10:	1c63      	adds	r3, r4, #1
 8000e12:	623b      	str	r3, [r7, #32]
 8000e14:	f7ff fbac 	bl	8000570 <SPI_RxByte>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000e1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e20:	3301      	adds	r3, #1
 8000e22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d9ef      	bls.n	8000e0e <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8000e34:	2304      	movs	r3, #4
 8000e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e3a:	e006      	b.n	8000e4a <SD_disk_ioctl+0x23e>
      break;
 8000e3c:	bf00      	nop
 8000e3e:	e004      	b.n	8000e4a <SD_disk_ioctl+0x23e>
      break;
 8000e40:	bf00      	nop
 8000e42:	e002      	b.n	8000e4a <SD_disk_ioctl+0x23e>
      break;
 8000e44:	bf00      	nop
 8000e46:	e000      	b.n	8000e4a <SD_disk_ioctl+0x23e>
      break;
 8000e48:	bf00      	nop
    }

    DESELECT();
 8000e4a:	f7ff fb4d 	bl	80004e8 <DESELECT>
    SPI_RxByte();
 8000e4e:	f7ff fb8f 	bl	8000570 <SPI_RxByte>
  }

  return res;
 8000e52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	372c      	adds	r7, #44	; 0x2c
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000000 	.word	0x20000000

08000e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e68:	f000 fce5 	bl	8001836 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6c:	f000 f82a 	bl	8000ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e70:	f000 f938 	bl	80010e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e74:	f000 f906 	bl	8001084 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e78:	f000 f886 	bl	8000f88 <MX_I2C1_Init>
  MX_FATFS_Init();
 8000e7c:	f004 f80a 	bl	8004e94 <MX_FATFS_Init>
  MX_SPI3_Init();
 8000e80:	f000 f8c2 	bl	8001008 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8000e84:	f000 f9f9 	bl	800127a <lcd_init>
  lcd_backlight(1); // Turn on backlight
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f000 fa69 	bl	8001360 <lcd_backlight>

  strcpy(text, "Foobar");
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <main+0x58>)
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <main+0x5c>)
 8000e92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e96:	6018      	str	r0, [r3, #0]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	8019      	strh	r1, [r3, #0]
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	0c0a      	lsrs	r2, r1, #16
 8000ea0:	701a      	strb	r2, [r3, #0]
  lcd_clear();
 8000ea2:	f000 fa53 	bl	800134c <lcd_clear>
  lcd_set_cursor(0, 0);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f000 fa2a 	bl	8001302 <lcd_set_cursor>
  lcd_write_string(text);
 8000eae:	4803      	ldr	r0, [pc, #12]	; (8000ebc <main+0x58>)
 8000eb0:	f000 fa12 	bl	80012d8 <lcd_write_string>

  process_SD_card();
 8000eb4:	f000 fa6c 	bl	8001390 <process_SD_card>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <main+0x54>
 8000eba:	bf00      	nop
 8000ebc:	20000188 	.word	0x20000188
 8000ec0:	08007fac 	.word	0x08007fac

08000ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b096      	sub	sp, #88	; 0x58
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	2244      	movs	r2, #68	; 0x44
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f007 f832 	bl	8007f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ee6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eea:	f001 fc1f 	bl	800272c <HAL_PWREx_ControlVoltageScaling>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ef4:	f000 faf2 	bl	80014dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ef8:	f001 fbfa 	bl	80026f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000efc:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <SystemClock_Config+0xc0>)
 8000efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f02:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <SystemClock_Config+0xc0>)
 8000f04:	f023 0318 	bic.w	r3, r3, #24
 8000f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f0c:	2314      	movs	r3, #20
 8000f0e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f10:	2301      	movs	r3, #1
 8000f12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f14:	2301      	movs	r3, #1
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f1c:	2360      	movs	r3, #96	; 0x60
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f20:	2302      	movs	r3, #2
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f24:	2301      	movs	r3, #1
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f30:	2307      	movs	r3, #7
 8000f32:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 fc49 	bl	80027d8 <HAL_RCC_OscConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000f4c:	f000 fac6 	bl	80014dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f50:	230f      	movs	r3, #15
 8000f52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f54:	2303      	movs	r3, #3
 8000f56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f64:	463b      	mov	r3, r7
 8000f66:	2101      	movs	r1, #1
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 f849 	bl	8003000 <HAL_RCC_ClockConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f74:	f000 fab2 	bl	80014dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f78:	f002 fc5c 	bl	8003834 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f7c:	bf00      	nop
 8000f7e:	3758      	adds	r7, #88	; 0x58
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40021000 	.word	0x40021000

08000f88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000f8e:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <MX_I2C1_Init+0x78>)
 8000f90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000f94:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <MX_I2C1_Init+0x7c>)
 8000f96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc2:	480e      	ldr	r0, [pc, #56]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fc4:	f000 ff38 	bl	8001e38 <HAL_I2C_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fce:	f000 fa85 	bl	80014dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fd6:	f001 faf3 	bl	80025c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fe0:	f000 fa7c 	bl	80014dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fe8:	f001 fb35 	bl	8002656 <HAL_I2CEx_ConfigDigitalFilter>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ff2:	f000 fa73 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000048 	.word	0x20000048
 8001000:	40005400 	.word	0x40005400
 8001004:	00707cbb 	.word	0x00707cbb

08001008 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_SPI3_Init+0x74>)
 800100e:	4a1c      	ldr	r2, [pc, #112]	; (8001080 <MX_SPI3_Init+0x78>)
 8001010:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_SPI3_Init+0x74>)
 8001014:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001018:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_SPI3_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_SPI3_Init+0x74>)
 8001022:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001026:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_SPI3_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <MX_SPI3_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_SPI3_Init+0x74>)
 8001036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_SPI3_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_SPI3_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_SPI3_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_SPI3_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_SPI3_Init+0x74>)
 8001056:	2207      	movs	r2, #7
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_SPI3_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_SPI3_Init+0x74>)
 8001062:	2208      	movs	r2, #8
 8001064:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_SPI3_Init+0x74>)
 8001068:	f002 fce6 	bl	8003a38 <HAL_SPI_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001072:	f000 fa33 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000009c 	.word	0x2000009c
 8001080:	40003c00 	.word	0x40003c00

08001084 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_USART2_UART_Init+0x58>)
 800108a:	4a15      	ldr	r2, [pc, #84]	; (80010e0 <MX_USART2_UART_Init+0x5c>)
 800108c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <MX_USART2_UART_Init+0x58>)
 8001090:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001094:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_USART2_UART_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_USART2_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_USART2_UART_Init+0x58>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MX_USART2_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_USART2_UART_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <MX_USART2_UART_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_USART2_UART_Init+0x58>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_USART2_UART_Init+0x58>)
 80010c8:	f003 fa54 	bl	8004574 <HAL_UART_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010d2:	f000 fa03 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000100 	.word	0x20000100
 80010e0:	40004400 	.word	0x40004400

080010e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <MX_GPIO_Init+0x94>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a1e      	ldr	r2, [pc, #120]	; (8001178 <MX_GPIO_Init+0x94>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_GPIO_Init+0x94>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <MX_GPIO_Init+0x94>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a18      	ldr	r2, [pc, #96]	; (8001178 <MX_GPIO_Init+0x94>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <MX_GPIO_Init+0x94>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <MX_GPIO_Init+0x94>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <MX_GPIO_Init+0x94>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_GPIO_Init+0x94>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f000 fe5c 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001150:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001154:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f000 fce2 	bl	8001b34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000

0800117c <lcd_write_nibble>:

/* USER CODE BEGIN 4 */
void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	4603      	mov	r3, r0
 8001184:	460a      	mov	r2, r1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	b2db      	uxtb	r3, r3
 8001192:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	4313      	orrs	r3, r2
 800119a:	b2db      	uxtb	r3, r3
 800119c:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <lcd_write_nibble+0x7c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	b25a      	sxtb	r2, r3
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80011bc:	f107 020f 	add.w	r2, r7, #15
 80011c0:	2364      	movs	r3, #100	; 0x64
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	214e      	movs	r1, #78	; 0x4e
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <lcd_write_nibble+0x80>)
 80011ca:	f000 fed1 	bl	8001f70 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 80011ce:	2001      	movs	r0, #1
 80011d0:	f000 fba6 	bl	8001920 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	f023 0304 	bic.w	r3, r3, #4
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80011de:	f107 020f 	add.w	r2, r7, #15
 80011e2:	2364      	movs	r3, #100	; 0x64
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	214e      	movs	r1, #78	; 0x4e
 80011ea:	4804      	ldr	r0, [pc, #16]	; (80011fc <lcd_write_nibble+0x80>)
 80011ec:	f000 fec0 	bl	8001f70 <HAL_I2C_Master_Transmit>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000001 	.word	0x20000001
 80011fc:	20000048 	.word	0x20000048

08001200 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ffad 	bl	800117c <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 8001222:	7bbb      	ldrb	r3, [r7, #14]
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ffa8 	bl	800117c <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d002      	beq.n	8001238 <lcd_send_cmd+0x38>
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d102      	bne.n	800123e <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 8001238:	2002      	movs	r0, #2
 800123a:	f000 fb71 	bl	8001920 <HAL_Delay>
  }
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	091b      	lsrs	r3, r3, #4
 8001254:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	2101      	movs	r1, #1
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff8a 	bl	800117c <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	2101      	movs	r1, #1
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff85 	bl	800117c <lcd_write_nibble>
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <lcd_init>:

void lcd_init() {
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 800127e:	2032      	movs	r0, #50	; 0x32
 8001280:	f000 fb4e 	bl	8001920 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001284:	2100      	movs	r1, #0
 8001286:	2003      	movs	r0, #3
 8001288:	f7ff ff78 	bl	800117c <lcd_write_nibble>
  HAL_Delay(5);
 800128c:	2005      	movs	r0, #5
 800128e:	f000 fb47 	bl	8001920 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001292:	2100      	movs	r1, #0
 8001294:	2003      	movs	r0, #3
 8001296:	f7ff ff71 	bl	800117c <lcd_write_nibble>
  HAL_Delay(1);
 800129a:	2001      	movs	r0, #1
 800129c:	f000 fb40 	bl	8001920 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80012a0:	2100      	movs	r1, #0
 80012a2:	2003      	movs	r0, #3
 80012a4:	f7ff ff6a 	bl	800117c <lcd_write_nibble>
  HAL_Delay(1);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f000 fb39 	bl	8001920 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 80012ae:	2100      	movs	r1, #0
 80012b0:	2002      	movs	r0, #2
 80012b2:	f7ff ff63 	bl	800117c <lcd_write_nibble>
  lcd_send_cmd(0x28);
 80012b6:	2028      	movs	r0, #40	; 0x28
 80012b8:	f7ff ffa2 	bl	8001200 <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 80012bc:	200c      	movs	r0, #12
 80012be:	f7ff ff9f 	bl	8001200 <lcd_send_cmd>
  lcd_send_cmd(0x06);
 80012c2:	2006      	movs	r0, #6
 80012c4:	f7ff ff9c 	bl	8001200 <lcd_send_cmd>
  lcd_send_cmd(0x01);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f7ff ff99 	bl	8001200 <lcd_send_cmd>
  HAL_Delay(2);
 80012ce:	2002      	movs	r0, #2
 80012d0:	f000 fb26 	bl	8001920 <HAL_Delay>
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <lcd_write_string>:

void lcd_write_string(char *str) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  while (*str) {
 80012e0:	e006      	b.n	80012f0 <lcd_write_string+0x18>
    lcd_send_data(*str++);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ffab 	bl	8001246 <lcd_send_data>
  while (*str) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f4      	bne.n	80012e2 <lcd_write_string+0xa>
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 8001302:	b580      	push	{r7, lr}
 8001304:	b084      	sub	sp, #16
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	460a      	mov	r2, r1
 800130c:	71fb      	strb	r3, [r7, #7]
 800130e:	4613      	mov	r3, r2
 8001310:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <lcd_set_cursor+0x1c>
 8001318:	2b01      	cmp	r3, #1
 800131a:	d003      	beq.n	8001324 <lcd_set_cursor+0x22>
 800131c:	e005      	b.n	800132a <lcd_set_cursor+0x28>
        case 0:
            address = 0x00;
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]
            break;
 8001322:	e004      	b.n	800132e <lcd_set_cursor+0x2c>
        case 1:
            address = 0x40;
 8001324:	2340      	movs	r3, #64	; 0x40
 8001326:	73fb      	strb	r3, [r7, #15]
            break;
 8001328:	e001      	b.n	800132e <lcd_set_cursor+0x2c>
        default:
            address = 0x00;
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	4413      	add	r3, r2
 8001334:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff5e 	bl	8001200 <lcd_send_cmd>
}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <lcd_clear>:

void lcd_clear(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff ff55 	bl	8001200 <lcd_send_cmd>
    HAL_Delay(2);
 8001356:	2002      	movs	r0, #2
 8001358:	f000 fae2 	bl	8001920 <HAL_Delay>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <lcd_backlight>:

void lcd_backlight(uint8_t state) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if (state) {
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <lcd_backlight+0x18>
    backlight_state = 1;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <lcd_backlight+0x2c>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
  } else {
    backlight_state = 0;
  }
}
 8001376:	e002      	b.n	800137e <lcd_backlight+0x1e>
    backlight_state = 0;
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <lcd_backlight+0x2c>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000001 	.word	0x20000001

08001390 <process_SD_card>:

void process_SD_card( void )
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 8001396:	b08d      	sub	sp, #52	; 0x34
 8001398:	af00      	add	r7, sp, #0
  FRESULT     fres;                 //Result after operations

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 800139a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800139e:	f103 0310 	add.w	r3, r3, #16
 80013a2:	3b1c      	subs	r3, #28
 80013a4:	2201      	movs	r2, #1
 80013a6:	4945      	ldr	r1, [pc, #276]	; (80014bc <process_SD_card+0x12c>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f005 ffbb 	bl	8007324 <f_mount>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80013b4:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80013b8:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 80013ba:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80013be:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d013      	beq.n	80013f0 <process_SD_card+0x60>
    {
    	  strcpy(text, "Mount failed");
 80013c8:	4a3d      	ldr	r2, [pc, #244]	; (80014c0 <process_SD_card+0x130>)
 80013ca:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <process_SD_card+0x134>)
 80013cc:	4614      	mov	r4, r2
 80013ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d0:	c407      	stmia	r4!, {r0, r1, r2}
 80013d2:	7023      	strb	r3, [r4, #0]
    	  lcd_clear();
 80013d4:	f7ff ffba 	bl	800134c <lcd_clear>
    	  lcd_set_cursor(0, 0);
 80013d8:	2100      	movs	r1, #0
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff ff91 	bl	8001302 <lcd_set_cursor>
    	  lcd_write_string(text);
 80013e0:	4837      	ldr	r0, [pc, #220]	; (80014c0 <process_SD_card+0x130>)
 80013e2:	f7ff ff79 	bl	80012d8 <lcd_write_string>
    	  HAL_Delay(1000);
 80013e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ea:	f000 fa99 	bl	8001920 <HAL_Delay>
      break;
 80013ee:	e048      	b.n	8001482 <process_SD_card+0xf2>
    }

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 80013f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f4:	3b2c      	subs	r3, #44	; 0x2c
 80013f6:	220b      	movs	r2, #11
 80013f8:	4933      	ldr	r1, [pc, #204]	; (80014c8 <process_SD_card+0x138>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f005 ffd8 	bl	80073b0 <f_open>
 8001400:	4603      	mov	r3, r0
 8001402:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001406:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 800140a:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 800140c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001410:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d013      	beq.n	8001442 <process_SD_card+0xb2>
    {
    	  strcpy(text, "File not open");
 800141a:	4a29      	ldr	r2, [pc, #164]	; (80014c0 <process_SD_card+0x130>)
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <process_SD_card+0x13c>)
 800141e:	4614      	mov	r4, r2
 8001420:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001422:	c407      	stmia	r4!, {r0, r1, r2}
 8001424:	8023      	strh	r3, [r4, #0]
    	  lcd_clear();
 8001426:	f7ff ff91 	bl	800134c <lcd_clear>
    	  lcd_set_cursor(0, 0);
 800142a:	2100      	movs	r1, #0
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff ff68 	bl	8001302 <lcd_set_cursor>
    	  lcd_write_string(text);
 8001432:	4823      	ldr	r0, [pc, #140]	; (80014c0 <process_SD_card+0x130>)
 8001434:	f7ff ff50 	bl	80012d8 <lcd_write_string>
    	  HAL_Delay(1000);
 8001438:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800143c:	f000 fa70 	bl	8001920 <HAL_Delay>
      break;
 8001440:	e01f      	b.n	8001482 <process_SD_card+0xf2>
    }

    strcpy(text, "Writing data");
 8001442:	4a1f      	ldr	r2, [pc, #124]	; (80014c0 <process_SD_card+0x130>)
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <process_SD_card+0x140>)
 8001446:	4614      	mov	r4, r2
 8001448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144a:	c407      	stmia	r4!, {r0, r1, r2}
 800144c:	7023      	strb	r3, [r4, #0]
    lcd_clear();
 800144e:	f7ff ff7d 	bl	800134c <lcd_clear>
    lcd_set_cursor(0, 0);
 8001452:	2100      	movs	r1, #0
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff ff54 	bl	8001302 <lcd_set_cursor>
    lcd_write_string(text);
 800145a:	4819      	ldr	r0, [pc, #100]	; (80014c0 <process_SD_card+0x130>)
 800145c:	f7ff ff3c 	bl	80012d8 <lcd_write_string>
    HAL_Delay(1000);
 8001460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001464:	f000 fa5c 	bl	8001920 <HAL_Delay>
    //write the data
    f_puts("Welcome to EmbeTronicX", &fil);
 8001468:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800146c:	3b2c      	subs	r3, #44	; 0x2c
 800146e:	4619      	mov	r1, r3
 8001470:	4818      	ldr	r0, [pc, #96]	; (80014d4 <process_SD_card+0x144>)
 8001472:	f006 fc1c 	bl	8007cae <f_puts>

    //close your file
    f_close(&fil);
 8001476:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800147a:	3b2c      	subs	r3, #44	; 0x2c
 800147c:	4618      	mov	r0, r3
 800147e:	f006 fb75 	bl	8007b6c <f_close>
    }
#endif
  } while( false );

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8001482:	2200      	movs	r2, #0
 8001484:	490d      	ldr	r1, [pc, #52]	; (80014bc <process_SD_card+0x12c>)
 8001486:	2000      	movs	r0, #0
 8001488:	f005 ff4c 	bl	8007324 <f_mount>
  strcpy(text, "Unmounted");
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <process_SD_card+0x130>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <process_SD_card+0x148>)
 8001490:	ca07      	ldmia	r2, {r0, r1, r2}
 8001492:	c303      	stmia	r3!, {r0, r1}
 8001494:	801a      	strh	r2, [r3, #0]
  lcd_clear();
 8001496:	f7ff ff59 	bl	800134c <lcd_clear>
  lcd_set_cursor(0, 0);
 800149a:	2100      	movs	r1, #0
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff ff30 	bl	8001302 <lcd_set_cursor>
  lcd_write_string(text);
 80014a2:	4807      	ldr	r0, [pc, #28]	; (80014c0 <process_SD_card+0x130>)
 80014a4:	f7ff ff18 	bl	80012d8 <lcd_write_string>
  HAL_Delay(1000);
 80014a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ac:	f000 fa38 	bl	8001920 <HAL_Delay>
}
 80014b0:	bf00      	nop
 80014b2:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 80014b6:	3734      	adds	r7, #52	; 0x34
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}
 80014bc:	08007fb4 	.word	0x08007fb4
 80014c0:	20000188 	.word	0x20000188
 80014c4:	08007fb8 	.word	0x08007fb8
 80014c8:	08007fc8 	.word	0x08007fc8
 80014cc:	08007fd8 	.word	0x08007fd8
 80014d0:	08007fe8 	.word	0x08007fe8
 80014d4:	08007ff8 	.word	0x08007ff8
 80014d8:	08008010 	.word	0x08008010

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <Error_Handler+0x8>
	...

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_MspInit+0x44>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f2:	4a0e      	ldr	r2, [pc, #56]	; (800152c <HAL_MspInit+0x44>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6613      	str	r3, [r2, #96]	; 0x60
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_MspInit+0x44>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_MspInit+0x44>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_MspInit+0x44>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6593      	str	r3, [r2, #88]	; 0x58
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_MspInit+0x44>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000

08001530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b09e      	sub	sp, #120	; 0x78
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2254      	movs	r2, #84	; 0x54
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f006 fcf3 	bl	8007f3c <memset>
  if(hi2c->Instance==I2C1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <HAL_I2C_MspInit+0xa4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d135      	bne.n	80015cc <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001560:	2340      	movs	r3, #64	; 0x40
 8001562:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001564:	2300      	movs	r3, #0
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	4618      	mov	r0, r3
 800156e:	f001 ff6b 	bl	8003448 <HAL_RCCEx_PeriphCLKConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001578:	f7ff ffb0 	bl	80014dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <HAL_I2C_MspInit+0xa8>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001580:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <HAL_I2C_MspInit+0xa8>)
 8001582:	f043 0302 	orr.w	r3, r3, #2
 8001586:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_I2C_MspInit+0xa8>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001594:	23c0      	movs	r3, #192	; 0xc0
 8001596:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001598:	2312      	movs	r3, #18
 800159a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a4:	2304      	movs	r3, #4
 80015a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015ac:	4619      	mov	r1, r3
 80015ae:	480b      	ldr	r0, [pc, #44]	; (80015dc <HAL_I2C_MspInit+0xac>)
 80015b0:	f000 fac0 	bl	8001b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_I2C_MspInit+0xa8>)
 80015b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_I2C_MspInit+0xa8>)
 80015ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015be:	6593      	str	r3, [r2, #88]	; 0x58
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_I2C_MspInit+0xa8>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015cc:	bf00      	nop
 80015ce:	3778      	adds	r7, #120	; 0x78
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40005400 	.word	0x40005400
 80015d8:	40021000 	.word	0x40021000
 80015dc:	48000400 	.word	0x48000400

080015e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_SPI_MspInit+0x7c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d127      	bne.n	8001652 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_SPI_MspInit+0x80>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	4a16      	ldr	r2, [pc, #88]	; (8001660 <HAL_SPI_MspInit+0x80>)
 8001608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800160c:	6593      	str	r3, [r2, #88]	; 0x58
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_SPI_MspInit+0x80>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_SPI_MspInit+0x80>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <HAL_SPI_MspInit+0x80>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_SPI_MspInit+0x80>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001632:	2338      	movs	r3, #56	; 0x38
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001642:	2306      	movs	r3, #6
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <HAL_SPI_MspInit+0x84>)
 800164e:	f000 fa71 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40003c00 	.word	0x40003c00
 8001660:	40021000 	.word	0x40021000
 8001664:	48000400 	.word	0x48000400

08001668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b09e      	sub	sp, #120	; 0x78
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	2254      	movs	r2, #84	; 0x54
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f006 fc57 	bl	8007f3c <memset>
  if(huart->Instance==USART2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a28      	ldr	r2, [pc, #160]	; (8001734 <HAL_UART_MspInit+0xcc>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d148      	bne.n	800172a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001698:	2302      	movs	r3, #2
 800169a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800169c:	2300      	movs	r3, #0
 800169e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 fecf 	bl	8003448 <HAL_RCCEx_PeriphCLKConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016b0:	f7ff ff14 	bl	80014dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b4:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_UART_MspInit+0xd0>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b8:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <HAL_UART_MspInit+0xd0>)
 80016ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016be:	6593      	str	r3, [r2, #88]	; 0x58
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <HAL_UART_MspInit+0xd0>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <HAL_UART_MspInit+0xd0>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_UART_MspInit+0xd0>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_UART_MspInit+0xd0>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80016e4:	2304      	movs	r3, #4
 80016e6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f4:	2307      	movs	r3, #7
 80016f6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001702:	f000 fa17 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800170a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001718:	2303      	movs	r3, #3
 800171a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001720:	4619      	mov	r1, r3
 8001722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001726:	f000 fa05 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3778      	adds	r7, #120	; 0x78
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40004400 	.word	0x40004400
 8001738:	40021000 	.word	0x40021000

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001740:	e7fe      	b.n	8001740 <NMI_Handler+0x4>

08001742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <MemManage_Handler+0x4>

0800174e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <UsageFault_Handler+0x4>

0800175a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <SysTick_Handler+0x34>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <SysTick_Handler+0x18>
	  Timer1--;
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <SysTick_Handler+0x34>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	3b01      	subs	r3, #1
 8001796:	b29a      	uxth	r2, r3
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <SysTick_Handler+0x34>)
 800179a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <SysTick_Handler+0x38>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <SysTick_Handler+0x2c>
	  Timer2--;
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SysTick_Handler+0x38>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <SysTick_Handler+0x38>)
 80017ae:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b0:	f000 f896 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000040 	.word	0x20000040
 80017bc:	20000042 	.word	0x20000042

080017c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800181c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e8:	f7ff ffea 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ee:	490d      	ldr	r1, [pc, #52]	; (8001824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f0:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <LoopForever+0xe>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001804:	4c0a      	ldr	r4, [pc, #40]	; (8001830 <LoopForever+0x16>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001812:	f006 fb9b 	bl	8007f4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001816:	f7ff fb25 	bl	8000e64 <main>

0800181a <LoopForever>:

LoopForever:
    b LoopForever
 800181a:	e7fe      	b.n	800181a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800181c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001828:	080084fc 	.word	0x080084fc
  ldr r2, =_sbss
 800182c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001830:	200003dc 	.word	0x200003dc

08001834 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC1_IRQHandler>

08001836 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 f943 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f80e 	bl	8001868 <HAL_InitTick>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	e001      	b.n	800185c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001858:	f7ff fe46 	bl	80014e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800185c:	79fb      	ldrb	r3, [r7, #7]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_InitTick+0x6c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d023      	beq.n	80018c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800187c:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_InitTick+0x70>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HAL_InitTick+0x6c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f941 	bl	8001b1a <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d809      	bhi.n	80018b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f000 f919 	bl	8001ae2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_InitTick+0x74>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e007      	b.n	80018c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
 80018bc:	e004      	b.n	80018c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	e001      	b.n	80018c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000000c 	.word	0x2000000c
 80018d8:	20000004 	.word	0x20000004
 80018dc:	20000008 	.word	0x20000008

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	2000000c 	.word	0x2000000c
 8001904:	2000019c 	.word	0x2000019c

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000019c 	.word	0x2000019c

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000000c 	.word	0x2000000c

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	; (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff8e 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff47 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001af4:	f7ff ff5c 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001af8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f7ff ff8e 	bl	8001a20 <NVIC_EncodePriority>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff5d 	bl	80019cc <__NVIC_SetPriority>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffb0 	bl	8001a88 <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b42:	e148      	b.n	8001dd6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2101      	movs	r1, #1
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	4013      	ands	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 813a 	beq.w	8001dd0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d005      	beq.n	8001b74 <HAL_GPIO_Init+0x40>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d130      	bne.n	8001bd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	2203      	movs	r2, #3
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001baa:	2201      	movs	r2, #1
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	f003 0201 	and.w	r2, r3, #1
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d017      	beq.n	8001c12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	2203      	movs	r2, #3
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d123      	bne.n	8001c66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	08da      	lsrs	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3208      	adds	r2, #8
 8001c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	6939      	ldr	r1, [r7, #16]
 8001c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0203 	and.w	r2, r3, #3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8094 	beq.w	8001dd0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca8:	4b52      	ldr	r3, [pc, #328]	; (8001df4 <HAL_GPIO_Init+0x2c0>)
 8001caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cac:	4a51      	ldr	r2, [pc, #324]	; (8001df4 <HAL_GPIO_Init+0x2c0>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6613      	str	r3, [r2, #96]	; 0x60
 8001cb4:	4b4f      	ldr	r3, [pc, #316]	; (8001df4 <HAL_GPIO_Init+0x2c0>)
 8001cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cc0:	4a4d      	ldr	r2, [pc, #308]	; (8001df8 <HAL_GPIO_Init+0x2c4>)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cea:	d00d      	beq.n	8001d08 <HAL_GPIO_Init+0x1d4>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a43      	ldr	r2, [pc, #268]	; (8001dfc <HAL_GPIO_Init+0x2c8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d007      	beq.n	8001d04 <HAL_GPIO_Init+0x1d0>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a42      	ldr	r2, [pc, #264]	; (8001e00 <HAL_GPIO_Init+0x2cc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d101      	bne.n	8001d00 <HAL_GPIO_Init+0x1cc>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e004      	b.n	8001d0a <HAL_GPIO_Init+0x1d6>
 8001d00:	2307      	movs	r3, #7
 8001d02:	e002      	b.n	8001d0a <HAL_GPIO_Init+0x1d6>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_GPIO_Init+0x1d6>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	f002 0203 	and.w	r2, r2, #3
 8001d10:	0092      	lsls	r2, r2, #2
 8001d12:	4093      	lsls	r3, r2
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d1a:	4937      	ldr	r1, [pc, #220]	; (8001df8 <HAL_GPIO_Init+0x2c4>)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	3302      	adds	r3, #2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d4c:	4a2d      	ldr	r2, [pc, #180]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d52:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d76:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d7c:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001da0:	4a18      	ldr	r2, [pc, #96]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dca:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f47f aeaf 	bne.w	8001b44 <HAL_GPIO_Init+0x10>
  }
}
 8001de6:	bf00      	nop
 8001de8:	bf00      	nop
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	48000400 	.word	0x48000400
 8001e00:	48000800 	.word	0x48000800
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e08d      	b.n	8001f66 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fb66 	bl	8001530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2224      	movs	r2, #36	; 0x24
 8001e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d107      	bne.n	8001eb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	e006      	b.n	8001ec0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ebe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d108      	bne.n	8001eda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	e007      	b.n	8001eea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69d9      	ldr	r1, [r3, #28]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1a      	ldr	r2, [r3, #32]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2220      	movs	r2, #32
 8001f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	817b      	strh	r3, [r7, #10]
 8001f80:	4613      	mov	r3, r2
 8001f82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	f040 80fd 	bne.w	800218c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_I2C_Master_Transmit+0x30>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e0f6      	b.n	800218e <HAL_I2C_Master_Transmit+0x21e>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fa8:	f7ff fcae 	bl	8001908 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2319      	movs	r3, #25
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f914 	bl	80021e8 <I2C_WaitOnFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e0e1      	b.n	800218e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2221      	movs	r2, #33	; 0x21
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	893a      	ldrh	r2, [r7, #8]
 8001fea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2bff      	cmp	r3, #255	; 0xff
 8001ffa:	d906      	bls.n	800200a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	22ff      	movs	r2, #255	; 0xff
 8002000:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e007      	b.n	800201a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002014:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002018:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	2b00      	cmp	r3, #0
 8002020:	d024      	beq.n	800206c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	b2db      	uxtb	r3, r3
 8002058:	3301      	adds	r3, #1
 800205a:	b2da      	uxtb	r2, r3
 800205c:	8979      	ldrh	r1, [r7, #10]
 800205e:	4b4e      	ldr	r3, [pc, #312]	; (8002198 <HAL_I2C_Master_Transmit+0x228>)
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 fa79 	bl	800255c <I2C_TransferConfig>
 800206a:	e066      	b.n	800213a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	b2da      	uxtb	r2, r3
 8002072:	8979      	ldrh	r1, [r7, #10]
 8002074:	4b48      	ldr	r3, [pc, #288]	; (8002198 <HAL_I2C_Master_Transmit+0x228>)
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 fa6e 	bl	800255c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002080:	e05b      	b.n	800213a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	6a39      	ldr	r1, [r7, #32]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f8fd 	bl	8002286 <I2C_WaitOnTXISFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e07b      	b.n	800218e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d034      	beq.n	800213a <HAL_I2C_Master_Transmit+0x1ca>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d130      	bne.n	800213a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	2200      	movs	r2, #0
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f880 	bl	80021e8 <I2C_WaitOnFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e04d      	b.n	800218e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2bff      	cmp	r3, #255	; 0xff
 80020fa:	d90e      	bls.n	800211a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	22ff      	movs	r2, #255	; 0xff
 8002100:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002106:	b2da      	uxtb	r2, r3
 8002108:	8979      	ldrh	r1, [r7, #10]
 800210a:	2300      	movs	r3, #0
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 fa22 	bl	800255c <I2C_TransferConfig>
 8002118:	e00f      	b.n	800213a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002128:	b2da      	uxtb	r2, r3
 800212a:	8979      	ldrh	r1, [r7, #10]
 800212c:	2300      	movs	r3, #0
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fa11 	bl	800255c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d19e      	bne.n	8002082 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	6a39      	ldr	r1, [r7, #32]
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f8e3 	bl	8002314 <I2C_WaitOnSTOPFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e01a      	b.n	800218e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2220      	movs	r2, #32
 800215e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6859      	ldr	r1, [r3, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_I2C_Master_Transmit+0x22c>)
 800216c:	400b      	ands	r3, r1
 800216e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	80002000 	.word	0x80002000
 800219c:	fe00e800 	.word	0xfe00e800

080021a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d103      	bne.n	80021be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2200      	movs	r2, #0
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d007      	beq.n	80021dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	619a      	str	r2, [r3, #24]
  }
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f8:	e031      	b.n	800225e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d02d      	beq.n	800225e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002202:	f7ff fb81 	bl	8001908 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d302      	bcc.n	8002218 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d122      	bne.n	800225e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	4013      	ands	r3, r2
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	429a      	cmp	r2, r3
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	429a      	cmp	r2, r3
 8002234:	d113      	bne.n	800225e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f043 0220 	orr.w	r2, r3, #32
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00f      	b.n	800227e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4013      	ands	r3, r2
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	429a      	cmp	r2, r3
 800226c:	bf0c      	ite	eq
 800226e:	2301      	moveq	r3, #1
 8002270:	2300      	movne	r3, #0
 8002272:	b2db      	uxtb	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	429a      	cmp	r2, r3
 800227a:	d0be      	beq.n	80021fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002292:	e033      	b.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 f87f 	bl	800239c <I2C_IsErrorOccurred>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e031      	b.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ae:	d025      	beq.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b0:	f7ff fb2a 	bl	8001908 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d302      	bcc.n	80022c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d11a      	bne.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d013      	beq.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d8:	f043 0220 	orr.w	r2, r3, #32
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e007      	b.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b02      	cmp	r3, #2
 8002308:	d1c4      	bne.n	8002294 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002320:	e02f      	b.n	8002382 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f838 	bl	800239c <I2C_IsErrorOccurred>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e02d      	b.n	8002392 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002336:	f7ff fae7 	bl	8001908 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	429a      	cmp	r2, r3
 8002344:	d302      	bcc.n	800234c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d11a      	bne.n	8002382 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b20      	cmp	r3, #32
 8002358:	d013      	beq.n	8002382 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f043 0220 	orr.w	r2, r3, #32
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e007      	b.n	8002392 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	2b20      	cmp	r3, #32
 800238e:	d1c8      	bne.n	8002322 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d068      	beq.n	800249a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2210      	movs	r2, #16
 80023ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023d0:	e049      	b.n	8002466 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d045      	beq.n	8002466 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023da:	f7ff fa95 	bl	8001908 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d302      	bcc.n	80023f0 <I2C_IsErrorOccurred+0x54>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d13a      	bne.n	8002466 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002402:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800240e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002412:	d121      	bne.n	8002458 <I2C_IsErrorOccurred+0xbc>
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800241a:	d01d      	beq.n	8002458 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800241c:	7cfb      	ldrb	r3, [r7, #19]
 800241e:	2b20      	cmp	r3, #32
 8002420:	d01a      	beq.n	8002458 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002430:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002432:	f7ff fa69 	bl	8001908 <HAL_GetTick>
 8002436:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002438:	e00e      	b.n	8002458 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800243a:	f7ff fa65 	bl	8001908 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b19      	cmp	r3, #25
 8002446:	d907      	bls.n	8002458 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	f043 0320 	orr.w	r3, r3, #32
 800244e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002456:	e006      	b.n	8002466 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b20      	cmp	r3, #32
 8002464:	d1e9      	bne.n	800243a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b20      	cmp	r3, #32
 8002472:	d003      	beq.n	800247c <I2C_IsErrorOccurred+0xe0>
 8002474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0aa      	beq.n	80023d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800247c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2220      	movs	r2, #32
 800248a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	f043 0304 	orr.w	r3, r3, #4
 8002492:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00b      	beq.n	80024c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	f043 0308 	orr.w	r3, r3, #8
 80024d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00b      	beq.n	8002508 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	f043 0302 	orr.w	r3, r3, #2
 80024f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002500:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01c      	beq.n	800254a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7ff fe45 	bl	80021a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <I2C_IsErrorOccurred+0x1bc>)
 8002522:	400b      	ands	r3, r1
 8002524:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	431a      	orrs	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800254a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800254e:	4618      	mov	r0, r3
 8002550:	3728      	adds	r7, #40	; 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	fe00e800 	.word	0xfe00e800

0800255c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	817b      	strh	r3, [r7, #10]
 800256a:	4613      	mov	r3, r2
 800256c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800256e:	897b      	ldrh	r3, [r7, #10]
 8002570:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002574:	7a7b      	ldrb	r3, [r7, #9]
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800257c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	4313      	orrs	r3, r2
 8002586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800258a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	0d5b      	lsrs	r3, r3, #21
 8002596:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <I2C_TransferConfig+0x60>)
 800259c:	430b      	orrs	r3, r1
 800259e:	43db      	mvns	r3, r3
 80025a0:	ea02 0103 	and.w	r1, r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025ae:	bf00      	nop
 80025b0:	371c      	adds	r7, #28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	03ff63ff 	.word	0x03ff63ff

080025c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d138      	bne.n	8002648 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e032      	b.n	800264a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002612:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	e000      	b.n	800264a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b20      	cmp	r3, #32
 800266a:	d139      	bne.n	80026e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002676:	2302      	movs	r3, #2
 8002678:	e033      	b.n	80026e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2224      	movs	r2, #36	; 0x24
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e000      	b.n	80026e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
  }
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40007000 	.word	0x40007000

08002710 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002714:	4b04      	ldr	r3, [pc, #16]	; (8002728 <HAL_PWREx_GetVoltageRange+0x18>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40007000 	.word	0x40007000

0800272c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800273a:	d130      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800273c:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002748:	d038      	beq.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002752:	4a1e      	ldr	r2, [pc, #120]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2232      	movs	r2, #50	; 0x32
 8002760:	fb02 f303 	mul.w	r3, r2, r3
 8002764:	4a1b      	ldr	r2, [pc, #108]	; (80027d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0c9b      	lsrs	r3, r3, #18
 800276c:	3301      	adds	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002770:	e002      	b.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3b01      	subs	r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002784:	d102      	bne.n	800278c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f2      	bne.n	8002772 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002798:	d110      	bne.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e00f      	b.n	80027be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027aa:	d007      	beq.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027ac:	4b07      	ldr	r3, [pc, #28]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027b4:	4a05      	ldr	r2, [pc, #20]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40007000 	.word	0x40007000
 80027d0:	20000004 	.word	0x20000004
 80027d4:	431bde83 	.word	0x431bde83

080027d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f000 bc02 	b.w	8002ff0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ec:	4b96      	ldr	r3, [pc, #600]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027f6:	4b94      	ldr	r3, [pc, #592]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80e4 	beq.w	80029d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <HAL_RCC_OscConfig+0x4c>
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b0c      	cmp	r3, #12
 8002818:	f040 808b 	bne.w	8002932 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b01      	cmp	r3, #1
 8002820:	f040 8087 	bne.w	8002932 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002824:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_OscConfig+0x64>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e3d9      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	4b81      	ldr	r3, [pc, #516]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d004      	beq.n	8002856 <HAL_RCC_OscConfig+0x7e>
 800284c:	4b7e      	ldr	r3, [pc, #504]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002854:	e005      	b.n	8002862 <HAL_RCC_OscConfig+0x8a>
 8002856:	4b7c      	ldr	r3, [pc, #496]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002862:	4293      	cmp	r3, r2
 8002864:	d223      	bcs.n	80028ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fd8c 	bl	8003388 <RCC_SetFlashLatencyFromMSIRange>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e3ba      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800287a:	4b73      	ldr	r3, [pc, #460]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a72      	ldr	r2, [pc, #456]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002880:	f043 0308 	orr.w	r3, r3, #8
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b70      	ldr	r3, [pc, #448]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	496d      	ldr	r1, [pc, #436]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002898:	4b6b      	ldr	r3, [pc, #428]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	4968      	ldr	r1, [pc, #416]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
 80028ac:	e025      	b.n	80028fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ae:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a65      	ldr	r2, [pc, #404]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028b4:	f043 0308 	orr.w	r3, r3, #8
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b63      	ldr	r3, [pc, #396]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4960      	ldr	r1, [pc, #384]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028cc:	4b5e      	ldr	r3, [pc, #376]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	495b      	ldr	r1, [pc, #364]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fd4c 	bl	8003388 <RCC_SetFlashLatencyFromMSIRange>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e37a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028fa:	f000 fc81 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b51      	ldr	r3, [pc, #324]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	4950      	ldr	r1, [pc, #320]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800290c:	5ccb      	ldrb	r3, [r1, r3]
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	4a4e      	ldr	r2, [pc, #312]	; (8002a50 <HAL_RCC_OscConfig+0x278>)
 8002918:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800291a:	4b4e      	ldr	r3, [pc, #312]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe ffa2 	bl	8001868 <HAL_InitTick>
 8002924:	4603      	mov	r3, r0
 8002926:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d052      	beq.n	80029d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	e35e      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d032      	beq.n	80029a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800293a:	4b43      	ldr	r3, [pc, #268]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a42      	ldr	r2, [pc, #264]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002946:	f7fe ffdf 	bl	8001908 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800294e:	f7fe ffdb 	bl	8001908 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e347      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002960:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800296c:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a35      	ldr	r2, [pc, #212]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002972:	f043 0308 	orr.w	r3, r3, #8
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4930      	ldr	r1, [pc, #192]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	492b      	ldr	r1, [pc, #172]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
 800299e:	e01a      	b.n	80029d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029a0:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a28      	ldr	r2, [pc, #160]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029a6:	f023 0301 	bic.w	r3, r3, #1
 80029aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029ac:	f7fe ffac 	bl	8001908 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029b4:	f7fe ffa8 	bl	8001908 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e314      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1dc>
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d073      	beq.n	8002aca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_OscConfig+0x21c>
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d10e      	bne.n	8002a0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d10b      	bne.n	8002a0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d063      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d15f      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e2f1      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a14:	d106      	bne.n	8002a24 <HAL_RCC_OscConfig+0x24c>
 8002a16:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e025      	b.n	8002a70 <HAL_RCC_OscConfig+0x298>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a2c:	d114      	bne.n	8002a58 <HAL_RCC_OscConfig+0x280>
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a02      	ldr	r2, [pc, #8]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e013      	b.n	8002a70 <HAL_RCC_OscConfig+0x298>
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08008064 	.word	0x08008064
 8002a50:	20000004 	.word	0x20000004
 8002a54:	20000008 	.word	0x20000008
 8002a58:	4ba0      	ldr	r3, [pc, #640]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a9f      	ldr	r2, [pc, #636]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b9d      	ldr	r3, [pc, #628]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a9c      	ldr	r2, [pc, #624]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d013      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe ff46 	bl	8001908 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a80:	f7fe ff42 	bl	8001908 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	; 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e2ae      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a92:	4b92      	ldr	r3, [pc, #584]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x2a8>
 8002a9e:	e014      	b.n	8002aca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe ff32 	bl	8001908 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7fe ff2e 	bl	8001908 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e29a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aba:	4b88      	ldr	r3, [pc, #544]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2d0>
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d060      	beq.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x310>
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b0c      	cmp	r3, #12
 8002ae0:	d119      	bne.n	8002b16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d116      	bne.n	8002b16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae8:	4b7c      	ldr	r3, [pc, #496]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_OscConfig+0x328>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e277      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b00:	4b76      	ldr	r3, [pc, #472]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	4973      	ldr	r1, [pc, #460]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b14:	e040      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d023      	beq.n	8002b66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1e:	4b6f      	ldr	r3, [pc, #444]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6e      	ldr	r2, [pc, #440]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fe feed 	bl	8001908 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b32:	f7fe fee9 	bl	8001908 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e255      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b44:	4b65      	ldr	r3, [pc, #404]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	4b62      	ldr	r3, [pc, #392]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	495f      	ldr	r1, [pc, #380]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
 8002b64:	e018      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b66:	4b5d      	ldr	r3, [pc, #372]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a5c      	ldr	r2, [pc, #368]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7fe fec9 	bl	8001908 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7fe fec5 	bl	8001908 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e231      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b8c:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d03c      	beq.n	8002c1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01c      	beq.n	8002be6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bac:	4b4b      	ldr	r3, [pc, #300]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb2:	4a4a      	ldr	r2, [pc, #296]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fea4 	bl	8001908 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fea0 	bl	8001908 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e20c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bd6:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ef      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x3ec>
 8002be4:	e01b      	b.n	8002c1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bec:	4a3b      	ldr	r2, [pc, #236]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fe87 	bl	8001908 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7fe fe83 	bl	8001908 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1ef      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c10:	4b32      	ldr	r3, [pc, #200]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1ef      	bne.n	8002bfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 80a6 	beq.w	8002d78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c30:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10d      	bne.n	8002c58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	6593      	str	r3, [r2, #88]	; 0x58
 8002c48:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c54:	2301      	movs	r3, #1
 8002c56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c58:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d118      	bne.n	8002c96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c64:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c70:	f7fe fe4a 	bl	8001908 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c78:	f7fe fe46 	bl	8001908 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1b2      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d108      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4d8>
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cae:	e029      	b.n	8002d04 <HAL_RCC_OscConfig+0x52c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b05      	cmp	r3, #5
 8002cb6:	d115      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x50c>
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	4a03      	ldr	r2, [pc, #12]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cd8:	e014      	b.n	8002d04 <HAL_RCC_OscConfig+0x52c>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	4b9a      	ldr	r3, [pc, #616]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	4a99      	ldr	r2, [pc, #612]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cf4:	4b96      	ldr	r3, [pc, #600]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	4a95      	ldr	r2, [pc, #596]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d016      	beq.n	8002d3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fe fdfc 	bl	8001908 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d14:	f7fe fdf8 	bl	8001908 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e162      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d2a:	4b89      	ldr	r3, [pc, #548]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ed      	beq.n	8002d14 <HAL_RCC_OscConfig+0x53c>
 8002d38:	e015      	b.n	8002d66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3a:	f7fe fde5 	bl	8001908 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d42:	f7fe fde1 	bl	8001908 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e14b      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d58:	4b7d      	ldr	r3, [pc, #500]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1ed      	bne.n	8002d42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d66:	7ffb      	ldrb	r3, [r7, #31]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6c:	4b78      	ldr	r3, [pc, #480]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	4a77      	ldr	r2, [pc, #476]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d03c      	beq.n	8002dfe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01c      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d8c:	4b70      	ldr	r3, [pc, #448]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d92:	4a6f      	ldr	r2, [pc, #444]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9c:	f7fe fdb4 	bl	8001908 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da4:	f7fe fdb0 	bl	8001908 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e11c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002db6:	4b66      	ldr	r3, [pc, #408]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ef      	beq.n	8002da4 <HAL_RCC_OscConfig+0x5cc>
 8002dc4:	e01b      	b.n	8002dfe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dc6:	4b62      	ldr	r3, [pc, #392]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dcc:	4a60      	ldr	r2, [pc, #384]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fd97 	bl	8001908 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dde:	f7fe fd93 	bl	8001908 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0ff      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002df0:	4b57      	ldr	r3, [pc, #348]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1ef      	bne.n	8002dde <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80f3 	beq.w	8002fee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	f040 80c9 	bne.w	8002fa4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e12:	4b4f      	ldr	r3, [pc, #316]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 0203 	and.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d12c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	3b01      	subs	r3, #1
 8002e32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d123      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d11b      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d113      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	3b01      	subs	r3, #1
 8002e66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d109      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	085b      	lsrs	r3, r3, #1
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d06b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d062      	beq.n	8002f4c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e86:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0ac      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e96:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2d      	ldr	r2, [pc, #180]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002e9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ea0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ea2:	f7fe fd31 	bl	8001908 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe fd2d 	bl	8001908 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e099      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ebc:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f0      	bne.n	8002eaa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec8:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <HAL_RCC_OscConfig+0x77c>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ed8:	3a01      	subs	r2, #1
 8002eda:	0112      	lsls	r2, r2, #4
 8002edc:	4311      	orrs	r1, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ee2:	0212      	lsls	r2, r2, #8
 8002ee4:	4311      	orrs	r1, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eea:	0852      	lsrs	r2, r2, #1
 8002eec:	3a01      	subs	r2, #1
 8002eee:	0552      	lsls	r2, r2, #21
 8002ef0:	4311      	orrs	r1, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ef6:	0852      	lsrs	r2, r2, #1
 8002ef8:	3a01      	subs	r2, #1
 8002efa:	0652      	lsls	r2, r2, #25
 8002efc:	4311      	orrs	r1, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f02:	06d2      	lsls	r2, r2, #27
 8002f04:	430a      	orrs	r2, r1
 8002f06:	4912      	ldr	r1, [pc, #72]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f0c:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0f      	ldr	r2, [pc, #60]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4a0c      	ldr	r2, [pc, #48]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f24:	f7fe fcf0 	bl	8001908 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe fcec 	bl	8001908 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e058      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3e:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f4a:	e050      	b.n	8002fee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e04f      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
 8002f50:	40021000 	.word	0x40021000
 8002f54:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f58:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d144      	bne.n	8002fee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f64:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a23      	ldr	r2, [pc, #140]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f70:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a20      	ldr	r2, [pc, #128]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f7c:	f7fe fcc4 	bl	8001908 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fe fcc0 	bl	8001908 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e02c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f96:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0x7ac>
 8002fa2:	e024      	b.n	8002fee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d01f      	beq.n	8002fea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fca7 	bl	8001908 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fe fca3 	bl	8001908 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e00f      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	4905      	ldr	r1, [pc, #20]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_RCC_OscConfig+0x824>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60cb      	str	r3, [r1, #12]
 8002fe8:	e001      	b.n	8002fee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3720      	adds	r7, #32
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	feeefffc 	.word	0xfeeefffc

08003000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0e7      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003014:	4b75      	ldr	r3, [pc, #468]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d910      	bls.n	8003044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b72      	ldr	r3, [pc, #456]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 0207 	bic.w	r2, r3, #7
 800302a:	4970      	ldr	r1, [pc, #448]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b6e      	ldr	r3, [pc, #440]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0cf      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d010      	beq.n	8003072 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800305c:	429a      	cmp	r2, r3
 800305e:	d908      	bls.n	8003072 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b63      	ldr	r3, [pc, #396]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4960      	ldr	r1, [pc, #384]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d04c      	beq.n	8003118 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b03      	cmp	r3, #3
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	4b5a      	ldr	r3, [pc, #360]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d121      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0a6      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800309e:	4b54      	ldr	r3, [pc, #336]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d115      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e09a      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030b6:	4b4e      	ldr	r3, [pc, #312]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e08e      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c6:	4b4a      	ldr	r3, [pc, #296]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e086      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030d6:	4b46      	ldr	r3, [pc, #280]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4943      	ldr	r1, [pc, #268]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e8:	f7fe fc0e 	bl	8001908 <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f0:	f7fe fc0a 	bl	8001908 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e06e      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	4b3a      	ldr	r3, [pc, #232]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 020c 	and.w	r2, r3, #12
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	429a      	cmp	r2, r3
 8003116:	d1eb      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d010      	beq.n	8003146 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	4b31      	ldr	r3, [pc, #196]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003130:	429a      	cmp	r2, r3
 8003132:	d208      	bcs.n	8003146 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003134:	4b2e      	ldr	r3, [pc, #184]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	492b      	ldr	r1, [pc, #172]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003146:	4b29      	ldr	r3, [pc, #164]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d210      	bcs.n	8003176 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f023 0207 	bic.w	r2, r3, #7
 800315c:	4923      	ldr	r1, [pc, #140]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003164:	4b21      	ldr	r3, [pc, #132]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d001      	beq.n	8003176 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e036      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003182:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	4918      	ldr	r1, [pc, #96]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a0:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4910      	ldr	r1, [pc, #64]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031b4:	f000 f824 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	490b      	ldr	r1, [pc, #44]	; (80031f4 <HAL_RCC_ClockConfig+0x1f4>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
 80031d0:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <HAL_RCC_ClockConfig+0x1f8>)
 80031d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031d4:	4b09      	ldr	r3, [pc, #36]	; (80031fc <HAL_RCC_ClockConfig+0x1fc>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe fb45 	bl	8001868 <HAL_InitTick>
 80031de:	4603      	mov	r3, r0
 80031e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80031e2:	7afb      	ldrb	r3, [r7, #11]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40022000 	.word	0x40022000
 80031f0:	40021000 	.word	0x40021000
 80031f4:	08008064 	.word	0x08008064
 80031f8:	20000004 	.word	0x20000004
 80031fc:	20000008 	.word	0x20000008

08003200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800320e:	4b3e      	ldr	r3, [pc, #248]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003218:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x34>
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d121      	bne.n	8003272 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d11e      	bne.n	8003272 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003234:	4b34      	ldr	r3, [pc, #208]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d107      	bne.n	8003250 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003240:	4b31      	ldr	r3, [pc, #196]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	e005      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003250:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800325c:	4a2b      	ldr	r2, [pc, #172]	; (800330c <HAL_RCC_GetSysClockFreq+0x10c>)
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003264:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10d      	bne.n	8003288 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003270:	e00a      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d102      	bne.n	800327e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_RCC_GetSysClockFreq+0x110>)
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	e004      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b08      	cmp	r3, #8
 8003282:	d101      	bne.n	8003288 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003284:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_RCC_GetSysClockFreq+0x114>)
 8003286:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b0c      	cmp	r3, #12
 800328c:	d134      	bne.n	80032f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800328e:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d003      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0xac>
 80032a4:	e005      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032a6:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <HAL_RCC_GetSysClockFreq+0x110>)
 80032a8:	617b      	str	r3, [r7, #20]
      break;
 80032aa:	e005      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCC_GetSysClockFreq+0x114>)
 80032ae:	617b      	str	r3, [r7, #20]
      break;
 80032b0:	e002      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	617b      	str	r3, [r7, #20]
      break;
 80032b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032b8:	4b13      	ldr	r3, [pc, #76]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	3301      	adds	r3, #1
 80032c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032c6:	4b10      	ldr	r3, [pc, #64]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	fb03 f202 	mul.w	r2, r3, r2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	0e5b      	lsrs	r3, r3, #25
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	3301      	adds	r3, #1
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032f8:	69bb      	ldr	r3, [r7, #24]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3724      	adds	r7, #36	; 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	0800807c 	.word	0x0800807c
 8003310:	00f42400 	.word	0x00f42400
 8003314:	007a1200 	.word	0x007a1200

08003318 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_RCC_GetHCLKFreq+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000004 	.word	0x20000004

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003334:	f7ff fff0 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4904      	ldr	r1, [pc, #16]	; (8003358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003350:	4618      	mov	r0, r3
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	08008074 	.word	0x08008074

0800335c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003360:	f7ff ffda 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003364:	4602      	mov	r2, r0
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	0adb      	lsrs	r3, r3, #11
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4904      	ldr	r1, [pc, #16]	; (8003384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003372:	5ccb      	ldrb	r3, [r1, r3]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40021000 	.word	0x40021000
 8003384:	08008074 	.word	0x08008074

08003388 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003394:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033a0:	f7ff f9b6 	bl	8002710 <HAL_PWREx_GetVoltageRange>
 80033a4:	6178      	str	r0, [r7, #20]
 80033a6:	e014      	b.n	80033d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	4b25      	ldr	r3, [pc, #148]	; (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	4a24      	ldr	r2, [pc, #144]	; (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b2:	6593      	str	r3, [r2, #88]	; 0x58
 80033b4:	4b22      	ldr	r3, [pc, #136]	; (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033c0:	f7ff f9a6 	bl	8002710 <HAL_PWREx_GetVoltageRange>
 80033c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033c6:	4b1e      	ldr	r3, [pc, #120]	; (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ca:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d8:	d10b      	bne.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	d919      	bls.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2ba0      	cmp	r3, #160	; 0xa0
 80033e4:	d902      	bls.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033e6:	2302      	movs	r3, #2
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	e013      	b.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033ec:	2301      	movs	r3, #1
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	e010      	b.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b80      	cmp	r3, #128	; 0x80
 80033f6:	d902      	bls.n	80033fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033f8:	2303      	movs	r3, #3
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e00a      	b.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b80      	cmp	r3, #128	; 0x80
 8003402:	d102      	bne.n	800340a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003404:	2302      	movs	r3, #2
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	e004      	b.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b70      	cmp	r3, #112	; 0x70
 800340e:	d101      	bne.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003410:	2301      	movs	r3, #1
 8003412:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f023 0207 	bic.w	r2, r3, #7
 800341c:	4909      	ldr	r1, [pc, #36]	; (8003444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003424:	4b07      	ldr	r3, [pc, #28]	; (8003444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	429a      	cmp	r2, r3
 8003430:	d001      	beq.n	8003436 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	40022000 	.word	0x40022000

08003448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003450:	2300      	movs	r3, #0
 8003452:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003454:	2300      	movs	r3, #0
 8003456:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003460:	2b00      	cmp	r3, #0
 8003462:	d031      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003468:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800346c:	d01a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800346e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003472:	d814      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d009      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003478:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800347c:	d10f      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800347e:	4b5d      	ldr	r3, [pc, #372]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4a5c      	ldr	r2, [pc, #368]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003488:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800348a:	e00c      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f9de 	bl	8003854 <RCCEx_PLLSAI1_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800349c:	e003      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	74fb      	strb	r3, [r7, #19]
      break;
 80034a2:	e000      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80034a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10b      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ac:	4b51      	ldr	r3, [pc, #324]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	494e      	ldr	r1, [pc, #312]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034c2:	e001      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 809e 	beq.w	8003612 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034da:	4b46      	ldr	r3, [pc, #280]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80034ea:	2300      	movs	r3, #0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f0:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	4a3f      	ldr	r2, [pc, #252]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fa:	6593      	str	r3, [r2, #88]	; 0x58
 80034fc:	4b3d      	ldr	r3, [pc, #244]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003508:	2301      	movs	r3, #1
 800350a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800350c:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a39      	ldr	r2, [pc, #228]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003518:	f7fe f9f6 	bl	8001908 <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800351e:	e009      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003520:	f7fe f9f2 	bl	8001908 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d902      	bls.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	74fb      	strb	r3, [r7, #19]
        break;
 8003532:	e005      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003534:	4b30      	ldr	r3, [pc, #192]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ef      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d15a      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003546:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003550:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01e      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	429a      	cmp	r2, r3
 8003560:	d019      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003562:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800356e:	4b21      	ldr	r3, [pc, #132]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003574:	4a1f      	ldr	r2, [pc, #124]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800357e:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003584:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800358e:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d016      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe f9b2 	bl	8001908 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a6:	e00b      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a8:	f7fe f9ae 	bl	8001908 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d902      	bls.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	74fb      	strb	r3, [r7, #19]
            break;
 80035be:	e006      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0ec      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80035ce:	7cfb      	ldrb	r3, [r7, #19]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035d4:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e2:	4904      	ldr	r1, [pc, #16]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035ea:	e009      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	74bb      	strb	r3, [r7, #18]
 80035f0:	e006      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003600:	7c7b      	ldrb	r3, [r7, #17]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d105      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003606:	4b8a      	ldr	r3, [pc, #552]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360a:	4a89      	ldr	r2, [pc, #548]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800360c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003610:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800361e:	4b84      	ldr	r3, [pc, #528]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003624:	f023 0203 	bic.w	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4980      	ldr	r1, [pc, #512]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003640:	4b7b      	ldr	r3, [pc, #492]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	f023 020c 	bic.w	r2, r3, #12
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	4978      	ldr	r1, [pc, #480]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003662:	4b73      	ldr	r3, [pc, #460]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003668:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	496f      	ldr	r1, [pc, #444]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003684:	4b6a      	ldr	r3, [pc, #424]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003692:	4967      	ldr	r1, [pc, #412]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036a6:	4b62      	ldr	r3, [pc, #392]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	495e      	ldr	r1, [pc, #376]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036c8:	4b59      	ldr	r3, [pc, #356]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	4956      	ldr	r1, [pc, #344]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ea:	4b51      	ldr	r3, [pc, #324]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	494d      	ldr	r1, [pc, #308]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d028      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800370c:	4b48      	ldr	r3, [pc, #288]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	4945      	ldr	r1, [pc, #276]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800372a:	d106      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800372c:	4b40      	ldr	r3, [pc, #256]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a3f      	ldr	r2, [pc, #252]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003736:	60d3      	str	r3, [r2, #12]
 8003738:	e011      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003742:	d10c      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3304      	adds	r3, #4
 8003748:	2101      	movs	r1, #1
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f882 	bl	8003854 <RCCEx_PLLSAI1_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d028      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800376a:	4b31      	ldr	r3, [pc, #196]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003770:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	492d      	ldr	r1, [pc, #180]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003788:	d106      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800378a:	4b29      	ldr	r3, [pc, #164]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	4a28      	ldr	r2, [pc, #160]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003794:	60d3      	str	r3, [r2, #12]
 8003796:	e011      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2101      	movs	r1, #1
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f853 	bl	8003854 <RCCEx_PLLSAI1_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01c      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d6:	4916      	ldr	r1, [pc, #88]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037e6:	d10c      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	2102      	movs	r1, #2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f830 	bl	8003854 <RCCEx_PLLSAI1_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800380e:	4b08      	ldr	r3, [pc, #32]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381c:	4904      	ldr	r1, [pc, #16]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003824:	7cbb      	ldrb	r3, [r7, #18]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000

08003834 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a04      	ldr	r2, [pc, #16]	; (8003850 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800383e:	f043 0304 	orr.w	r3, r3, #4
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000

08003854 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003862:	4b74      	ldr	r3, [pc, #464]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d018      	beq.n	80038a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800386e:	4b71      	ldr	r3, [pc, #452]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0203 	and.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d10d      	bne.n	800389a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
       ||
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003886:	4b6b      	ldr	r3, [pc, #428]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
       ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d047      	beq.n	800392a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
 800389e:	e044      	b.n	800392a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d018      	beq.n	80038da <RCCEx_PLLSAI1_Config+0x86>
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d825      	bhi.n	80038f8 <RCCEx_PLLSAI1_Config+0xa4>
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d002      	beq.n	80038b6 <RCCEx_PLLSAI1_Config+0x62>
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d009      	beq.n	80038c8 <RCCEx_PLLSAI1_Config+0x74>
 80038b4:	e020      	b.n	80038f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038b6:	4b5f      	ldr	r3, [pc, #380]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d11d      	bne.n	80038fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c6:	e01a      	b.n	80038fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038c8:	4b5a      	ldr	r3, [pc, #360]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d116      	bne.n	8003902 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d8:	e013      	b.n	8003902 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038da:	4b56      	ldr	r3, [pc, #344]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10f      	bne.n	8003906 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038e6:	4b53      	ldr	r3, [pc, #332]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038f6:	e006      	b.n	8003906 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
      break;
 80038fc:	e004      	b.n	8003908 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038fe:	bf00      	nop
 8003900:	e002      	b.n	8003908 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003902:	bf00      	nop
 8003904:	e000      	b.n	8003908 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003906:	bf00      	nop
    }

    if(status == HAL_OK)
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10d      	bne.n	800392a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800390e:	4b49      	ldr	r3, [pc, #292]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	430b      	orrs	r3, r1
 8003924:	4943      	ldr	r1, [pc, #268]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003926:	4313      	orrs	r3, r2
 8003928:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d17c      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003930:	4b40      	ldr	r3, [pc, #256]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a3f      	ldr	r2, [pc, #252]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003936:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800393a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393c:	f7fd ffe4 	bl	8001908 <HAL_GetTick>
 8003940:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003942:	e009      	b.n	8003958 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003944:	f7fd ffe0 	bl	8001908 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d902      	bls.n	8003958 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	73fb      	strb	r3, [r7, #15]
        break;
 8003956:	e005      	b.n	8003964 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ef      	bne.n	8003944 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d15f      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d110      	bne.n	8003992 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003970:	4b30      	ldr	r3, [pc, #192]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003978:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6892      	ldr	r2, [r2, #8]
 8003980:	0211      	lsls	r1, r2, #8
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68d2      	ldr	r2, [r2, #12]
 8003986:	06d2      	lsls	r2, r2, #27
 8003988:	430a      	orrs	r2, r1
 800398a:	492a      	ldr	r1, [pc, #168]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 800398c:	4313      	orrs	r3, r2
 800398e:	610b      	str	r3, [r1, #16]
 8003990:	e027      	b.n	80039e2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d112      	bne.n	80039be <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003998:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80039a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6892      	ldr	r2, [r2, #8]
 80039a8:	0211      	lsls	r1, r2, #8
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6912      	ldr	r2, [r2, #16]
 80039ae:	0852      	lsrs	r2, r2, #1
 80039b0:	3a01      	subs	r2, #1
 80039b2:	0552      	lsls	r2, r2, #21
 80039b4:	430a      	orrs	r2, r1
 80039b6:	491f      	ldr	r1, [pc, #124]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	610b      	str	r3, [r1, #16]
 80039bc:	e011      	b.n	80039e2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6892      	ldr	r2, [r2, #8]
 80039ce:	0211      	lsls	r1, r2, #8
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6952      	ldr	r2, [r2, #20]
 80039d4:	0852      	lsrs	r2, r2, #1
 80039d6:	3a01      	subs	r2, #1
 80039d8:	0652      	lsls	r2, r2, #25
 80039da:	430a      	orrs	r2, r1
 80039dc:	4915      	ldr	r1, [pc, #84]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039e2:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a13      	ldr	r2, [pc, #76]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ee:	f7fd ff8b 	bl	8001908 <HAL_GetTick>
 80039f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039f4:	e009      	b.n	8003a0a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039f6:	f7fd ff87 	bl	8001908 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d902      	bls.n	8003a0a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	73fb      	strb	r3, [r7, #15]
          break;
 8003a08:	e005      	b.n	8003a16 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ef      	beq.n	80039f6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	4903      	ldr	r1, [pc, #12]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000

08003a38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e095      	b.n	8003b76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d108      	bne.n	8003a64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a5a:	d009      	beq.n	8003a70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	61da      	str	r2, [r3, #28]
 8003a62:	e005      	b.n	8003a70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd fda8 	bl	80015e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ab0:	d902      	bls.n	8003ab8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	e002      	b.n	8003abe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003abc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ac6:	d007      	beq.n	8003ad8 <HAL_SPI_Init+0xa0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ad0:	d002      	beq.n	8003ad8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	ea42 0103 	orr.w	r1, r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	f003 0204 	and.w	r2, r3, #4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b54:	ea42 0103 	orr.w	r1, r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b088      	sub	sp, #32
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_SPI_Transmit+0x22>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e15f      	b.n	8003e60 <HAL_SPI_Transmit+0x2e2>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ba8:	f7fd feae 	bl	8001908 <HAL_GetTick>
 8003bac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d002      	beq.n	8003bc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bc2:	e148      	b.n	8003e56 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_SPI_Transmit+0x52>
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bd4:	e13f      	b.n	8003e56 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2203      	movs	r2, #3
 8003bda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	88fa      	ldrh	r2, [r7, #6]
 8003bee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	88fa      	ldrh	r2, [r7, #6]
 8003bf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c20:	d10f      	bne.n	8003c42 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d007      	beq.n	8003c60 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c68:	d94f      	bls.n	8003d0a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_SPI_Transmit+0xfa>
 8003c72:	8afb      	ldrh	r3, [r7, #22]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d142      	bne.n	8003cfe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	881a      	ldrh	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	1c9a      	adds	r2, r3, #2
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c9c:	e02f      	b.n	8003cfe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d112      	bne.n	8003cd2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	881a      	ldrh	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	1c9a      	adds	r2, r3, #2
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cd0:	e015      	b.n	8003cfe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cd2:	f7fd fe19 	bl	8001908 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d803      	bhi.n	8003cea <HAL_SPI_Transmit+0x16c>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d102      	bne.n	8003cf0 <HAL_SPI_Transmit+0x172>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003cfc:	e0ab      	b.n	8003e56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1ca      	bne.n	8003c9e <HAL_SPI_Transmit+0x120>
 8003d08:	e080      	b.n	8003e0c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_SPI_Transmit+0x19a>
 8003d12:	8afb      	ldrh	r3, [r7, #22]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d174      	bne.n	8003e02 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d912      	bls.n	8003d48 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	881a      	ldrh	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	1c9a      	adds	r2, r3, #2
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b02      	subs	r3, #2
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d46:	e05c      	b.n	8003e02 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	7812      	ldrb	r2, [r2, #0]
 8003d54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d6e:	e048      	b.n	8003e02 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d12b      	bne.n	8003dd6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d912      	bls.n	8003dae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	881a      	ldrh	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	1c9a      	adds	r2, r3, #2
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b02      	subs	r3, #2
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dac:	e029      	b.n	8003e02 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dd4:	e015      	b.n	8003e02 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd6:	f7fd fd97 	bl	8001908 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d803      	bhi.n	8003dee <HAL_SPI_Transmit+0x270>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dec:	d102      	bne.n	8003df4 <HAL_SPI_Transmit+0x276>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003e00:	e029      	b.n	8003e56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1b1      	bne.n	8003d70 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	6839      	ldr	r1, [r7, #0]
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fb69 	bl	80044e8 <SPI_EndRxTxTransaction>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e003      	b.n	8003e56 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3720      	adds	r7, #32
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	; 0x28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e76:	2301      	movs	r3, #1
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x26>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e20a      	b.n	80042a4 <HAL_SPI_TransmitReceive+0x43c>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e96:	f7fd fd37 	bl	8001908 <HAL_GetTick>
 8003e9a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ea2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003eae:	887b      	ldrh	r3, [r7, #2]
 8003eb0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003eb2:	7efb      	ldrb	r3, [r7, #27]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0x6e>
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ebe:	d106      	bne.n	8003ece <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <HAL_SPI_TransmitReceive+0x66>
 8003ec8:	7efb      	ldrb	r3, [r7, #27]
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d003      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ed4:	e1e0      	b.n	8004298 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_SPI_TransmitReceive+0x80>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_SPI_TransmitReceive+0x80>
 8003ee2:	887b      	ldrh	r3, [r7, #2]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003eee:	e1d3      	b.n	8004298 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d003      	beq.n	8003f04 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2205      	movs	r2, #5
 8003f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	887a      	ldrh	r2, [r7, #2]
 8003f14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	887a      	ldrh	r2, [r7, #2]
 8003f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	887a      	ldrh	r2, [r7, #2]
 8003f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	887a      	ldrh	r2, [r7, #2]
 8003f30:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f46:	d802      	bhi.n	8003f4e <HAL_SPI_TransmitReceive+0xe6>
 8003f48:	8a3b      	ldrh	r3, [r7, #16]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d908      	bls.n	8003f60 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	e007      	b.n	8003f70 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f6e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	2b40      	cmp	r3, #64	; 0x40
 8003f7c:	d007      	beq.n	8003f8e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f96:	f240 8081 	bls.w	800409c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_SPI_TransmitReceive+0x140>
 8003fa2:	8a7b      	ldrh	r3, [r7, #18]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d16d      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	881a      	ldrh	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	1c9a      	adds	r2, r3, #2
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fcc:	e05a      	b.n	8004084 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d11b      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x1ac>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x1ac>
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d113      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	881a      	ldrh	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	1c9a      	adds	r2, r3, #2
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b01      	cmp	r3, #1
 8004020:	d11c      	bne.n	800405c <HAL_SPI_TransmitReceive+0x1f4>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	b292      	uxth	r2, r2
 800403a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	1c9a      	adds	r2, r3, #2
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004058:	2301      	movs	r3, #1
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800405c:	f7fd fc54 	bl	8001908 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004068:	429a      	cmp	r2, r3
 800406a:	d80b      	bhi.n	8004084 <HAL_SPI_TransmitReceive+0x21c>
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d007      	beq.n	8004084 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004082:	e109      	b.n	8004298 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d19f      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x166>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d199      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x166>
 800409a:	e0e3      	b.n	8004264 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_SPI_TransmitReceive+0x244>
 80040a4:	8a7b      	ldrh	r3, [r7, #18]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	f040 80cf 	bne.w	800424a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d912      	bls.n	80040dc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	881a      	ldrh	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	1c9a      	adds	r2, r3, #2
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b02      	subs	r3, #2
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040da:	e0b6      	b.n	800424a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	7812      	ldrb	r2, [r2, #0]
 80040e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004102:	e0a2      	b.n	800424a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d134      	bne.n	800417c <HAL_SPI_TransmitReceive+0x314>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d02f      	beq.n	800417c <HAL_SPI_TransmitReceive+0x314>
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	2b01      	cmp	r3, #1
 8004120:	d12c      	bne.n	800417c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	d912      	bls.n	8004152 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	881a      	ldrh	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	1c9a      	adds	r2, r3, #2
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b02      	subs	r3, #2
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004150:	e012      	b.n	8004178 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	7812      	ldrb	r2, [r2, #0]
 800415e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b01      	cmp	r3, #1
 8004188:	d148      	bne.n	800421c <HAL_SPI_TransmitReceive+0x3b4>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d042      	beq.n	800421c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d923      	bls.n	80041ea <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	b292      	uxth	r2, r2
 80041ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	1c9a      	adds	r2, r3, #2
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b02      	subs	r3, #2
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d81f      	bhi.n	8004218 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041e6:	605a      	str	r2, [r3, #4]
 80041e8:	e016      	b.n	8004218 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f103 020c 	add.w	r2, r3, #12
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	7812      	ldrb	r2, [r2, #0]
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004218:	2301      	movs	r3, #1
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800421c:	f7fd fb74 	bl	8001908 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004228:	429a      	cmp	r2, r3
 800422a:	d803      	bhi.n	8004234 <HAL_SPI_TransmitReceive+0x3cc>
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d102      	bne.n	800423a <HAL_SPI_TransmitReceive+0x3d2>
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	2b00      	cmp	r3, #0
 8004238:	d107      	bne.n	800424a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004248:	e026      	b.n	8004298 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	f47f af57 	bne.w	8004104 <HAL_SPI_TransmitReceive+0x29c>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	f47f af50 	bne.w	8004104 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f93d 	bl	80044e8 <SPI_EndRxTxTransaction>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e003      	b.n	8004298 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80042a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3728      	adds	r7, #40	; 0x28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042bc:	f7fd fb24 	bl	8001908 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	4413      	add	r3, r2
 80042ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042cc:	f7fd fb1c 	bl	8001908 <HAL_GetTick>
 80042d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042d2:	4b39      	ldr	r3, [pc, #228]	; (80043b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	015b      	lsls	r3, r3, #5
 80042d8:	0d1b      	lsrs	r3, r3, #20
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	fb02 f303 	mul.w	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042e2:	e054      	b.n	800438e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ea:	d050      	beq.n	800438e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042ec:	f7fd fb0c 	bl	8001908 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d902      	bls.n	8004302 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d13d      	bne.n	800437e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004310:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800431a:	d111      	bne.n	8004340 <SPI_WaitFlagStateUntilTimeout+0x94>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004324:	d004      	beq.n	8004330 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432e:	d107      	bne.n	8004340 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004348:	d10f      	bne.n	800436a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004368:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e017      	b.n	80043ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	3b01      	subs	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4013      	ands	r3, r2
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	429a      	cmp	r2, r3
 800439c:	bf0c      	ite	eq
 800439e:	2301      	moveq	r3, #1
 80043a0:	2300      	movne	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d19b      	bne.n	80042e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000004 	.word	0x20000004

080043bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08a      	sub	sp, #40	; 0x28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043ce:	f7fd fa9b 	bl	8001908 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	4413      	add	r3, r2
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80043de:	f7fd fa93 	bl	8001908 <HAL_GetTick>
 80043e2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	330c      	adds	r3, #12
 80043ea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043ec:	4b3d      	ldr	r3, [pc, #244]	; (80044e4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	00da      	lsls	r2, r3, #3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	0d1b      	lsrs	r3, r3, #20
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004404:	e060      	b.n	80044c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800440c:	d107      	bne.n	800441e <SPI_WaitFifoStateUntilTimeout+0x62>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d104      	bne.n	800441e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800441c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d050      	beq.n	80044c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004426:	f7fd fa6f 	bl	8001908 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004432:	429a      	cmp	r2, r3
 8004434:	d902      	bls.n	800443c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	2b00      	cmp	r3, #0
 800443a:	d13d      	bne.n	80044b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800444a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004454:	d111      	bne.n	800447a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445e:	d004      	beq.n	800446a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004468:	d107      	bne.n	800447a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004478:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004482:	d10f      	bne.n	80044a4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e010      	b.n	80044da <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4013      	ands	r3, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d196      	bne.n	8004406 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3728      	adds	r7, #40	; 0x28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000004 	.word	0x20000004

080044e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff ff5b 	bl	80043bc <SPI_WaitFifoStateUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e027      	b.n	800456c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2200      	movs	r2, #0
 8004524:	2180      	movs	r1, #128	; 0x80
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f7ff fec0 	bl	80042ac <SPI_WaitFlagStateUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d007      	beq.n	8004542 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004536:	f043 0220 	orr.w	r2, r3, #32
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e014      	b.n	800456c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2200      	movs	r2, #0
 800454a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f7ff ff34 	bl	80043bc <SPI_WaitFifoStateUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455e:	f043 0220 	orr.w	r2, r3, #32
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e000      	b.n	800456c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e040      	b.n	8004608 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fd f866 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2224      	movs	r2, #36	; 0x24
 80045a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fa54 	bl	8004a68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f825 	bl	8004610 <UART_SetConfig>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e01b      	b.n	8004608 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fad3 	bl	8004bac <UART_CheckIdleState>
 8004606:	4603      	mov	r3, r0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004614:	b08a      	sub	sp, #40	; 0x28
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	431a      	orrs	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	431a      	orrs	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	4313      	orrs	r3, r2
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4bb4      	ldr	r3, [pc, #720]	; (8004910 <UART_SetConfig+0x300>)
 8004640:	4013      	ands	r3, r2
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004648:	430b      	orrs	r3, r1
 800464a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4aa9      	ldr	r2, [pc, #676]	; (8004914 <UART_SetConfig+0x304>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004678:	4313      	orrs	r3, r2
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468c:	430a      	orrs	r2, r1
 800468e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4aa0      	ldr	r2, [pc, #640]	; (8004918 <UART_SetConfig+0x308>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d126      	bne.n	80046e8 <UART_SetConfig+0xd8>
 800469a:	4ba0      	ldr	r3, [pc, #640]	; (800491c <UART_SetConfig+0x30c>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d81b      	bhi.n	80046e0 <UART_SetConfig+0xd0>
 80046a8:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <UART_SetConfig+0xa0>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046d1 	.word	0x080046d1
 80046b8:	080046c9 	.word	0x080046c9
 80046bc:	080046d9 	.word	0x080046d9
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c6:	e080      	b.n	80047ca <UART_SetConfig+0x1ba>
 80046c8:	2302      	movs	r3, #2
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ce:	e07c      	b.n	80047ca <UART_SetConfig+0x1ba>
 80046d0:	2304      	movs	r3, #4
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e078      	b.n	80047ca <UART_SetConfig+0x1ba>
 80046d8:	2308      	movs	r3, #8
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e074      	b.n	80047ca <UART_SetConfig+0x1ba>
 80046e0:	2310      	movs	r3, #16
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e6:	e070      	b.n	80047ca <UART_SetConfig+0x1ba>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a8c      	ldr	r2, [pc, #560]	; (8004920 <UART_SetConfig+0x310>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d138      	bne.n	8004764 <UART_SetConfig+0x154>
 80046f2:	4b8a      	ldr	r3, [pc, #552]	; (800491c <UART_SetConfig+0x30c>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b0c      	cmp	r3, #12
 80046fe:	d82d      	bhi.n	800475c <UART_SetConfig+0x14c>
 8004700:	a201      	add	r2, pc, #4	; (adr r2, 8004708 <UART_SetConfig+0xf8>)
 8004702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004706:	bf00      	nop
 8004708:	0800473d 	.word	0x0800473d
 800470c:	0800475d 	.word	0x0800475d
 8004710:	0800475d 	.word	0x0800475d
 8004714:	0800475d 	.word	0x0800475d
 8004718:	0800474d 	.word	0x0800474d
 800471c:	0800475d 	.word	0x0800475d
 8004720:	0800475d 	.word	0x0800475d
 8004724:	0800475d 	.word	0x0800475d
 8004728:	08004745 	.word	0x08004745
 800472c:	0800475d 	.word	0x0800475d
 8004730:	0800475d 	.word	0x0800475d
 8004734:	0800475d 	.word	0x0800475d
 8004738:	08004755 	.word	0x08004755
 800473c:	2300      	movs	r3, #0
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004742:	e042      	b.n	80047ca <UART_SetConfig+0x1ba>
 8004744:	2302      	movs	r3, #2
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474a:	e03e      	b.n	80047ca <UART_SetConfig+0x1ba>
 800474c:	2304      	movs	r3, #4
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004752:	e03a      	b.n	80047ca <UART_SetConfig+0x1ba>
 8004754:	2308      	movs	r3, #8
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475a:	e036      	b.n	80047ca <UART_SetConfig+0x1ba>
 800475c:	2310      	movs	r3, #16
 800475e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004762:	e032      	b.n	80047ca <UART_SetConfig+0x1ba>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a6a      	ldr	r2, [pc, #424]	; (8004914 <UART_SetConfig+0x304>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d12a      	bne.n	80047c4 <UART_SetConfig+0x1b4>
 800476e:	4b6b      	ldr	r3, [pc, #428]	; (800491c <UART_SetConfig+0x30c>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004778:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800477c:	d01a      	beq.n	80047b4 <UART_SetConfig+0x1a4>
 800477e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004782:	d81b      	bhi.n	80047bc <UART_SetConfig+0x1ac>
 8004784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004788:	d00c      	beq.n	80047a4 <UART_SetConfig+0x194>
 800478a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478e:	d815      	bhi.n	80047bc <UART_SetConfig+0x1ac>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <UART_SetConfig+0x18c>
 8004794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004798:	d008      	beq.n	80047ac <UART_SetConfig+0x19c>
 800479a:	e00f      	b.n	80047bc <UART_SetConfig+0x1ac>
 800479c:	2300      	movs	r3, #0
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a2:	e012      	b.n	80047ca <UART_SetConfig+0x1ba>
 80047a4:	2302      	movs	r3, #2
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047aa:	e00e      	b.n	80047ca <UART_SetConfig+0x1ba>
 80047ac:	2304      	movs	r3, #4
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b2:	e00a      	b.n	80047ca <UART_SetConfig+0x1ba>
 80047b4:	2308      	movs	r3, #8
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ba:	e006      	b.n	80047ca <UART_SetConfig+0x1ba>
 80047bc:	2310      	movs	r3, #16
 80047be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c2:	e002      	b.n	80047ca <UART_SetConfig+0x1ba>
 80047c4:	2310      	movs	r3, #16
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a51      	ldr	r2, [pc, #324]	; (8004914 <UART_SetConfig+0x304>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d17a      	bne.n	80048ca <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d824      	bhi.n	8004826 <UART_SetConfig+0x216>
 80047dc:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <UART_SetConfig+0x1d4>)
 80047de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e2:	bf00      	nop
 80047e4:	08004809 	.word	0x08004809
 80047e8:	08004827 	.word	0x08004827
 80047ec:	08004811 	.word	0x08004811
 80047f0:	08004827 	.word	0x08004827
 80047f4:	08004817 	.word	0x08004817
 80047f8:	08004827 	.word	0x08004827
 80047fc:	08004827 	.word	0x08004827
 8004800:	08004827 	.word	0x08004827
 8004804:	0800481f 	.word	0x0800481f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004808:	f7fe fd92 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 800480c:	61f8      	str	r0, [r7, #28]
        break;
 800480e:	e010      	b.n	8004832 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004810:	4b44      	ldr	r3, [pc, #272]	; (8004924 <UART_SetConfig+0x314>)
 8004812:	61fb      	str	r3, [r7, #28]
        break;
 8004814:	e00d      	b.n	8004832 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004816:	f7fe fcf3 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 800481a:	61f8      	str	r0, [r7, #28]
        break;
 800481c:	e009      	b.n	8004832 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004822:	61fb      	str	r3, [r7, #28]
        break;
 8004824:	e005      	b.n	8004832 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004830:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8107 	beq.w	8004a48 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	4413      	add	r3, r2
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	429a      	cmp	r2, r3
 8004848:	d305      	bcc.n	8004856 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	429a      	cmp	r2, r3
 8004854:	d903      	bls.n	800485e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800485c:	e0f4      	b.n	8004a48 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	2200      	movs	r2, #0
 8004862:	461c      	mov	r4, r3
 8004864:	4615      	mov	r5, r2
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	022b      	lsls	r3, r5, #8
 8004870:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004874:	0222      	lsls	r2, r4, #8
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	6849      	ldr	r1, [r1, #4]
 800487a:	0849      	lsrs	r1, r1, #1
 800487c:	2000      	movs	r0, #0
 800487e:	4688      	mov	r8, r1
 8004880:	4681      	mov	r9, r0
 8004882:	eb12 0a08 	adds.w	sl, r2, r8
 8004886:	eb43 0b09 	adc.w	fp, r3, r9
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004898:	4650      	mov	r0, sl
 800489a:	4659      	mov	r1, fp
 800489c:	f7fb fc96 	bl	80001cc <__aeabi_uldivmod>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4613      	mov	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ae:	d308      	bcc.n	80048c2 <UART_SetConfig+0x2b2>
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b6:	d204      	bcs.n	80048c2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	60da      	str	r2, [r3, #12]
 80048c0:	e0c2      	b.n	8004a48 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048c8:	e0be      	b.n	8004a48 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d2:	d16a      	bne.n	80049aa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80048d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d834      	bhi.n	8004946 <UART_SetConfig+0x336>
 80048dc:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <UART_SetConfig+0x2d4>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	08004909 	.word	0x08004909
 80048e8:	08004929 	.word	0x08004929
 80048ec:	08004931 	.word	0x08004931
 80048f0:	08004947 	.word	0x08004947
 80048f4:	08004937 	.word	0x08004937
 80048f8:	08004947 	.word	0x08004947
 80048fc:	08004947 	.word	0x08004947
 8004900:	08004947 	.word	0x08004947
 8004904:	0800493f 	.word	0x0800493f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004908:	f7fe fd12 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 800490c:	61f8      	str	r0, [r7, #28]
        break;
 800490e:	e020      	b.n	8004952 <UART_SetConfig+0x342>
 8004910:	efff69f3 	.word	0xefff69f3
 8004914:	40008000 	.word	0x40008000
 8004918:	40013800 	.word	0x40013800
 800491c:	40021000 	.word	0x40021000
 8004920:	40004400 	.word	0x40004400
 8004924:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004928:	f7fe fd18 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 800492c:	61f8      	str	r0, [r7, #28]
        break;
 800492e:	e010      	b.n	8004952 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004930:	4b4c      	ldr	r3, [pc, #304]	; (8004a64 <UART_SetConfig+0x454>)
 8004932:	61fb      	str	r3, [r7, #28]
        break;
 8004934:	e00d      	b.n	8004952 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004936:	f7fe fc63 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 800493a:	61f8      	str	r0, [r7, #28]
        break;
 800493c:	e009      	b.n	8004952 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800493e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004942:	61fb      	str	r3, [r7, #28]
        break;
 8004944:	e005      	b.n	8004952 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004950:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d077      	beq.n	8004a48 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	005a      	lsls	r2, r3, #1
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	441a      	add	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b0f      	cmp	r3, #15
 8004972:	d916      	bls.n	80049a2 <UART_SetConfig+0x392>
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497a:	d212      	bcs.n	80049a2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	b29b      	uxth	r3, r3
 8004980:	f023 030f 	bic.w	r3, r3, #15
 8004984:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	b29b      	uxth	r3, r3
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	b29a      	uxth	r2, r3
 8004992:	8afb      	ldrh	r3, [r7, #22]
 8004994:	4313      	orrs	r3, r2
 8004996:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	8afa      	ldrh	r2, [r7, #22]
 800499e:	60da      	str	r2, [r3, #12]
 80049a0:	e052      	b.n	8004a48 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049a8:	e04e      	b.n	8004a48 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d827      	bhi.n	8004a02 <UART_SetConfig+0x3f2>
 80049b2:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <UART_SetConfig+0x3a8>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	080049e5 	.word	0x080049e5
 80049c0:	080049ed 	.word	0x080049ed
 80049c4:	08004a03 	.word	0x08004a03
 80049c8:	080049f3 	.word	0x080049f3
 80049cc:	08004a03 	.word	0x08004a03
 80049d0:	08004a03 	.word	0x08004a03
 80049d4:	08004a03 	.word	0x08004a03
 80049d8:	080049fb 	.word	0x080049fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049dc:	f7fe fca8 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 80049e0:	61f8      	str	r0, [r7, #28]
        break;
 80049e2:	e014      	b.n	8004a0e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e4:	f7fe fcba 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 80049e8:	61f8      	str	r0, [r7, #28]
        break;
 80049ea:	e010      	b.n	8004a0e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ec:	4b1d      	ldr	r3, [pc, #116]	; (8004a64 <UART_SetConfig+0x454>)
 80049ee:	61fb      	str	r3, [r7, #28]
        break;
 80049f0:	e00d      	b.n	8004a0e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f2:	f7fe fc05 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80049f6:	61f8      	str	r0, [r7, #28]
        break;
 80049f8:	e009      	b.n	8004a0e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fe:	61fb      	str	r3, [r7, #28]
        break;
 8004a00:	e005      	b.n	8004a0e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a0c:	bf00      	nop
    }

    if (pclk != 0U)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d019      	beq.n	8004a48 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	085a      	lsrs	r2, r3, #1
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	441a      	add	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b0f      	cmp	r3, #15
 8004a2c:	d909      	bls.n	8004a42 <UART_SetConfig+0x432>
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a34:	d205      	bcs.n	8004a42 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60da      	str	r2, [r3, #12]
 8004a40:	e002      	b.n	8004a48 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3728      	adds	r7, #40	; 0x28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a62:	bf00      	nop
 8004a64:	00f42400 	.word	0x00f42400

08004a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01a      	beq.n	8004b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b66:	d10a      	bne.n	8004b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	605a      	str	r2, [r3, #4]
  }
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b098      	sub	sp, #96	; 0x60
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bbc:	f7fc fea4 	bl	8001908 <HAL_GetTick>
 8004bc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d12e      	bne.n	8004c2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f88c 	bl	8004cfc <UART_WaitOnFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d021      	beq.n	8004c2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c08:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e6      	bne.n	8004bea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e062      	b.n	8004cf4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d149      	bne.n	8004cd0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c44:	2200      	movs	r2, #0
 8004c46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f856 	bl	8004cfc <UART_WaitOnFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d03c      	beq.n	8004cd0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	623b      	str	r3, [r7, #32]
   return(result);
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c74:	633b      	str	r3, [r7, #48]	; 0x30
 8004c76:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e6      	bne.n	8004c56 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ca8:	61fa      	str	r2, [r7, #28]
 8004caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	69b9      	ldr	r1, [r7, #24]
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e5      	bne.n	8004c88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e011      	b.n	8004cf4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3758      	adds	r7, #88	; 0x58
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0c:	e049      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d045      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d16:	f7fc fdf7 	bl	8001908 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d302      	bcc.n	8004d2c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e048      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d031      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d110      	bne.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2208      	movs	r2, #8
 8004d52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f838 	bl	8004dca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e029      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7c:	d111      	bne.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f81e 	bl	8004dca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e00f      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4013      	ands	r3, r2
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	bf0c      	ite	eq
 8004db2:	2301      	moveq	r3, #1
 8004db4:	2300      	movne	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d0a6      	beq.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b095      	sub	sp, #84	; 0x54
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df0:	643b      	str	r3, [r7, #64]	; 0x40
 8004df2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004df6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e6      	bne.n	8004dd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3308      	adds	r3, #8
 8004e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3308      	adds	r3, #8
 8004e22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e5      	bne.n	8004e04 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d118      	bne.n	8004e72 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f023 0310 	bic.w	r3, r3, #16
 8004e54:	647b      	str	r3, [r7, #68]	; 0x44
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	6979      	ldr	r1, [r7, #20]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e6      	bne.n	8004e40 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e86:	bf00      	nop
 8004e88:	3754      	adds	r7, #84	; 0x54
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004e98:	4904      	ldr	r1, [pc, #16]	; (8004eac <MX_FATFS_Init+0x18>)
 8004e9a:	4805      	ldr	r0, [pc, #20]	; (8004eb0 <MX_FATFS_Init+0x1c>)
 8004e9c:	f002 ff78 	bl	8007d90 <FATFS_LinkDriver>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <MX_FATFS_Init+0x20>)
 8004ea6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004ea8:	bf00      	nop
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	200001a4 	.word	0x200001a4
 8004eb0:	20000010 	.word	0x20000010
 8004eb4:	200001a0 	.word	0x200001a0

08004eb8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004ebc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fb fcaf 	bl	8000838 <SD_disk_initialize>
 8004eda:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fb fd87 	bl	8000a04 <SD_disk_status>
 8004ef6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8004f10:	7bf8      	ldrb	r0, [r7, #15]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	f7fb fd8a 	bl	8000a30 <SD_disk_read>
 8004f1c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b084      	sub	sp, #16
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	4603      	mov	r3, r0
 8004f34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004f36:	7bf8      	ldrb	r0, [r7, #15]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	f7fb fde1 	bl	8000b04 <SD_disk_write>
 8004f42:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	4603      	mov	r3, r0
 8004f54:	603a      	str	r2, [r7, #0]
 8004f56:	71fb      	strb	r3, [r7, #7]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004f5c:	79b9      	ldrb	r1, [r7, #6]
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fb fe52 	bl	8000c0c <SD_disk_ioctl>
 8004f68:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	4a08      	ldr	r2, [pc, #32]	; (8004fa4 <disk_status+0x30>)
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	79fa      	ldrb	r2, [r7, #7]
 8004f8c:	4905      	ldr	r1, [pc, #20]	; (8004fa4 <disk_status+0x30>)
 8004f8e:	440a      	add	r2, r1
 8004f90:	7a12      	ldrb	r2, [r2, #8]
 8004f92:	4610      	mov	r0, r2
 8004f94:	4798      	blx	r3
 8004f96:	4603      	mov	r3, r0
 8004f98:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	200003d0 	.word	0x200003d0

08004fa8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004fb6:	79fb      	ldrb	r3, [r7, #7]
 8004fb8:	4a0d      	ldr	r2, [pc, #52]	; (8004ff0 <disk_initialize+0x48>)
 8004fba:	5cd3      	ldrb	r3, [r2, r3]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d111      	bne.n	8004fe4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	4a0b      	ldr	r2, [pc, #44]	; (8004ff0 <disk_initialize+0x48>)
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	4a09      	ldr	r2, [pc, #36]	; (8004ff0 <disk_initialize+0x48>)
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	79fa      	ldrb	r2, [r7, #7]
 8004fd6:	4906      	ldr	r1, [pc, #24]	; (8004ff0 <disk_initialize+0x48>)
 8004fd8:	440a      	add	r2, r1
 8004fda:	7a12      	ldrb	r2, [r2, #8]
 8004fdc:	4610      	mov	r0, r2
 8004fde:	4798      	blx	r3
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	200003d0 	.word	0x200003d0

08004ff4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	4603      	mov	r3, r0
 8005002:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	4a0a      	ldr	r2, [pc, #40]	; (8005030 <disk_read+0x3c>)
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	689c      	ldr	r4, [r3, #8]
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	4a07      	ldr	r2, [pc, #28]	; (8005030 <disk_read+0x3c>)
 8005014:	4413      	add	r3, r2
 8005016:	7a18      	ldrb	r0, [r3, #8]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	68b9      	ldr	r1, [r7, #8]
 800501e:	47a0      	blx	r4
 8005020:	4603      	mov	r3, r0
 8005022:	75fb      	strb	r3, [r7, #23]
  return res;
 8005024:	7dfb      	ldrb	r3, [r7, #23]
}
 8005026:	4618      	mov	r0, r3
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	bd90      	pop	{r4, r7, pc}
 800502e:	bf00      	nop
 8005030:	200003d0 	.word	0x200003d0

08005034 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005034:	b590      	push	{r4, r7, lr}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	4603      	mov	r3, r0
 8005042:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	4a0a      	ldr	r2, [pc, #40]	; (8005070 <disk_write+0x3c>)
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	68dc      	ldr	r4, [r3, #12]
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	4a07      	ldr	r2, [pc, #28]	; (8005070 <disk_write+0x3c>)
 8005054:	4413      	add	r3, r2
 8005056:	7a18      	ldrb	r0, [r3, #8]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	47a0      	blx	r4
 8005060:	4603      	mov	r3, r0
 8005062:	75fb      	strb	r3, [r7, #23]
  return res;
 8005064:	7dfb      	ldrb	r3, [r7, #23]
}
 8005066:	4618      	mov	r0, r3
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	bd90      	pop	{r4, r7, pc}
 800506e:	bf00      	nop
 8005070:	200003d0 	.word	0x200003d0

08005074 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	603a      	str	r2, [r7, #0]
 800507e:	71fb      	strb	r3, [r7, #7]
 8005080:	460b      	mov	r3, r1
 8005082:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	4a09      	ldr	r2, [pc, #36]	; (80050ac <disk_ioctl+0x38>)
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	79fa      	ldrb	r2, [r7, #7]
 8005092:	4906      	ldr	r1, [pc, #24]	; (80050ac <disk_ioctl+0x38>)
 8005094:	440a      	add	r2, r1
 8005096:	7a10      	ldrb	r0, [r2, #8]
 8005098:	79b9      	ldrb	r1, [r7, #6]
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	4798      	blx	r3
 800509e:	4603      	mov	r3, r0
 80050a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	200003d0 	.word	0x200003d0

080050b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3301      	adds	r3, #1
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80050c0:	89fb      	ldrh	r3, [r7, #14]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	b21a      	sxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	b21b      	sxth	r3, r3
 80050cc:	4313      	orrs	r3, r2
 80050ce:	b21b      	sxth	r3, r3
 80050d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80050d2:	89fb      	ldrh	r3, [r7, #14]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3303      	adds	r3, #3
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	3202      	adds	r2, #2
 80050f8:	7812      	ldrb	r2, [r2, #0]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	3201      	adds	r2, #1
 8005106:	7812      	ldrb	r2, [r2, #0]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	7812      	ldrb	r2, [r2, #0]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
	return rv;
 8005118:	68fb      	ldr	r3, [r7, #12]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	460b      	mov	r3, r1
 8005130:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	887a      	ldrh	r2, [r7, #2]
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	887b      	ldrh	r3, [r7, #2]
 8005140:	0a1b      	lsrs	r3, r3, #8
 8005142:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	887a      	ldrh	r2, [r7, #2]
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	0a1b      	lsrs	r3, r3, #8
 800519a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	607a      	str	r2, [r7, #4]
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	701a      	strb	r2, [r3, #0]
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00d      	beq.n	80051ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	1c53      	adds	r3, r2, #1
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	1c59      	adds	r1, r3, #1
 80051d8:	6179      	str	r1, [r7, #20]
 80051da:	7812      	ldrb	r2, [r2, #0]
 80051dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	607b      	str	r3, [r7, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f1      	bne.n	80051ce <mem_cpy+0x1a>
	}
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80051f6:	b480      	push	{r7}
 80051f8:	b087      	sub	sp, #28
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	617a      	str	r2, [r7, #20]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3b01      	subs	r3, #1
 8005216:	607b      	str	r3, [r7, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f3      	bne.n	8005206 <mem_set+0x10>
}
 800521e:	bf00      	nop
 8005220:	bf00      	nop
 8005222:	371c      	adds	r7, #28
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800522c:	b480      	push	{r7}
 800522e:	b089      	sub	sp, #36	; 0x24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	61fb      	str	r3, [r7, #28]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	61fa      	str	r2, [r7, #28]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	4619      	mov	r1, r3
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	61ba      	str	r2, [r7, #24]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	1acb      	subs	r3, r1, r3
 8005258:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3b01      	subs	r3, #1
 800525e:	607b      	str	r3, [r7, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <mem_cmp+0x40>
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0eb      	beq.n	8005244 <mem_cmp+0x18>

	return r;
 800526c:	697b      	ldr	r3, [r7, #20]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3724      	adds	r7, #36	; 0x24
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005284:	e002      	b.n	800528c <chk_chr+0x12>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3301      	adds	r3, #1
 800528a:	607b      	str	r3, [r7, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <chk_chr+0x26>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	461a      	mov	r2, r3
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	4293      	cmp	r3, r2
 800529e:	d1f2      	bne.n	8005286 <chk_chr+0xc>
	return *str;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	781b      	ldrb	r3, [r3, #0]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e029      	b.n	8005318 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80052c4:	4a27      	ldr	r2, [pc, #156]	; (8005364 <chk_lock+0xb4>)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	4413      	add	r3, r2
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01d      	beq.n	800530e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80052d2:	4a24      	ldr	r2, [pc, #144]	; (8005364 <chk_lock+0xb4>)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	4413      	add	r3, r2
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d116      	bne.n	8005312 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80052e4:	4a1f      	ldr	r2, [pc, #124]	; (8005364 <chk_lock+0xb4>)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	4413      	add	r3, r2
 80052ec:	3304      	adds	r3, #4
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d10c      	bne.n	8005312 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80052f8:	4a1a      	ldr	r2, [pc, #104]	; (8005364 <chk_lock+0xb4>)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	4413      	add	r3, r2
 8005300:	3308      	adds	r3, #8
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005308:	429a      	cmp	r2, r3
 800530a:	d102      	bne.n	8005312 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800530c:	e007      	b.n	800531e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800530e:	2301      	movs	r3, #1
 8005310:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3301      	adds	r3, #1
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d9d2      	bls.n	80052c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d109      	bne.n	8005338 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d102      	bne.n	8005330 <chk_lock+0x80>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d101      	bne.n	8005334 <chk_lock+0x84>
 8005330:	2300      	movs	r3, #0
 8005332:	e010      	b.n	8005356 <chk_lock+0xa6>
 8005334:	2312      	movs	r3, #18
 8005336:	e00e      	b.n	8005356 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d108      	bne.n	8005350 <chk_lock+0xa0>
 800533e:	4a09      	ldr	r2, [pc, #36]	; (8005364 <chk_lock+0xb4>)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	4413      	add	r3, r2
 8005346:	330c      	adds	r3, #12
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534e:	d101      	bne.n	8005354 <chk_lock+0xa4>
 8005350:	2310      	movs	r3, #16
 8005352:	e000      	b.n	8005356 <chk_lock+0xa6>
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	200001b0 	.word	0x200001b0

08005368 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	e002      	b.n	800537a <enq_lock+0x12>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3301      	adds	r3, #1
 8005378:	607b      	str	r3, [r7, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d806      	bhi.n	800538e <enq_lock+0x26>
 8005380:	4a09      	ldr	r2, [pc, #36]	; (80053a8 <enq_lock+0x40>)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	4413      	add	r3, r2
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f2      	bne.n	8005374 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b02      	cmp	r3, #2
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2db      	uxtb	r3, r3
}
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	200001b0 	.word	0x200001b0

080053ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e01f      	b.n	80053fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80053bc:	4a41      	ldr	r2, [pc, #260]	; (80054c4 <inc_lock+0x118>)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	4413      	add	r3, r2
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d113      	bne.n	80053f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80053ce:	4a3d      	ldr	r2, [pc, #244]	; (80054c4 <inc_lock+0x118>)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	4413      	add	r3, r2
 80053d6:	3304      	adds	r3, #4
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80053de:	429a      	cmp	r2, r3
 80053e0:	d109      	bne.n	80053f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80053e2:	4a38      	ldr	r2, [pc, #224]	; (80054c4 <inc_lock+0x118>)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	4413      	add	r3, r2
 80053ea:	3308      	adds	r3, #8
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d006      	beq.n	8005404 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3301      	adds	r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d9dc      	bls.n	80053bc <inc_lock+0x10>
 8005402:	e000      	b.n	8005406 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005404:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d132      	bne.n	8005472 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	e002      	b.n	8005418 <inc_lock+0x6c>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3301      	adds	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d806      	bhi.n	800542c <inc_lock+0x80>
 800541e:	4a29      	ldr	r2, [pc, #164]	; (80054c4 <inc_lock+0x118>)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	4413      	add	r3, r2
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f2      	bne.n	8005412 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d101      	bne.n	8005436 <inc_lock+0x8a>
 8005432:	2300      	movs	r3, #0
 8005434:	e040      	b.n	80054b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	4922      	ldr	r1, [pc, #136]	; (80054c4 <inc_lock+0x118>)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	440b      	add	r3, r1
 8005442:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	491e      	ldr	r1, [pc, #120]	; (80054c4 <inc_lock+0x118>)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	440b      	add	r3, r1
 8005450:	3304      	adds	r3, #4
 8005452:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	695a      	ldr	r2, [r3, #20]
 8005458:	491a      	ldr	r1, [pc, #104]	; (80054c4 <inc_lock+0x118>)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	440b      	add	r3, r1
 8005460:	3308      	adds	r3, #8
 8005462:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005464:	4a17      	ldr	r2, [pc, #92]	; (80054c4 <inc_lock+0x118>)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	4413      	add	r3, r2
 800546c:	330c      	adds	r3, #12
 800546e:	2200      	movs	r2, #0
 8005470:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d009      	beq.n	800548c <inc_lock+0xe0>
 8005478:	4a12      	ldr	r2, [pc, #72]	; (80054c4 <inc_lock+0x118>)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	4413      	add	r3, r2
 8005480:	330c      	adds	r3, #12
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <inc_lock+0xe0>
 8005488:	2300      	movs	r3, #0
 800548a:	e015      	b.n	80054b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d108      	bne.n	80054a4 <inc_lock+0xf8>
 8005492:	4a0c      	ldr	r2, [pc, #48]	; (80054c4 <inc_lock+0x118>)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	4413      	add	r3, r2
 800549a:	330c      	adds	r3, #12
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	3301      	adds	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	e001      	b.n	80054a8 <inc_lock+0xfc>
 80054a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054a8:	4906      	ldr	r1, [pc, #24]	; (80054c4 <inc_lock+0x118>)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	440b      	add	r3, r1
 80054b0:	330c      	adds	r3, #12
 80054b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3301      	adds	r3, #1
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	200001b0 	.word	0x200001b0

080054c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	607b      	str	r3, [r7, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d825      	bhi.n	8005528 <dec_lock+0x60>
		n = Files[i].ctr;
 80054dc:	4a17      	ldr	r2, [pc, #92]	; (800553c <dec_lock+0x74>)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	4413      	add	r3, r2
 80054e4:	330c      	adds	r3, #12
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80054ea:	89fb      	ldrh	r3, [r7, #14]
 80054ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f0:	d101      	bne.n	80054f6 <dec_lock+0x2e>
 80054f2:	2300      	movs	r3, #0
 80054f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80054f6:	89fb      	ldrh	r3, [r7, #14]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <dec_lock+0x3a>
 80054fc:	89fb      	ldrh	r3, [r7, #14]
 80054fe:	3b01      	subs	r3, #1
 8005500:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005502:	4a0e      	ldr	r2, [pc, #56]	; (800553c <dec_lock+0x74>)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	4413      	add	r3, r2
 800550a:	330c      	adds	r3, #12
 800550c:	89fa      	ldrh	r2, [r7, #14]
 800550e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005510:	89fb      	ldrh	r3, [r7, #14]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d105      	bne.n	8005522 <dec_lock+0x5a>
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <dec_lock+0x74>)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	4413      	add	r3, r2
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	737b      	strb	r3, [r7, #13]
 8005526:	e001      	b.n	800552c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005528:	2302      	movs	r3, #2
 800552a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800552c:	7b7b      	ldrb	r3, [r7, #13]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	200001b0 	.word	0x200001b0

08005540 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	e010      	b.n	8005570 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800554e:	4a0d      	ldr	r2, [pc, #52]	; (8005584 <clear_lock+0x44>)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	4413      	add	r3, r2
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	429a      	cmp	r2, r3
 800555c:	d105      	bne.n	800556a <clear_lock+0x2a>
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <clear_lock+0x44>)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	4413      	add	r3, r2
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3301      	adds	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d9eb      	bls.n	800554e <clear_lock+0xe>
	}
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	200001b0 	.word	0x200001b0

08005588 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	78db      	ldrb	r3, [r3, #3]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d034      	beq.n	8005606 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	7858      	ldrb	r0, [r3, #1]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80055ac:	2301      	movs	r3, #1
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	f7ff fd40 	bl	8005034 <disk_write>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	73fb      	strb	r3, [r7, #15]
 80055be:	e022      	b.n	8005606 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	1ad2      	subs	r2, r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d217      	bcs.n	8005606 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	789b      	ldrb	r3, [r3, #2]
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	e010      	b.n	8005600 <sync_window+0x78>
					wsect += fs->fsize;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	4413      	add	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	7858      	ldrb	r0, [r3, #1]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80055f2:	2301      	movs	r3, #1
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	f7ff fd1d 	bl	8005034 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d8eb      	bhi.n	80055de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005606:	7bfb      	ldrb	r3, [r7, #15]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d01b      	beq.n	8005660 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff ffad 	bl	8005588 <sync_window>
 800562e:	4603      	mov	r3, r0
 8005630:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d113      	bne.n	8005660 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	7858      	ldrb	r0, [r3, #1]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005642:	2301      	movs	r3, #1
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	f7ff fcd5 	bl	8004ff4 <disk_read>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005650:	f04f 33ff 	mov.w	r3, #4294967295
 8005654:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005656:	2301      	movs	r3, #1
 8005658:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff ff87 	bl	8005588 <sync_window>
 800567a:	4603      	mov	r3, r0
 800567c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d159      	bne.n	8005738 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b03      	cmp	r3, #3
 800568a:	d149      	bne.n	8005720 <sync_fs+0xb4>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	791b      	ldrb	r3, [r3, #4]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d145      	bne.n	8005720 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	899b      	ldrh	r3, [r3, #12]
 800569e:	461a      	mov	r2, r3
 80056a0:	2100      	movs	r1, #0
 80056a2:	f7ff fda8 	bl	80051f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3338      	adds	r3, #56	; 0x38
 80056aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80056ae:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fd37 	bl	8005126 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3338      	adds	r3, #56	; 0x38
 80056bc:	4921      	ldr	r1, [pc, #132]	; (8005744 <sync_fs+0xd8>)
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff fd4c 	bl	800515c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3338      	adds	r3, #56	; 0x38
 80056c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80056cc:	491e      	ldr	r1, [pc, #120]	; (8005748 <sync_fs+0xdc>)
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff fd44 	bl	800515c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3338      	adds	r3, #56	; 0x38
 80056d8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f7ff fd3a 	bl	800515c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3338      	adds	r3, #56	; 0x38
 80056ec:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	4619      	mov	r1, r3
 80056f6:	4610      	mov	r0, r2
 80056f8:	f7ff fd30 	bl	800515c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	7858      	ldrb	r0, [r3, #1]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005714:	2301      	movs	r3, #1
 8005716:	f7ff fc8d 	bl	8005034 <disk_write>
			fs->fsi_flag = 0;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	785b      	ldrb	r3, [r3, #1]
 8005724:	2200      	movs	r2, #0
 8005726:	2100      	movs	r1, #0
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff fca3 	bl	8005074 <disk_ioctl>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <sync_fs+0xcc>
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	41615252 	.word	0x41615252
 8005748:	61417272 	.word	0x61417272

0800574c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	3b02      	subs	r3, #2
 800575a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	3b02      	subs	r3, #2
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d301      	bcc.n	800576c <clust2sect+0x20>
 8005768:	2300      	movs	r3, #0
 800576a:	e008      	b.n	800577e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	895b      	ldrh	r3, [r3, #10]
 8005770:	461a      	mov	r2, r3
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	fb03 f202 	mul.w	r2, r3, r2
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	4413      	add	r3, r2
}
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b086      	sub	sp, #24
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d904      	bls.n	80057aa <get_fat+0x20>
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d302      	bcc.n	80057b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80057aa:	2301      	movs	r3, #1
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	e0bb      	b.n	8005928 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80057b0:	f04f 33ff 	mov.w	r3, #4294967295
 80057b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	f000 8083 	beq.w	80058c6 <get_fat+0x13c>
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	f300 80a7 	bgt.w	8005914 <get_fat+0x18a>
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d002      	beq.n	80057d0 <get_fat+0x46>
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d056      	beq.n	800587c <get_fat+0xf2>
 80057ce:	e0a1      	b.n	8005914 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	899b      	ldrh	r3, [r3, #12]
 80057e6:	4619      	mov	r1, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80057ee:	4413      	add	r3, r2
 80057f0:	4619      	mov	r1, r3
 80057f2:	6938      	ldr	r0, [r7, #16]
 80057f4:	f7ff ff0c 	bl	8005610 <move_window>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f040 808d 	bne.w	800591a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	60fa      	str	r2, [r7, #12]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	8992      	ldrh	r2, [r2, #12]
 800580a:	fbb3 f1f2 	udiv	r1, r3, r2
 800580e:	fb01 f202 	mul.w	r2, r1, r2
 8005812:	1a9b      	subs	r3, r3, r2
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4413      	add	r3, r2
 8005818:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800581c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	899b      	ldrh	r3, [r3, #12]
 8005826:	4619      	mov	r1, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	fbb3 f3f1 	udiv	r3, r3, r1
 800582e:	4413      	add	r3, r2
 8005830:	4619      	mov	r1, r3
 8005832:	6938      	ldr	r0, [r7, #16]
 8005834:	f7ff feec 	bl	8005610 <move_window>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d16f      	bne.n	800591e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	899b      	ldrh	r3, [r3, #12]
 8005842:	461a      	mov	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	fbb3 f1f2 	udiv	r1, r3, r2
 800584a:	fb01 f202 	mul.w	r2, r1, r2
 800584e:	1a9b      	subs	r3, r3, r2
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4413      	add	r3, r2
 8005854:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005858:	021b      	lsls	r3, r3, #8
 800585a:	461a      	mov	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4313      	orrs	r3, r2
 8005860:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <get_fat+0xe8>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	091b      	lsrs	r3, r3, #4
 8005870:	e002      	b.n	8005878 <get_fat+0xee>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005878:	617b      	str	r3, [r7, #20]
			break;
 800587a:	e055      	b.n	8005928 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	899b      	ldrh	r3, [r3, #12]
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	b29b      	uxth	r3, r3
 8005888:	4619      	mov	r1, r3
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005890:	4413      	add	r3, r2
 8005892:	4619      	mov	r1, r3
 8005894:	6938      	ldr	r0, [r7, #16]
 8005896:	f7ff febb 	bl	8005610 <move_window>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d140      	bne.n	8005922 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	8992      	ldrh	r2, [r2, #12]
 80058ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80058b2:	fb00 f202 	mul.w	r2, r0, r2
 80058b6:	1a9b      	subs	r3, r3, r2
 80058b8:	440b      	add	r3, r1
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff fbf8 	bl	80050b0 <ld_word>
 80058c0:	4603      	mov	r3, r0
 80058c2:	617b      	str	r3, [r7, #20]
			break;
 80058c4:	e030      	b.n	8005928 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	899b      	ldrh	r3, [r3, #12]
 80058ce:	089b      	lsrs	r3, r3, #2
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	4619      	mov	r1, r3
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80058da:	4413      	add	r3, r2
 80058dc:	4619      	mov	r1, r3
 80058de:	6938      	ldr	r0, [r7, #16]
 80058e0:	f7ff fe96 	bl	8005610 <move_window>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d11d      	bne.n	8005926 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	8992      	ldrh	r2, [r2, #12]
 80058f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80058fc:	fb00 f202 	mul.w	r2, r0, r2
 8005900:	1a9b      	subs	r3, r3, r2
 8005902:	440b      	add	r3, r1
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff fbeb 	bl	80050e0 <ld_dword>
 800590a:	4603      	mov	r3, r0
 800590c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005910:	617b      	str	r3, [r7, #20]
			break;
 8005912:	e009      	b.n	8005928 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005914:	2301      	movs	r3, #1
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	e006      	b.n	8005928 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800591a:	bf00      	nop
 800591c:	e004      	b.n	8005928 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800591e:	bf00      	nop
 8005920:	e002      	b.n	8005928 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005922:	bf00      	nop
 8005924:	e000      	b.n	8005928 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005926:	bf00      	nop
		}
	}

	return val;
 8005928:	697b      	ldr	r3, [r7, #20]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005932:	b590      	push	{r4, r7, lr}
 8005934:	b089      	sub	sp, #36	; 0x24
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800593e:	2302      	movs	r3, #2
 8005940:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b01      	cmp	r3, #1
 8005946:	f240 8109 	bls.w	8005b5c <put_fat+0x22a>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	429a      	cmp	r2, r3
 8005952:	f080 8103 	bcs.w	8005b5c <put_fat+0x22a>
		switch (fs->fs_type) {
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b03      	cmp	r3, #3
 800595c:	f000 80b6 	beq.w	8005acc <put_fat+0x19a>
 8005960:	2b03      	cmp	r3, #3
 8005962:	f300 80fb 	bgt.w	8005b5c <put_fat+0x22a>
 8005966:	2b01      	cmp	r3, #1
 8005968:	d003      	beq.n	8005972 <put_fat+0x40>
 800596a:	2b02      	cmp	r3, #2
 800596c:	f000 8083 	beq.w	8005a76 <put_fat+0x144>
 8005970:	e0f4      	b.n	8005b5c <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4413      	add	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	899b      	ldrh	r3, [r3, #12]
 8005988:	4619      	mov	r1, r3
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005990:	4413      	add	r3, r2
 8005992:	4619      	mov	r1, r3
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f7ff fe3b 	bl	8005610 <move_window>
 800599a:	4603      	mov	r3, r0
 800599c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800599e:	7ffb      	ldrb	r3, [r7, #31]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f040 80d4 	bne.w	8005b4e <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	61ba      	str	r2, [r7, #24]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	8992      	ldrh	r2, [r2, #12]
 80059b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80059ba:	fb00 f202 	mul.w	r2, r0, r2
 80059be:	1a9b      	subs	r3, r3, r2
 80059c0:	440b      	add	r3, r1
 80059c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00d      	beq.n	80059ea <put_fat+0xb8>
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	b25b      	sxtb	r3, r3
 80059d4:	f003 030f 	and.w	r3, r3, #15
 80059d8:	b25a      	sxtb	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	b25b      	sxtb	r3, r3
 80059e2:	4313      	orrs	r3, r2
 80059e4:	b25b      	sxtb	r3, r3
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	e001      	b.n	80059ee <put_fat+0xbc>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	899b      	ldrh	r3, [r3, #12]
 8005a00:	4619      	mov	r1, r3
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a08:	4413      	add	r3, r2
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f7ff fdff 	bl	8005610 <move_window>
 8005a12:	4603      	mov	r3, r0
 8005a14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a16:	7ffb      	ldrb	r3, [r7, #31]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f040 809a 	bne.w	8005b52 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	899b      	ldrh	r3, [r3, #12]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a30:	fb00 f202 	mul.w	r2, r0, r2
 8005a34:	1a9b      	subs	r3, r3, r2
 8005a36:	440b      	add	r3, r1
 8005a38:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <put_fat+0x11a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	091b      	lsrs	r3, r3, #4
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	e00e      	b.n	8005a6a <put_fat+0x138>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	b25b      	sxtb	r3, r3
 8005a52:	f023 030f 	bic.w	r3, r3, #15
 8005a56:	b25a      	sxtb	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	0a1b      	lsrs	r3, r3, #8
 8005a5c:	b25b      	sxtb	r3, r3
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	b25b      	sxtb	r3, r3
 8005a64:	4313      	orrs	r3, r2
 8005a66:	b25b      	sxtb	r3, r3
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	70da      	strb	r2, [r3, #3]
			break;
 8005a74:	e072      	b.n	8005b5c <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	899b      	ldrh	r3, [r3, #12]
 8005a7e:	085b      	lsrs	r3, r3, #1
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	4619      	mov	r1, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7ff fdbe 	bl	8005610 <move_window>
 8005a94:	4603      	mov	r3, r0
 8005a96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a98:	7ffb      	ldrb	r3, [r7, #31]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d15b      	bne.n	8005b56 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	8992      	ldrh	r2, [r2, #12]
 8005aac:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ab0:	fb00 f202 	mul.w	r2, r0, r2
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	b292      	uxth	r2, r2
 8005abc:	4611      	mov	r1, r2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff fb31 	bl	8005126 <st_word>
			fs->wflag = 1;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	70da      	strb	r2, [r3, #3]
			break;
 8005aca:	e047      	b.n	8005b5c <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	899b      	ldrh	r3, [r3, #12]
 8005ad4:	089b      	lsrs	r3, r3, #2
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	4619      	mov	r1, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ae0:	4413      	add	r3, r2
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f7ff fd93 	bl	8005610 <move_window>
 8005aea:	4603      	mov	r3, r0
 8005aec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005aee:	7ffb      	ldrb	r3, [r7, #31]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d132      	bne.n	8005b5a <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	8992      	ldrh	r2, [r2, #12]
 8005b08:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b0c:	fb00 f202 	mul.w	r2, r0, r2
 8005b10:	1a9b      	subs	r3, r3, r2
 8005b12:	440b      	add	r3, r1
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fae3 	bl	80050e0 <ld_dword>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005b20:	4323      	orrs	r3, r4
 8005b22:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	8992      	ldrh	r2, [r2, #12]
 8005b32:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b36:	fb00 f202 	mul.w	r2, r0, r2
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff fb0b 	bl	800515c <st_dword>
			fs->wflag = 1;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	70da      	strb	r2, [r3, #3]
			break;
 8005b4c:	e006      	b.n	8005b5c <put_fat+0x22a>
			if (res != FR_OK) break;
 8005b4e:	bf00      	nop
 8005b50:	e004      	b.n	8005b5c <put_fat+0x22a>
			if (res != FR_OK) break;
 8005b52:	bf00      	nop
 8005b54:	e002      	b.n	8005b5c <put_fat+0x22a>
			if (res != FR_OK) break;
 8005b56:	bf00      	nop
 8005b58:	e000      	b.n	8005b5c <put_fat+0x22a>
			if (res != FR_OK) break;
 8005b5a:	bf00      	nop
		}
	}
	return res;
 8005b5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3724      	adds	r7, #36	; 0x24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd90      	pop	{r4, r7, pc}

08005b66 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b088      	sub	sp, #32
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d904      	bls.n	8005b8c <remove_chain+0x26>
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d301      	bcc.n	8005b90 <remove_chain+0x2a>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e04b      	b.n	8005c28 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00c      	beq.n	8005bb0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005b96:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	69b8      	ldr	r0, [r7, #24]
 8005b9e:	f7ff fec8 	bl	8005932 <put_fat>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005ba6:	7ffb      	ldrb	r3, [r7, #31]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <remove_chain+0x4a>
 8005bac:	7ffb      	ldrb	r3, [r7, #31]
 8005bae:	e03b      	b.n	8005c28 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7ff fde9 	bl	800578a <get_fat>
 8005bb8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d031      	beq.n	8005c24 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <remove_chain+0x64>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e02e      	b.n	8005c28 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d101      	bne.n	8005bd6 <remove_chain+0x70>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e028      	b.n	8005c28 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	69b8      	ldr	r0, [r7, #24]
 8005bdc:	f7ff fea9 	bl	8005932 <put_fat>
 8005be0:	4603      	mov	r3, r0
 8005be2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005be4:	7ffb      	ldrb	r3, [r7, #31]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <remove_chain+0x88>
 8005bea:	7ffb      	ldrb	r3, [r7, #31]
 8005bec:	e01c      	b.n	8005c28 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	3b02      	subs	r3, #2
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d20b      	bcs.n	8005c14 <remove_chain+0xae>
			fs->free_clst++;
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	791b      	ldrb	r3, [r3, #4]
 8005c0a:	f043 0301 	orr.w	r3, r3, #1
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d3c6      	bcc.n	8005bb0 <remove_chain+0x4a>
 8005c22:	e000      	b.n	8005c26 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005c24:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3720      	adds	r7, #32
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10d      	bne.n	8005c62 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d004      	beq.n	8005c5c <create_chain+0x2c>
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d31b      	bcc.n	8005c94 <create_chain+0x64>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	e018      	b.n	8005c94 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fd90 	bl	800578a <get_fat>
 8005c6a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d801      	bhi.n	8005c76 <create_chain+0x46>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e070      	b.n	8005d58 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7c:	d101      	bne.n	8005c82 <create_chain+0x52>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	e06a      	b.n	8005d58 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d201      	bcs.n	8005c90 <create_chain+0x60>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	e063      	b.n	8005d58 <create_chain+0x128>
		scl = clst;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d307      	bcc.n	8005cb8 <create_chain+0x88>
				ncl = 2;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d901      	bls.n	8005cb8 <create_chain+0x88>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	e04f      	b.n	8005d58 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005cb8:	69f9      	ldr	r1, [r7, #28]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7ff fd65 	bl	800578a <get_fat>
 8005cc0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00e      	beq.n	8005ce6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d003      	beq.n	8005cd6 <create_chain+0xa6>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d101      	bne.n	8005cda <create_chain+0xaa>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	e03e      	b.n	8005d58 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d1da      	bne.n	8005c98 <create_chain+0x68>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e038      	b.n	8005d58 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005ce6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cec:	69f9      	ldr	r1, [r7, #28]
 8005cee:	6938      	ldr	r0, [r7, #16]
 8005cf0:	f7ff fe1f 	bl	8005932 <put_fat>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <create_chain+0xe2>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d006      	beq.n	8005d12 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	6938      	ldr	r0, [r7, #16]
 8005d0a:	f7ff fe12 	bl	8005932 <put_fat>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d116      	bne.n	8005d46 <create_chain+0x116>
		fs->last_clst = ncl;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	3b02      	subs	r3, #2
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d804      	bhi.n	8005d36 <create_chain+0x106>
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	1e5a      	subs	r2, r3, #1
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	791b      	ldrb	r3, [r3, #4]
 8005d3a:	f043 0301 	orr.w	r3, r3, #1
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	711a      	strb	r2, [r3, #4]
 8005d44:	e007      	b.n	8005d56 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d102      	bne.n	8005d52 <create_chain+0x122>
 8005d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d50:	e000      	b.n	8005d54 <create_chain+0x124>
 8005d52:	2301      	movs	r3, #1
 8005d54:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005d56:	69fb      	ldr	r3, [r7, #28]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3720      	adds	r7, #32
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	3304      	adds	r3, #4
 8005d76:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	899b      	ldrh	r3, [r3, #12]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	8952      	ldrh	r2, [r2, #10]
 8005d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1d1a      	adds	r2, r3, #4
 8005d92:	613a      	str	r2, [r7, #16]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <clmt_clust+0x42>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e010      	b.n	8005dc4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d307      	bcc.n	8005dba <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	3304      	adds	r3, #4
 8005db6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005db8:	e7e9      	b.n	8005d8e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005dba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	4413      	add	r3, r2
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005de6:	d204      	bcs.n	8005df2 <dir_sdi+0x22>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005df2:	2302      	movs	r3, #2
 8005df4:	e071      	b.n	8005eda <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d106      	bne.n	8005e16 <dir_sdi+0x46>
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d902      	bls.n	8005e16 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10c      	bne.n	8005e36 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	8912      	ldrh	r2, [r2, #8]
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d301      	bcc.n	8005e2c <dir_sdi+0x5c>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e056      	b.n	8005eda <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	61da      	str	r2, [r3, #28]
 8005e34:	e02d      	b.n	8005e92 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	895b      	ldrh	r3, [r3, #10]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	899b      	ldrh	r3, [r3, #12]
 8005e40:	fb02 f303 	mul.w	r3, r2, r3
 8005e44:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e46:	e019      	b.n	8005e7c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6979      	ldr	r1, [r7, #20]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff fc9c 	bl	800578a <get_fat>
 8005e52:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5a:	d101      	bne.n	8005e60 <dir_sdi+0x90>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e03c      	b.n	8005eda <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d904      	bls.n	8005e70 <dir_sdi+0xa0>
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d301      	bcc.n	8005e74 <dir_sdi+0xa4>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e032      	b.n	8005eda <dir_sdi+0x10a>
			ofs -= csz;
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d2e1      	bcs.n	8005e48 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005e84:	6979      	ldr	r1, [r7, #20]
 8005e86:	6938      	ldr	r0, [r7, #16]
 8005e88:	f7ff fc60 	bl	800574c <clust2sect>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <dir_sdi+0xd4>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e01a      	b.n	8005eda <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	899b      	ldrh	r3, [r3, #12]
 8005eac:	4619      	mov	r1, r3
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005eb4:	441a      	add	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	899b      	ldrh	r3, [r3, #12]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ecc:	fb00 f202 	mul.w	r2, r0, r2
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	18ca      	adds	r2, r1, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b086      	sub	sp, #24
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	3320      	adds	r3, #32
 8005ef8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <dir_next+0x28>
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f08:	d301      	bcc.n	8005f0e <dir_next+0x2c>
 8005f0a:	2304      	movs	r3, #4
 8005f0c:	e0bb      	b.n	8006086 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	899b      	ldrh	r3, [r3, #12]
 8005f12:	461a      	mov	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f1a:	fb01 f202 	mul.w	r2, r1, r2
 8005f1e:	1a9b      	subs	r3, r3, r2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f040 809d 	bne.w	8006060 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10b      	bne.n	8005f50 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	8912      	ldrh	r2, [r2, #8]
 8005f40:	4293      	cmp	r3, r2
 8005f42:	f0c0 808d 	bcc.w	8006060 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	61da      	str	r2, [r3, #28]
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	e09a      	b.n	8006086 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	899b      	ldrh	r3, [r3, #12]
 8005f54:	461a      	mov	r2, r3
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	8952      	ldrh	r2, [r2, #10]
 8005f60:	3a01      	subs	r2, #1
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d17b      	bne.n	8006060 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4610      	mov	r0, r2
 8005f72:	f7ff fc0a 	bl	800578a <get_fat>
 8005f76:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d801      	bhi.n	8005f82 <dir_next+0xa0>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e081      	b.n	8006086 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d101      	bne.n	8005f8e <dir_next+0xac>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e07b      	b.n	8006086 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d359      	bcc.n	800604c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	61da      	str	r2, [r3, #28]
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	e06e      	b.n	8006086 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	f7ff fe3d 	bl	8005c30 <create_chain>
 8005fb6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <dir_next+0xe0>
 8005fbe:	2307      	movs	r3, #7
 8005fc0:	e061      	b.n	8006086 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <dir_next+0xea>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e05c      	b.n	8006086 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd2:	d101      	bne.n	8005fd8 <dir_next+0xf6>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e056      	b.n	8006086 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f7ff fad5 	bl	8005588 <sync_window>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <dir_next+0x106>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e04e      	b.n	8006086 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	899b      	ldrh	r3, [r3, #12]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	f7ff f8fe 	bl	80051f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	613b      	str	r3, [r7, #16]
 8005ffe:	6979      	ldr	r1, [r7, #20]
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff fba3 	bl	800574c <clust2sect>
 8006006:	4602      	mov	r2, r0
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	635a      	str	r2, [r3, #52]	; 0x34
 800600c:	e012      	b.n	8006034 <dir_next+0x152>
						fs->wflag = 1;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff fab7 	bl	8005588 <sync_window>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <dir_next+0x142>
 8006020:	2301      	movs	r3, #1
 8006022:	e030      	b.n	8006086 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	3301      	adds	r3, #1
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	635a      	str	r2, [r3, #52]	; 0x34
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	895b      	ldrh	r3, [r3, #10]
 8006038:	461a      	mov	r2, r3
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	4293      	cmp	r3, r2
 800603e:	d3e6      	bcc.n	800600e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad2      	subs	r2, r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006052:	6979      	ldr	r1, [r7, #20]
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f7ff fb79 	bl	800574c <clust2sect>
 800605a:	4602      	mov	r2, r0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	899b      	ldrh	r3, [r3, #12]
 8006070:	461a      	mov	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	fbb3 f0f2 	udiv	r0, r3, r2
 8006078:	fb00 f202 	mul.w	r2, r0, r2
 800607c:	1a9b      	subs	r3, r3, r2
 800607e:	18ca      	adds	r2, r1, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b086      	sub	sp, #24
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800609e:	2100      	movs	r1, #0
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff fe95 	bl	8005dd0 <dir_sdi>
 80060a6:	4603      	mov	r3, r0
 80060a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d12b      	bne.n	8006108 <dir_alloc+0x7a>
		n = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	4619      	mov	r1, r3
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f7ff faa8 	bl	8005610 <move_window>
 80060c0:	4603      	mov	r3, r0
 80060c2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d11d      	bne.n	8006106 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2be5      	cmp	r3, #229	; 0xe5
 80060d2:	d004      	beq.n	80060de <dir_alloc+0x50>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d107      	bne.n	80060ee <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	3301      	adds	r3, #1
 80060e2:	613b      	str	r3, [r7, #16]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d102      	bne.n	80060f2 <dir_alloc+0x64>
 80060ec:	e00c      	b.n	8006108 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80060ee:	2300      	movs	r3, #0
 80060f0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80060f2:	2101      	movs	r1, #1
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff fef4 	bl	8005ee2 <dir_next>
 80060fa:	4603      	mov	r3, r0
 80060fc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0d7      	beq.n	80060b4 <dir_alloc+0x26>
 8006104:	e000      	b.n	8006108 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006106:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006108:	7dfb      	ldrb	r3, [r7, #23]
 800610a:	2b04      	cmp	r3, #4
 800610c:	d101      	bne.n	8006112 <dir_alloc+0x84>
 800610e:	2307      	movs	r3, #7
 8006110:	75fb      	strb	r3, [r7, #23]
	return res;
 8006112:	7dfb      	ldrb	r3, [r7, #23]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	331a      	adds	r3, #26
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe ffc0 	bl	80050b0 <ld_word>
 8006130:	4603      	mov	r3, r0
 8006132:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b03      	cmp	r3, #3
 800613a:	d109      	bne.n	8006150 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	3314      	adds	r3, #20
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe ffb5 	bl	80050b0 <ld_word>
 8006146:	4603      	mov	r3, r0
 8006148:	041b      	lsls	r3, r3, #16
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006150:	68fb      	ldr	r3, [r7, #12]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b084      	sub	sp, #16
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	331a      	adds	r3, #26
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	b292      	uxth	r2, r2
 800616e:	4611      	mov	r1, r2
 8006170:	4618      	mov	r0, r3
 8006172:	f7fe ffd8 	bl	8005126 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b03      	cmp	r3, #3
 800617c:	d109      	bne.n	8006192 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f103 0214 	add.w	r2, r3, #20
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	0c1b      	lsrs	r3, r3, #16
 8006188:	b29b      	uxth	r3, r3
 800618a:	4619      	mov	r1, r3
 800618c:	4610      	mov	r0, r2
 800618e:	f7fe ffca 	bl	8005126 <st_word>
	}
}
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	331a      	adds	r3, #26
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe ff80 	bl	80050b0 <ld_word>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <cmp_lfn+0x1e>
 80061b6:	2300      	movs	r3, #0
 80061b8:	e059      	b.n	800626e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061c2:	1e5a      	subs	r2, r3, #1
 80061c4:	4613      	mov	r3, r2
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80061d0:	2301      	movs	r3, #1
 80061d2:	81fb      	strh	r3, [r7, #14]
 80061d4:	2300      	movs	r3, #0
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	e033      	b.n	8006242 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80061da:	4a27      	ldr	r2, [pc, #156]	; (8006278 <cmp_lfn+0xdc>)
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	4413      	add	r3, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fe ff61 	bl	80050b0 <ld_word>
 80061ee:	4603      	mov	r3, r0
 80061f0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80061f2:	89fb      	ldrh	r3, [r7, #14]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01a      	beq.n	800622e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2bfe      	cmp	r3, #254	; 0xfe
 80061fc:	d812      	bhi.n	8006224 <cmp_lfn+0x88>
 80061fe:	89bb      	ldrh	r3, [r7, #12]
 8006200:	4618      	mov	r0, r3
 8006202:	f001 fe11 	bl	8007e28 <ff_wtoupper>
 8006206:	4603      	mov	r3, r0
 8006208:	461c      	mov	r4, r3
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	617a      	str	r2, [r7, #20]
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	4413      	add	r3, r2
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	4618      	mov	r0, r3
 800621a:	f001 fe05 	bl	8007e28 <ff_wtoupper>
 800621e:	4603      	mov	r3, r0
 8006220:	429c      	cmp	r4, r3
 8006222:	d001      	beq.n	8006228 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006224:	2300      	movs	r3, #0
 8006226:	e022      	b.n	800626e <cmp_lfn+0xd2>
			}
			wc = uc;
 8006228:	89bb      	ldrh	r3, [r7, #12]
 800622a:	81fb      	strh	r3, [r7, #14]
 800622c:	e006      	b.n	800623c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800622e:	89bb      	ldrh	r3, [r7, #12]
 8006230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006234:	4293      	cmp	r3, r2
 8006236:	d001      	beq.n	800623c <cmp_lfn+0xa0>
 8006238:	2300      	movs	r3, #0
 800623a:	e018      	b.n	800626e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	3301      	adds	r3, #1
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	2b0c      	cmp	r3, #12
 8006246:	d9c8      	bls.n	80061da <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <cmp_lfn+0xd0>
 8006254:	89fb      	ldrh	r3, [r7, #14]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d008      	beq.n	800626c <cmp_lfn+0xd0>
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <cmp_lfn+0xd0>
 8006268:	2300      	movs	r3, #0
 800626a:	e000      	b.n	800626e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800626c:	2301      	movs	r3, #1
}
 800626e:	4618      	mov	r0, r3
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	bd90      	pop	{r4, r7, pc}
 8006276:	bf00      	nop
 8006278:	0800812c 	.word	0x0800812c

0800627c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	4611      	mov	r1, r2
 8006288:	461a      	mov	r2, r3
 800628a:	460b      	mov	r3, r1
 800628c:	71fb      	strb	r3, [r7, #7]
 800628e:	4613      	mov	r3, r2
 8006290:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	330d      	adds	r3, #13
 8006296:	79ba      	ldrb	r2, [r7, #6]
 8006298:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	330b      	adds	r3, #11
 800629e:	220f      	movs	r2, #15
 80062a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	330c      	adds	r3, #12
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	331a      	adds	r3, #26
 80062ae:	2100      	movs	r1, #0
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fe ff38 	bl	8005126 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80062b6:	79fb      	ldrb	r3, [r7, #7]
 80062b8:	1e5a      	subs	r2, r3, #1
 80062ba:	4613      	mov	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	82fb      	strh	r3, [r7, #22]
 80062ca:	2300      	movs	r3, #0
 80062cc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80062ce:	8afb      	ldrh	r3, [r7, #22]
 80062d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d007      	beq.n	80062e8 <put_lfn+0x6c>
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	61fa      	str	r2, [r7, #28]
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80062e8:	4a17      	ldr	r2, [pc, #92]	; (8006348 <put_lfn+0xcc>)
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	4413      	add	r3, r2
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4413      	add	r3, r2
 80062f6:	8afa      	ldrh	r2, [r7, #22]
 80062f8:	4611      	mov	r1, r2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe ff13 	bl	8005126 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006300:	8afb      	ldrh	r3, [r7, #22]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d102      	bne.n	800630c <put_lfn+0x90>
 8006306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800630a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	3301      	adds	r3, #1
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b0c      	cmp	r3, #12
 8006316:	d9da      	bls.n	80062ce <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006318:	8afb      	ldrh	r3, [r7, #22]
 800631a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800631e:	4293      	cmp	r3, r2
 8006320:	d006      	beq.n	8006330 <put_lfn+0xb4>
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d103      	bne.n	8006338 <put_lfn+0xbc>
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006336:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	79fa      	ldrb	r2, [r7, #7]
 800633c:	701a      	strb	r2, [r3, #0]
}
 800633e:	bf00      	nop
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	0800812c 	.word	0x0800812c

0800634c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08c      	sub	sp, #48	; 0x30
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800635a:	220b      	movs	r2, #11
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f7fe ff28 	bl	80051b4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b05      	cmp	r3, #5
 8006368:	d92b      	bls.n	80063c2 <gen_numname+0x76>
		sr = seq;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800636e:	e022      	b.n	80063b6 <gen_numname+0x6a>
			wc = *lfn++;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	1c9a      	adds	r2, r3, #2
 8006374:	607a      	str	r2, [r7, #4]
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800637a:	2300      	movs	r3, #0
 800637c:	62bb      	str	r3, [r7, #40]	; 0x28
 800637e:	e017      	b.n	80063b0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	005a      	lsls	r2, r3, #1
 8006384:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	4413      	add	r3, r2
 800638c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800638e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <gen_numname+0x5e>
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80063a4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80063a8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	3301      	adds	r3, #1
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	2b0f      	cmp	r3, #15
 80063b4:	d9e4      	bls.n	8006380 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1d8      	bne.n	8006370 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80063c2:	2307      	movs	r3, #7
 80063c4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	3330      	adds	r3, #48	; 0x30
 80063d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80063d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063da:	2b39      	cmp	r3, #57	; 0x39
 80063dc:	d904      	bls.n	80063e8 <gen_numname+0x9c>
 80063de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063e2:	3307      	adds	r3, #7
 80063e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	1e5a      	subs	r2, r3, #1
 80063ec:	62ba      	str	r2, [r7, #40]	; 0x28
 80063ee:	3330      	adds	r3, #48	; 0x30
 80063f0:	443b      	add	r3, r7
 80063f2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80063f6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	091b      	lsrs	r3, r3, #4
 80063fe:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1df      	bne.n	80063c6 <gen_numname+0x7a>
	ns[i] = '~';
 8006406:	f107 0214 	add.w	r2, r7, #20
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	4413      	add	r3, r2
 800640e:	227e      	movs	r2, #126	; 0x7e
 8006410:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006412:	2300      	movs	r3, #0
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
 8006416:	e002      	b.n	800641e <gen_numname+0xd2>
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	3301      	adds	r3, #1
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
 800641e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	429a      	cmp	r2, r3
 8006424:	d205      	bcs.n	8006432 <gen_numname+0xe6>
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	4413      	add	r3, r2
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b20      	cmp	r3, #32
 8006430:	d1f2      	bne.n	8006418 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	2b07      	cmp	r3, #7
 8006436:	d807      	bhi.n	8006448 <gen_numname+0xfc>
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	62ba      	str	r2, [r7, #40]	; 0x28
 800643e:	3330      	adds	r3, #48	; 0x30
 8006440:	443b      	add	r3, r7
 8006442:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006446:	e000      	b.n	800644a <gen_numname+0xfe>
 8006448:	2120      	movs	r1, #32
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	627a      	str	r2, [r7, #36]	; 0x24
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	460a      	mov	r2, r1
 8006456:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	2b07      	cmp	r3, #7
 800645c:	d9e9      	bls.n	8006432 <gen_numname+0xe6>
}
 800645e:	bf00      	nop
 8006460:	bf00      	nop
 8006462:	3730      	adds	r7, #48	; 0x30
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006470:	2300      	movs	r3, #0
 8006472:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006474:	230b      	movs	r3, #11
 8006476:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	b2da      	uxtb	r2, r3
 800647c:	0852      	lsrs	r2, r2, #1
 800647e:	01db      	lsls	r3, r3, #7
 8006480:	4313      	orrs	r3, r2
 8006482:	b2da      	uxtb	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	1c59      	adds	r1, r3, #1
 8006488:	6079      	str	r1, [r7, #4]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	4413      	add	r3, r2
 800648e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	3b01      	subs	r3, #1
 8006494:	60bb      	str	r3, [r7, #8]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1ed      	bne.n	8006478 <sum_sfn+0x10>
	return sum;
 800649c:	7bfb      	ldrb	r3, [r7, #15]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b086      	sub	sp, #24
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80064b8:	2100      	movs	r1, #0
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fc88 	bl	8005dd0 <dir_sdi>
 80064c0:	4603      	mov	r3, r0
 80064c2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <dir_find+0x24>
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
 80064cc:	e0a9      	b.n	8006622 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80064ce:	23ff      	movs	r3, #255	; 0xff
 80064d0:	753b      	strb	r3, [r7, #20]
 80064d2:	7d3b      	ldrb	r3, [r7, #20]
 80064d4:	757b      	strb	r3, [r7, #21]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f04f 32ff 	mov.w	r2, #4294967295
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	4619      	mov	r1, r3
 80064e4:	6938      	ldr	r0, [r7, #16]
 80064e6:	f7ff f893 	bl	8005610 <move_window>
 80064ea:	4603      	mov	r3, r0
 80064ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f040 8090 	bne.w	8006616 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80064fe:	7dbb      	ldrb	r3, [r7, #22]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d102      	bne.n	800650a <dir_find+0x60>
 8006504:	2304      	movs	r3, #4
 8006506:	75fb      	strb	r3, [r7, #23]
 8006508:	e08a      	b.n	8006620 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	330b      	adds	r3, #11
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006516:	73fb      	strb	r3, [r7, #15]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	7bfa      	ldrb	r2, [r7, #15]
 800651c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800651e:	7dbb      	ldrb	r3, [r7, #22]
 8006520:	2be5      	cmp	r3, #229	; 0xe5
 8006522:	d007      	beq.n	8006534 <dir_find+0x8a>
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <dir_find+0x98>
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	2b0f      	cmp	r3, #15
 8006532:	d006      	beq.n	8006542 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006534:	23ff      	movs	r3, #255	; 0xff
 8006536:	757b      	strb	r3, [r7, #21]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f04f 32ff 	mov.w	r2, #4294967295
 800653e:	631a      	str	r2, [r3, #48]	; 0x30
 8006540:	e05e      	b.n	8006600 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	2b0f      	cmp	r3, #15
 8006546:	d136      	bne.n	80065b6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d154      	bne.n	8006600 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006556:	7dbb      	ldrb	r3, [r7, #22]
 8006558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00d      	beq.n	800657c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	7b5b      	ldrb	r3, [r3, #13]
 8006566:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006568:	7dbb      	ldrb	r3, [r7, #22]
 800656a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800656e:	75bb      	strb	r3, [r7, #22]
 8006570:	7dbb      	ldrb	r3, [r7, #22]
 8006572:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	695a      	ldr	r2, [r3, #20]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800657c:	7dba      	ldrb	r2, [r7, #22]
 800657e:	7d7b      	ldrb	r3, [r7, #21]
 8006580:	429a      	cmp	r2, r3
 8006582:	d115      	bne.n	80065b0 <dir_find+0x106>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	330d      	adds	r3, #13
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	7d3a      	ldrb	r2, [r7, #20]
 800658e:	429a      	cmp	r2, r3
 8006590:	d10e      	bne.n	80065b0 <dir_find+0x106>
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	691a      	ldr	r2, [r3, #16]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	4619      	mov	r1, r3
 800659c:	4610      	mov	r0, r2
 800659e:	f7ff fdfd 	bl	800619c <cmp_lfn>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <dir_find+0x106>
 80065a8:	7d7b      	ldrb	r3, [r7, #21]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	e000      	b.n	80065b2 <dir_find+0x108>
 80065b0:	23ff      	movs	r3, #255	; 0xff
 80065b2:	757b      	strb	r3, [r7, #21]
 80065b4:	e024      	b.n	8006600 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80065b6:	7d7b      	ldrb	r3, [r7, #21]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <dir_find+0x126>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7ff ff51 	bl	8006468 <sum_sfn>
 80065c6:	4603      	mov	r3, r0
 80065c8:	461a      	mov	r2, r3
 80065ca:	7d3b      	ldrb	r3, [r7, #20]
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d024      	beq.n	800661a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <dir_find+0x14a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a18      	ldr	r0, [r3, #32]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3324      	adds	r3, #36	; 0x24
 80065e6:	220b      	movs	r2, #11
 80065e8:	4619      	mov	r1, r3
 80065ea:	f7fe fe1f 	bl	800522c <mem_cmp>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d014      	beq.n	800661e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80065f4:	23ff      	movs	r3, #255	; 0xff
 80065f6:	757b      	strb	r3, [r7, #21]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f04f 32ff 	mov.w	r2, #4294967295
 80065fe:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006600:	2100      	movs	r1, #0
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff fc6d 	bl	8005ee2 <dir_next>
 8006608:	4603      	mov	r3, r0
 800660a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f43f af65 	beq.w	80064de <dir_find+0x34>
 8006614:	e004      	b.n	8006620 <dir_find+0x176>
		if (res != FR_OK) break;
 8006616:	bf00      	nop
 8006618:	e002      	b.n	8006620 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800661a:	bf00      	nop
 800661c:	e000      	b.n	8006620 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800661e:	bf00      	nop

	return res;
 8006620:	7dfb      	ldrb	r3, [r7, #23]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08c      	sub	sp, #48	; 0x30
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006640:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <dir_register+0x20>
 8006648:	2306      	movs	r3, #6
 800664a:	e0e0      	b.n	800680e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800664c:	2300      	movs	r3, #0
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
 8006650:	e002      	b.n	8006658 <dir_register+0x2c>
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	3301      	adds	r3, #1
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	4413      	add	r3, r2
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f4      	bne.n	8006652 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800666e:	f107 030c 	add.w	r3, r7, #12
 8006672:	220c      	movs	r2, #12
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe fd9d 	bl	80051b4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d032      	beq.n	80066ea <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2240      	movs	r2, #64	; 0x40
 8006688:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800668c:	2301      	movs	r3, #1
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006690:	e016      	b.n	80066c0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	f107 010c 	add.w	r1, r7, #12
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	f7ff fe53 	bl	800634c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff feff 	bl	80064aa <dir_find>
 80066ac:	4603      	mov	r3, r0
 80066ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80066b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d106      	bne.n	80066c8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	3301      	adds	r3, #1
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	2b63      	cmp	r3, #99	; 0x63
 80066c4:	d9e5      	bls.n	8006692 <dir_register+0x66>
 80066c6:	e000      	b.n	80066ca <dir_register+0x9e>
			if (res != FR_OK) break;
 80066c8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	2b64      	cmp	r3, #100	; 0x64
 80066ce:	d101      	bne.n	80066d4 <dir_register+0xa8>
 80066d0:	2307      	movs	r3, #7
 80066d2:	e09c      	b.n	800680e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80066d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d002      	beq.n	80066e2 <dir_register+0xb6>
 80066dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066e0:	e095      	b.n	800680e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80066e2:	7dfa      	ldrb	r2, [r7, #23]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d007      	beq.n	8006704 <dir_register+0xd8>
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	330c      	adds	r3, #12
 80066f8:	4a47      	ldr	r2, [pc, #284]	; (8006818 <dir_register+0x1ec>)
 80066fa:	fba2 2303 	umull	r2, r3, r2, r3
 80066fe:	089b      	lsrs	r3, r3, #2
 8006700:	3301      	adds	r3, #1
 8006702:	e000      	b.n	8006706 <dir_register+0xda>
 8006704:	2301      	movs	r3, #1
 8006706:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006708:	6a39      	ldr	r1, [r7, #32]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7ff fcbf 	bl	800608e <dir_alloc>
 8006710:	4603      	mov	r3, r0
 8006712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006716:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800671a:	2b00      	cmp	r3, #0
 800671c:	d148      	bne.n	80067b0 <dir_register+0x184>
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	3b01      	subs	r3, #1
 8006722:	623b      	str	r3, [r7, #32]
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d042      	beq.n	80067b0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	695a      	ldr	r2, [r3, #20]
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	015b      	lsls	r3, r3, #5
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff fb4a 	bl	8005dd0 <dir_sdi>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006746:	2b00      	cmp	r3, #0
 8006748:	d132      	bne.n	80067b0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	3324      	adds	r3, #36	; 0x24
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff fe8a 	bl	8006468 <sum_sfn>
 8006754:	4603      	mov	r3, r0
 8006756:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	4619      	mov	r1, r3
 800675e:	69f8      	ldr	r0, [r7, #28]
 8006760:	f7fe ff56 	bl	8005610 <move_window>
 8006764:	4603      	mov	r3, r0
 8006766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800676a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800676e:	2b00      	cmp	r3, #0
 8006770:	d11d      	bne.n	80067ae <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	6918      	ldr	r0, [r3, #16]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a19      	ldr	r1, [r3, #32]
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	b2da      	uxtb	r2, r3
 800677e:	7efb      	ldrb	r3, [r7, #27]
 8006780:	f7ff fd7c 	bl	800627c <put_lfn>
				fs->wflag = 1;
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	2201      	movs	r2, #1
 8006788:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800678a:	2100      	movs	r1, #0
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff fba8 	bl	8005ee2 <dir_next>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006798:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800679c:	2b00      	cmp	r3, #0
 800679e:	d107      	bne.n	80067b0 <dir_register+0x184>
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	623b      	str	r3, [r7, #32]
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1d5      	bne.n	8006758 <dir_register+0x12c>
 80067ac:	e000      	b.n	80067b0 <dir_register+0x184>
				if (res != FR_OK) break;
 80067ae:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80067b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d128      	bne.n	800680a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	4619      	mov	r1, r3
 80067be:	69f8      	ldr	r0, [r7, #28]
 80067c0:	f7fe ff26 	bl	8005610 <move_window>
 80067c4:	4603      	mov	r3, r0
 80067c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80067ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d11b      	bne.n	800680a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	2220      	movs	r2, #32
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe fd0b 	bl	80051f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a18      	ldr	r0, [r3, #32]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3324      	adds	r3, #36	; 0x24
 80067e8:	220b      	movs	r2, #11
 80067ea:	4619      	mov	r1, r3
 80067ec:	f7fe fce2 	bl	80051b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	330c      	adds	r3, #12
 80067fc:	f002 0218 	and.w	r2, r2, #24
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	2201      	movs	r2, #1
 8006808:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800680a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800680e:	4618      	mov	r0, r3
 8006810:	3730      	adds	r7, #48	; 0x30
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	4ec4ec4f 	.word	0x4ec4ec4f

0800681c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08a      	sub	sp, #40	; 0x28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	61ba      	str	r2, [r7, #24]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4413      	add	r3, r2
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800684a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800684c:	2b1f      	cmp	r3, #31
 800684e:	d940      	bls.n	80068d2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006850:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006852:	2b2f      	cmp	r3, #47	; 0x2f
 8006854:	d006      	beq.n	8006864 <create_name+0x48>
 8006856:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006858:	2b5c      	cmp	r3, #92	; 0x5c
 800685a:	d110      	bne.n	800687e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800685c:	e002      	b.n	8006864 <create_name+0x48>
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	3301      	adds	r3, #1
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	4413      	add	r3, r2
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b2f      	cmp	r3, #47	; 0x2f
 800686e:	d0f6      	beq.n	800685e <create_name+0x42>
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	4413      	add	r3, r2
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b5c      	cmp	r3, #92	; 0x5c
 800687a:	d0f0      	beq.n	800685e <create_name+0x42>
			break;
 800687c:	e02a      	b.n	80068d4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2bfe      	cmp	r3, #254	; 0xfe
 8006882:	d901      	bls.n	8006888 <create_name+0x6c>
 8006884:	2306      	movs	r3, #6
 8006886:	e17d      	b.n	8006b84 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800688a:	b2db      	uxtb	r3, r3
 800688c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800688e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006890:	2101      	movs	r1, #1
 8006892:	4618      	mov	r0, r3
 8006894:	f001 fa8c 	bl	8007db0 <ff_convert>
 8006898:	4603      	mov	r3, r0
 800689a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800689c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <create_name+0x8a>
 80068a2:	2306      	movs	r3, #6
 80068a4:	e16e      	b.n	8006b84 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80068a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068a8:	2b7f      	cmp	r3, #127	; 0x7f
 80068aa:	d809      	bhi.n	80068c0 <create_name+0xa4>
 80068ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068ae:	4619      	mov	r1, r3
 80068b0:	488d      	ldr	r0, [pc, #564]	; (8006ae8 <create_name+0x2cc>)
 80068b2:	f7fe fce2 	bl	800527a <chk_chr>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <create_name+0xa4>
 80068bc:	2306      	movs	r3, #6
 80068be:	e161      	b.n	8006b84 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	617a      	str	r2, [r7, #20]
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068ce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80068d0:	e7b4      	b.n	800683c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80068d2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	441a      	add	r2, r3
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80068de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068e0:	2b1f      	cmp	r3, #31
 80068e2:	d801      	bhi.n	80068e8 <create_name+0xcc>
 80068e4:	2304      	movs	r3, #4
 80068e6:	e000      	b.n	80068ea <create_name+0xce>
 80068e8:	2300      	movs	r3, #0
 80068ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80068ee:	e011      	b.n	8006914 <create_name+0xf8>
		w = lfn[di - 1];
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80068f6:	3b01      	subs	r3, #1
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006904:	2b20      	cmp	r3, #32
 8006906:	d002      	beq.n	800690e <create_name+0xf2>
 8006908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800690a:	2b2e      	cmp	r3, #46	; 0x2e
 800690c:	d106      	bne.n	800691c <create_name+0x100>
		di--;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	3b01      	subs	r3, #1
 8006912:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1ea      	bne.n	80068f0 <create_name+0xd4>
 800691a:	e000      	b.n	800691e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800691c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	2200      	movs	r2, #0
 8006928:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <create_name+0x118>
 8006930:	2306      	movs	r3, #6
 8006932:	e127      	b.n	8006b84 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3324      	adds	r3, #36	; 0x24
 8006938:	220b      	movs	r2, #11
 800693a:	2120      	movs	r1, #32
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe fc5a 	bl	80051f6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006942:	2300      	movs	r3, #0
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	e002      	b.n	800694e <create_name+0x132>
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	3301      	adds	r3, #1
 800694c:	61bb      	str	r3, [r7, #24]
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4413      	add	r3, r2
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	2b20      	cmp	r3, #32
 800695a:	d0f5      	beq.n	8006948 <create_name+0x12c>
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	2b2e      	cmp	r3, #46	; 0x2e
 8006968:	d0ee      	beq.n	8006948 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d009      	beq.n	8006984 <create_name+0x168>
 8006970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006974:	f043 0303 	orr.w	r3, r3, #3
 8006978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800697c:	e002      	b.n	8006984 <create_name+0x168>
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	3b01      	subs	r3, #1
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d009      	beq.n	800699e <create_name+0x182>
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006990:	3b01      	subs	r3, #1
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	2b2e      	cmp	r3, #46	; 0x2e
 800699c:	d1ef      	bne.n	800697e <create_name+0x162>

	i = b = 0; ni = 8;
 800699e:	2300      	movs	r3, #0
 80069a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069a4:	2300      	movs	r3, #0
 80069a6:	623b      	str	r3, [r7, #32]
 80069a8:	2308      	movs	r3, #8
 80069aa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	61ba      	str	r2, [r7, #24]
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80069bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 8090 	beq.w	8006ae4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80069c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d006      	beq.n	80069d8 <create_name+0x1bc>
 80069ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069cc:	2b2e      	cmp	r3, #46	; 0x2e
 80069ce:	d10a      	bne.n	80069e6 <create_name+0x1ca>
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d006      	beq.n	80069e6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80069d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069dc:	f043 0303 	orr.w	r3, r3, #3
 80069e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069e4:	e07d      	b.n	8006ae2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80069e6:	6a3a      	ldr	r2, [r7, #32]
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d203      	bcs.n	80069f6 <create_name+0x1da>
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d123      	bne.n	8006a3e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	2b0b      	cmp	r3, #11
 80069fa:	d106      	bne.n	8006a0a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80069fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a00:	f043 0303 	orr.w	r3, r3, #3
 8006a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a08:	e075      	b.n	8006af6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d005      	beq.n	8006a1e <create_name+0x202>
 8006a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a16:	f043 0303 	orr.w	r3, r3, #3
 8006a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d866      	bhi.n	8006af4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	2308      	movs	r3, #8
 8006a2c:	623b      	str	r3, [r7, #32]
 8006a2e:	230b      	movs	r3, #11
 8006a30:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006a32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006a3c:	e051      	b.n	8006ae2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a40:	2b7f      	cmp	r3, #127	; 0x7f
 8006a42:	d914      	bls.n	8006a6e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006a44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a46:	2100      	movs	r1, #0
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 f9b1 	bl	8007db0 <ff_convert>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006a52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d004      	beq.n	8006a62 <create_name+0x246>
 8006a58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a5a:	3b80      	subs	r3, #128	; 0x80
 8006a5c:	4a23      	ldr	r2, [pc, #140]	; (8006aec <create_name+0x2d0>)
 8006a5e:	5cd3      	ldrb	r3, [r2, r3]
 8006a60:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a66:	f043 0302 	orr.w	r3, r3, #2
 8006a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006a6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <create_name+0x268>
 8006a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a76:	4619      	mov	r1, r3
 8006a78:	481d      	ldr	r0, [pc, #116]	; (8006af0 <create_name+0x2d4>)
 8006a7a:	f7fe fbfe 	bl	800527a <chk_chr>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d008      	beq.n	8006a96 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006a84:	235f      	movs	r3, #95	; 0x5f
 8006a86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a8c:	f043 0303 	orr.w	r3, r3, #3
 8006a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a94:	e01b      	b.n	8006ace <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006a96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a98:	2b40      	cmp	r3, #64	; 0x40
 8006a9a:	d909      	bls.n	8006ab0 <create_name+0x294>
 8006a9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a9e:	2b5a      	cmp	r3, #90	; 0x5a
 8006aa0:	d806      	bhi.n	8006ab0 <create_name+0x294>
					b |= 2;
 8006aa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006aa6:	f043 0302 	orr.w	r3, r3, #2
 8006aaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006aae:	e00e      	b.n	8006ace <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006ab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ab2:	2b60      	cmp	r3, #96	; 0x60
 8006ab4:	d90b      	bls.n	8006ace <create_name+0x2b2>
 8006ab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ab8:	2b7a      	cmp	r3, #122	; 0x7a
 8006aba:	d808      	bhi.n	8006ace <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006abc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ac0:	f043 0301 	orr.w	r3, r3, #1
 8006ac4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ac8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aca:	3b20      	subs	r3, #32
 8006acc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	623a      	str	r2, [r7, #32]
 8006ad4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ad6:	b2d1      	uxtb	r1, r2
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	4413      	add	r3, r2
 8006adc:	460a      	mov	r2, r1
 8006ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006ae2:	e763      	b.n	80069ac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006ae4:	bf00      	nop
 8006ae6:	e006      	b.n	8006af6 <create_name+0x2da>
 8006ae8:	0800801c 	.word	0x0800801c
 8006aec:	080080ac 	.word	0x080080ac
 8006af0:	08008028 	.word	0x08008028
			if (si > di) break;			/* No extension */
 8006af4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006afc:	2be5      	cmp	r3, #229	; 0xe5
 8006afe:	d103      	bne.n	8006b08 <create_name+0x2ec>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2205      	movs	r2, #5
 8006b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	2b08      	cmp	r3, #8
 8006b0c:	d104      	bne.n	8006b18 <create_name+0x2fc>
 8006b0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006b18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b1c:	f003 030c 	and.w	r3, r3, #12
 8006b20:	2b0c      	cmp	r3, #12
 8006b22:	d005      	beq.n	8006b30 <create_name+0x314>
 8006b24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d105      	bne.n	8006b3c <create_name+0x320>
 8006b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b34:	f043 0302 	orr.w	r3, r3, #2
 8006b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d117      	bne.n	8006b78 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006b48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d105      	bne.n	8006b60 <create_name+0x344>
 8006b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b58:	f043 0310 	orr.w	r3, r3, #16
 8006b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006b60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b64:	f003 030c 	and.w	r3, r3, #12
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d105      	bne.n	8006b78 <create_name+0x35c>
 8006b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b70:	f043 0308 	orr.w	r3, r3, #8
 8006b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006b7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006b82:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3728      	adds	r7, #40	; 0x28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006ba0:	e002      	b.n	8006ba8 <follow_path+0x1c>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b2f      	cmp	r3, #47	; 0x2f
 8006bae:	d0f8      	beq.n	8006ba2 <follow_path+0x16>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b5c      	cmp	r3, #92	; 0x5c
 8006bb6:	d0f4      	beq.n	8006ba2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b1f      	cmp	r3, #31
 8006bc4:	d80a      	bhi.n	8006bdc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2280      	movs	r2, #128	; 0x80
 8006bca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006bce:	2100      	movs	r1, #0
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff f8fd 	bl	8005dd0 <dir_sdi>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	75fb      	strb	r3, [r7, #23]
 8006bda:	e048      	b.n	8006c6e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006bdc:	463b      	mov	r3, r7
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff fe1b 	bl	800681c <create_name>
 8006be6:	4603      	mov	r3, r0
 8006be8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d139      	bne.n	8006c64 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7ff fc5a 	bl	80064aa <dir_find>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c00:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00a      	beq.n	8006c1e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d12c      	bne.n	8006c68 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006c0e:	7afb      	ldrb	r3, [r7, #11]
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d127      	bne.n	8006c68 <follow_path+0xdc>
 8006c18:	2305      	movs	r3, #5
 8006c1a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006c1c:	e024      	b.n	8006c68 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c1e:	7afb      	ldrb	r3, [r7, #11]
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d121      	bne.n	8006c6c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	799b      	ldrb	r3, [r3, #6]
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d102      	bne.n	8006c3a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006c34:	2305      	movs	r3, #5
 8006c36:	75fb      	strb	r3, [r7, #23]
 8006c38:	e019      	b.n	8006c6e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	8992      	ldrh	r2, [r2, #12]
 8006c48:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c4c:	fb00 f202 	mul.w	r2, r0, r2
 8006c50:	1a9b      	subs	r3, r3, r2
 8006c52:	440b      	add	r3, r1
 8006c54:	4619      	mov	r1, r3
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f7ff fa60 	bl	800611c <ld_clust>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c62:	e7bb      	b.n	8006bdc <follow_path+0x50>
			if (res != FR_OK) break;
 8006c64:	bf00      	nop
 8006c66:	e002      	b.n	8006c6e <follow_path+0xe2>
				break;
 8006c68:	bf00      	nop
 8006c6a:	e000      	b.n	8006c6e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c6c:	bf00      	nop
			}
		}
	}

	return res;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006c80:	f04f 33ff 	mov.w	r3, #4294967295
 8006c84:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d031      	beq.n	8006cf2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	e002      	b.n	8006c9c <get_ldnumber+0x24>
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b1f      	cmp	r3, #31
 8006ca2:	d903      	bls.n	8006cac <get_ldnumber+0x34>
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b3a      	cmp	r3, #58	; 0x3a
 8006caa:	d1f4      	bne.n	8006c96 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b3a      	cmp	r3, #58	; 0x3a
 8006cb2:	d11c      	bne.n	8006cee <get_ldnumber+0x76>
			tp = *path;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	60fa      	str	r2, [r7, #12]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	3b30      	subs	r3, #48	; 0x30
 8006cc4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b09      	cmp	r3, #9
 8006cca:	d80e      	bhi.n	8006cea <get_ldnumber+0x72>
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d10a      	bne.n	8006cea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d107      	bne.n	8006cea <get_ldnumber+0x72>
					vol = (int)i;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	e002      	b.n	8006cf4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006cee:	2300      	movs	r3, #0
 8006cf0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006cf2:	693b      	ldr	r3, [r7, #16]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	70da      	strb	r2, [r3, #3]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f04f 32ff 	mov.w	r2, #4294967295
 8006d16:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fe fc78 	bl	8005610 <move_window>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <check_fs+0x2a>
 8006d26:	2304      	movs	r3, #4
 8006d28:	e038      	b.n	8006d9c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	3338      	adds	r3, #56	; 0x38
 8006d2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe f9bc 	bl	80050b0 <ld_word>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d001      	beq.n	8006d48 <check_fs+0x48>
 8006d44:	2303      	movs	r3, #3
 8006d46:	e029      	b.n	8006d9c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d4e:	2be9      	cmp	r3, #233	; 0xe9
 8006d50:	d009      	beq.n	8006d66 <check_fs+0x66>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d58:	2beb      	cmp	r3, #235	; 0xeb
 8006d5a:	d11e      	bne.n	8006d9a <check_fs+0x9a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d62:	2b90      	cmp	r3, #144	; 0x90
 8006d64:	d119      	bne.n	8006d9a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3338      	adds	r3, #56	; 0x38
 8006d6a:	3336      	adds	r3, #54	; 0x36
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fe f9b7 	bl	80050e0 <ld_dword>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d78:	4a0a      	ldr	r2, [pc, #40]	; (8006da4 <check_fs+0xa4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d101      	bne.n	8006d82 <check_fs+0x82>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e00c      	b.n	8006d9c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3338      	adds	r3, #56	; 0x38
 8006d86:	3352      	adds	r3, #82	; 0x52
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe f9a9 	bl	80050e0 <ld_dword>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	4a05      	ldr	r2, [pc, #20]	; (8006da8 <check_fs+0xa8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d101      	bne.n	8006d9a <check_fs+0x9a>
 8006d96:	2300      	movs	r3, #0
 8006d98:	e000      	b.n	8006d9c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006d9a:	2302      	movs	r3, #2
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	00544146 	.word	0x00544146
 8006da8:	33544146 	.word	0x33544146

08006dac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b096      	sub	sp, #88	; 0x58
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f7ff ff59 	bl	8006c78 <get_ldnumber>
 8006dc6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	da01      	bge.n	8006dd2 <find_volume+0x26>
 8006dce:	230b      	movs	r3, #11
 8006dd0:	e265      	b.n	800729e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006dd2:	4a9f      	ldr	r2, [pc, #636]	; (8007050 <find_volume+0x2a4>)
 8006dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dda:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <find_volume+0x3a>
 8006de2:	230c      	movs	r3, #12
 8006de4:	e25b      	b.n	800729e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	f023 0301 	bic.w	r3, r3, #1
 8006df2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01a      	beq.n	8006e32 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fe f8b7 	bl	8004f74 <disk_status>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006e0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10c      	bne.n	8006e32 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d007      	beq.n	8006e2e <find_volume+0x82>
 8006e1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006e2a:	230a      	movs	r3, #10
 8006e2c:	e237      	b.n	800729e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e235      	b.n	800729e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	2200      	movs	r2, #0
 8006e36:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fe f8af 	bl	8004fa8 <disk_initialize>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006e50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e21e      	b.n	800729e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d007      	beq.n	8006e76 <find_volume+0xca>
 8006e66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e6a:	f003 0304 	and.w	r3, r3, #4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006e72:	230a      	movs	r3, #10
 8006e74:	e213      	b.n	800729e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	7858      	ldrb	r0, [r3, #1]
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	461a      	mov	r2, r3
 8006e80:	2102      	movs	r1, #2
 8006e82:	f7fe f8f7 	bl	8005074 <disk_ioctl>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <find_volume+0xe4>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e206      	b.n	800729e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	899b      	ldrh	r3, [r3, #12]
 8006e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e98:	d80d      	bhi.n	8006eb6 <find_volume+0x10a>
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9c:	899b      	ldrh	r3, [r3, #12]
 8006e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea2:	d308      	bcc.n	8006eb6 <find_volume+0x10a>
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	899b      	ldrh	r3, [r3, #12]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	899b      	ldrh	r3, [r3, #12]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <find_volume+0x10e>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e1f1      	b.n	800729e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006ebe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ec0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ec2:	f7ff ff1d 	bl	8006d00 <check_fs>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006ecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d149      	bne.n	8006f68 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed8:	e01e      	b.n	8006f18 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006ee8:	4413      	add	r3, r2
 8006eea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	3304      	adds	r3, #4
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d006      	beq.n	8006f04 <find_volume+0x158>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	3308      	adds	r3, #8
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe f8f0 	bl	80050e0 <ld_dword>
 8006f00:	4602      	mov	r2, r0
 8006f02:	e000      	b.n	8006f06 <find_volume+0x15a>
 8006f04:	2200      	movs	r2, #0
 8006f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	3358      	adds	r3, #88	; 0x58
 8006f0c:	443b      	add	r3, r7
 8006f0e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f14:	3301      	adds	r3, #1
 8006f16:	643b      	str	r3, [r7, #64]	; 0x40
 8006f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d9dd      	bls.n	8006eda <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006f1e:	2300      	movs	r3, #0
 8006f20:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <find_volume+0x182>
 8006f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	3358      	adds	r3, #88	; 0x58
 8006f34:	443b      	add	r3, r7
 8006f36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006f3a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <find_volume+0x1a2>
 8006f42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f46:	f7ff fedb 	bl	8006d00 <check_fs>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	e000      	b.n	8006f50 <find_volume+0x1a4>
 8006f4e:	2303      	movs	r3, #3
 8006f50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006f54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d905      	bls.n	8006f68 <find_volume+0x1bc>
 8006f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5e:	3301      	adds	r3, #1
 8006f60:	643b      	str	r3, [r7, #64]	; 0x40
 8006f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d9e2      	bls.n	8006f2e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d101      	bne.n	8006f74 <find_volume+0x1c8>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e194      	b.n	800729e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d901      	bls.n	8006f80 <find_volume+0x1d4>
 8006f7c:	230d      	movs	r3, #13
 8006f7e:	e18e      	b.n	800729e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	3338      	adds	r3, #56	; 0x38
 8006f84:	330b      	adds	r3, #11
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe f892 	bl	80050b0 <ld_word>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	899b      	ldrh	r3, [r3, #12]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d001      	beq.n	8006f9c <find_volume+0x1f0>
 8006f98:	230d      	movs	r3, #13
 8006f9a:	e180      	b.n	800729e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	3338      	adds	r3, #56	; 0x38
 8006fa0:	3316      	adds	r3, #22
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe f884 	bl	80050b0 <ld_word>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <find_volume+0x214>
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	3338      	adds	r3, #56	; 0x38
 8006fb6:	3324      	adds	r3, #36	; 0x24
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fe f891 	bl	80050e0 <ld_dword>
 8006fbe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fc4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	789b      	ldrb	r3, [r3, #2]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d005      	beq.n	8006fe4 <find_volume+0x238>
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	789b      	ldrb	r3, [r3, #2]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d001      	beq.n	8006fe4 <find_volume+0x238>
 8006fe0:	230d      	movs	r3, #13
 8006fe2:	e15c      	b.n	800729e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	789b      	ldrb	r3, [r3, #2]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fec:	fb02 f303 	mul.w	r3, r2, r3
 8006ff0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	895b      	ldrh	r3, [r3, #10]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d008      	beq.n	8007018 <find_volume+0x26c>
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	895b      	ldrh	r3, [r3, #10]
 800700a:	461a      	mov	r2, r3
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	895b      	ldrh	r3, [r3, #10]
 8007010:	3b01      	subs	r3, #1
 8007012:	4013      	ands	r3, r2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <find_volume+0x270>
 8007018:	230d      	movs	r3, #13
 800701a:	e140      	b.n	800729e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	3338      	adds	r3, #56	; 0x38
 8007020:	3311      	adds	r3, #17
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe f844 	bl	80050b0 <ld_word>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	891b      	ldrh	r3, [r3, #8]
 8007034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007036:	8992      	ldrh	r2, [r2, #12]
 8007038:	0952      	lsrs	r2, r2, #5
 800703a:	b292      	uxth	r2, r2
 800703c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007040:	fb01 f202 	mul.w	r2, r1, r2
 8007044:	1a9b      	subs	r3, r3, r2
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <find_volume+0x2a8>
 800704c:	230d      	movs	r3, #13
 800704e:	e126      	b.n	800729e <find_volume+0x4f2>
 8007050:	200001a8 	.word	0x200001a8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	3338      	adds	r3, #56	; 0x38
 8007058:	3313      	adds	r3, #19
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe f828 	bl	80050b0 <ld_word>
 8007060:	4603      	mov	r3, r0
 8007062:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007066:	2b00      	cmp	r3, #0
 8007068:	d106      	bne.n	8007078 <find_volume+0x2cc>
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	3338      	adds	r3, #56	; 0x38
 800706e:	3320      	adds	r3, #32
 8007070:	4618      	mov	r0, r3
 8007072:	f7fe f835 	bl	80050e0 <ld_dword>
 8007076:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	3338      	adds	r3, #56	; 0x38
 800707c:	330e      	adds	r3, #14
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe f816 	bl	80050b0 <ld_word>
 8007084:	4603      	mov	r3, r0
 8007086:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007088:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <find_volume+0x2e6>
 800708e:	230d      	movs	r3, #13
 8007090:	e105      	b.n	800729e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007092:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007096:	4413      	add	r3, r2
 8007098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800709a:	8911      	ldrh	r1, [r2, #8]
 800709c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800709e:	8992      	ldrh	r2, [r2, #12]
 80070a0:	0952      	lsrs	r2, r2, #5
 80070a2:	b292      	uxth	r2, r2
 80070a4:	fbb1 f2f2 	udiv	r2, r1, r2
 80070a8:	b292      	uxth	r2, r2
 80070aa:	4413      	add	r3, r2
 80070ac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80070ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d201      	bcs.n	80070ba <find_volume+0x30e>
 80070b6:	230d      	movs	r3, #13
 80070b8:	e0f1      	b.n	800729e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80070ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070c2:	8952      	ldrh	r2, [r2, #10]
 80070c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <find_volume+0x328>
 80070d0:	230d      	movs	r3, #13
 80070d2:	e0e4      	b.n	800729e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80070d4:	2303      	movs	r3, #3
 80070d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d802      	bhi.n	80070ea <find_volume+0x33e>
 80070e4:	2302      	movs	r3, #2
 80070e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	f640 72f5 	movw	r2, #4085	; 0xff5
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d802      	bhi.n	80070fa <find_volume+0x34e>
 80070f4:	2301      	movs	r3, #1
 80070f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	1c9a      	adds	r2, r3, #2
 80070fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007100:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007106:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007108:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800710a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800710c:	441a      	add	r2, r3
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007110:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007112:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	441a      	add	r2, r3
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800711c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007120:	2b03      	cmp	r3, #3
 8007122:	d11e      	bne.n	8007162 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	3338      	adds	r3, #56	; 0x38
 8007128:	332a      	adds	r3, #42	; 0x2a
 800712a:	4618      	mov	r0, r3
 800712c:	f7fd ffc0 	bl	80050b0 <ld_word>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <find_volume+0x38e>
 8007136:	230d      	movs	r3, #13
 8007138:	e0b1      	b.n	800729e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713c:	891b      	ldrh	r3, [r3, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <find_volume+0x39a>
 8007142:	230d      	movs	r3, #13
 8007144:	e0ab      	b.n	800729e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	3338      	adds	r3, #56	; 0x38
 800714a:	332c      	adds	r3, #44	; 0x2c
 800714c:	4618      	mov	r0, r3
 800714e:	f7fd ffc7 	bl	80050e0 <ld_dword>
 8007152:	4602      	mov	r2, r0
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	647b      	str	r3, [r7, #68]	; 0x44
 8007160:	e01f      	b.n	80071a2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	891b      	ldrh	r3, [r3, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <find_volume+0x3c2>
 800716a:	230d      	movs	r3, #13
 800716c:	e097      	b.n	800729e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007174:	441a      	add	r2, r3
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800717a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800717e:	2b02      	cmp	r3, #2
 8007180:	d103      	bne.n	800718a <find_volume+0x3de>
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	e00a      	b.n	80071a0 <find_volume+0x3f4>
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	69da      	ldr	r2, [r3, #28]
 800718e:	4613      	mov	r3, r2
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	4413      	add	r3, r2
 8007194:	085a      	lsrs	r2, r3, #1
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80071a0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	6a1a      	ldr	r2, [r3, #32]
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	899b      	ldrh	r3, [r3, #12]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ae:	440b      	add	r3, r1
 80071b0:	3b01      	subs	r3, #1
 80071b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071b4:	8989      	ldrh	r1, [r1, #12]
 80071b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d201      	bcs.n	80071c2 <find_volume+0x416>
 80071be:	230d      	movs	r3, #13
 80071c0:	e06d      	b.n	800729e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c4:	f04f 32ff 	mov.w	r2, #4294967295
 80071c8:	619a      	str	r2, [r3, #24]
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d4:	2280      	movs	r2, #128	; 0x80
 80071d6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80071d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d149      	bne.n	8007274 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	3338      	adds	r3, #56	; 0x38
 80071e4:	3330      	adds	r3, #48	; 0x30
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fd ff62 	bl	80050b0 <ld_word>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d140      	bne.n	8007274 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80071f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071f4:	3301      	adds	r3, #1
 80071f6:	4619      	mov	r1, r3
 80071f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071fa:	f7fe fa09 	bl	8005610 <move_window>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d137      	bne.n	8007274 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007206:	2200      	movs	r2, #0
 8007208:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	3338      	adds	r3, #56	; 0x38
 800720e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007212:	4618      	mov	r0, r3
 8007214:	f7fd ff4c 	bl	80050b0 <ld_word>
 8007218:	4603      	mov	r3, r0
 800721a:	461a      	mov	r2, r3
 800721c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007220:	429a      	cmp	r2, r3
 8007222:	d127      	bne.n	8007274 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	3338      	adds	r3, #56	; 0x38
 8007228:	4618      	mov	r0, r3
 800722a:	f7fd ff59 	bl	80050e0 <ld_dword>
 800722e:	4603      	mov	r3, r0
 8007230:	4a1d      	ldr	r2, [pc, #116]	; (80072a8 <find_volume+0x4fc>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d11e      	bne.n	8007274 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007238:	3338      	adds	r3, #56	; 0x38
 800723a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800723e:	4618      	mov	r0, r3
 8007240:	f7fd ff4e 	bl	80050e0 <ld_dword>
 8007244:	4603      	mov	r3, r0
 8007246:	4a19      	ldr	r2, [pc, #100]	; (80072ac <find_volume+0x500>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d113      	bne.n	8007274 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800724c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724e:	3338      	adds	r3, #56	; 0x38
 8007250:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007254:	4618      	mov	r0, r3
 8007256:	f7fd ff43 	bl	80050e0 <ld_dword>
 800725a:	4602      	mov	r2, r0
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007262:	3338      	adds	r3, #56	; 0x38
 8007264:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007268:	4618      	mov	r0, r3
 800726a:	f7fd ff39 	bl	80050e0 <ld_dword>
 800726e:	4602      	mov	r2, r0
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007276:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800727a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800727c:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <find_volume+0x504>)
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	3301      	adds	r3, #1
 8007282:	b29a      	uxth	r2, r3
 8007284:	4b0a      	ldr	r3, [pc, #40]	; (80072b0 <find_volume+0x504>)
 8007286:	801a      	strh	r2, [r3, #0]
 8007288:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <find_volume+0x504>)
 800728a:	881a      	ldrh	r2, [r3, #0]
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	4a08      	ldr	r2, [pc, #32]	; (80072b4 <find_volume+0x508>)
 8007294:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007296:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007298:	f7fe f952 	bl	8005540 <clear_lock>
#endif
	return FR_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3758      	adds	r7, #88	; 0x58
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	41615252 	.word	0x41615252
 80072ac:	61417272 	.word	0x61417272
 80072b0:	200001ac 	.word	0x200001ac
 80072b4:	200001d0 	.word	0x200001d0

080072b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80072c2:	2309      	movs	r3, #9
 80072c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01c      	beq.n	8007306 <validate+0x4e>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d018      	beq.n	8007306 <validate+0x4e>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d013      	beq.n	8007306 <validate+0x4e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	889a      	ldrh	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	88db      	ldrh	r3, [r3, #6]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d10c      	bne.n	8007306 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	785b      	ldrb	r3, [r3, #1]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fd fe3e 	bl	8004f74 <disk_status>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <validate+0x4e>
			res = FR_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d102      	bne.n	8007312 <validate+0x5a>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	e000      	b.n	8007314 <validate+0x5c>
 8007312:	2300      	movs	r3, #0
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	6013      	str	r3, [r2, #0]
	return res;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b088      	sub	sp, #32
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	4613      	mov	r3, r2
 8007330:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007336:	f107 0310 	add.w	r3, r7, #16
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff fc9c 	bl	8006c78 <get_ldnumber>
 8007340:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	2b00      	cmp	r3, #0
 8007346:	da01      	bge.n	800734c <f_mount+0x28>
 8007348:	230b      	movs	r3, #11
 800734a:	e02b      	b.n	80073a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800734c:	4a17      	ldr	r2, [pc, #92]	; (80073ac <f_mount+0x88>)
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007354:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d005      	beq.n	8007368 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800735c:	69b8      	ldr	r0, [r7, #24]
 800735e:	f7fe f8ef 	bl	8005540 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	2200      	movs	r2, #0
 8007366:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	490d      	ldr	r1, [pc, #52]	; (80073ac <f_mount+0x88>)
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <f_mount+0x66>
 8007384:	79fb      	ldrb	r3, [r7, #7]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d001      	beq.n	800738e <f_mount+0x6a>
 800738a:	2300      	movs	r3, #0
 800738c:	e00a      	b.n	80073a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800738e:	f107 010c 	add.w	r1, r7, #12
 8007392:	f107 0308 	add.w	r3, r7, #8
 8007396:	2200      	movs	r2, #0
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff fd07 	bl	8006dac <find_volume>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3720      	adds	r7, #32
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	200001a8 	.word	0x200001a8

080073b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b09a      	sub	sp, #104	; 0x68
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	4613      	mov	r3, r2
 80073bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <f_open+0x18>
 80073c4:	2309      	movs	r3, #9
 80073c6:	e1bb      	b.n	8007740 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80073d0:	79fa      	ldrb	r2, [r7, #7]
 80073d2:	f107 0114 	add.w	r1, r7, #20
 80073d6:	f107 0308 	add.w	r3, r7, #8
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff fce6 	bl	8006dac <find_volume>
 80073e0:	4603      	mov	r3, r0
 80073e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80073e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f040 819f 	bne.w	800772e <f_open+0x37e>
		dj.obj.fs = fs;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	f107 0318 	add.w	r3, r7, #24
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff fbc5 	bl	8006b8c <follow_path>
 8007402:	4603      	mov	r3, r0
 8007404:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007408:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800740c:	2b00      	cmp	r3, #0
 800740e:	d11a      	bne.n	8007446 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007410:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007414:	b25b      	sxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	da03      	bge.n	8007422 <f_open+0x72>
				res = FR_INVALID_NAME;
 800741a:	2306      	movs	r3, #6
 800741c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007420:	e011      	b.n	8007446 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007422:	79fb      	ldrb	r3, [r7, #7]
 8007424:	f023 0301 	bic.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	bf14      	ite	ne
 800742c:	2301      	movne	r3, #1
 800742e:	2300      	moveq	r3, #0
 8007430:	b2db      	uxtb	r3, r3
 8007432:	461a      	mov	r2, r3
 8007434:	f107 0318 	add.w	r3, r7, #24
 8007438:	4611      	mov	r1, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f7fd ff38 	bl	80052b0 <chk_lock>
 8007440:	4603      	mov	r3, r0
 8007442:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	f003 031c 	and.w	r3, r3, #28
 800744c:	2b00      	cmp	r3, #0
 800744e:	d07f      	beq.n	8007550 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007450:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007454:	2b00      	cmp	r3, #0
 8007456:	d017      	beq.n	8007488 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007458:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800745c:	2b04      	cmp	r3, #4
 800745e:	d10e      	bne.n	800747e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007460:	f7fd ff82 	bl	8005368 <enq_lock>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d006      	beq.n	8007478 <f_open+0xc8>
 800746a:	f107 0318 	add.w	r3, r7, #24
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff f8dc 	bl	800662c <dir_register>
 8007474:	4603      	mov	r3, r0
 8007476:	e000      	b.n	800747a <f_open+0xca>
 8007478:	2312      	movs	r3, #18
 800747a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800747e:	79fb      	ldrb	r3, [r7, #7]
 8007480:	f043 0308 	orr.w	r3, r3, #8
 8007484:	71fb      	strb	r3, [r7, #7]
 8007486:	e010      	b.n	80074aa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007488:	7fbb      	ldrb	r3, [r7, #30]
 800748a:	f003 0311 	and.w	r3, r3, #17
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <f_open+0xea>
					res = FR_DENIED;
 8007492:	2307      	movs	r3, #7
 8007494:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007498:	e007      	b.n	80074aa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <f_open+0xfa>
 80074a4:	2308      	movs	r3, #8
 80074a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80074aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d168      	bne.n	8007584 <f_open+0x1d4>
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d063      	beq.n	8007584 <f_open+0x1d4>
				dw = GET_FATTIME();
 80074bc:	f7fd fcfc 	bl	8004eb8 <get_fattime>
 80074c0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80074c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c4:	330e      	adds	r3, #14
 80074c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fd fe47 	bl	800515c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	3316      	adds	r3, #22
 80074d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fd fe41 	bl	800515c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	330b      	adds	r3, #11
 80074de:	2220      	movs	r2, #32
 80074e0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074e6:	4611      	mov	r1, r2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fe fe17 	bl	800611c <ld_clust>
 80074ee:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074f4:	2200      	movs	r2, #0
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fe fe2f 	bl	800615a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80074fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fe:	331c      	adds	r3, #28
 8007500:	2100      	movs	r1, #0
 8007502:	4618      	mov	r0, r3
 8007504:	f7fd fe2a 	bl	800515c <st_dword>
					fs->wflag = 1;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2201      	movs	r2, #1
 800750c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800750e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007510:	2b00      	cmp	r3, #0
 8007512:	d037      	beq.n	8007584 <f_open+0x1d4>
						dw = fs->winsect;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007518:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800751a:	f107 0318 	add.w	r3, r7, #24
 800751e:	2200      	movs	r2, #0
 8007520:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fb1f 	bl	8005b66 <remove_chain>
 8007528:	4603      	mov	r3, r0
 800752a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800752e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007532:	2b00      	cmp	r3, #0
 8007534:	d126      	bne.n	8007584 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe f868 	bl	8005610 <move_window>
 8007540:	4603      	mov	r3, r0
 8007542:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800754a:	3a01      	subs	r2, #1
 800754c:	615a      	str	r2, [r3, #20]
 800754e:	e019      	b.n	8007584 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007550:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007554:	2b00      	cmp	r3, #0
 8007556:	d115      	bne.n	8007584 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007558:	7fbb      	ldrb	r3, [r7, #30]
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007562:	2304      	movs	r3, #4
 8007564:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007568:	e00c      	b.n	8007584 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d007      	beq.n	8007584 <f_open+0x1d4>
 8007574:	7fbb      	ldrb	r3, [r7, #30]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <f_open+0x1d4>
						res = FR_DENIED;
 800757e:	2307      	movs	r3, #7
 8007580:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007584:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007588:	2b00      	cmp	r3, #0
 800758a:	d128      	bne.n	80075de <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800758c:	79fb      	ldrb	r3, [r7, #7]
 800758e:	f003 0308 	and.w	r3, r3, #8
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800759c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80075a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	f023 0301 	bic.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bf14      	ite	ne
 80075b6:	2301      	movne	r3, #1
 80075b8:	2300      	moveq	r3, #0
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	f107 0318 	add.w	r3, r7, #24
 80075c2:	4611      	mov	r1, r2
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fd fef1 	bl	80053ac <inc_lock>
 80075ca:	4602      	mov	r2, r0
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <f_open+0x22e>
 80075d8:	2302      	movs	r3, #2
 80075da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80075de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f040 80a3 	bne.w	800772e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ec:	4611      	mov	r1, r2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe fd94 	bl	800611c <ld_clust>
 80075f4:	4602      	mov	r2, r0
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	331c      	adds	r3, #28
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fd fd6e 	bl	80050e0 <ld_dword>
 8007604:	4602      	mov	r2, r0
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	88da      	ldrh	r2, [r3, #6]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	79fa      	ldrb	r2, [r7, #7]
 8007622:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3330      	adds	r3, #48	; 0x30
 800763a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800763e:	2100      	movs	r1, #0
 8007640:	4618      	mov	r0, r3
 8007642:	f7fd fdd8 	bl	80051f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007646:	79fb      	ldrb	r3, [r7, #7]
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b00      	cmp	r3, #0
 800764e:	d06e      	beq.n	800772e <f_open+0x37e>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d06a      	beq.n	800772e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	895b      	ldrh	r3, [r3, #10]
 8007664:	461a      	mov	r2, r3
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	899b      	ldrh	r3, [r3, #12]
 800766a:	fb02 f303 	mul.w	r3, r2, r3
 800766e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800767c:	e016      	b.n	80076ac <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe f881 	bl	800578a <get_fat>
 8007688:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800768a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800768c:	2b01      	cmp	r3, #1
 800768e:	d802      	bhi.n	8007696 <f_open+0x2e6>
 8007690:	2302      	movs	r3, #2
 8007692:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d102      	bne.n	80076a4 <f_open+0x2f4>
 800769e:	2301      	movs	r3, #1
 80076a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80076a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <f_open+0x30c>
 80076b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d8e0      	bhi.n	800767e <f_open+0x2ce>
				}
				fp->clust = clst;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076c0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80076c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d131      	bne.n	800772e <f_open+0x37e>
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	899b      	ldrh	r3, [r3, #12]
 80076ce:	461a      	mov	r2, r3
 80076d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80076d6:	fb01 f202 	mul.w	r2, r1, r2
 80076da:	1a9b      	subs	r3, r3, r2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d026      	beq.n	800772e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fe f831 	bl	800574c <clust2sect>
 80076ea:	64f8      	str	r0, [r7, #76]	; 0x4c
 80076ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <f_open+0x34a>
						res = FR_INT_ERR;
 80076f2:	2302      	movs	r3, #2
 80076f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80076f8:	e019      	b.n	800772e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	899b      	ldrh	r3, [r3, #12]
 80076fe:	461a      	mov	r2, r3
 8007700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007702:	fbb3 f2f2 	udiv	r2, r3, r2
 8007706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007708:	441a      	add	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	7858      	ldrb	r0, [r3, #1]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a1a      	ldr	r2, [r3, #32]
 800771c:	2301      	movs	r3, #1
 800771e:	f7fd fc69 	bl	8004ff4 <disk_read>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <f_open+0x37e>
 8007728:	2301      	movs	r3, #1
 800772a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800772e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <f_open+0x38c>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800773c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007740:	4618      	mov	r0, r3
 8007742:	3768      	adds	r7, #104	; 0x68
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08c      	sub	sp, #48	; 0x30
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f107 0210 	add.w	r2, r7, #16
 8007766:	4611      	mov	r1, r2
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fda5 	bl	80072b8 <validate>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007774:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007778:	2b00      	cmp	r3, #0
 800777a:	d107      	bne.n	800778c <f_write+0x44>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	7d5b      	ldrb	r3, [r3, #21]
 8007780:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007784:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <f_write+0x4a>
 800778c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007790:	e16a      	b.n	8007a68 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	7d1b      	ldrb	r3, [r3, #20]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <f_write+0x5a>
 800779e:	2307      	movs	r3, #7
 80077a0:	e162      	b.n	8007a68 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	441a      	add	r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	f080 814c 	bcs.w	8007a4c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	43db      	mvns	r3, r3
 80077ba:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80077bc:	e146      	b.n	8007a4c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	8992      	ldrh	r2, [r2, #12]
 80077c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80077ca:	fb01 f202 	mul.w	r2, r1, r2
 80077ce:	1a9b      	subs	r3, r3, r2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f040 80f1 	bne.w	80079b8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	8992      	ldrh	r2, [r2, #12]
 80077de:	fbb3 f3f2 	udiv	r3, r3, r2
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	8952      	ldrh	r2, [r2, #10]
 80077e6:	3a01      	subs	r2, #1
 80077e8:	4013      	ands	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d143      	bne.n	800787a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10c      	bne.n	8007814 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d11a      	bne.n	800783c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2100      	movs	r1, #0
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe fa10 	bl	8005c30 <create_chain>
 8007810:	62b8      	str	r0, [r7, #40]	; 0x28
 8007812:	e013      	b.n	800783c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	2b00      	cmp	r3, #0
 800781a:	d007      	beq.n	800782c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	4619      	mov	r1, r3
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7fe fa9c 	bl	8005d60 <clmt_clust>
 8007828:	62b8      	str	r0, [r7, #40]	; 0x28
 800782a:	e007      	b.n	800783c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	4619      	mov	r1, r3
 8007834:	4610      	mov	r0, r2
 8007836:	f7fe f9fb 	bl	8005c30 <create_chain>
 800783a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 8109 	beq.w	8007a56 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	2b01      	cmp	r3, #1
 8007848:	d104      	bne.n	8007854 <f_write+0x10c>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2202      	movs	r2, #2
 800784e:	755a      	strb	r2, [r3, #21]
 8007850:	2302      	movs	r3, #2
 8007852:	e109      	b.n	8007a68 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d104      	bne.n	8007866 <f_write+0x11e>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2201      	movs	r2, #1
 8007860:	755a      	strb	r2, [r3, #21]
 8007862:	2301      	movs	r3, #1
 8007864:	e100      	b.n	8007a68 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800786a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d102      	bne.n	800787a <f_write+0x132>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007878:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	7d1b      	ldrb	r3, [r3, #20]
 800787e:	b25b      	sxtb	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	da18      	bge.n	80078b6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	7858      	ldrb	r0, [r3, #1]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6a1a      	ldr	r2, [r3, #32]
 8007892:	2301      	movs	r3, #1
 8007894:	f7fd fbce 	bl	8005034 <disk_write>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d004      	beq.n	80078a8 <f_write+0x160>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2201      	movs	r2, #1
 80078a2:	755a      	strb	r2, [r3, #21]
 80078a4:	2301      	movs	r3, #1
 80078a6:	e0df      	b.n	8007a68 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	7d1b      	ldrb	r3, [r3, #20]
 80078ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	4619      	mov	r1, r3
 80078be:	4610      	mov	r0, r2
 80078c0:	f7fd ff44 	bl	800574c <clust2sect>
 80078c4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d104      	bne.n	80078d6 <f_write+0x18e>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2202      	movs	r2, #2
 80078d0:	755a      	strb	r2, [r3, #21]
 80078d2:	2302      	movs	r3, #2
 80078d4:	e0c8      	b.n	8007a68 <f_write+0x320>
			sect += csect;
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	4413      	add	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	899b      	ldrh	r3, [r3, #12]
 80078e2:	461a      	mov	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80078ea:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d043      	beq.n	800797a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	4413      	add	r3, r2
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	8952      	ldrh	r2, [r2, #10]
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d905      	bls.n	800790c <f_write+0x1c4>
					cc = fs->csize - csect;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	895b      	ldrh	r3, [r3, #10]
 8007904:	461a      	mov	r2, r3
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	7858      	ldrb	r0, [r3, #1]
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	69f9      	ldr	r1, [r7, #28]
 8007916:	f7fd fb8d 	bl	8005034 <disk_write>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <f_write+0x1e2>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2201      	movs	r2, #1
 8007924:	755a      	strb	r2, [r3, #21]
 8007926:	2301      	movs	r3, #1
 8007928:	e09e      	b.n	8007a68 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a1a      	ldr	r2, [r3, #32]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	6a3a      	ldr	r2, [r7, #32]
 8007934:	429a      	cmp	r2, r3
 8007936:	d918      	bls.n	800796a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1a      	ldr	r2, [r3, #32]
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	8992      	ldrh	r2, [r2, #12]
 800794a:	fb02 f303 	mul.w	r3, r2, r3
 800794e:	69fa      	ldr	r2, [r7, #28]
 8007950:	18d1      	adds	r1, r2, r3
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	899b      	ldrh	r3, [r3, #12]
 8007956:	461a      	mov	r2, r3
 8007958:	f7fd fc2c 	bl	80051b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	7d1b      	ldrb	r3, [r3, #20]
 8007960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007964:	b2da      	uxtb	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	899b      	ldrh	r3, [r3, #12]
 800796e:	461a      	mov	r2, r3
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	fb02 f303 	mul.w	r3, r2, r3
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007978:	e04b      	b.n	8007a12 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	429a      	cmp	r2, r3
 8007982:	d016      	beq.n	80079b2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	699a      	ldr	r2, [r3, #24]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800798c:	429a      	cmp	r2, r3
 800798e:	d210      	bcs.n	80079b2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	7858      	ldrb	r0, [r3, #1]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800799a:	2301      	movs	r3, #1
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	f7fd fb29 	bl	8004ff4 <disk_read>
 80079a2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d004      	beq.n	80079b2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2201      	movs	r2, #1
 80079ac:	755a      	strb	r2, [r3, #21]
 80079ae:	2301      	movs	r3, #1
 80079b0:	e05a      	b.n	8007a68 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	899b      	ldrh	r3, [r3, #12]
 80079bc:	4618      	mov	r0, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	8992      	ldrh	r2, [r2, #12]
 80079c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80079ca:	fb01 f202 	mul.w	r2, r1, r2
 80079ce:	1a9b      	subs	r3, r3, r2
 80079d0:	1ac3      	subs	r3, r0, r3
 80079d2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80079d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d901      	bls.n	80079e0 <f_write+0x298>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	8992      	ldrh	r2, [r2, #12]
 80079ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80079f2:	fb00 f202 	mul.w	r2, r0, r2
 80079f6:	1a9b      	subs	r3, r3, r2
 80079f8:	440b      	add	r3, r1
 80079fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fc:	69f9      	ldr	r1, [r7, #28]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fd fbd8 	bl	80051b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	7d1b      	ldrb	r3, [r3, #20]
 8007a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	4413      	add	r3, r2
 8007a18:	61fb      	str	r3, [r7, #28]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	699a      	ldr	r2, [r3, #24]
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	441a      	add	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	619a      	str	r2, [r3, #24]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	bf38      	it	cc
 8007a32:	461a      	movcc	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	60da      	str	r2, [r3, #12]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	441a      	add	r2, r3
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f47f aeb5 	bne.w	80077be <f_write+0x76>
 8007a54:	e000      	b.n	8007a58 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007a56:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	7d1b      	ldrb	r3, [r3, #20]
 8007a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3730      	adds	r7, #48	; 0x30
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f107 0208 	add.w	r2, r7, #8
 8007a7e:	4611      	mov	r1, r2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7ff fc19 	bl	80072b8 <validate>
 8007a86:	4603      	mov	r3, r0
 8007a88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d168      	bne.n	8007b62 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	7d1b      	ldrb	r3, [r3, #20]
 8007a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d062      	beq.n	8007b62 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	7d1b      	ldrb	r3, [r3, #20]
 8007aa0:	b25b      	sxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	da15      	bge.n	8007ad2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	7858      	ldrb	r0, [r3, #1]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a1a      	ldr	r2, [r3, #32]
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f7fd fabd 	bl	8005034 <disk_write>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <f_sync+0x54>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e04f      	b.n	8007b64 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	7d1b      	ldrb	r3, [r3, #20]
 8007ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007ad2:	f7fd f9f1 	bl	8004eb8 <get_fattime>
 8007ad6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	f7fd fd95 	bl	8005610 <move_window>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d138      	bne.n	8007b62 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	330b      	adds	r3, #11
 8007afa:	781a      	ldrb	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	330b      	adds	r3, #11
 8007b00:	f042 0220 	orr.w	r2, r2, #32
 8007b04:	b2d2      	uxtb	r2, r2
 8007b06:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6818      	ldr	r0, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	461a      	mov	r2, r3
 8007b12:	68f9      	ldr	r1, [r7, #12]
 8007b14:	f7fe fb21 	bl	800615a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f103 021c 	add.w	r2, r3, #28
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	4619      	mov	r1, r3
 8007b24:	4610      	mov	r0, r2
 8007b26:	f7fd fb19 	bl	800515c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3316      	adds	r3, #22
 8007b2e:	6939      	ldr	r1, [r7, #16]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fd fb13 	bl	800515c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3312      	adds	r3, #18
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fd faf2 	bl	8005126 <st_word>
					fs->wflag = 1;
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2201      	movs	r2, #1
 8007b46:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fd fd8e 	bl	800566c <sync_fs>
 8007b50:	4603      	mov	r3, r0
 8007b52:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7d1b      	ldrb	r3, [r3, #20]
 8007b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3718      	adds	r7, #24
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff ff7b 	bl	8007a70 <f_sync>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d118      	bne.n	8007bb6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f107 0208 	add.w	r2, r7, #8
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff fb93 	bl	80072b8 <validate>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10c      	bne.n	8007bb6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fd fc91 	bl	80054c8 <dec_lock>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d102      	bne.n	8007bb6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	2b0a      	cmp	r3, #10
 8007bd0:	d103      	bne.n	8007bda <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007bd2:	210d      	movs	r1, #13
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff fff3 	bl	8007bc0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	db25      	blt.n	8007c32 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	60fa      	str	r2, [r7, #12]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	4413      	add	r3, r2
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b3c      	cmp	r3, #60	; 0x3c
 8007bf8:	dd12      	ble.n	8007c20 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6818      	ldr	r0, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f103 010c 	add.w	r1, r3, #12
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	f107 0308 	add.w	r3, r7, #8
 8007c0a:	f7ff fd9d 	bl	8007748 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d101      	bne.n	8007c1a <putc_bfd+0x5a>
 8007c16:	2300      	movs	r3, #0
 8007c18:	e001      	b.n	8007c1e <putc_bfd+0x5e>
 8007c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	1c5a      	adds	r2, r3, #1
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	609a      	str	r2, [r3, #8]
 8007c30:	e000      	b.n	8007c34 <putc_bfd+0x74>
	if (i < 0) return;
 8007c32:	bf00      	nop
}
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	db16      	blt.n	8007c78 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f103 010c 	add.w	r1, r3, #12
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	f107 030c 	add.w	r3, r7, #12
 8007c5e:	f7ff fd73 	bl	8007748 <f_write>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d107      	bne.n	8007c78 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d102      	bne.n	8007c78 <putc_flush+0x3e>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	e001      	b.n	8007c7c <putc_flush+0x42>
	return EOF;
 8007c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	605a      	str	r2, [r3, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	609a      	str	r2, [r3, #8]
}
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b096      	sub	sp, #88	; 0x58
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007cb8:	f107 030c 	add.w	r3, r7, #12
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff ffe0 	bl	8007c84 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007cc4:	e009      	b.n	8007cda <f_puts+0x2c>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	1c5a      	adds	r2, r3, #1
 8007cca:	607a      	str	r2, [r7, #4]
 8007ccc:	781a      	ldrb	r2, [r3, #0]
 8007cce:	f107 030c 	add.w	r3, r7, #12
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7ff ff73 	bl	8007bc0 <putc_bfd>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1f1      	bne.n	8007cc6 <f_puts+0x18>
	return putc_flush(&pb);
 8007ce2:	f107 030c 	add.w	r3, r7, #12
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff ffa7 	bl	8007c3a <putc_flush>
 8007cec:	4603      	mov	r3, r0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3758      	adds	r7, #88	; 0x58
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007d06:	2301      	movs	r3, #1
 8007d08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007d0e:	4b1f      	ldr	r3, [pc, #124]	; (8007d8c <FATFS_LinkDriverEx+0x94>)
 8007d10:	7a5b      	ldrb	r3, [r3, #9]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d131      	bne.n	8007d7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007d18:	4b1c      	ldr	r3, [pc, #112]	; (8007d8c <FATFS_LinkDriverEx+0x94>)
 8007d1a:	7a5b      	ldrb	r3, [r3, #9]
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	461a      	mov	r2, r3
 8007d20:	4b1a      	ldr	r3, [pc, #104]	; (8007d8c <FATFS_LinkDriverEx+0x94>)
 8007d22:	2100      	movs	r1, #0
 8007d24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007d26:	4b19      	ldr	r3, [pc, #100]	; (8007d8c <FATFS_LinkDriverEx+0x94>)
 8007d28:	7a5b      	ldrb	r3, [r3, #9]
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	4a17      	ldr	r2, [pc, #92]	; (8007d8c <FATFS_LinkDriverEx+0x94>)
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007d36:	4b15      	ldr	r3, [pc, #84]	; (8007d8c <FATFS_LinkDriverEx+0x94>)
 8007d38:	7a5b      	ldrb	r3, [r3, #9]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	4b13      	ldr	r3, [pc, #76]	; (8007d8c <FATFS_LinkDriverEx+0x94>)
 8007d40:	4413      	add	r3, r2
 8007d42:	79fa      	ldrb	r2, [r7, #7]
 8007d44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007d46:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <FATFS_LinkDriverEx+0x94>)
 8007d48:	7a5b      	ldrb	r3, [r3, #9]
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	b2d1      	uxtb	r1, r2
 8007d50:	4a0e      	ldr	r2, [pc, #56]	; (8007d8c <FATFS_LinkDriverEx+0x94>)
 8007d52:	7251      	strb	r1, [r2, #9]
 8007d54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d56:	7dbb      	ldrb	r3, [r7, #22]
 8007d58:	3330      	adds	r3, #48	; 0x30
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	3301      	adds	r3, #1
 8007d64:	223a      	movs	r2, #58	; 0x3a
 8007d66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	3302      	adds	r3, #2
 8007d6c:	222f      	movs	r2, #47	; 0x2f
 8007d6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	3303      	adds	r3, #3
 8007d74:	2200      	movs	r2, #0
 8007d76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	200003d0 	.word	0x200003d0

08007d90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff ffaa 	bl	8007cf8 <FATFS_LinkDriverEx>
 8007da4:	4603      	mov	r3, r0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	6039      	str	r1, [r7, #0]
 8007dba:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007dbc:	88fb      	ldrh	r3, [r7, #6]
 8007dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc0:	d802      	bhi.n	8007dc8 <ff_convert+0x18>
		c = chr;
 8007dc2:	88fb      	ldrh	r3, [r7, #6]
 8007dc4:	81fb      	strh	r3, [r7, #14]
 8007dc6:	e025      	b.n	8007e14 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00b      	beq.n	8007de6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007dce:	88fb      	ldrh	r3, [r7, #6]
 8007dd0:	2bff      	cmp	r3, #255	; 0xff
 8007dd2:	d805      	bhi.n	8007de0 <ff_convert+0x30>
 8007dd4:	88fb      	ldrh	r3, [r7, #6]
 8007dd6:	3b80      	subs	r3, #128	; 0x80
 8007dd8:	4a12      	ldr	r2, [pc, #72]	; (8007e24 <ff_convert+0x74>)
 8007dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dde:	e000      	b.n	8007de2 <ff_convert+0x32>
 8007de0:	2300      	movs	r3, #0
 8007de2:	81fb      	strh	r3, [r7, #14]
 8007de4:	e016      	b.n	8007e14 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007de6:	2300      	movs	r3, #0
 8007de8:	81fb      	strh	r3, [r7, #14]
 8007dea:	e009      	b.n	8007e00 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007dec:	89fb      	ldrh	r3, [r7, #14]
 8007dee:	4a0d      	ldr	r2, [pc, #52]	; (8007e24 <ff_convert+0x74>)
 8007df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007df4:	88fa      	ldrh	r2, [r7, #6]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d006      	beq.n	8007e08 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007dfa:	89fb      	ldrh	r3, [r7, #14]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	81fb      	strh	r3, [r7, #14]
 8007e00:	89fb      	ldrh	r3, [r7, #14]
 8007e02:	2b7f      	cmp	r3, #127	; 0x7f
 8007e04:	d9f2      	bls.n	8007dec <ff_convert+0x3c>
 8007e06:	e000      	b.n	8007e0a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007e08:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007e0a:	89fb      	ldrh	r3, [r7, #14]
 8007e0c:	3380      	adds	r3, #128	; 0x80
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007e14:	89fb      	ldrh	r3, [r7, #14]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	0800813c 	.word	0x0800813c

08007e28 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007e32:	88fb      	ldrh	r3, [r7, #6]
 8007e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e38:	d201      	bcs.n	8007e3e <ff_wtoupper+0x16>
 8007e3a:	4b3e      	ldr	r3, [pc, #248]	; (8007f34 <ff_wtoupper+0x10c>)
 8007e3c:	e000      	b.n	8007e40 <ff_wtoupper+0x18>
 8007e3e:	4b3e      	ldr	r3, [pc, #248]	; (8007f38 <ff_wtoupper+0x110>)
 8007e40:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	1c9a      	adds	r2, r3, #2
 8007e46:	617a      	str	r2, [r7, #20]
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007e4c:	8a7b      	ldrh	r3, [r7, #18]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d068      	beq.n	8007f24 <ff_wtoupper+0xfc>
 8007e52:	88fa      	ldrh	r2, [r7, #6]
 8007e54:	8a7b      	ldrh	r3, [r7, #18]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d364      	bcc.n	8007f24 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	1c9a      	adds	r2, r3, #2
 8007e5e:	617a      	str	r2, [r7, #20]
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	823b      	strh	r3, [r7, #16]
 8007e64:	8a3b      	ldrh	r3, [r7, #16]
 8007e66:	0a1b      	lsrs	r3, r3, #8
 8007e68:	81fb      	strh	r3, [r7, #14]
 8007e6a:	8a3b      	ldrh	r3, [r7, #16]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007e70:	88fa      	ldrh	r2, [r7, #6]
 8007e72:	8a79      	ldrh	r1, [r7, #18]
 8007e74:	8a3b      	ldrh	r3, [r7, #16]
 8007e76:	440b      	add	r3, r1
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	da49      	bge.n	8007f10 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007e7c:	89fb      	ldrh	r3, [r7, #14]
 8007e7e:	2b08      	cmp	r3, #8
 8007e80:	d84f      	bhi.n	8007f22 <ff_wtoupper+0xfa>
 8007e82:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <ff_wtoupper+0x60>)
 8007e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e88:	08007ead 	.word	0x08007ead
 8007e8c:	08007ebf 	.word	0x08007ebf
 8007e90:	08007ed5 	.word	0x08007ed5
 8007e94:	08007edd 	.word	0x08007edd
 8007e98:	08007ee5 	.word	0x08007ee5
 8007e9c:	08007eed 	.word	0x08007eed
 8007ea0:	08007ef5 	.word	0x08007ef5
 8007ea4:	08007efd 	.word	0x08007efd
 8007ea8:	08007f05 	.word	0x08007f05
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007eac:	88fa      	ldrh	r2, [r7, #6]
 8007eae:	8a7b      	ldrh	r3, [r7, #18]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	80fb      	strh	r3, [r7, #6]
 8007ebc:	e027      	b.n	8007f0e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007ebe:	88fa      	ldrh	r2, [r7, #6]
 8007ec0:	8a7b      	ldrh	r3, [r7, #18]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	88fa      	ldrh	r2, [r7, #6]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	80fb      	strh	r3, [r7, #6]
 8007ed2:	e01c      	b.n	8007f0e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007ed4:	88fb      	ldrh	r3, [r7, #6]
 8007ed6:	3b10      	subs	r3, #16
 8007ed8:	80fb      	strh	r3, [r7, #6]
 8007eda:	e018      	b.n	8007f0e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007edc:	88fb      	ldrh	r3, [r7, #6]
 8007ede:	3b20      	subs	r3, #32
 8007ee0:	80fb      	strh	r3, [r7, #6]
 8007ee2:	e014      	b.n	8007f0e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007ee4:	88fb      	ldrh	r3, [r7, #6]
 8007ee6:	3b30      	subs	r3, #48	; 0x30
 8007ee8:	80fb      	strh	r3, [r7, #6]
 8007eea:	e010      	b.n	8007f0e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007eec:	88fb      	ldrh	r3, [r7, #6]
 8007eee:	3b1a      	subs	r3, #26
 8007ef0:	80fb      	strh	r3, [r7, #6]
 8007ef2:	e00c      	b.n	8007f0e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007ef4:	88fb      	ldrh	r3, [r7, #6]
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	80fb      	strh	r3, [r7, #6]
 8007efa:	e008      	b.n	8007f0e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007efc:	88fb      	ldrh	r3, [r7, #6]
 8007efe:	3b50      	subs	r3, #80	; 0x50
 8007f00:	80fb      	strh	r3, [r7, #6]
 8007f02:	e004      	b.n	8007f0e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007f04:	88fb      	ldrh	r3, [r7, #6]
 8007f06:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007f0a:	80fb      	strh	r3, [r7, #6]
 8007f0c:	bf00      	nop
			}
			break;
 8007f0e:	e008      	b.n	8007f22 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007f10:	89fb      	ldrh	r3, [r7, #14]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d195      	bne.n	8007e42 <ff_wtoupper+0x1a>
 8007f16:	8a3b      	ldrh	r3, [r7, #16]
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007f20:	e78f      	b.n	8007e42 <ff_wtoupper+0x1a>
			break;
 8007f22:	bf00      	nop
	}

	return chr;
 8007f24:	88fb      	ldrh	r3, [r7, #6]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	371c      	adds	r7, #28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	0800823c 	.word	0x0800823c
 8007f38:	08008430 	.word	0x08008430

08007f3c <memset>:
 8007f3c:	4402      	add	r2, r0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d100      	bne.n	8007f46 <memset+0xa>
 8007f44:	4770      	bx	lr
 8007f46:	f803 1b01 	strb.w	r1, [r3], #1
 8007f4a:	e7f9      	b.n	8007f40 <memset+0x4>

08007f4c <__libc_init_array>:
 8007f4c:	b570      	push	{r4, r5, r6, lr}
 8007f4e:	4d0d      	ldr	r5, [pc, #52]	; (8007f84 <__libc_init_array+0x38>)
 8007f50:	4c0d      	ldr	r4, [pc, #52]	; (8007f88 <__libc_init_array+0x3c>)
 8007f52:	1b64      	subs	r4, r4, r5
 8007f54:	10a4      	asrs	r4, r4, #2
 8007f56:	2600      	movs	r6, #0
 8007f58:	42a6      	cmp	r6, r4
 8007f5a:	d109      	bne.n	8007f70 <__libc_init_array+0x24>
 8007f5c:	4d0b      	ldr	r5, [pc, #44]	; (8007f8c <__libc_init_array+0x40>)
 8007f5e:	4c0c      	ldr	r4, [pc, #48]	; (8007f90 <__libc_init_array+0x44>)
 8007f60:	f000 f818 	bl	8007f94 <_init>
 8007f64:	1b64      	subs	r4, r4, r5
 8007f66:	10a4      	asrs	r4, r4, #2
 8007f68:	2600      	movs	r6, #0
 8007f6a:	42a6      	cmp	r6, r4
 8007f6c:	d105      	bne.n	8007f7a <__libc_init_array+0x2e>
 8007f6e:	bd70      	pop	{r4, r5, r6, pc}
 8007f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f74:	4798      	blx	r3
 8007f76:	3601      	adds	r6, #1
 8007f78:	e7ee      	b.n	8007f58 <__libc_init_array+0xc>
 8007f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f7e:	4798      	blx	r3
 8007f80:	3601      	adds	r6, #1
 8007f82:	e7f2      	b.n	8007f6a <__libc_init_array+0x1e>
 8007f84:	080084f4 	.word	0x080084f4
 8007f88:	080084f4 	.word	0x080084f4
 8007f8c:	080084f4 	.word	0x080084f4
 8007f90:	080084f8 	.word	0x080084f8

08007f94 <_init>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	bf00      	nop
 8007f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9a:	bc08      	pop	{r3}
 8007f9c:	469e      	mov	lr, r3
 8007f9e:	4770      	bx	lr

08007fa0 <_fini>:
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	bf00      	nop
 8007fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa6:	bc08      	pop	{r3}
 8007fa8:	469e      	mov	lr, r3
 8007faa:	4770      	bx	lr
