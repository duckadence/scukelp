
winchcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08008d1c  08008d1c  00018d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009294  08009294  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009294  08009294  00019294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800929c  0800929c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800929c  0800929c  0001929c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092a0  080092a0  000192a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080092a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000074  08009318  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08009318  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001443c  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec9  00000000  00000000  00034523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  000373f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e24  00000000  00000000  00038628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228cb  00000000  00000000  0003944c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f18  00000000  00000000  0005bd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6157  00000000  00000000  00075c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005094  00000000  00000000  0013bd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00140e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d04 	.word	0x08008d04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008d04 	.word	0x08008d04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <SELECT+0x1c>)
 8000578:	f001 fd82 	bl	8002080 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800057c:	2001      	movs	r0, #1
 800057e:	f001 fa9f 	bl	8001ac0 <HAL_Delay>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	48000400 	.word	0x48000400

0800058c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <DESELECT+0x1c>)
 8000598:	f001 fd72 	bl	8002080 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f001 fa8f 	bl	8001ac0 <HAL_Delay>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	48000400 	.word	0x48000400

080005ac <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005b6:	bf00      	nop
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <SPI_TxByte+0x30>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d1f8      	bne.n	80005b8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005c6:	1df9      	adds	r1, r7, #7
 80005c8:	2364      	movs	r3, #100	; 0x64
 80005ca:	2201      	movs	r2, #1
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <SPI_TxByte+0x30>)
 80005ce:	f003 fbf2 	bl	8003db6 <HAL_SPI_Transmit>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000ec 	.word	0x200000ec

080005e0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ec:	bf00      	nop
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <SPI_TxBuffer+0x30>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f003 0302 	and.w	r3, r3, #2
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	d1f8      	bne.n	80005ee <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80005fc:	887a      	ldrh	r2, [r7, #2]
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <SPI_TxBuffer+0x30>)
 8000604:	f003 fbd7 	bl	8003db6 <HAL_SPI_Transmit>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200000ec 	.word	0x200000ec

08000614 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800061a:	23ff      	movs	r3, #255	; 0xff
 800061c:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800061e:	bf00      	nop
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <SPI_RxByte+0x34>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	2b02      	cmp	r3, #2
 800062c:	d1f8      	bne.n	8000620 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800062e:	1dba      	adds	r2, r7, #6
 8000630:	1df9      	adds	r1, r7, #7
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2301      	movs	r3, #1
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <SPI_RxByte+0x34>)
 800063a:	f003 fd31 	bl	80040a0 <HAL_SPI_TransmitReceive>

  return data;
 800063e:	79bb      	ldrb	r3, [r7, #6]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000ec 	.word	0x200000ec

0800064c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000654:	f7ff ffde 	bl	8000614 <SPI_RxByte>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	701a      	strb	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <SD_ReadyWait+0x30>)
 8000670:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000674:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000676:	f7ff ffcd 	bl	8000614 <SPI_RxByte>
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d003      	beq.n	800068c <SD_ReadyWait+0x24>
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <SD_ReadyWait+0x30>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f4      	bne.n	8000676 <SD_ReadyWait+0xe>

  return res;
 800068c:	79fb      	ldrb	r3, [r7, #7]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000092 	.word	0x20000092

0800069c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80006a2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006a6:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80006a8:	f7ff ff70 	bl	800058c <DESELECT>
  for(int i = 0; i < 10; i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	e005      	b.n	80006be <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80006b2:	20ff      	movs	r0, #255	; 0xff
 80006b4:	f7ff ff7a 	bl	80005ac <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	3301      	adds	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	2b09      	cmp	r3, #9
 80006c2:	ddf6      	ble.n	80006b2 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80006c4:	f7ff ff52 	bl	800056c <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80006c8:	2340      	movs	r3, #64	; 0x40
 80006ca:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 80006dc:	2395      	movs	r3, #149	; 0x95
 80006de:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 80006e0:	463b      	mov	r3, r7
 80006e2:	2106      	movs	r1, #6
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff7b 	bl	80005e0 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80006ea:	e002      	b.n	80006f2 <SD_PowerOn+0x56>
  {
    cnt--;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80006f2:	f7ff ff8f 	bl	8000614 <SPI_RxByte>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d002      	beq.n	8000702 <SD_PowerOn+0x66>
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1f4      	bne.n	80006ec <SD_PowerOn+0x50>
  }

  DESELECT();
 8000702:	f7ff ff43 	bl	800058c <DESELECT>
  SPI_TxByte(0XFF);
 8000706:	20ff      	movs	r0, #255	; 0xff
 8000708:	f7ff ff50 	bl	80005ac <SPI_TxByte>

  PowerFlag = 1;
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <SD_PowerOn+0x80>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000095 	.word	0x20000095

08000720 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <SD_PowerOff+0x14>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	20000095 	.word	0x20000095

08000738 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return PowerFlag;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <SD_CheckPower+0x14>)
 800073e:	781b      	ldrb	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000095 	.word	0x20000095

08000750 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SD_RxDataBlock+0x58>)
 800075c:	22c8      	movs	r2, #200	; 0xc8
 800075e:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000760:	f7ff ff58 	bl	8000614 <SPI_RxByte>
 8000764:	4603      	mov	r3, r0
 8000766:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	2bff      	cmp	r3, #255	; 0xff
 800076c:	d103      	bne.n	8000776 <SD_RxDataBlock+0x26>
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <SD_RxDataBlock+0x58>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1f4      	bne.n	8000760 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	2bfe      	cmp	r3, #254	; 0xfe
 800077a:	d001      	beq.n	8000780 <SD_RxDataBlock+0x30>
 800077c:	2300      	movs	r3, #0
 800077e:	e00f      	b.n	80007a0 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff60 	bl	800064c <SPI_RxBytePtr>
  } while(len--);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	1e5a      	subs	r2, r3, #1
 8000790:	603a      	str	r2, [r7, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1f4      	bne.n	8000780 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8000796:	f7ff ff3d 	bl	8000614 <SPI_RxByte>
  SPI_RxByte();
 800079a:	f7ff ff3b 	bl	8000614 <SPI_RxByte>

  return TRUE;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000090 	.word	0x20000090

080007ac <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80007bc:	f7ff ff54 	bl	8000668 <SD_ReadyWait>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2bff      	cmp	r3, #255	; 0xff
 80007c4:	d001      	beq.n	80007ca <SD_TxDataBlock+0x1e>
 80007c6:	2300      	movs	r3, #0
 80007c8:	e02f      	b.n	800082a <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff feed 	bl	80005ac <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80007d2:	78fb      	ldrb	r3, [r7, #3]
 80007d4:	2bfd      	cmp	r3, #253	; 0xfd
 80007d6:	d020      	beq.n	800081a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80007d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff feff 	bl	80005e0 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 80007e2:	f7ff ff17 	bl	8000614 <SPI_RxByte>
    SPI_RxByte();
 80007e6:	f7ff ff15 	bl	8000614 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 80007ea:	e00b      	b.n	8000804 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80007ec:	f7ff ff12 	bl	8000614 <SPI_RxByte>
 80007f0:	4603      	mov	r3, r0
 80007f2:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	f003 031f 	and.w	r3, r3, #31
 80007fa:	2b05      	cmp	r3, #5
 80007fc:	d006      	beq.n	800080c <SD_TxDataBlock+0x60>
      i++;
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	3301      	adds	r3, #1
 8000802:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	2b40      	cmp	r3, #64	; 0x40
 8000808:	d9f0      	bls.n	80007ec <SD_TxDataBlock+0x40>
 800080a:	e000      	b.n	800080e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800080c:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800080e:	bf00      	nop
 8000810:	f7ff ff00 	bl	8000614 <SPI_RxByte>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0fa      	beq.n	8000810 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	f003 031f 	and.w	r3, r3, #31
 8000820:	2b05      	cmp	r3, #5
 8000822:	d101      	bne.n	8000828 <SD_TxDataBlock+0x7c>
 8000824:	2301      	movs	r3, #1
 8000826:	e000      	b.n	800082a <SD_TxDataBlock+0x7e>

  return FALSE;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800083e:	f7ff ff13 	bl	8000668 <SD_ReadyWait>
 8000842:	4603      	mov	r3, r0
 8000844:	2bff      	cmp	r3, #255	; 0xff
 8000846:	d001      	beq.n	800084c <SD_SendCmd+0x1a>
 8000848:	23ff      	movs	r3, #255	; 0xff
 800084a:	e042      	b.n	80008d2 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff feac 	bl	80005ac <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	0e1b      	lsrs	r3, r3, #24
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fea6 	bl	80005ac <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	0c1b      	lsrs	r3, r3, #16
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fea0 	bl	80005ac <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	0a1b      	lsrs	r3, r3, #8
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe9a 	bl	80005ac <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fe95 	bl	80005ac <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b40      	cmp	r3, #64	; 0x40
 8000886:	d102      	bne.n	800088e <SD_SendCmd+0x5c>
 8000888:	2395      	movs	r3, #149	; 0x95
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e007      	b.n	800089e <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b48      	cmp	r3, #72	; 0x48
 8000892:	d102      	bne.n	800089a <SD_SendCmd+0x68>
 8000894:	2387      	movs	r3, #135	; 0x87
 8000896:	73fb      	strb	r3, [r7, #15]
 8000898:	e001      	b.n	800089e <SD_SendCmd+0x6c>
  else crc = 1;
 800089a:	2301      	movs	r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe83 	bl	80005ac <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b4c      	cmp	r3, #76	; 0x4c
 80008aa:	d101      	bne.n	80008b0 <SD_SendCmd+0x7e>
 80008ac:	f7ff feb2 	bl	8000614 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80008b0:	230a      	movs	r3, #10
 80008b2:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80008b4:	f7ff feae 	bl	8000614 <SPI_RxByte>
 80008b8:	4603      	mov	r3, r0
 80008ba:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80008bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	da05      	bge.n	80008d0 <SD_SendCmd+0x9e>
 80008c4:	7bbb      	ldrb	r3, [r7, #14]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	73bb      	strb	r3, [r7, #14]
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1f1      	bne.n	80008b4 <SD_SendCmd+0x82>

  return res;
 80008d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SD_disk_initialize+0x14>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e0d1      	b.n	8000a94 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80008f0:	4b6a      	ldr	r3, [pc, #424]	; (8000a9c <SD_disk_initialize+0x1c0>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <SD_disk_initialize+0x2a>
 80008fe:	4b67      	ldr	r3, [pc, #412]	; (8000a9c <SD_disk_initialize+0x1c0>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	e0c6      	b.n	8000a94 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000906:	f7ff fec9 	bl	800069c <SD_PowerOn>

  /* slave select */
  SELECT();
 800090a:	f7ff fe2f 	bl	800056c <SELECT>

  /* check disk type */
  type = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000912:	2100      	movs	r1, #0
 8000914:	2040      	movs	r0, #64	; 0x40
 8000916:	f7ff ff8c 	bl	8000832 <SD_SendCmd>
 800091a:	4603      	mov	r3, r0
 800091c:	2b01      	cmp	r3, #1
 800091e:	f040 80a1 	bne.w	8000a64 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000922:	4b5f      	ldr	r3, [pc, #380]	; (8000aa0 <SD_disk_initialize+0x1c4>)
 8000924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000928:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800092a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800092e:	2048      	movs	r0, #72	; 0x48
 8000930:	f7ff ff7f 	bl	8000832 <SD_SendCmd>
 8000934:	4603      	mov	r3, r0
 8000936:	2b01      	cmp	r3, #1
 8000938:	d155      	bne.n	80009e6 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800093a:	2300      	movs	r3, #0
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	e00c      	b.n	800095a <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000940:	7bfc      	ldrb	r4, [r7, #15]
 8000942:	f7ff fe67 	bl	8000614 <SPI_RxByte>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	f104 0310 	add.w	r3, r4, #16
 800094e:	443b      	add	r3, r7
 8000950:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	3301      	adds	r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	2b03      	cmp	r3, #3
 800095e:	d9ef      	bls.n	8000940 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000960:	7abb      	ldrb	r3, [r7, #10]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d17e      	bne.n	8000a64 <SD_disk_initialize+0x188>
 8000966:	7afb      	ldrb	r3, [r7, #11]
 8000968:	2baa      	cmp	r3, #170	; 0xaa
 800096a:	d17b      	bne.n	8000a64 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800096c:	2100      	movs	r1, #0
 800096e:	2077      	movs	r0, #119	; 0x77
 8000970:	f7ff ff5f 	bl	8000832 <SD_SendCmd>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d807      	bhi.n	800098a <SD_disk_initialize+0xae>
 800097a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800097e:	2069      	movs	r0, #105	; 0x69
 8000980:	f7ff ff57 	bl	8000832 <SD_SendCmd>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d004      	beq.n	8000994 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800098a:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <SD_disk_initialize+0x1c4>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1ec      	bne.n	800096c <SD_disk_initialize+0x90>
 8000992:	e000      	b.n	8000996 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000994:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000996:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <SD_disk_initialize+0x1c4>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d062      	beq.n	8000a64 <SD_disk_initialize+0x188>
 800099e:	2100      	movs	r1, #0
 80009a0:	207a      	movs	r0, #122	; 0x7a
 80009a2:	f7ff ff46 	bl	8000832 <SD_SendCmd>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d15b      	bne.n	8000a64 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]
 80009b0:	e00c      	b.n	80009cc <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80009b2:	7bfc      	ldrb	r4, [r7, #15]
 80009b4:	f7ff fe2e 	bl	8000614 <SPI_RxByte>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	f104 0310 	add.w	r3, r4, #16
 80009c0:	443b      	add	r3, r7
 80009c2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	3301      	adds	r3, #1
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d9ef      	bls.n	80009b2 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009d2:	7a3b      	ldrb	r3, [r7, #8]
 80009d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SD_disk_initialize+0x104>
 80009dc:	230c      	movs	r3, #12
 80009de:	e000      	b.n	80009e2 <SD_disk_initialize+0x106>
 80009e0:	2304      	movs	r3, #4
 80009e2:	73bb      	strb	r3, [r7, #14]
 80009e4:	e03e      	b.n	8000a64 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009e6:	2100      	movs	r1, #0
 80009e8:	2077      	movs	r0, #119	; 0x77
 80009ea:	f7ff ff22 	bl	8000832 <SD_SendCmd>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d808      	bhi.n	8000a06 <SD_disk_initialize+0x12a>
 80009f4:	2100      	movs	r1, #0
 80009f6:	2069      	movs	r0, #105	; 0x69
 80009f8:	f7ff ff1b 	bl	8000832 <SD_SendCmd>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d801      	bhi.n	8000a06 <SD_disk_initialize+0x12a>
 8000a02:	2302      	movs	r3, #2
 8000a04:	e000      	b.n	8000a08 <SD_disk_initialize+0x12c>
 8000a06:	2301      	movs	r3, #1
 8000a08:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d10e      	bne.n	8000a2e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a10:	2100      	movs	r1, #0
 8000a12:	2077      	movs	r0, #119	; 0x77
 8000a14:	f7ff ff0d 	bl	8000832 <SD_SendCmd>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d80e      	bhi.n	8000a3c <SD_disk_initialize+0x160>
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2069      	movs	r0, #105	; 0x69
 8000a22:	f7ff ff06 	bl	8000832 <SD_SendCmd>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d107      	bne.n	8000a3c <SD_disk_initialize+0x160>
 8000a2c:	e00c      	b.n	8000a48 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2041      	movs	r0, #65	; 0x41
 8000a32:	f7ff fefe 	bl	8000832 <SD_SendCmd>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d004      	beq.n	8000a46 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <SD_disk_initialize+0x1c4>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1e2      	bne.n	8000a0a <SD_disk_initialize+0x12e>
 8000a44:	e000      	b.n	8000a48 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a46:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <SD_disk_initialize+0x1c4>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d007      	beq.n	8000a60 <SD_disk_initialize+0x184>
 8000a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a54:	2050      	movs	r0, #80	; 0x50
 8000a56:	f7ff feec 	bl	8000832 <SD_SendCmd>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SD_disk_initialize+0x188>
 8000a60:	2300      	movs	r3, #0
 8000a62:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8000a64:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <SD_disk_initialize+0x1c8>)
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8000a6a:	f7ff fd8f 	bl	800058c <DESELECT>
  SPI_RxByte();
 8000a6e:	f7ff fdd1 	bl	8000614 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8000a72:	7bbb      	ldrb	r3, [r7, #14]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d008      	beq.n	8000a8a <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <SD_disk_initialize+0x1c0>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f023 0301 	bic.w	r3, r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <SD_disk_initialize+0x1c0>)
 8000a86:	701a      	strb	r2, [r3, #0]
 8000a88:	e001      	b.n	8000a8e <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000a8a:	f7ff fe49 	bl	8000720 <SD_PowerOff>
  }

  return Stat;
 8000a8e:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <SD_disk_initialize+0x1c0>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000090 	.word	0x20000090
 8000aa4:	20000094 	.word	0x20000094

08000aa8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SD_disk_status+0x14>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e002      	b.n	8000ac2 <SD_disk_status+0x1a>
  return Stat;
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <SD_disk_status+0x28>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000000 	.word	0x20000000

08000ad4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <SD_disk_read+0x1c>
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d101      	bne.n	8000af4 <SD_disk_read+0x20>
 8000af0:	2304      	movs	r3, #4
 8000af2:	e051      	b.n	8000b98 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000af4:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <SD_disk_read+0xcc>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SD_disk_read+0x32>
 8000b02:	2303      	movs	r3, #3
 8000b04:	e048      	b.n	8000b98 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <SD_disk_read+0xd0>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <SD_disk_read+0x44>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	025b      	lsls	r3, r3, #9
 8000b16:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b18:	f7ff fd28 	bl	800056c <SELECT>

  if (count == 1)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d111      	bne.n	8000b46 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2051      	movs	r0, #81	; 0x51
 8000b26:	f7ff fe84 	bl	8000832 <SD_SendCmd>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d129      	bne.n	8000b84 <SD_disk_read+0xb0>
 8000b30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b34:	68b8      	ldr	r0, [r7, #8]
 8000b36:	f7ff fe0b 	bl	8000750 <SD_RxDataBlock>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d021      	beq.n	8000b84 <SD_disk_read+0xb0>
 8000b40:	2300      	movs	r3, #0
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	e01e      	b.n	8000b84 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	2052      	movs	r0, #82	; 0x52
 8000b4a:	f7ff fe72 	bl	8000832 <SD_SendCmd>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d117      	bne.n	8000b84 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000b54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f7ff fdf9 	bl	8000750 <SD_RxDataBlock>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d00a      	beq.n	8000b7a <SD_disk_read+0xa6>
        buff += 512;
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b6a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1ed      	bne.n	8000b54 <SD_disk_read+0x80>
 8000b78:	e000      	b.n	8000b7c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000b7a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	204c      	movs	r0, #76	; 0x4c
 8000b80:	f7ff fe57 	bl	8000832 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8000b84:	f7ff fd02 	bl	800058c <DESELECT>
  SPI_RxByte();
 8000b88:	f7ff fd44 	bl	8000614 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf14      	ite	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	2300      	moveq	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000094 	.word	0x20000094

08000ba8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d102      	bne.n	8000bc4 <SD_disk_write+0x1c>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <SD_disk_write+0x20>
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	e06b      	b.n	8000ca0 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bc8:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <SD_disk_write+0x100>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SD_disk_write+0x32>
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e062      	b.n	8000ca0 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8000bda:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <SD_disk_write+0x100>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SD_disk_write+0x44>
 8000be8:	2302      	movs	r3, #2
 8000bea:	e059      	b.n	8000ca0 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <SD_disk_write+0x104>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <SD_disk_write+0x56>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	025b      	lsls	r3, r3, #9
 8000bfc:	607b      	str	r3, [r7, #4]

  SELECT();
 8000bfe:	f7ff fcb5 	bl	800056c <SELECT>

  if (count == 1)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d110      	bne.n	8000c2a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	2058      	movs	r0, #88	; 0x58
 8000c0c:	f7ff fe11 	bl	8000832 <SD_SendCmd>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d13a      	bne.n	8000c8c <SD_disk_write+0xe4>
 8000c16:	21fe      	movs	r1, #254	; 0xfe
 8000c18:	68b8      	ldr	r0, [r7, #8]
 8000c1a:	f7ff fdc7 	bl	80007ac <SD_TxDataBlock>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d033      	beq.n	8000c8c <SD_disk_write+0xe4>
      count = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	e030      	b.n	8000c8c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <SD_disk_write+0x104>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d007      	beq.n	8000c46 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c36:	2100      	movs	r1, #0
 8000c38:	2077      	movs	r0, #119	; 0x77
 8000c3a:	f7ff fdfa 	bl	8000832 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	2057      	movs	r0, #87	; 0x57
 8000c42:	f7ff fdf6 	bl	8000832 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	2059      	movs	r0, #89	; 0x59
 8000c4a:	f7ff fdf2 	bl	8000832 <SD_SendCmd>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d11b      	bne.n	8000c8c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c54:	21fc      	movs	r1, #252	; 0xfc
 8000c56:	68b8      	ldr	r0, [r7, #8]
 8000c58:	f7ff fda8 	bl	80007ac <SD_TxDataBlock>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d00a      	beq.n	8000c78 <SD_disk_write+0xd0>
        buff += 512;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c68:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1ee      	bne.n	8000c54 <SD_disk_write+0xac>
 8000c76:	e000      	b.n	8000c7a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c78:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000c7a:	21fd      	movs	r1, #253	; 0xfd
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff fd95 	bl	80007ac <SD_TxDataBlock>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <SD_disk_write+0xe4>
      {
        count = 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8000c8c:	f7ff fc7e 	bl	800058c <DESELECT>
  SPI_RxByte();
 8000c90:	f7ff fcc0 	bl	8000614 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bf14      	ite	ne
 8000c9a:	2301      	movne	r3, #1
 8000c9c:	2300      	moveq	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000094 	.word	0x20000094

08000cb0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b08b      	sub	sp, #44	; 0x2c
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	603a      	str	r2, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SD_disk_ioctl+0x1e>
 8000cca:	2304      	movs	r3, #4
 8000ccc:	e115      	b.n	8000efa <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	d124      	bne.n	8000d24 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d012      	beq.n	8000d08 <SD_disk_ioctl+0x58>
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	dc1a      	bgt.n	8000d1c <SD_disk_ioctl+0x6c>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <SD_disk_ioctl+0x40>
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d006      	beq.n	8000cfc <SD_disk_ioctl+0x4c>
 8000cee:	e015      	b.n	8000d1c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8000cf0:	f7ff fd16 	bl	8000720 <SD_PowerOff>
      res = RES_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000cfa:	e0fc      	b.n	8000ef6 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8000cfc:	f7ff fcce 	bl	800069c <SD_PowerOn>
      res = RES_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d06:	e0f6      	b.n	8000ef6 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8000d08:	6a3b      	ldr	r3, [r7, #32]
 8000d0a:	1c5c      	adds	r4, r3, #1
 8000d0c:	f7ff fd14 	bl	8000738 <SD_CheckPower>
 8000d10:	4603      	mov	r3, r0
 8000d12:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8000d14:	2300      	movs	r3, #0
 8000d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d1a:	e0ec      	b.n	8000ef6 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d22:	e0e8      	b.n	8000ef6 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d24:	4b77      	ldr	r3, [pc, #476]	; (8000f04 <SD_disk_ioctl+0x254>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SD_disk_ioctl+0x86>
 8000d32:	2303      	movs	r3, #3
 8000d34:	e0e1      	b.n	8000efa <SD_disk_ioctl+0x24a>

    SELECT();
 8000d36:	f7ff fc19 	bl	800056c <SELECT>

    switch (ctrl)
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	2b0d      	cmp	r3, #13
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <SD_disk_ioctl+0x228>
 8000d42:	a201      	add	r2, pc, #4	; (adr r2, 8000d48 <SD_disk_ioctl+0x98>)
 8000d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d48:	08000e43 	.word	0x08000e43
 8000d4c:	08000d81 	.word	0x08000d81
 8000d50:	08000e33 	.word	0x08000e33
 8000d54:	08000ed9 	.word	0x08000ed9
 8000d58:	08000ed9 	.word	0x08000ed9
 8000d5c:	08000ed9 	.word	0x08000ed9
 8000d60:	08000ed9 	.word	0x08000ed9
 8000d64:	08000ed9 	.word	0x08000ed9
 8000d68:	08000ed9 	.word	0x08000ed9
 8000d6c:	08000ed9 	.word	0x08000ed9
 8000d70:	08000ed9 	.word	0x08000ed9
 8000d74:	08000e55 	.word	0x08000e55
 8000d78:	08000e79 	.word	0x08000e79
 8000d7c:	08000e9d 	.word	0x08000e9d
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d80:	2100      	movs	r1, #0
 8000d82:	2049      	movs	r0, #73	; 0x49
 8000d84:	f7ff fd55 	bl	8000832 <SD_SendCmd>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 80a8 	bne.w	8000ee0 <SD_disk_ioctl+0x230>
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2110      	movs	r1, #16
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fcda 	bl	8000750 <SD_RxDataBlock>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 809e 	beq.w	8000ee0 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8000da4:	7b3b      	ldrb	r3, [r7, #12]
 8000da6:	099b      	lsrs	r3, r3, #6
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d10e      	bne.n	8000dcc <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dae:	7d7b      	ldrb	r3, [r7, #21]
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	7d3b      	ldrb	r3, [r7, #20]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4413      	add	r3, r2
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000dc2:	8bfb      	ldrh	r3, [r7, #30]
 8000dc4:	029a      	lsls	r2, r3, #10
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	e02e      	b.n	8000e2a <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dcc:	7c7b      	ldrb	r3, [r7, #17]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	7dbb      	ldrb	r3, [r7, #22]
 8000dd6:	09db      	lsrs	r3, r3, #7
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	7d7b      	ldrb	r3, [r7, #21]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f003 0306 	and.w	r3, r3, #6
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	3302      	adds	r3, #2
 8000df0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000df4:	7d3b      	ldrb	r3, [r7, #20]
 8000df6:	099b      	lsrs	r3, r3, #6
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	7cfb      	ldrb	r3, [r7, #19]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	4413      	add	r3, r2
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	7cbb      	ldrb	r3, [r7, #18]
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	3301      	adds	r3, #1
 8000e1a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e1c:	8bfa      	ldrh	r2, [r7, #30]
 8000e1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e22:	3b09      	subs	r3, #9
 8000e24:	409a      	lsls	r2, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000e30:	e056      	b.n	8000ee0 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e38:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e40:	e055      	b.n	8000eee <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e42:	f7ff fc11 	bl	8000668 <SD_ReadyWait>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d14b      	bne.n	8000ee4 <SD_disk_ioctl+0x234>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e52:	e047      	b.n	8000ee4 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e54:	2100      	movs	r1, #0
 8000e56:	2049      	movs	r0, #73	; 0x49
 8000e58:	f7ff fceb 	bl	8000832 <SD_SendCmd>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d142      	bne.n	8000ee8 <SD_disk_ioctl+0x238>
 8000e62:	2110      	movs	r1, #16
 8000e64:	6a38      	ldr	r0, [r7, #32]
 8000e66:	f7ff fc73 	bl	8000750 <SD_RxDataBlock>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d03b      	beq.n	8000ee8 <SD_disk_ioctl+0x238>
 8000e70:	2300      	movs	r3, #0
 8000e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e76:	e037      	b.n	8000ee8 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e78:	2100      	movs	r1, #0
 8000e7a:	204a      	movs	r0, #74	; 0x4a
 8000e7c:	f7ff fcd9 	bl	8000832 <SD_SendCmd>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d132      	bne.n	8000eec <SD_disk_ioctl+0x23c>
 8000e86:	2110      	movs	r1, #16
 8000e88:	6a38      	ldr	r0, [r7, #32]
 8000e8a:	f7ff fc61 	bl	8000750 <SD_RxDataBlock>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d02b      	beq.n	8000eec <SD_disk_ioctl+0x23c>
 8000e94:	2300      	movs	r3, #0
 8000e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e9a:	e027      	b.n	8000eec <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	207a      	movs	r0, #122	; 0x7a
 8000ea0:	f7ff fcc7 	bl	8000832 <SD_SendCmd>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d116      	bne.n	8000ed8 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eb0:	e00b      	b.n	8000eca <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8000eb2:	6a3c      	ldr	r4, [r7, #32]
 8000eb4:	1c63      	adds	r3, r4, #1
 8000eb6:	623b      	str	r3, [r7, #32]
 8000eb8:	f7ff fbac 	bl	8000614 <SPI_RxByte>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d9ef      	bls.n	8000eb2 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ede:	e006      	b.n	8000eee <SD_disk_ioctl+0x23e>
      break;
 8000ee0:	bf00      	nop
 8000ee2:	e004      	b.n	8000eee <SD_disk_ioctl+0x23e>
      break;
 8000ee4:	bf00      	nop
 8000ee6:	e002      	b.n	8000eee <SD_disk_ioctl+0x23e>
      break;
 8000ee8:	bf00      	nop
 8000eea:	e000      	b.n	8000eee <SD_disk_ioctl+0x23e>
      break;
 8000eec:	bf00      	nop
    }

    DESELECT();
 8000eee:	f7ff fb4d 	bl	800058c <DESELECT>
    SPI_RxByte();
 8000ef2:	f7ff fb8f 	bl	8000614 <SPI_RxByte>
  }

  return res;
 8000ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	372c      	adds	r7, #44	; 0x2c
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd90      	pop	{r4, r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000000 	.word	0x20000000

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0c:	f000 fd63 	bl	80019d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f10:	f000 f82e 	bl	8000f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f14:	f000 f92c 	bl	8001170 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f18:	f000 f8fa 	bl	8001110 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f1c:	f000 f87a 	bl	8001014 <MX_I2C1_Init>
  MX_FATFS_Init();
 8000f20:	f004 f9e8 	bl	80052f4 <MX_FATFS_Init>
  MX_SPI3_Init();
 8000f24:	f000 f8b6 	bl	8001094 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8000f28:	f000 f9ed 	bl	8001306 <lcd_init>
  lcd_backlight(1); // Turn on backlight
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f000 fa5d 	bl	80013ec <lcd_backlight>

  strcpy(text, "Foobar");
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <main+0x60>)
 8000f34:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <main+0x64>)
 8000f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f3a:	6018      	str	r0, [r3, #0]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	8019      	strh	r1, [r3, #0]
 8000f40:	3302      	adds	r3, #2
 8000f42:	0c0a      	lsrs	r2, r1, #16
 8000f44:	701a      	strb	r2, [r3, #0]
  lcd_clear();
 8000f46:	f000 fa47 	bl	80013d8 <lcd_clear>
  lcd_set_cursor(0, 0);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f000 fa1e 	bl	800138e <lcd_set_cursor>
  lcd_write_string(text);
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <main+0x60>)
 8000f54:	f000 fa06 	bl	8001364 <lcd_write_string>
  HAL_Delay(1000);
 8000f58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f5c:	f000 fdb0 	bl	8001ac0 <HAL_Delay>

  process_SD_card();
 8000f60:	f000 fa5c 	bl	800141c <process_SD_card>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <main+0x5c>
 8000f66:	bf00      	nop
 8000f68:	200001d8 	.word	0x200001d8
 8000f6c:	08008d1c 	.word	0x08008d1c

08000f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b096      	sub	sp, #88	; 0x58
 8000f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	2244      	movs	r2, #68	; 0x44
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f007 fae8 	bl	8008554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f96:	f001 fcf5 	bl	8002984 <HAL_PWREx_ControlVoltageScaling>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fa0:	f000 fb24 	bl	80015ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fb0:	2360      	movs	r3, #96	; 0x60
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fd2b 	bl	8002a30 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000fe0:	f000 fb04 	bl	80015ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f002 f92b 	bl	8003258 <HAL_RCC_ClockConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001008:	f000 faf0 	bl	80015ec <Error_Handler>
  }
}
 800100c:	bf00      	nop
 800100e:	3758      	adds	r7, #88	; 0x58
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_I2C1_Init+0x74>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <MX_I2C1_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_I2C1_Init+0x74>)
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <MX_I2C1_Init+0x7c>)
 8001022:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_I2C1_Init+0x74>)
 800102c:	2201      	movs	r2, #1
 800102e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_I2C1_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_I2C1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_I2C1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_I2C1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104e:	480e      	ldr	r0, [pc, #56]	; (8001088 <MX_I2C1_Init+0x74>)
 8001050:	f001 f82e 	bl	80020b0 <HAL_I2C_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800105a:	f000 fac7 	bl	80015ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105e:	2100      	movs	r1, #0
 8001060:	4809      	ldr	r0, [pc, #36]	; (8001088 <MX_I2C1_Init+0x74>)
 8001062:	f001 fbe9 	bl	8002838 <HAL_I2CEx_ConfigAnalogFilter>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800106c:	f000 fabe 	bl	80015ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001070:	2100      	movs	r1, #0
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_I2C1_Init+0x74>)
 8001074:	f001 fc2b 	bl	80028ce <HAL_I2CEx_ConfigDigitalFilter>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800107e:	f000 fab5 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000098 	.word	0x20000098
 800108c:	40005400 	.word	0x40005400
 8001090:	00707cbb 	.word	0x00707cbb

08001094 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_SPI3_Init+0x74>)
 800109a:	4a1c      	ldr	r2, [pc, #112]	; (800110c <MX_SPI3_Init+0x78>)
 800109c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_SPI3_Init+0x74>)
 80010a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_SPI3_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_SPI3_Init+0x74>)
 80010ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_SPI3_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_SPI3_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_SPI3_Init+0x74>)
 80010c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_SPI3_Init+0x74>)
 80010ca:	2230      	movs	r2, #48	; 0x30
 80010cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_SPI3_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_SPI3_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_SPI3_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_SPI3_Init+0x74>)
 80010e2:	2207      	movs	r2, #7
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_SPI3_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_SPI3_Init+0x74>)
 80010ee:	2208      	movs	r2, #8
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_SPI3_Init+0x74>)
 80010f4:	f002 fdbc 	bl	8003c70 <HAL_SPI_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80010fe:	f000 fa75 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200000ec 	.word	0x200000ec
 800110c:	40003c00 	.word	0x40003c00

08001110 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001116:	4a15      	ldr	r2, [pc, #84]	; (800116c <MX_USART2_UART_Init+0x5c>)
 8001118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_USART2_UART_Init+0x58>)
 800111c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_USART2_UART_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001136:	220c      	movs	r2, #12
 8001138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USART2_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USART2_UART_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001154:	f003 fc3e 	bl	80049d4 <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800115e:	f000 fa45 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000150 	.word	0x20000150
 800116c:	40004400 	.word	0x40004400

08001170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_GPIO_Init+0x94>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <MX_GPIO_Init+0x94>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_GPIO_Init+0x94>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_GPIO_Init+0x94>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <MX_GPIO_Init+0x94>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_GPIO_Init+0x94>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_GPIO_Init+0x94>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_GPIO_Init+0x94>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_GPIO_Init+0x94>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f000 ff52 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80011dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f000 fdd8 	bl	8001dac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011fc:	bf00      	nop
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000

08001208 <lcd_write_nibble>:

/* USER CODE BEGIN 4 */
void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
 800120e:	4603      	mov	r3, r0
 8001210:	460a      	mov	r2, r1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	b2db      	uxtb	r3, r3
 800121e:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	79bb      	ldrb	r3, [r7, #6]
 8001224:	4313      	orrs	r3, r2
 8001226:	b2db      	uxtb	r3, r3
 8001228:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <lcd_write_nibble+0x7c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	b25a      	sxtb	r2, r3
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	b25b      	sxtb	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b25b      	sxtb	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	b2db      	uxtb	r3, r3
 8001246:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001248:	f107 020f 	add.w	r2, r7, #15
 800124c:	2364      	movs	r3, #100	; 0x64
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	214e      	movs	r1, #78	; 0x4e
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <lcd_write_nibble+0x80>)
 8001256:	f000 ffc7 	bl	80021e8 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 800125a:	2001      	movs	r0, #1
 800125c:	f000 fc30 	bl	8001ac0 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	f023 0304 	bic.w	r3, r3, #4
 8001266:	b2db      	uxtb	r3, r3
 8001268:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800126a:	f107 020f 	add.w	r2, r7, #15
 800126e:	2364      	movs	r3, #100	; 0x64
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2301      	movs	r3, #1
 8001274:	214e      	movs	r1, #78	; 0x4e
 8001276:	4804      	ldr	r0, [pc, #16]	; (8001288 <lcd_write_nibble+0x80>)
 8001278:	f000 ffb6 	bl	80021e8 <HAL_I2C_Master_Transmit>
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000001 	.word	0x20000001
 8001288:	20000098 	.word	0x20000098

0800128c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ffad 	bl	8001208 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ffa8 	bl	8001208 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d002      	beq.n	80012c4 <lcd_send_cmd+0x38>
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d102      	bne.n	80012ca <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 80012c4:	2002      	movs	r0, #2
 80012c6:	f000 fbfb 	bl	8001ac0 <HAL_Delay>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	2101      	movs	r1, #1
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff8a 	bl	8001208 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	2101      	movs	r1, #1
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff85 	bl	8001208 <lcd_write_nibble>
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <lcd_init>:

void lcd_init() {
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 800130a:	2032      	movs	r0, #50	; 0x32
 800130c:	f000 fbd8 	bl	8001ac0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001310:	2100      	movs	r1, #0
 8001312:	2003      	movs	r0, #3
 8001314:	f7ff ff78 	bl	8001208 <lcd_write_nibble>
  HAL_Delay(5);
 8001318:	2005      	movs	r0, #5
 800131a:	f000 fbd1 	bl	8001ac0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800131e:	2100      	movs	r1, #0
 8001320:	2003      	movs	r0, #3
 8001322:	f7ff ff71 	bl	8001208 <lcd_write_nibble>
  HAL_Delay(1);
 8001326:	2001      	movs	r0, #1
 8001328:	f000 fbca 	bl	8001ac0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800132c:	2100      	movs	r1, #0
 800132e:	2003      	movs	r0, #3
 8001330:	f7ff ff6a 	bl	8001208 <lcd_write_nibble>
  HAL_Delay(1);
 8001334:	2001      	movs	r0, #1
 8001336:	f000 fbc3 	bl	8001ac0 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 800133a:	2100      	movs	r1, #0
 800133c:	2002      	movs	r0, #2
 800133e:	f7ff ff63 	bl	8001208 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 8001342:	2028      	movs	r0, #40	; 0x28
 8001344:	f7ff ffa2 	bl	800128c <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8001348:	200c      	movs	r0, #12
 800134a:	f7ff ff9f 	bl	800128c <lcd_send_cmd>
  lcd_send_cmd(0x06);
 800134e:	2006      	movs	r0, #6
 8001350:	f7ff ff9c 	bl	800128c <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff ff99 	bl	800128c <lcd_send_cmd>
  HAL_Delay(2);
 800135a:	2002      	movs	r0, #2
 800135c:	f000 fbb0 	bl	8001ac0 <HAL_Delay>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <lcd_write_string>:

void lcd_write_string(char *str) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  while (*str) {
 800136c:	e006      	b.n	800137c <lcd_write_string+0x18>
    lcd_send_data(*str++);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ffab 	bl	80012d2 <lcd_send_data>
  while (*str) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f4      	bne.n	800136e <lcd_write_string+0xa>
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	460a      	mov	r2, r1
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	4613      	mov	r3, r2
 800139c:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <lcd_set_cursor+0x1c>
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d003      	beq.n	80013b0 <lcd_set_cursor+0x22>
 80013a8:	e005      	b.n	80013b6 <lcd_set_cursor+0x28>
        case 0:
            address = 0x00;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
            break;
 80013ae:	e004      	b.n	80013ba <lcd_set_cursor+0x2c>
        case 1:
            address = 0x40;
 80013b0:	2340      	movs	r3, #64	; 0x40
 80013b2:	73fb      	strb	r3, [r7, #15]
            break;
 80013b4:	e001      	b.n	80013ba <lcd_set_cursor+0x2c>
        default:
            address = 0x00;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	4413      	add	r3, r2
 80013c0:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff5e 	bl	800128c <lcd_send_cmd>
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <lcd_clear>:

void lcd_clear(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff ff55 	bl	800128c <lcd_send_cmd>
    HAL_Delay(2);
 80013e2:	2002      	movs	r0, #2
 80013e4:	f000 fb6c 	bl	8001ac0 <HAL_Delay>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <lcd_backlight>:

void lcd_backlight(uint8_t state) {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if (state) {
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <lcd_backlight+0x18>
    backlight_state = 1;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <lcd_backlight+0x2c>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
  } else {
    backlight_state = 0;
  }
}
 8001402:	e002      	b.n	800140a <lcd_backlight+0x1e>
    backlight_state = 0;
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <lcd_backlight+0x2c>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000001 	.word	0x20000001

0800141c <process_SD_card>:

void process_SD_card( void )
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
  FRESULT     fres;                 //Result after operations
  char		  int_to_str[10];

  do
  {
	FatFs = malloc(sizeof (FATFS));
 8001426:	f241 0038 	movw	r0, #4152	; 0x1038
 800142a:	f006 ffb7 	bl	800839c <malloc>
 800142e:	4603      	mov	r3, r0
 8001430:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001434:	f102 0204 	add.w	r2, r2, #4
 8001438:	6013      	str	r3, [r2, #0]
    //Mount the SD Card
    fres = f_mount(FatFs, "", 0);    //1=mount now
 800143a:	2200      	movs	r2, #0
 800143c:	4962      	ldr	r1, [pc, #392]	; (80015c8 <process_SD_card+0x1ac>)
 800143e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001442:	f103 0304 	add.w	r3, r3, #4
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	f006 f99c 	bl	8007784 <f_mount>
 800144c:	4603      	mov	r3, r0
 800144e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001452:	f102 0203 	add.w	r2, r2, #3
 8001456:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 8001458:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800145c:	f103 0303 	add.w	r3, r3, #3
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d029      	beq.n	80014ba <process_SD_card+0x9e>
    {
    	  strcpy(text, "Mount failed");
 8001466:	4a59      	ldr	r2, [pc, #356]	; (80015cc <process_SD_card+0x1b0>)
 8001468:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <process_SD_card+0x1b4>)
 800146a:	4614      	mov	r4, r2
 800146c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800146e:	c407      	stmia	r4!, {r0, r1, r2}
 8001470:	7023      	strb	r3, [r4, #0]
    	  lcd_clear();
 8001472:	f7ff ffb1 	bl	80013d8 <lcd_clear>
    	  lcd_set_cursor(0, 0);
 8001476:	2100      	movs	r1, #0
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff ff88 	bl	800138e <lcd_set_cursor>
    	  lcd_write_string(text);
 800147e:	4853      	ldr	r0, [pc, #332]	; (80015cc <process_SD_card+0x1b0>)
 8001480:	f7ff ff70 	bl	8001364 <lcd_write_string>
    	  sprintf(int_to_str, "%d", fres);
 8001484:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001488:	f103 0303 	add.w	r3, r3, #3
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	3b04      	subs	r3, #4
 8001494:	494f      	ldr	r1, [pc, #316]	; (80015d4 <process_SD_card+0x1b8>)
 8001496:	4618      	mov	r0, r3
 8001498:	f007 f83c 	bl	8008514 <siprintf>
    	  lcd_set_cursor(1, 0);
 800149c:	2100      	movs	r1, #0
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff ff75 	bl	800138e <lcd_set_cursor>
    	  lcd_write_string(int_to_str);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	3b04      	subs	r3, #4
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff5a 	bl	8001364 <lcd_write_string>
    	  HAL_Delay(1000);
 80014b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b4:	f000 fb04 	bl	8001ac0 <HAL_Delay>
    	  break;
 80014b8:	e062      	b.n	8001580 <process_SD_card+0x164>
    }

    //Open the file
    fres = f_open(&fil, "peepeepoopoo.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 80014ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014be:	3b18      	subs	r3, #24
 80014c0:	220b      	movs	r2, #11
 80014c2:	4945      	ldr	r1, [pc, #276]	; (80015d8 <process_SD_card+0x1bc>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f006 f9a3 	bl	8007810 <f_open>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80014d0:	f102 0203 	add.w	r2, r2, #3
 80014d4:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 80014d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80014da:	f103 0303 	add.w	r3, r3, #3
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d02d      	beq.n	8001540 <process_SD_card+0x124>
    {
    	  strcpy(text, "File not open");
 80014e4:	4a39      	ldr	r2, [pc, #228]	; (80015cc <process_SD_card+0x1b0>)
 80014e6:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <process_SD_card+0x1c0>)
 80014e8:	4614      	mov	r4, r2
 80014ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ec:	c407      	stmia	r4!, {r0, r1, r2}
 80014ee:	8023      	strh	r3, [r4, #0]
    	  lcd_clear();
 80014f0:	f7ff ff72 	bl	80013d8 <lcd_clear>
    	  lcd_set_cursor(0, 0);
 80014f4:	2100      	movs	r1, #0
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff ff49 	bl	800138e <lcd_set_cursor>
    	  lcd_write_string(text);
 80014fc:	4833      	ldr	r0, [pc, #204]	; (80015cc <process_SD_card+0x1b0>)
 80014fe:	f7ff ff31 	bl	8001364 <lcd_write_string>
    	  sprintf(int_to_str, "%d", fres);
 8001502:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001506:	f103 0303 	add.w	r3, r3, #3
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	3b04      	subs	r3, #4
 8001512:	4930      	ldr	r1, [pc, #192]	; (80015d4 <process_SD_card+0x1b8>)
 8001514:	4618      	mov	r0, r3
 8001516:	f006 fffd 	bl	8008514 <siprintf>
    	      	  lcd_set_cursor(1, 0);
 800151a:	2100      	movs	r1, #0
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff ff36 	bl	800138e <lcd_set_cursor>
    	      	  lcd_write_string(int_to_str);
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	3b04      	subs	r3, #4
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff1b 	bl	8001364 <lcd_write_string>
    	      	  HAL_Delay(1000);
 800152e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001532:	f000 fac5 	bl	8001ac0 <HAL_Delay>
    	  HAL_Delay(1000);
 8001536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800153a:	f000 fac1 	bl	8001ac0 <HAL_Delay>
      break;
 800153e:	e01f      	b.n	8001580 <process_SD_card+0x164>
    }

    strcpy(text, "Writing data");
 8001540:	4a22      	ldr	r2, [pc, #136]	; (80015cc <process_SD_card+0x1b0>)
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <process_SD_card+0x1c4>)
 8001544:	4614      	mov	r4, r2
 8001546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001548:	c407      	stmia	r4!, {r0, r1, r2}
 800154a:	7023      	strb	r3, [r4, #0]
    lcd_clear();
 800154c:	f7ff ff44 	bl	80013d8 <lcd_clear>
    lcd_set_cursor(0, 0);
 8001550:	2100      	movs	r1, #0
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff ff1b 	bl	800138e <lcd_set_cursor>
    lcd_write_string(text);
 8001558:	481c      	ldr	r0, [pc, #112]	; (80015cc <process_SD_card+0x1b0>)
 800155a:	f7ff ff03 	bl	8001364 <lcd_write_string>
    HAL_Delay(1000);
 800155e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001562:	f000 faad 	bl	8001ac0 <HAL_Delay>
    //write the data
    f_puts("This finally works!", &fil);
 8001566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156a:	3b18      	subs	r3, #24
 800156c:	4619      	mov	r1, r3
 800156e:	481d      	ldr	r0, [pc, #116]	; (80015e4 <process_SD_card+0x1c8>)
 8001570:	f006 fdcd 	bl	800810e <f_puts>

    //close your file
    f_close(&fil);
 8001574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001578:	3b18      	subs	r3, #24
 800157a:	4618      	mov	r0, r3
 800157c:	f006 fd26 	bl	8007fcc <f_close>
    }
#endif
  } while( false );

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8001580:	2200      	movs	r2, #0
 8001582:	4911      	ldr	r1, [pc, #68]	; (80015c8 <process_SD_card+0x1ac>)
 8001584:	2000      	movs	r0, #0
 8001586:	f006 f8fd 	bl	8007784 <f_mount>
  strcpy(text, "Unmounted");
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <process_SD_card+0x1b0>)
 800158c:	4a16      	ldr	r2, [pc, #88]	; (80015e8 <process_SD_card+0x1cc>)
 800158e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001590:	c303      	stmia	r3!, {r0, r1}
 8001592:	801a      	strh	r2, [r3, #0]
  lcd_clear();
 8001594:	f7ff ff20 	bl	80013d8 <lcd_clear>
  lcd_set_cursor(0, 0);
 8001598:	2100      	movs	r1, #0
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fef7 	bl	800138e <lcd_set_cursor>
  lcd_write_string(text);
 80015a0:	480a      	ldr	r0, [pc, #40]	; (80015cc <process_SD_card+0x1b0>)
 80015a2:	f7ff fedf 	bl	8001364 <lcd_write_string>
  HAL_Delay(1000);
 80015a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015aa:	f000 fa89 	bl	8001ac0 <HAL_Delay>
  free(FatFs);
 80015ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80015b2:	f103 0304 	add.w	r3, r3, #4
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	f006 fef8 	bl	80083ac <free>
}
 80015bc:	bf00      	nop
 80015be:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd90      	pop	{r4, r7, pc}
 80015c8:	08008d24 	.word	0x08008d24
 80015cc:	200001d8 	.word	0x200001d8
 80015d0:	08008d28 	.word	0x08008d28
 80015d4:	08008d38 	.word	0x08008d38
 80015d8:	08008d3c 	.word	0x08008d3c
 80015dc:	08008d50 	.word	0x08008d50
 80015e0:	08008d60 	.word	0x08008d60
 80015e4:	08008d70 	.word	0x08008d70
 80015e8:	08008d84 	.word	0x08008d84

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f0:	b672      	cpsid	i
}
 80015f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <Error_Handler+0x8>
	...

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_MspInit+0x44>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_MspInit+0x44>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6613      	str	r3, [r2, #96]	; 0x60
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_MspInit+0x44>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x44>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_MspInit+0x44>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6593      	str	r3, [r2, #88]	; 0x58
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_MspInit+0x44>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b09e      	sub	sp, #120	; 0x78
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	2254      	movs	r2, #84	; 0x54
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f006 ff77 	bl	8008554 <memset>
  if(hi2c->Instance==I2C1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_I2C_MspInit+0xa4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d135      	bne.n	80016dc <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001670:	2340      	movs	r3, #64	; 0x40
 8001672:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001674:	2300      	movs	r3, #0
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	4618      	mov	r0, r3
 800167e:	f002 f80f 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001688:	f7ff ffb0 	bl	80015ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_I2C_MspInit+0xa8>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <HAL_I2C_MspInit+0xa8>)
 8001692:	f043 0302 	orr.w	r3, r3, #2
 8001696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_I2C_MspInit+0xa8>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016a4:	23c0      	movs	r3, #192	; 0xc0
 80016a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a8:	2312      	movs	r3, #18
 80016aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b4:	2304      	movs	r3, #4
 80016b6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016bc:	4619      	mov	r1, r3
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <HAL_I2C_MspInit+0xac>)
 80016c0:	f000 fb74 	bl	8001dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_I2C_MspInit+0xa8>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_I2C_MspInit+0xa8>)
 80016ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ce:	6593      	str	r3, [r2, #88]	; 0x58
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_I2C_MspInit+0xa8>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	3778      	adds	r7, #120	; 0x78
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40005400 	.word	0x40005400
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000400 	.word	0x48000400

080016f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <HAL_SPI_MspInit+0x8c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12f      	bne.n	8001772 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_SPI_MspInit+0x90>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <HAL_SPI_MspInit+0x90>)
 8001718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171c:	6593      	str	r3, [r2, #88]	; 0x58
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_SPI_MspInit+0x90>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_SPI_MspInit+0x90>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <HAL_SPI_MspInit+0x90>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_SPI_MspInit+0x90>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001742:	2338      	movs	r3, #56	; 0x38
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001752:	2306      	movs	r3, #6
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4809      	ldr	r0, [pc, #36]	; (8001784 <HAL_SPI_MspInit+0x94>)
 800175e:	f000 fb25 	bl	8001dac <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	2033      	movs	r0, #51	; 0x33
 8001768:	f000 faa9 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800176c:	2033      	movs	r0, #51	; 0x33
 800176e:	f000 fac2 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001772:	bf00      	nop
 8001774:	3728      	adds	r7, #40	; 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40003c00 	.word	0x40003c00
 8001780:	40021000 	.word	0x40021000
 8001784:	48000400 	.word	0x48000400

08001788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b09e      	sub	sp, #120	; 0x78
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	2254      	movs	r2, #84	; 0x54
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f006 fed3 	bl	8008554 <memset>
  if(huart->Instance==USART2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a28      	ldr	r2, [pc, #160]	; (8001854 <HAL_UART_MspInit+0xcc>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d148      	bne.n	800184a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017b8:	2302      	movs	r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017bc:	2300      	movs	r3, #0
 80017be:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 ff6b 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017d0:	f7ff ff0c 	bl	80015ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_UART_MspInit+0xd0>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <HAL_UART_MspInit+0xd0>)
 80017da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017de:	6593      	str	r3, [r2, #88]	; 0x58
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_UART_MspInit+0xd0>)
 80017e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <HAL_UART_MspInit+0xd0>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_UART_MspInit+0xd0>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_UART_MspInit+0xd0>)
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001804:	2304      	movs	r3, #4
 8001806:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001814:	2307      	movs	r3, #7
 8001816:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800181c:	4619      	mov	r1, r3
 800181e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001822:	f000 fac3 	bl	8001dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800182a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001838:	2303      	movs	r3, #3
 800183a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001840:	4619      	mov	r1, r3
 8001842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001846:	f000 fab1 	bl	8001dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3778      	adds	r7, #120	; 0x78
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40004400 	.word	0x40004400
 8001858:	40021000 	.word	0x40021000

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001860:	e7fe      	b.n	8001860 <NMI_Handler+0x4>

08001862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <HardFault_Handler+0x4>

08001868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <MemManage_Handler+0x4>

0800186e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <BusFault_Handler+0x4>

08001874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <UsageFault_Handler+0x4>

0800187a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <SysTick_Handler+0x34>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <SysTick_Handler+0x18>
	  Timer1--;
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <SysTick_Handler+0x34>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <SysTick_Handler+0x34>)
 80018ba:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <SysTick_Handler+0x38>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <SysTick_Handler+0x2c>
	  Timer2--;
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <SysTick_Handler+0x38>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <SysTick_Handler+0x38>)
 80018ce:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d0:	f000 f8d6 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000090 	.word	0x20000090
 80018dc:	20000092 	.word	0x20000092

080018e0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <SPI3_IRQHandler+0x10>)
 80018e6:	f002 fdfd 	bl	80044e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200000ec 	.word	0x200000ec

080018f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <_sbrk+0x5c>)
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <_sbrk+0x60>)
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <_sbrk+0x64>)
 8001912:	4a12      	ldr	r2, [pc, #72]	; (800195c <_sbrk+0x68>)
 8001914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	429a      	cmp	r2, r3
 8001922:	d207      	bcs.n	8001934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001924:	f006 fe2e 	bl	8008584 <__errno>
 8001928:	4603      	mov	r3, r0
 800192a:	220c      	movs	r2, #12
 800192c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	e009      	b.n	8001948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <_sbrk+0x64>)
 8001944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20010000 	.word	0x20010000
 8001954:	00000400 	.word	0x00000400
 8001958:	200001ec 	.word	0x200001ec
 800195c:	20000578 	.word	0x20000578

08001960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <SystemInit+0x20>)
 8001966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <SystemInit+0x20>)
 800196c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001988:	f7ff ffea 	bl	8001960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800198c:	480c      	ldr	r0, [pc, #48]	; (80019c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800198e:	490d      	ldr	r1, [pc, #52]	; (80019c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001990:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <LoopForever+0xe>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a4:	4c0a      	ldr	r4, [pc, #40]	; (80019d0 <LoopForever+0x16>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b2:	f006 fded 	bl	8008590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019b6:	f7ff faa7 	bl	8000f08 <main>

080019ba <LoopForever>:

LoopForever:
    b LoopForever
 80019ba:	e7fe      	b.n	80019ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019c8:	080092a4 	.word	0x080092a4
  ldr r2, =_sbss
 80019cc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019d0:	20000578 	.word	0x20000578

080019d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC1_IRQHandler>

080019d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f961 	bl	8001ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e6:	2000      	movs	r0, #0
 80019e8:	f000 f80e 	bl	8001a08 <HAL_InitTick>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	e001      	b.n	80019fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019f8:	f7ff fdfe 	bl	80015f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019fc:	79fb      	ldrb	r3, [r7, #7]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_InitTick+0x6c>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d023      	beq.n	8001a64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_InitTick+0x70>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <HAL_InitTick+0x6c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f96d 	bl	8001d12 <HAL_SYSTICK_Config>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10f      	bne.n	8001a5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d809      	bhi.n	8001a58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f000 f937 	bl	8001cbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a50:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <HAL_InitTick+0x74>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e007      	b.n	8001a68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	e004      	b.n	8001a68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	e001      	b.n	8001a68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000000c 	.word	0x2000000c
 8001a78:	20000004 	.word	0x20000004
 8001a7c:	20000008 	.word	0x20000008

08001a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_IncTick+0x24>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <HAL_IncTick+0x24>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	2000000c 	.word	0x2000000c
 8001aa4:	200001f0 	.word	0x200001f0

08001aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_GetTick+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	200001f0 	.word	0x200001f0

08001ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac8:	f7ff ffee 	bl	8001aa8 <HAL_GetTick>
 8001acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad8:	d005      	beq.n	8001ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_Delay+0x44>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ae6:	bf00      	nop
 8001ae8:	f7ff ffde 	bl	8001aa8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d8f7      	bhi.n	8001ae8 <HAL_Delay+0x28>
  {
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000000c 	.word	0x2000000c

08001b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3a:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60d3      	str	r3, [r2, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db0b      	blt.n	8001b96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4907      	ldr	r1, [pc, #28]	; (8001ba4 <__NVIC_EnableIRQ+0x38>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000e100 	.word	0xe000e100

08001ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	db0a      	blt.n	8001bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	490c      	ldr	r1, [pc, #48]	; (8001bf4 <__NVIC_SetPriority+0x4c>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	0112      	lsls	r2, r2, #4
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	440b      	add	r3, r1
 8001bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd0:	e00a      	b.n	8001be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4908      	ldr	r1, [pc, #32]	; (8001bf8 <__NVIC_SetPriority+0x50>)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	3b04      	subs	r3, #4
 8001be0:	0112      	lsls	r2, r2, #4
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	440b      	add	r3, r1
 8001be6:	761a      	strb	r2, [r3, #24]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000e100 	.word	0xe000e100
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f1c3 0307 	rsb	r3, r3, #7
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	bf28      	it	cs
 8001c1a:	2304      	movcs	r3, #4
 8001c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3304      	adds	r3, #4
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d902      	bls.n	8001c2c <NVIC_EncodePriority+0x30>
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3b03      	subs	r3, #3
 8001c2a:	e000      	b.n	8001c2e <NVIC_EncodePriority+0x32>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	401a      	ands	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	43d9      	mvns	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	4313      	orrs	r3, r2
         );
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c74:	d301      	bcc.n	8001c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00f      	b.n	8001c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <SysTick_Config+0x40>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c82:	210f      	movs	r1, #15
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f7ff ff8e 	bl	8001ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <SysTick_Config+0x40>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <SysTick_Config+0x40>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	e000e010 	.word	0xe000e010

08001ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff29 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd0:	f7ff ff3e 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7ff ff8e 	bl	8001bfc <NVIC_EncodePriority>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff5d 	bl	8001ba8 <__NVIC_SetPriority>
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff31 	bl	8001b6c <__NVIC_EnableIRQ>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ffa2 	bl	8001c64 <SysTick_Config>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d005      	beq.n	8001d4e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2204      	movs	r2, #4
 8001d46:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e029      	b.n	8001da2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 020e 	bic.w	r2, r2, #14
 8001d5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f003 021c 	and.w	r2, r3, #28
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d80:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
    }
  }
  return status;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dba:	e148      	b.n	800204e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 813a 	beq.w	8002048 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d005      	beq.n	8001dec <HAL_GPIO_Init+0x40>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d130      	bne.n	8001e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e22:	2201      	movs	r2, #1
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	f003 0201 	and.w	r2, r3, #1
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d017      	beq.n	8001e8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2203      	movs	r2, #3
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d123      	bne.n	8001ede <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	08da      	lsrs	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3208      	adds	r2, #8
 8001e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	220f      	movs	r2, #15
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	08da      	lsrs	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3208      	adds	r2, #8
 8001ed8:	6939      	ldr	r1, [r7, #16]
 8001eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	2203      	movs	r2, #3
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0203 	and.w	r2, r3, #3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8094 	beq.w	8002048 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f20:	4b52      	ldr	r3, [pc, #328]	; (800206c <HAL_GPIO_Init+0x2c0>)
 8001f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f24:	4a51      	ldr	r2, [pc, #324]	; (800206c <HAL_GPIO_Init+0x2c0>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f2c:	4b4f      	ldr	r3, [pc, #316]	; (800206c <HAL_GPIO_Init+0x2c0>)
 8001f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f38:	4a4d      	ldr	r2, [pc, #308]	; (8002070 <HAL_GPIO_Init+0x2c4>)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f62:	d00d      	beq.n	8001f80 <HAL_GPIO_Init+0x1d4>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a43      	ldr	r2, [pc, #268]	; (8002074 <HAL_GPIO_Init+0x2c8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d007      	beq.n	8001f7c <HAL_GPIO_Init+0x1d0>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a42      	ldr	r2, [pc, #264]	; (8002078 <HAL_GPIO_Init+0x2cc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d101      	bne.n	8001f78 <HAL_GPIO_Init+0x1cc>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e004      	b.n	8001f82 <HAL_GPIO_Init+0x1d6>
 8001f78:	2307      	movs	r3, #7
 8001f7a:	e002      	b.n	8001f82 <HAL_GPIO_Init+0x1d6>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_GPIO_Init+0x1d6>
 8001f80:	2300      	movs	r3, #0
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	f002 0203 	and.w	r2, r2, #3
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	4093      	lsls	r3, r2
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f92:	4937      	ldr	r1, [pc, #220]	; (8002070 <HAL_GPIO_Init+0x2c4>)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3302      	adds	r3, #2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa0:	4b36      	ldr	r3, [pc, #216]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fc4:	4a2d      	ldr	r2, [pc, #180]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fca:	4b2c      	ldr	r3, [pc, #176]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fee:	4a23      	ldr	r2, [pc, #140]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ff4:	4b21      	ldr	r3, [pc, #132]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002018:	4a18      	ldr	r2, [pc, #96]	; (800207c <HAL_GPIO_Init+0x2d0>)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002042:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3301      	adds	r3, #1
 800204c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	f47f aeaf 	bne.w	8001dbc <HAL_GPIO_Init+0x10>
  }
}
 800205e:	bf00      	nop
 8002060:	bf00      	nop
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	40021000 	.word	0x40021000
 8002070:	40010000 	.word	0x40010000
 8002074:	48000400 	.word	0x48000400
 8002078:	48000800 	.word	0x48000800
 800207c:	40010400 	.word	0x40010400

08002080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002090:	787b      	ldrb	r3, [r7, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800209e:	887a      	ldrh	r2, [r7, #2]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e08d      	b.n	80021de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff fab2 	bl	8001640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2224      	movs	r2, #36	; 0x24
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002100:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002110:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	e006      	b.n	8002138 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002136:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d108      	bne.n	8002152 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	e007      	b.n	8002162 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002160:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002174:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002184:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69d9      	ldr	r1, [r3, #28]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	460b      	mov	r3, r1
 80021f6:	817b      	strh	r3, [r7, #10]
 80021f8:	4613      	mov	r3, r2
 80021fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b20      	cmp	r3, #32
 8002206:	f040 80fd 	bne.w	8002404 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_I2C_Master_Transmit+0x30>
 8002214:	2302      	movs	r3, #2
 8002216:	e0f6      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002220:	f7ff fc42 	bl	8001aa8 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2319      	movs	r3, #25
 800222c:	2201      	movs	r2, #1
 800222e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f914 	bl	8002460 <I2C_WaitOnFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0e1      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2221      	movs	r2, #33	; 0x21
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2210      	movs	r2, #16
 800224e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	893a      	ldrh	r2, [r7, #8]
 8002262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	2bff      	cmp	r3, #255	; 0xff
 8002272:	d906      	bls.n	8002282 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	22ff      	movs	r2, #255	; 0xff
 8002278:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800227a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e007      	b.n	8002292 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800228c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002290:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002296:	2b00      	cmp	r3, #0
 8002298:	d024      	beq.n	80022e4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	8979      	ldrh	r1, [r7, #10]
 80022d6:	4b4e      	ldr	r3, [pc, #312]	; (8002410 <HAL_I2C_Master_Transmit+0x228>)
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fa79 	bl	80027d4 <I2C_TransferConfig>
 80022e2:	e066      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	8979      	ldrh	r1, [r7, #10]
 80022ec:	4b48      	ldr	r3, [pc, #288]	; (8002410 <HAL_I2C_Master_Transmit+0x228>)
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fa6e 	bl	80027d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80022f8:	e05b      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	6a39      	ldr	r1, [r7, #32]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f8fd 	bl	80024fe <I2C_WaitOnTXISFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e07b      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d034      	beq.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d130      	bne.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	2200      	movs	r2, #0
 8002358:	2180      	movs	r1, #128	; 0x80
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f880 	bl	8002460 <I2C_WaitOnFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e04d      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	2bff      	cmp	r3, #255	; 0xff
 8002372:	d90e      	bls.n	8002392 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	22ff      	movs	r2, #255	; 0xff
 8002378:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	b2da      	uxtb	r2, r3
 8002380:	8979      	ldrh	r1, [r7, #10]
 8002382:	2300      	movs	r3, #0
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fa22 	bl	80027d4 <I2C_TransferConfig>
 8002390:	e00f      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	8979      	ldrh	r1, [r7, #10]
 80023a4:	2300      	movs	r3, #0
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fa11 	bl	80027d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d19e      	bne.n	80022fa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	6a39      	ldr	r1, [r7, #32]
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f8e3 	bl	800258c <I2C_WaitOnSTOPFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e01a      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2220      	movs	r2, #32
 80023d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_I2C_Master_Transmit+0x22c>)
 80023e4:	400b      	ands	r3, r1
 80023e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e000      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002404:	2302      	movs	r3, #2
  }
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	80002000 	.word	0x80002000
 8002414:	fe00e800 	.word	0xfe00e800

08002418 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b02      	cmp	r3, #2
 800242c:	d103      	bne.n	8002436 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d007      	beq.n	8002454 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	619a      	str	r2, [r3, #24]
  }
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	4613      	mov	r3, r2
 800246e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002470:	e031      	b.n	80024d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d02d      	beq.n	80024d6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247a:	f7ff fb15 	bl	8001aa8 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d302      	bcc.n	8002490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d122      	bne.n	80024d6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	4013      	ands	r3, r2
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	429a      	cmp	r2, r3
 800249e:	bf0c      	ite	eq
 80024a0:	2301      	moveq	r3, #1
 80024a2:	2300      	movne	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d113      	bne.n	80024d6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f043 0220 	orr.w	r2, r3, #32
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699a      	ldr	r2, [r3, #24]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4013      	ands	r3, r2
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	bf0c      	ite	eq
 80024e6:	2301      	moveq	r3, #1
 80024e8:	2300      	movne	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d0be      	beq.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800250a:	e033      	b.n	8002574 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f87f 	bl	8002614 <I2C_IsErrorOccurred>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e031      	b.n	8002584 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d025      	beq.n	8002574 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002528:	f7ff fabe 	bl	8001aa8 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	429a      	cmp	r2, r3
 8002536:	d302      	bcc.n	800253e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d11a      	bne.n	8002574 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b02      	cmp	r3, #2
 800254a:	d013      	beq.n	8002574 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e007      	b.n	8002584 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b02      	cmp	r3, #2
 8002580:	d1c4      	bne.n	800250c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002598:	e02f      	b.n	80025fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f838 	bl	8002614 <I2C_IsErrorOccurred>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e02d      	b.n	800260a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ae:	f7ff fa7b 	bl	8001aa8 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d302      	bcc.n	80025c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d11a      	bne.n	80025fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d013      	beq.n	80025fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f043 0220 	orr.w	r2, r3, #32
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e007      	b.n	800260a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b20      	cmp	r3, #32
 8002606:	d1c8      	bne.n	800259a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	d068      	beq.n	8002712 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2210      	movs	r2, #16
 8002646:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002648:	e049      	b.n	80026de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d045      	beq.n	80026de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002652:	f7ff fa29 	bl	8001aa8 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	429a      	cmp	r2, r3
 8002660:	d302      	bcc.n	8002668 <I2C_IsErrorOccurred+0x54>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d13a      	bne.n	80026de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002672:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800267a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800268a:	d121      	bne.n	80026d0 <I2C_IsErrorOccurred+0xbc>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002692:	d01d      	beq.n	80026d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b20      	cmp	r3, #32
 8002698:	d01a      	beq.n	80026d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80026aa:	f7ff f9fd 	bl	8001aa8 <HAL_GetTick>
 80026ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026b0:	e00e      	b.n	80026d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026b2:	f7ff f9f9 	bl	8001aa8 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b19      	cmp	r3, #25
 80026be:	d907      	bls.n	80026d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f043 0320 	orr.w	r3, r3, #32
 80026c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80026ce:	e006      	b.n	80026de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d1e9      	bne.n	80026b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d003      	beq.n	80026f4 <I2C_IsErrorOccurred+0xe0>
 80026ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0aa      	beq.n	800264a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2220      	movs	r2, #32
 8002702:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00b      	beq.n	800273c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002734:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f043 0308 	orr.w	r3, r3, #8
 800274c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002756:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00b      	beq.n	8002780 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f043 0302 	orr.w	r3, r3, #2
 800276e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002778:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01c      	beq.n	80027c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7ff fe45 	bl	8002418 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <I2C_IsErrorOccurred+0x1bc>)
 800279a:	400b      	ands	r3, r1
 800279c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80027c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3728      	adds	r7, #40	; 0x28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	fe00e800 	.word	0xfe00e800

080027d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	817b      	strh	r3, [r7, #10]
 80027e2:	4613      	mov	r3, r2
 80027e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027e6:	897b      	ldrh	r3, [r7, #10]
 80027e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027ec:	7a7b      	ldrb	r3, [r7, #9]
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002802:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	0d5b      	lsrs	r3, r3, #21
 800280e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <I2C_TransferConfig+0x60>)
 8002814:	430b      	orrs	r3, r1
 8002816:	43db      	mvns	r3, r3
 8002818:	ea02 0103 	and.w	r1, r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	03ff63ff 	.word	0x03ff63ff

08002838 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b20      	cmp	r3, #32
 800284c:	d138      	bne.n	80028c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002858:	2302      	movs	r3, #2
 800285a:	e032      	b.n	80028c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2224      	movs	r2, #36	; 0x24
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800288a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6819      	ldr	r1, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d139      	bne.n	8002958 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e033      	b.n	800295a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2224      	movs	r2, #36	; 0x24
 80028fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0201 	bic.w	r2, r2, #1
 8002910:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002920:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4313      	orrs	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e000      	b.n	800295a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <HAL_PWREx_GetVoltageRange+0x18>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40007000 	.word	0x40007000

08002984 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002992:	d130      	bne.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002994:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800299c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a0:	d038      	beq.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029aa:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029b2:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2232      	movs	r2, #50	; 0x32
 80029b8:	fb02 f303 	mul.w	r3, r2, r3
 80029bc:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0c9b      	lsrs	r3, r3, #18
 80029c4:	3301      	adds	r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029c8:	e002      	b.n	80029d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029dc:	d102      	bne.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f2      	bne.n	80029ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f0:	d110      	bne.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e00f      	b.n	8002a16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a02:	d007      	beq.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a0c:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40007000 	.word	0x40007000
 8002a28:	20000004 	.word	0x20000004
 8002a2c:	431bde83 	.word	0x431bde83

08002a30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f000 bc02 	b.w	8003248 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a44:	4b96      	ldr	r3, [pc, #600]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a4e:	4b94      	ldr	r3, [pc, #592]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80e4 	beq.w	8002c2e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4c>
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	f040 808b 	bne.w	8002b8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	f040 8087 	bne.w	8002b8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a7c:	4b88      	ldr	r3, [pc, #544]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_OscConfig+0x64>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e3d9      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1a      	ldr	r2, [r3, #32]
 8002a98:	4b81      	ldr	r3, [pc, #516]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d004      	beq.n	8002aae <HAL_RCC_OscConfig+0x7e>
 8002aa4:	4b7e      	ldr	r3, [pc, #504]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aac:	e005      	b.n	8002aba <HAL_RCC_OscConfig+0x8a>
 8002aae:	4b7c      	ldr	r3, [pc, #496]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d223      	bcs.n	8002b06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fd8c 	bl	80035e0 <RCC_SetFlashLatencyFromMSIRange>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e3ba      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad2:	4b73      	ldr	r3, [pc, #460]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a72      	ldr	r2, [pc, #456]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	f043 0308 	orr.w	r3, r3, #8
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b70      	ldr	r3, [pc, #448]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	496d      	ldr	r1, [pc, #436]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af0:	4b6b      	ldr	r3, [pc, #428]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	4968      	ldr	r1, [pc, #416]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
 8002b04:	e025      	b.n	8002b52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b06:	4b66      	ldr	r3, [pc, #408]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a65      	ldr	r2, [pc, #404]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	f043 0308 	orr.w	r3, r3, #8
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	4960      	ldr	r1, [pc, #384]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b24:	4b5e      	ldr	r3, [pc, #376]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	495b      	ldr	r1, [pc, #364]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fd4c 	bl	80035e0 <RCC_SetFlashLatencyFromMSIRange>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e37a      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b52:	f000 fc81 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8002b56:	4602      	mov	r2, r0
 8002b58:	4b51      	ldr	r3, [pc, #324]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	4950      	ldr	r1, [pc, #320]	; (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002b64:	5ccb      	ldrb	r3, [r1, r3]
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	4a4e      	ldr	r2, [pc, #312]	; (8002ca8 <HAL_RCC_OscConfig+0x278>)
 8002b70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b72:	4b4e      	ldr	r3, [pc, #312]	; (8002cac <HAL_RCC_OscConfig+0x27c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe ff46 	bl	8001a08 <HAL_InitTick>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d052      	beq.n	8002c2c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	e35e      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d032      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b92:	4b43      	ldr	r3, [pc, #268]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a42      	ldr	r2, [pc, #264]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b9e:	f7fe ff83 	bl	8001aa8 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ba6:	f7fe ff7f 	bl	8001aa8 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e347      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bb8:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bc4:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a35      	ldr	r2, [pc, #212]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bca:	f043 0308 	orr.w	r3, r3, #8
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4930      	ldr	r1, [pc, #192]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002be2:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	492b      	ldr	r1, [pc, #172]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
 8002bf6:	e01a      	b.n	8002c2e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bf8:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a28      	ldr	r2, [pc, #160]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c04:	f7fe ff50 	bl	8001aa8 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c0c:	f7fe ff4c 	bl	8001aa8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e314      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x1dc>
 8002c2a:	e000      	b.n	8002c2e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d073      	beq.n	8002d22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_OscConfig+0x21c>
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	d10e      	bne.n	8002c64 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d10b      	bne.n	8002c64 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d063      	beq.n	8002d20 <HAL_RCC_OscConfig+0x2f0>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d15f      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e2f1      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6c:	d106      	bne.n	8002c7c <HAL_RCC_OscConfig+0x24c>
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e025      	b.n	8002cc8 <HAL_RCC_OscConfig+0x298>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c84:	d114      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x280>
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a02      	ldr	r2, [pc, #8]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e013      	b.n	8002cc8 <HAL_RCC_OscConfig+0x298>
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	08008dd8 	.word	0x08008dd8
 8002ca8:	20000004 	.word	0x20000004
 8002cac:	20000008 	.word	0x20000008
 8002cb0:	4ba0      	ldr	r3, [pc, #640]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a9f      	ldr	r2, [pc, #636]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b9d      	ldr	r3, [pc, #628]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a9c      	ldr	r2, [pc, #624]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe feea 	bl	8001aa8 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fee6 	bl	8001aa8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e2ae      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cea:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x2a8>
 8002cf6:	e014      	b.n	8002d22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fed6 	bl	8001aa8 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe fed2 	bl	8001aa8 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e29a      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d12:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2d0>
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d060      	beq.n	8002df0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_OscConfig+0x310>
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b0c      	cmp	r3, #12
 8002d38:	d119      	bne.n	8002d6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d116      	bne.n	8002d6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d40:	4b7c      	ldr	r3, [pc, #496]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_OscConfig+0x328>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e277      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b76      	ldr	r3, [pc, #472]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	4973      	ldr	r1, [pc, #460]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d6c:	e040      	b.n	8002df0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d023      	beq.n	8002dbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d76:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7fe fe91 	bl	8001aa8 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8a:	f7fe fe8d 	bl	8001aa8 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e255      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d9c:	4b65      	ldr	r3, [pc, #404]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da8:	4b62      	ldr	r3, [pc, #392]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	061b      	lsls	r3, r3, #24
 8002db6:	495f      	ldr	r1, [pc, #380]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
 8002dbc:	e018      	b.n	8002df0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5c      	ldr	r2, [pc, #368]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7fe fe6d 	bl	8001aa8 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd2:	f7fe fe69 	bl	8001aa8 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e231      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002de4:	4b53      	ldr	r3, [pc, #332]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d03c      	beq.n	8002e76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01c      	beq.n	8002e3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e04:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0a:	4a4a      	ldr	r2, [pc, #296]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e14:	f7fe fe48 	bl	8001aa8 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1c:	f7fe fe44 	bl	8001aa8 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e20c      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e2e:	4b41      	ldr	r3, [pc, #260]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0ef      	beq.n	8002e1c <HAL_RCC_OscConfig+0x3ec>
 8002e3c:	e01b      	b.n	8002e76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e44:	4a3b      	ldr	r2, [pc, #236]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e46:	f023 0301 	bic.w	r3, r3, #1
 8002e4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4e:	f7fe fe2b 	bl	8001aa8 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e56:	f7fe fe27 	bl	8001aa8 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e1ef      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e68:	4b32      	ldr	r3, [pc, #200]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1ef      	bne.n	8002e56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80a6 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e84:	2300      	movs	r3, #0
 8002e86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e88:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10d      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	4a26      	ldr	r2, [pc, #152]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea0:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eac:	2301      	movs	r3, #1
 8002eae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <HAL_RCC_OscConfig+0x508>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d118      	bne.n	8002eee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <HAL_RCC_OscConfig+0x508>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_RCC_OscConfig+0x508>)
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec8:	f7fe fdee 	bl	8001aa8 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed0:	f7fe fdea 	bl	8001aa8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1b2      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_RCC_OscConfig+0x508>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d108      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4d8>
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efc:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f06:	e029      	b.n	8002f5c <HAL_RCC_OscConfig+0x52c>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d115      	bne.n	8002f3c <HAL_RCC_OscConfig+0x50c>
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002f18:	f043 0304 	orr.w	r3, r3, #4
 8002f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f20:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	4a03      	ldr	r2, [pc, #12]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f30:	e014      	b.n	8002f5c <HAL_RCC_OscConfig+0x52c>
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	4b9a      	ldr	r3, [pc, #616]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	4a99      	ldr	r2, [pc, #612]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f4c:	4b96      	ldr	r3, [pc, #600]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	4a95      	ldr	r2, [pc, #596]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8002f54:	f023 0304 	bic.w	r3, r3, #4
 8002f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d016      	beq.n	8002f92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fe fda0 	bl	8001aa8 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6c:	f7fe fd9c 	bl	8001aa8 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e162      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f82:	4b89      	ldr	r3, [pc, #548]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0ed      	beq.n	8002f6c <HAL_RCC_OscConfig+0x53c>
 8002f90:	e015      	b.n	8002fbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f92:	f7fe fd89 	bl	8001aa8 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fe fd85 	bl	8001aa8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e14b      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fb0:	4b7d      	ldr	r3, [pc, #500]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1ed      	bne.n	8002f9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fbe:	7ffb      	ldrb	r3, [r7, #31]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d105      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc4:	4b78      	ldr	r3, [pc, #480]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	4a77      	ldr	r2, [pc, #476]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8002fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d03c      	beq.n	8003056 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01c      	beq.n	800301e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fe4:	4b70      	ldr	r3, [pc, #448]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8002fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fea:	4a6f      	ldr	r2, [pc, #444]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff4:	f7fe fd58 	bl	8001aa8 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ffc:	f7fe fd54 	bl	8001aa8 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e11c      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800300e:	4b66      	ldr	r3, [pc, #408]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8003010:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ef      	beq.n	8002ffc <HAL_RCC_OscConfig+0x5cc>
 800301c:	e01b      	b.n	8003056 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800301e:	4b62      	ldr	r3, [pc, #392]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8003020:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003024:	4a60      	ldr	r2, [pc, #384]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8003026:	f023 0301 	bic.w	r3, r3, #1
 800302a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302e:	f7fe fd3b 	bl	8001aa8 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003036:	f7fe fd37 	bl	8001aa8 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e0ff      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003048:	4b57      	ldr	r3, [pc, #348]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 800304a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1ef      	bne.n	8003036 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 80f3 	beq.w	8003246 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	2b02      	cmp	r3, #2
 8003066:	f040 80c9 	bne.w	80031fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800306a:	4b4f      	ldr	r3, [pc, #316]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f003 0203 	and.w	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	429a      	cmp	r2, r3
 800307c:	d12c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	3b01      	subs	r3, #1
 800308a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d123      	bne.n	80030d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d11b      	bne.n	80030d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d113      	bne.n	80030d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	3b01      	subs	r3, #1
 80030be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d109      	bne.n	80030d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	3b01      	subs	r3, #1
 80030d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d06b      	beq.n	80031b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	d062      	beq.n	80031a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030de:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0ac      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030ee:	4b2e      	ldr	r3, [pc, #184]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2d      	ldr	r2, [pc, #180]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 80030f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030fa:	f7fe fcd5 	bl	8001aa8 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003102:	f7fe fcd1 	bl	8001aa8 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e099      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003114:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f0      	bne.n	8003102 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003120:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	4b21      	ldr	r3, [pc, #132]	; (80031ac <HAL_RCC_OscConfig+0x77c>)
 8003126:	4013      	ands	r3, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003130:	3a01      	subs	r2, #1
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	4311      	orrs	r1, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800313a:	0212      	lsls	r2, r2, #8
 800313c:	4311      	orrs	r1, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003142:	0852      	lsrs	r2, r2, #1
 8003144:	3a01      	subs	r2, #1
 8003146:	0552      	lsls	r2, r2, #21
 8003148:	4311      	orrs	r1, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800314e:	0852      	lsrs	r2, r2, #1
 8003150:	3a01      	subs	r2, #1
 8003152:	0652      	lsls	r2, r2, #25
 8003154:	4311      	orrs	r1, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800315a:	06d2      	lsls	r2, r2, #27
 800315c:	430a      	orrs	r2, r1
 800315e:	4912      	ldr	r1, [pc, #72]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8003160:	4313      	orrs	r3, r2
 8003162:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003164:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 800316a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003170:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4a0c      	ldr	r2, [pc, #48]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8003176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800317c:	f7fe fc94 	bl	8001aa8 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003184:	f7fe fc90 	bl	8001aa8 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e058      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003196:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <HAL_RCC_OscConfig+0x778>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031a2:	e050      	b.n	8003246 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e04f      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
 80031a8:	40021000 	.word	0x40021000
 80031ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <HAL_RCC_OscConfig+0x820>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d144      	bne.n	8003246 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031bc:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_RCC_OscConfig+0x820>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a23      	ldr	r2, [pc, #140]	; (8003250 <HAL_RCC_OscConfig+0x820>)
 80031c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031c8:	4b21      	ldr	r3, [pc, #132]	; (8003250 <HAL_RCC_OscConfig+0x820>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a20      	ldr	r2, [pc, #128]	; (8003250 <HAL_RCC_OscConfig+0x820>)
 80031ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031d4:	f7fe fc68 	bl	8001aa8 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe fc64 	bl	8001aa8 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e02c      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ee:	4b18      	ldr	r3, [pc, #96]	; (8003250 <HAL_RCC_OscConfig+0x820>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x7ac>
 80031fa:	e024      	b.n	8003246 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d01f      	beq.n	8003242 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCC_OscConfig+0x820>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a12      	ldr	r2, [pc, #72]	; (8003250 <HAL_RCC_OscConfig+0x820>)
 8003208:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800320c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fe fc4b 	bl	8001aa8 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003216:	f7fe fc47 	bl	8001aa8 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e00f      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_OscConfig+0x820>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_RCC_OscConfig+0x820>)
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	4905      	ldr	r1, [pc, #20]	; (8003250 <HAL_RCC_OscConfig+0x820>)
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_RCC_OscConfig+0x824>)
 800323c:	4013      	ands	r3, r2
 800323e:	60cb      	str	r3, [r1, #12]
 8003240:	e001      	b.n	8003246 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	feeefffc 	.word	0xfeeefffc

08003258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0e7      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800326c:	4b75      	ldr	r3, [pc, #468]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d910      	bls.n	800329c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b72      	ldr	r3, [pc, #456]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 0207 	bic.w	r2, r3, #7
 8003282:	4970      	ldr	r1, [pc, #448]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b6e      	ldr	r3, [pc, #440]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0cf      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d010      	beq.n	80032ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	4b66      	ldr	r3, [pc, #408]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d908      	bls.n	80032ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b63      	ldr	r3, [pc, #396]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4960      	ldr	r1, [pc, #384]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d04c      	beq.n	8003370 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032de:	4b5a      	ldr	r3, [pc, #360]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d121      	bne.n	800332e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0a6      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032f6:	4b54      	ldr	r3, [pc, #336]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d115      	bne.n	800332e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e09a      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800330e:	4b4e      	ldr	r3, [pc, #312]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e08e      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800331e:	4b4a      	ldr	r3, [pc, #296]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e086      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800332e:	4b46      	ldr	r3, [pc, #280]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f023 0203 	bic.w	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4943      	ldr	r1, [pc, #268]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 800333c:	4313      	orrs	r3, r2
 800333e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003340:	f7fe fbb2 	bl	8001aa8 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	e00a      	b.n	800335e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003348:	f7fe fbae 	bl	8001aa8 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	; 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e06e      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 020c 	and.w	r2, r3, #12
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	429a      	cmp	r2, r3
 800336e:	d1eb      	bne.n	8003348 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d010      	beq.n	800339e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	4b31      	ldr	r3, [pc, #196]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003388:	429a      	cmp	r2, r3
 800338a:	d208      	bcs.n	800339e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b2e      	ldr	r3, [pc, #184]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	492b      	ldr	r1, [pc, #172]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800339e:	4b29      	ldr	r3, [pc, #164]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d210      	bcs.n	80033ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 0207 	bic.w	r2, r3, #7
 80033b4:	4923      	ldr	r1, [pc, #140]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d001      	beq.n	80033ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e036      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033da:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	4918      	ldr	r1, [pc, #96]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f8:	4b13      	ldr	r3, [pc, #76]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4910      	ldr	r1, [pc, #64]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 8003408:	4313      	orrs	r3, r2
 800340a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800340c:	f000 f824 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	490b      	ldr	r1, [pc, #44]	; (800344c <HAL_RCC_ClockConfig+0x1f4>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
 8003428:	4a09      	ldr	r2, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1f8>)
 800342a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x1fc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe fae9 	bl	8001a08 <HAL_InitTick>
 8003436:	4603      	mov	r3, r0
 8003438:	72fb      	strb	r3, [r7, #11]

  return status;
 800343a:	7afb      	ldrb	r3, [r7, #11]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40022000 	.word	0x40022000
 8003448:	40021000 	.word	0x40021000
 800344c:	08008dd8 	.word	0x08008dd8
 8003450:	20000004 	.word	0x20000004
 8003454:	20000008 	.word	0x20000008

08003458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	b089      	sub	sp, #36	; 0x24
 800345c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003466:	4b3e      	ldr	r3, [pc, #248]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003470:	4b3b      	ldr	r3, [pc, #236]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x34>
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d121      	bne.n	80034ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d11e      	bne.n	80034ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800348c:	4b34      	ldr	r3, [pc, #208]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d107      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003498:	4b31      	ldr	r3, [pc, #196]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 800349a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	e005      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034a8:	4b2d      	ldr	r3, [pc, #180]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034b4:	4a2b      	ldr	r2, [pc, #172]	; (8003564 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10d      	bne.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d102      	bne.n	80034d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034d0:	4b25      	ldr	r3, [pc, #148]	; (8003568 <HAL_RCC_GetSysClockFreq+0x110>)
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	e004      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034dc:	4b23      	ldr	r3, [pc, #140]	; (800356c <HAL_RCC_GetSysClockFreq+0x114>)
 80034de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b0c      	cmp	r3, #12
 80034e4:	d134      	bne.n	8003550 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034e6:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d003      	beq.n	80034fe <HAL_RCC_GetSysClockFreq+0xa6>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d003      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0xac>
 80034fc:	e005      	b.n	800350a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <HAL_RCC_GetSysClockFreq+0x110>)
 8003500:	617b      	str	r3, [r7, #20]
      break;
 8003502:	e005      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <HAL_RCC_GetSysClockFreq+0x114>)
 8003506:	617b      	str	r3, [r7, #20]
      break;
 8003508:	e002      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	617b      	str	r3, [r7, #20]
      break;
 800350e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003510:	4b13      	ldr	r3, [pc, #76]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	3301      	adds	r3, #1
 800351c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	fb03 f202 	mul.w	r2, r3, r2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	0e5b      	lsrs	r3, r3, #25
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	3301      	adds	r3, #1
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003550:	69bb      	ldr	r3, [r7, #24]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
 8003564:	08008df0 	.word	0x08008df0
 8003568:	00f42400 	.word	0x00f42400
 800356c:	007a1200 	.word	0x007a1200

08003570 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_RCC_GetHCLKFreq+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000004 	.word	0x20000004

08003588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800358c:	f7ff fff0 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4904      	ldr	r1, [pc, #16]	; (80035b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000
 80035b0:	08008de8 	.word	0x08008de8

080035b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035b8:	f7ff ffda 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	0adb      	lsrs	r3, r3, #11
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4904      	ldr	r1, [pc, #16]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08008de8 	.word	0x08008de8

080035e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035ec:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035f8:	f7ff f9b6 	bl	8002968 <HAL_PWREx_GetVoltageRange>
 80035fc:	6178      	str	r0, [r7, #20]
 80035fe:	e014      	b.n	800362a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003600:	4b25      	ldr	r3, [pc, #148]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	4a24      	ldr	r2, [pc, #144]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360a:	6593      	str	r3, [r2, #88]	; 0x58
 800360c:	4b22      	ldr	r3, [pc, #136]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003618:	f7ff f9a6 	bl	8002968 <HAL_PWREx_GetVoltageRange>
 800361c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800361e:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	4a1d      	ldr	r2, [pc, #116]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003630:	d10b      	bne.n	800364a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b80      	cmp	r3, #128	; 0x80
 8003636:	d919      	bls.n	800366c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2ba0      	cmp	r3, #160	; 0xa0
 800363c:	d902      	bls.n	8003644 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800363e:	2302      	movs	r3, #2
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	e013      	b.n	800366c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003644:	2301      	movs	r3, #1
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	e010      	b.n	800366c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b80      	cmp	r3, #128	; 0x80
 800364e:	d902      	bls.n	8003656 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003650:	2303      	movs	r3, #3
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	e00a      	b.n	800366c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d102      	bne.n	8003662 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800365c:	2302      	movs	r3, #2
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	e004      	b.n	800366c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b70      	cmp	r3, #112	; 0x70
 8003666:	d101      	bne.n	800366c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003668:	2301      	movs	r3, #1
 800366a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 0207 	bic.w	r2, r3, #7
 8003674:	4909      	ldr	r1, [pc, #36]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800367c:	4b07      	ldr	r3, [pc, #28]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	429a      	cmp	r2, r3
 8003688:	d001      	beq.n	800368e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000
 800369c:	40022000 	.word	0x40022000

080036a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036a8:	2300      	movs	r3, #0
 80036aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036ac:	2300      	movs	r3, #0
 80036ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d031      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036c4:	d01a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80036c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036ca:	d814      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d009      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d4:	d10f      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80036d6:	4b5d      	ldr	r3, [pc, #372]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	4a5c      	ldr	r2, [pc, #368]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036e2:	e00c      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3304      	adds	r3, #4
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f9ce 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036f4:	e003      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	74fb      	strb	r3, [r7, #19]
      break;
 80036fa:	e000      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80036fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036fe:	7cfb      	ldrb	r3, [r7, #19]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10b      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003704:	4b51      	ldr	r3, [pc, #324]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	494e      	ldr	r1, [pc, #312]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800371a:	e001      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 809e 	beq.w	800386a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372e:	2300      	movs	r3, #0
 8003730:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003732:	4b46      	ldr	r3, [pc, #280]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00d      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003748:	4b40      	ldr	r3, [pc, #256]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	4a3f      	ldr	r2, [pc, #252]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800374e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003752:	6593      	str	r3, [r2, #88]	; 0x58
 8003754:	4b3d      	ldr	r3, [pc, #244]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003760:	2301      	movs	r3, #1
 8003762:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003764:	4b3a      	ldr	r3, [pc, #232]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a39      	ldr	r2, [pc, #228]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800376a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003770:	f7fe f99a 	bl	8001aa8 <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003776:	e009      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003778:	f7fe f996 	bl	8001aa8 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d902      	bls.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	74fb      	strb	r3, [r7, #19]
        break;
 800378a:	e005      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800378c:	4b30      	ldr	r3, [pc, #192]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0ef      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d15a      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800379e:	4b2b      	ldr	r3, [pc, #172]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01e      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d019      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037ba:	4b24      	ldr	r3, [pc, #144]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037c6:	4b21      	ldr	r3, [pc, #132]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	4a1f      	ldr	r2, [pc, #124]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037d6:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	4a1b      	ldr	r2, [pc, #108]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037e6:	4a19      	ldr	r2, [pc, #100]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d016      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fe f956 	bl	8001aa8 <HAL_GetTick>
 80037fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037fe:	e00b      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003800:	f7fe f952 	bl	8001aa8 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	; 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d902      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	74fb      	strb	r3, [r7, #19]
            break;
 8003816:	e006      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0ec      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800382c:	4b07      	ldr	r3, [pc, #28]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	4904      	ldr	r1, [pc, #16]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003842:	e009      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	74bb      	strb	r3, [r7, #18]
 8003848:	e006      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003858:	7c7b      	ldrb	r3, [r7, #17]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d105      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385e:	4b8a      	ldr	r3, [pc, #552]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003862:	4a89      	ldr	r2, [pc, #548]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003868:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003876:	4b84      	ldr	r3, [pc, #528]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f023 0203 	bic.w	r2, r3, #3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	4980      	ldr	r1, [pc, #512]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003898:	4b7b      	ldr	r3, [pc, #492]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	f023 020c 	bic.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	4978      	ldr	r1, [pc, #480]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038ba:	4b73      	ldr	r3, [pc, #460]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	496f      	ldr	r1, [pc, #444]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038dc:	4b6a      	ldr	r3, [pc, #424]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ea:	4967      	ldr	r1, [pc, #412]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038fe:	4b62      	ldr	r3, [pc, #392]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	495e      	ldr	r1, [pc, #376]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003920:	4b59      	ldr	r3, [pc, #356]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	4956      	ldr	r1, [pc, #344]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003942:	4b51      	ldr	r3, [pc, #324]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	494d      	ldr	r1, [pc, #308]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d028      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003964:	4b48      	ldr	r3, [pc, #288]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	4945      	ldr	r1, [pc, #276]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003982:	d106      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003984:	4b40      	ldr	r3, [pc, #256]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4a3f      	ldr	r2, [pc, #252]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800398a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800398e:	60d3      	str	r3, [r2, #12]
 8003990:	e011      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800399a:	d10c      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3304      	adds	r3, #4
 80039a0:	2101      	movs	r1, #1
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f872 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039ac:	7cfb      	ldrb	r3, [r7, #19]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80039b2:	7cfb      	ldrb	r3, [r7, #19]
 80039b4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d028      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039c2:	4b31      	ldr	r3, [pc, #196]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d0:	492d      	ldr	r1, [pc, #180]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039e0:	d106      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e2:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ec:	60d3      	str	r3, [r2, #12]
 80039ee:	e011      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3304      	adds	r3, #4
 80039fe:	2101      	movs	r1, #1
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 f843 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a0a:	7cfb      	ldrb	r3, [r7, #19]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01c      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a20:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2e:	4916      	ldr	r1, [pc, #88]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a3e:	d10c      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	2102      	movs	r1, #2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 f820 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003a56:	7cfb      	ldrb	r3, [r7, #19]
 8003a58:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a66:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a74:	4904      	ldr	r1, [pc, #16]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000

08003a8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a9a:	4b74      	ldr	r3, [pc, #464]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d018      	beq.n	8003ad8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003aa6:	4b71      	ldr	r3, [pc, #452]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0203 	and.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d10d      	bne.n	8003ad2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
       ||
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003abe:	4b6b      	ldr	r3, [pc, #428]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
       ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d047      	beq.n	8003b62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
 8003ad6:	e044      	b.n	8003b62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d018      	beq.n	8003b12 <RCCEx_PLLSAI1_Config+0x86>
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d825      	bhi.n	8003b30 <RCCEx_PLLSAI1_Config+0xa4>
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d002      	beq.n	8003aee <RCCEx_PLLSAI1_Config+0x62>
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d009      	beq.n	8003b00 <RCCEx_PLLSAI1_Config+0x74>
 8003aec:	e020      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aee:	4b5f      	ldr	r3, [pc, #380]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11d      	bne.n	8003b36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afe:	e01a      	b.n	8003b36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b00:	4b5a      	ldr	r3, [pc, #360]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d116      	bne.n	8003b3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b10:	e013      	b.n	8003b3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b12:	4b56      	ldr	r3, [pc, #344]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b1e:	4b53      	ldr	r3, [pc, #332]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b2e:	e006      	b.n	8003b3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      break;
 8003b34:	e004      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b36:	bf00      	nop
 8003b38:	e002      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e000      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10d      	bne.n	8003b62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b46:	4b49      	ldr	r3, [pc, #292]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	4943      	ldr	r1, [pc, #268]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d17c      	bne.n	8003c62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b68:	4b40      	ldr	r3, [pc, #256]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a3f      	ldr	r2, [pc, #252]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b74:	f7fd ff98 	bl	8001aa8 <HAL_GetTick>
 8003b78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b7a:	e009      	b.n	8003b90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b7c:	f7fd ff94 	bl	8001aa8 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d902      	bls.n	8003b90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b8e:	e005      	b.n	8003b9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b90:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ef      	bne.n	8003b7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d15f      	bne.n	8003c62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d110      	bne.n	8003bca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba8:	4b30      	ldr	r3, [pc, #192]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003bb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6892      	ldr	r2, [r2, #8]
 8003bb8:	0211      	lsls	r1, r2, #8
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68d2      	ldr	r2, [r2, #12]
 8003bbe:	06d2      	lsls	r2, r2, #27
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	492a      	ldr	r1, [pc, #168]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	610b      	str	r3, [r1, #16]
 8003bc8:	e027      	b.n	8003c1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d112      	bne.n	8003bf6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bd0:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6892      	ldr	r2, [r2, #8]
 8003be0:	0211      	lsls	r1, r2, #8
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6912      	ldr	r2, [r2, #16]
 8003be6:	0852      	lsrs	r2, r2, #1
 8003be8:	3a01      	subs	r2, #1
 8003bea:	0552      	lsls	r2, r2, #21
 8003bec:	430a      	orrs	r2, r1
 8003bee:	491f      	ldr	r1, [pc, #124]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	610b      	str	r3, [r1, #16]
 8003bf4:	e011      	b.n	8003c1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bfe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6892      	ldr	r2, [r2, #8]
 8003c06:	0211      	lsls	r1, r2, #8
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6952      	ldr	r2, [r2, #20]
 8003c0c:	0852      	lsrs	r2, r2, #1
 8003c0e:	3a01      	subs	r2, #1
 8003c10:	0652      	lsls	r2, r2, #25
 8003c12:	430a      	orrs	r2, r1
 8003c14:	4915      	ldr	r1, [pc, #84]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c1a:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c26:	f7fd ff3f 	bl	8001aa8 <HAL_GetTick>
 8003c2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c2c:	e009      	b.n	8003c42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c2e:	f7fd ff3b 	bl	8001aa8 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d902      	bls.n	8003c42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	73fb      	strb	r3, [r7, #15]
          break;
 8003c40:	e005      	b.n	8003c4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0ef      	beq.n	8003c2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	4903      	ldr	r1, [pc, #12]	; (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000

08003c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e095      	b.n	8003dae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d108      	bne.n	8003c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c92:	d009      	beq.n	8003ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	61da      	str	r2, [r3, #28]
 8003c9a:	e005      	b.n	8003ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd fd14 	bl	80016f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ce8:	d902      	bls.n	8003cf0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e002      	b.n	8003cf6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cfe:	d007      	beq.n	8003d10 <HAL_SPI_Init+0xa0>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d08:	d002      	beq.n	8003d10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	ea42 0103 	orr.w	r1, r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	0c1b      	lsrs	r3, r3, #16
 8003d6c:	f003 0204 	and.w	r2, r3, #4
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d8c:	ea42 0103 	orr.w	r1, r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b088      	sub	sp, #32
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_SPI_Transmit+0x22>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e15f      	b.n	8004098 <HAL_SPI_Transmit+0x2e2>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003de0:	f7fd fe62 	bl	8001aa8 <HAL_GetTick>
 8003de4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d002      	beq.n	8003dfc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003df6:	2302      	movs	r3, #2
 8003df8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dfa:	e148      	b.n	800408e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_SPI_Transmit+0x52>
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e0c:	e13f      	b.n	800408e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2203      	movs	r2, #3
 8003e12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	88fa      	ldrh	r2, [r7, #6]
 8003e26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	88fa      	ldrh	r2, [r7, #6]
 8003e2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e58:	d10f      	bne.n	8003e7a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d007      	beq.n	8003e98 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ea0:	d94f      	bls.n	8003f42 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_SPI_Transmit+0xfa>
 8003eaa:	8afb      	ldrh	r3, [r7, #22]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d142      	bne.n	8003f36 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	881a      	ldrh	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	1c9a      	adds	r2, r3, #2
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ed4:	e02f      	b.n	8003f36 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d112      	bne.n	8003f0a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	881a      	ldrh	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	1c9a      	adds	r2, r3, #2
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f08:	e015      	b.n	8003f36 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f0a:	f7fd fdcd 	bl	8001aa8 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d803      	bhi.n	8003f22 <HAL_SPI_Transmit+0x16c>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d102      	bne.n	8003f28 <HAL_SPI_Transmit+0x172>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d106      	bne.n	8003f36 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003f34:	e0ab      	b.n	800408e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1ca      	bne.n	8003ed6 <HAL_SPI_Transmit+0x120>
 8003f40:	e080      	b.n	8004044 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_SPI_Transmit+0x19a>
 8003f4a:	8afb      	ldrh	r3, [r7, #22]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d174      	bne.n	800403a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d912      	bls.n	8003f80 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	881a      	ldrh	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	1c9a      	adds	r2, r3, #2
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b02      	subs	r3, #2
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f7e:	e05c      	b.n	800403a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	7812      	ldrb	r2, [r2, #0]
 8003f8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003fa6:	e048      	b.n	800403a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d12b      	bne.n	800400e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d912      	bls.n	8003fe6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	881a      	ldrh	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	1c9a      	adds	r2, r3, #2
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b02      	subs	r3, #2
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fe4:	e029      	b.n	800403a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	7812      	ldrb	r2, [r2, #0]
 8003ff2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800400c:	e015      	b.n	800403a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800400e:	f7fd fd4b 	bl	8001aa8 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d803      	bhi.n	8004026 <HAL_SPI_Transmit+0x270>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d102      	bne.n	800402c <HAL_SPI_Transmit+0x276>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004038:	e029      	b.n	800408e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1b1      	bne.n	8003fa8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	6839      	ldr	r1, [r7, #0]
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fc7d 	bl	8004948 <SPI_EndRxTxTransaction>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e003      	b.n	800408e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004096:	7ffb      	ldrb	r3, [r7, #31]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3720      	adds	r7, #32
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040ae:	2301      	movs	r3, #1
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_SPI_TransmitReceive+0x26>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e20a      	b.n	80044dc <HAL_SPI_TransmitReceive+0x43c>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040ce:	f7fd fceb 	bl	8001aa8 <HAL_GetTick>
 80040d2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040da:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80040e2:	887b      	ldrh	r3, [r7, #2]
 80040e4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80040e6:	887b      	ldrh	r3, [r7, #2]
 80040e8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040ea:	7efb      	ldrb	r3, [r7, #27]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d00e      	beq.n	800410e <HAL_SPI_TransmitReceive+0x6e>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f6:	d106      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d102      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x66>
 8004100:	7efb      	ldrb	r3, [r7, #27]
 8004102:	2b04      	cmp	r3, #4
 8004104:	d003      	beq.n	800410e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004106:	2302      	movs	r3, #2
 8004108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800410c:	e1e0      	b.n	80044d0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_SPI_TransmitReceive+0x80>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_SPI_TransmitReceive+0x80>
 800411a:	887b      	ldrh	r3, [r7, #2]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d103      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004126:	e1d3      	b.n	80044d0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b04      	cmp	r3, #4
 8004132:	d003      	beq.n	800413c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2205      	movs	r2, #5
 8004138:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	887a      	ldrh	r2, [r7, #2]
 800414c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	887a      	ldrh	r2, [r7, #2]
 8004154:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	887a      	ldrh	r2, [r7, #2]
 8004162:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	887a      	ldrh	r2, [r7, #2]
 8004168:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800417e:	d802      	bhi.n	8004186 <HAL_SPI_TransmitReceive+0xe6>
 8004180:	8a3b      	ldrh	r3, [r7, #16]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d908      	bls.n	8004198 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004194:	605a      	str	r2, [r3, #4]
 8004196:	e007      	b.n	80041a8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	d007      	beq.n	80041c6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041ce:	f240 8081 	bls.w	80042d4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_SPI_TransmitReceive+0x140>
 80041da:	8a7b      	ldrh	r3, [r7, #18]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d16d      	bne.n	80042bc <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	881a      	ldrh	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	1c9a      	adds	r2, r3, #2
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004204:	e05a      	b.n	80042bc <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b02      	cmp	r3, #2
 8004212:	d11b      	bne.n	800424c <HAL_SPI_TransmitReceive+0x1ac>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d016      	beq.n	800424c <HAL_SPI_TransmitReceive+0x1ac>
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	2b01      	cmp	r3, #1
 8004222:	d113      	bne.n	800424c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	881a      	ldrh	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	1c9a      	adds	r2, r3, #2
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d11c      	bne.n	8004294 <HAL_SPI_TransmitReceive+0x1f4>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d016      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	b292      	uxth	r2, r2
 8004272:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	1c9a      	adds	r2, r3, #2
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004290:	2301      	movs	r3, #1
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004294:	f7fd fc08 	bl	8001aa8 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d80b      	bhi.n	80042bc <HAL_SPI_TransmitReceive+0x21c>
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d007      	beq.n	80042bc <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80042ba:	e109      	b.n	80044d0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d19f      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x166>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d199      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x166>
 80042d2:	e0e3      	b.n	800449c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_SPI_TransmitReceive+0x244>
 80042dc:	8a7b      	ldrh	r3, [r7, #18]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	f040 80cf 	bne.w	8004482 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d912      	bls.n	8004314 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	881a      	ldrh	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	1c9a      	adds	r2, r3, #2
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b02      	subs	r3, #2
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004312:	e0b6      	b.n	8004482 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	7812      	ldrb	r2, [r2, #0]
 8004320:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800433a:	e0a2      	b.n	8004482 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b02      	cmp	r3, #2
 8004348:	d134      	bne.n	80043b4 <HAL_SPI_TransmitReceive+0x314>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02f      	beq.n	80043b4 <HAL_SPI_TransmitReceive+0x314>
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	2b01      	cmp	r3, #1
 8004358:	d12c      	bne.n	80043b4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	d912      	bls.n	800438a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b02      	subs	r3, #2
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004388:	e012      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	330c      	adds	r3, #12
 8004394:	7812      	ldrb	r2, [r2, #0]
 8004396:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d148      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x3b4>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d042      	beq.n	8004454 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d923      	bls.n	8004422 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	b292      	uxth	r2, r2
 80043e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	1c9a      	adds	r2, r3, #2
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b02      	subs	r3, #2
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d81f      	bhi.n	8004450 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800441e:	605a      	str	r2, [r3, #4]
 8004420:	e016      	b.n	8004450 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f103 020c 	add.w	r2, r3, #12
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	7812      	ldrb	r2, [r2, #0]
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004450:	2301      	movs	r3, #1
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004454:	f7fd fb28 	bl	8001aa8 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004460:	429a      	cmp	r2, r3
 8004462:	d803      	bhi.n	800446c <HAL_SPI_TransmitReceive+0x3cc>
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d102      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x3d2>
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	2b00      	cmp	r3, #0
 8004470:	d107      	bne.n	8004482 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004480:	e026      	b.n	80044d0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	f47f af57 	bne.w	800433c <HAL_SPI_TransmitReceive+0x29c>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	f47f af50 	bne.w	800433c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fa51 	bl	8004948 <SPI_EndRxTxTransaction>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c6:	e003      	b.n	80044d0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3728      	adds	r7, #40	; 0x28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10e      	bne.n	8004524 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
    return;
 8004522:	e0ce      	b.n	80046c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <HAL_SPI_IRQHandler+0x5e>
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b00      	cmp	r3, #0
 8004536:	d004      	beq.n	8004542 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4798      	blx	r3
    return;
 8004540:	e0bf      	b.n	80046c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <HAL_SPI_IRQHandler+0x7e>
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d105      	bne.n	8004562 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80b0 	beq.w	80046c2 <HAL_SPI_IRQHandler+0x1de>
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80aa 	beq.w	80046c2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	d023      	beq.n	80045c0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b03      	cmp	r3, #3
 8004582:	d011      	beq.n	80045a8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004588:	f043 0204 	orr.w	r2, r3, #4
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	e00b      	b.n	80045c0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045a8:	2300      	movs	r3, #0
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	693b      	ldr	r3, [r7, #16]
        return;
 80045be:	e080      	b.n	80046c2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d014      	beq.n	80045f4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00c      	beq.n	8004618 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004602:	f043 0208 	orr.w	r2, r3, #8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461c:	2b00      	cmp	r3, #0
 800461e:	d04f      	beq.n	80046c0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800462e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <HAL_SPI_IRQHandler+0x168>
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d034      	beq.n	80046b6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0203 	bic.w	r2, r2, #3
 800465a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004660:	2b00      	cmp	r3, #0
 8004662:	d011      	beq.n	8004688 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004668:	4a17      	ldr	r2, [pc, #92]	; (80046c8 <HAL_SPI_IRQHandler+0x1e4>)
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004670:	4618      	mov	r0, r3
 8004672:	f7fd fb5a 	bl	8001d2a <HAL_DMA_Abort_IT>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004680:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468c:	2b00      	cmp	r3, #0
 800468e:	d016      	beq.n	80046be <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004694:	4a0c      	ldr	r2, [pc, #48]	; (80046c8 <HAL_SPI_IRQHandler+0x1e4>)
 8004696:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469c:	4618      	mov	r0, r3
 800469e:	f7fd fb44 	bl	8001d2a <HAL_DMA_Abort_IT>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80046b4:	e003      	b.n	80046be <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f808 	bl	80046cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80046bc:	e000      	b.n	80046c0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80046be:	bf00      	nop
    return;
 80046c0:	bf00      	nop
  }
}
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	080046e1 	.word	0x080046e1

080046cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7ff ffe5 	bl	80046cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004702:	bf00      	nop
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800471c:	f7fd f9c4 	bl	8001aa8 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	4413      	add	r3, r2
 800472a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800472c:	f7fd f9bc 	bl	8001aa8 <HAL_GetTick>
 8004730:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004732:	4b39      	ldr	r3, [pc, #228]	; (8004818 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	015b      	lsls	r3, r3, #5
 8004738:	0d1b      	lsrs	r3, r3, #20
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	fb02 f303 	mul.w	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004742:	e054      	b.n	80047ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d050      	beq.n	80047ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800474c:	f7fd f9ac 	bl	8001aa8 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	429a      	cmp	r2, r3
 800475a:	d902      	bls.n	8004762 <SPI_WaitFlagStateUntilTimeout+0x56>
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d13d      	bne.n	80047de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004770:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800477a:	d111      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004784:	d004      	beq.n	8004790 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478e:	d107      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800479e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a8:	d10f      	bne.n	80047ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e017      	b.n	800480e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4013      	ands	r3, r2
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	bf0c      	ite	eq
 80047fe:	2301      	moveq	r3, #1
 8004800:	2300      	movne	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	429a      	cmp	r2, r3
 800480a:	d19b      	bne.n	8004744 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000004 	.word	0x20000004

0800481c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	; 0x28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800482e:	f7fd f93b 	bl	8001aa8 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	4413      	add	r3, r2
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800483e:	f7fd f933 	bl	8001aa8 <HAL_GetTick>
 8004842:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800484c:	4b3d      	ldr	r3, [pc, #244]	; (8004944 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	00da      	lsls	r2, r3, #3
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	0d1b      	lsrs	r3, r3, #20
 800485c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485e:	fb02 f303 	mul.w	r3, r2, r3
 8004862:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004864:	e060      	b.n	8004928 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800486c:	d107      	bne.n	800487e <SPI_WaitFifoStateUntilTimeout+0x62>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800487c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d050      	beq.n	8004928 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004886:	f7fd f90f 	bl	8001aa8 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004892:	429a      	cmp	r2, r3
 8004894:	d902      	bls.n	800489c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	2b00      	cmp	r3, #0
 800489a:	d13d      	bne.n	8004918 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b4:	d111      	bne.n	80048da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048be:	d004      	beq.n	80048ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c8:	d107      	bne.n	80048da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e2:	d10f      	bne.n	8004904 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004902:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e010      	b.n	800493a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	3b01      	subs	r3, #1
 8004926:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d196      	bne.n	8004866 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3728      	adds	r7, #40	; 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000004 	.word	0x20000004

08004948 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2200      	movs	r2, #0
 800495c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f7ff ff5b 	bl	800481c <SPI_WaitFifoStateUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004970:	f043 0220 	orr.w	r2, r3, #32
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e027      	b.n	80049cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2200      	movs	r2, #0
 8004984:	2180      	movs	r1, #128	; 0x80
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff fec0 	bl	800470c <SPI_WaitFlagStateUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004996:	f043 0220 	orr.w	r2, r3, #32
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e014      	b.n	80049cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7ff ff34 	bl	800481c <SPI_WaitFifoStateUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049be:	f043 0220 	orr.w	r2, r3, #32
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e000      	b.n	80049cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e040      	b.n	8004a68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fc fec6 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2224      	movs	r2, #36	; 0x24
 8004a00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0201 	bic.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa54 	bl	8004ec8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f825 	bl	8004a70 <UART_SetConfig>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e01b      	b.n	8004a68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fad3 	bl	800500c <UART_CheckIdleState>
 8004a66:	4603      	mov	r3, r0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a74:	b08a      	sub	sp, #40	; 0x28
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4bb4      	ldr	r3, [pc, #720]	; (8004d70 <UART_SetConfig+0x300>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	6812      	ldr	r2, [r2, #0]
 8004aa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4aa9      	ldr	r2, [pc, #676]	; (8004d74 <UART_SetConfig+0x304>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d004      	beq.n	8004adc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aec:	430a      	orrs	r2, r1
 8004aee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4aa0      	ldr	r2, [pc, #640]	; (8004d78 <UART_SetConfig+0x308>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d126      	bne.n	8004b48 <UART_SetConfig+0xd8>
 8004afa:	4ba0      	ldr	r3, [pc, #640]	; (8004d7c <UART_SetConfig+0x30c>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d81b      	bhi.n	8004b40 <UART_SetConfig+0xd0>
 8004b08:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <UART_SetConfig+0xa0>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b21 	.word	0x08004b21
 8004b14:	08004b31 	.word	0x08004b31
 8004b18:	08004b29 	.word	0x08004b29
 8004b1c:	08004b39 	.word	0x08004b39
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b26:	e080      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2e:	e07c      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004b30:	2304      	movs	r3, #4
 8004b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b36:	e078      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004b38:	2308      	movs	r3, #8
 8004b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3e:	e074      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004b40:	2310      	movs	r3, #16
 8004b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b46:	e070      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a8c      	ldr	r2, [pc, #560]	; (8004d80 <UART_SetConfig+0x310>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d138      	bne.n	8004bc4 <UART_SetConfig+0x154>
 8004b52:	4b8a      	ldr	r3, [pc, #552]	; (8004d7c <UART_SetConfig+0x30c>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b0c      	cmp	r3, #12
 8004b5e:	d82d      	bhi.n	8004bbc <UART_SetConfig+0x14c>
 8004b60:	a201      	add	r2, pc, #4	; (adr r2, 8004b68 <UART_SetConfig+0xf8>)
 8004b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b66:	bf00      	nop
 8004b68:	08004b9d 	.word	0x08004b9d
 8004b6c:	08004bbd 	.word	0x08004bbd
 8004b70:	08004bbd 	.word	0x08004bbd
 8004b74:	08004bbd 	.word	0x08004bbd
 8004b78:	08004bad 	.word	0x08004bad
 8004b7c:	08004bbd 	.word	0x08004bbd
 8004b80:	08004bbd 	.word	0x08004bbd
 8004b84:	08004bbd 	.word	0x08004bbd
 8004b88:	08004ba5 	.word	0x08004ba5
 8004b8c:	08004bbd 	.word	0x08004bbd
 8004b90:	08004bbd 	.word	0x08004bbd
 8004b94:	08004bbd 	.word	0x08004bbd
 8004b98:	08004bb5 	.word	0x08004bb5
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e042      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004baa:	e03e      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004bac:	2304      	movs	r3, #4
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb2:	e03a      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bba:	e036      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc2:	e032      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a6a      	ldr	r2, [pc, #424]	; (8004d74 <UART_SetConfig+0x304>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d12a      	bne.n	8004c24 <UART_SetConfig+0x1b4>
 8004bce:	4b6b      	ldr	r3, [pc, #428]	; (8004d7c <UART_SetConfig+0x30c>)
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bdc:	d01a      	beq.n	8004c14 <UART_SetConfig+0x1a4>
 8004bde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004be2:	d81b      	bhi.n	8004c1c <UART_SetConfig+0x1ac>
 8004be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be8:	d00c      	beq.n	8004c04 <UART_SetConfig+0x194>
 8004bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bee:	d815      	bhi.n	8004c1c <UART_SetConfig+0x1ac>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <UART_SetConfig+0x18c>
 8004bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf8:	d008      	beq.n	8004c0c <UART_SetConfig+0x19c>
 8004bfa:	e00f      	b.n	8004c1c <UART_SetConfig+0x1ac>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c02:	e012      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004c04:	2302      	movs	r3, #2
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0a:	e00e      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c12:	e00a      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004c14:	2308      	movs	r3, #8
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1a:	e006      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004c1c:	2310      	movs	r3, #16
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c22:	e002      	b.n	8004c2a <UART_SetConfig+0x1ba>
 8004c24:	2310      	movs	r3, #16
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a51      	ldr	r2, [pc, #324]	; (8004d74 <UART_SetConfig+0x304>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d17a      	bne.n	8004d2a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d824      	bhi.n	8004c86 <UART_SetConfig+0x216>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <UART_SetConfig+0x1d4>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c87 	.word	0x08004c87
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c87 	.word	0x08004c87
 8004c54:	08004c77 	.word	0x08004c77
 8004c58:	08004c87 	.word	0x08004c87
 8004c5c:	08004c87 	.word	0x08004c87
 8004c60:	08004c87 	.word	0x08004c87
 8004c64:	08004c7f 	.word	0x08004c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c68:	f7fe fc8e 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8004c6c:	61f8      	str	r0, [r7, #28]
        break;
 8004c6e:	e010      	b.n	8004c92 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c70:	4b44      	ldr	r3, [pc, #272]	; (8004d84 <UART_SetConfig+0x314>)
 8004c72:	61fb      	str	r3, [r7, #28]
        break;
 8004c74:	e00d      	b.n	8004c92 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c76:	f7fe fbef 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8004c7a:	61f8      	str	r0, [r7, #28]
        break;
 8004c7c:	e009      	b.n	8004c92 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c82:	61fb      	str	r3, [r7, #28]
        break;
 8004c84:	e005      	b.n	8004c92 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8107 	beq.w	8004ea8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	4413      	add	r3, r2
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d305      	bcc.n	8004cb6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d903      	bls.n	8004cbe <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cbc:	e0f4      	b.n	8004ea8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	461c      	mov	r4, r3
 8004cc4:	4615      	mov	r5, r2
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	022b      	lsls	r3, r5, #8
 8004cd0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004cd4:	0222      	lsls	r2, r4, #8
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	6849      	ldr	r1, [r1, #4]
 8004cda:	0849      	lsrs	r1, r1, #1
 8004cdc:	2000      	movs	r0, #0
 8004cde:	4688      	mov	r8, r1
 8004ce0:	4681      	mov	r9, r0
 8004ce2:	eb12 0a08 	adds.w	sl, r2, r8
 8004ce6:	eb43 0b09 	adc.w	fp, r3, r9
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	603b      	str	r3, [r7, #0]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cf8:	4650      	mov	r0, sl
 8004cfa:	4659      	mov	r1, fp
 8004cfc:	f7fb fab8 	bl	8000270 <__aeabi_uldivmod>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4613      	mov	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d0e:	d308      	bcc.n	8004d22 <UART_SetConfig+0x2b2>
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d16:	d204      	bcs.n	8004d22 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	60da      	str	r2, [r3, #12]
 8004d20:	e0c2      	b.n	8004ea8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d28:	e0be      	b.n	8004ea8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d32:	d16a      	bne.n	8004e0a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004d34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d834      	bhi.n	8004da6 <UART_SetConfig+0x336>
 8004d3c:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <UART_SetConfig+0x2d4>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d69 	.word	0x08004d69
 8004d48:	08004d89 	.word	0x08004d89
 8004d4c:	08004d91 	.word	0x08004d91
 8004d50:	08004da7 	.word	0x08004da7
 8004d54:	08004d97 	.word	0x08004d97
 8004d58:	08004da7 	.word	0x08004da7
 8004d5c:	08004da7 	.word	0x08004da7
 8004d60:	08004da7 	.word	0x08004da7
 8004d64:	08004d9f 	.word	0x08004d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d68:	f7fe fc0e 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8004d6c:	61f8      	str	r0, [r7, #28]
        break;
 8004d6e:	e020      	b.n	8004db2 <UART_SetConfig+0x342>
 8004d70:	efff69f3 	.word	0xefff69f3
 8004d74:	40008000 	.word	0x40008000
 8004d78:	40013800 	.word	0x40013800
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40004400 	.word	0x40004400
 8004d84:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d88:	f7fe fc14 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8004d8c:	61f8      	str	r0, [r7, #28]
        break;
 8004d8e:	e010      	b.n	8004db2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d90:	4b4c      	ldr	r3, [pc, #304]	; (8004ec4 <UART_SetConfig+0x454>)
 8004d92:	61fb      	str	r3, [r7, #28]
        break;
 8004d94:	e00d      	b.n	8004db2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d96:	f7fe fb5f 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8004d9a:	61f8      	str	r0, [r7, #28]
        break;
 8004d9c:	e009      	b.n	8004db2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da2:	61fb      	str	r3, [r7, #28]
        break;
 8004da4:	e005      	b.n	8004db2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004db0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d077      	beq.n	8004ea8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	005a      	lsls	r2, r3, #1
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	441a      	add	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b0f      	cmp	r3, #15
 8004dd2:	d916      	bls.n	8004e02 <UART_SetConfig+0x392>
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dda:	d212      	bcs.n	8004e02 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f023 030f 	bic.w	r3, r3, #15
 8004de4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	8afb      	ldrh	r3, [r7, #22]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	8afa      	ldrh	r2, [r7, #22]
 8004dfe:	60da      	str	r2, [r3, #12]
 8004e00:	e052      	b.n	8004ea8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e08:	e04e      	b.n	8004ea8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d827      	bhi.n	8004e62 <UART_SetConfig+0x3f2>
 8004e12:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <UART_SetConfig+0x3a8>)
 8004e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e18:	08004e3d 	.word	0x08004e3d
 8004e1c:	08004e45 	.word	0x08004e45
 8004e20:	08004e4d 	.word	0x08004e4d
 8004e24:	08004e63 	.word	0x08004e63
 8004e28:	08004e53 	.word	0x08004e53
 8004e2c:	08004e63 	.word	0x08004e63
 8004e30:	08004e63 	.word	0x08004e63
 8004e34:	08004e63 	.word	0x08004e63
 8004e38:	08004e5b 	.word	0x08004e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e3c:	f7fe fba4 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8004e40:	61f8      	str	r0, [r7, #28]
        break;
 8004e42:	e014      	b.n	8004e6e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e44:	f7fe fbb6 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8004e48:	61f8      	str	r0, [r7, #28]
        break;
 8004e4a:	e010      	b.n	8004e6e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <UART_SetConfig+0x454>)
 8004e4e:	61fb      	str	r3, [r7, #28]
        break;
 8004e50:	e00d      	b.n	8004e6e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e52:	f7fe fb01 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8004e56:	61f8      	str	r0, [r7, #28]
        break;
 8004e58:	e009      	b.n	8004e6e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e5e:	61fb      	str	r3, [r7, #28]
        break;
 8004e60:	e005      	b.n	8004e6e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e6c:	bf00      	nop
    }

    if (pclk != 0U)
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d019      	beq.n	8004ea8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	085a      	lsrs	r2, r3, #1
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	441a      	add	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b0f      	cmp	r3, #15
 8004e8c:	d909      	bls.n	8004ea2 <UART_SetConfig+0x432>
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e94:	d205      	bcs.n	8004ea2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60da      	str	r2, [r3, #12]
 8004ea0:	e002      	b.n	8004ea8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004eb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3728      	adds	r7, #40	; 0x28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec2:	bf00      	nop
 8004ec4:	00f42400 	.word	0x00f42400

08004ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01a      	beq.n	8004fde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc6:	d10a      	bne.n	8004fde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	605a      	str	r2, [r3, #4]
  }
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b098      	sub	sp, #96	; 0x60
 8005010:	af02      	add	r7, sp, #8
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800501c:	f7fc fd44 	bl	8001aa8 <HAL_GetTick>
 8005020:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b08      	cmp	r3, #8
 800502e:	d12e      	bne.n	800508e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005038:	2200      	movs	r2, #0
 800503a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f88c 	bl	800515c <UART_WaitOnFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d021      	beq.n	800508e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505e:	653b      	str	r3, [r7, #80]	; 0x50
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005068:	647b      	str	r3, [r7, #68]	; 0x44
 800506a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800506e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e6      	bne.n	800504a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e062      	b.n	8005154 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b04      	cmp	r3, #4
 800509a:	d149      	bne.n	8005130 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800509c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a4:	2200      	movs	r2, #0
 80050a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f856 	bl	800515c <UART_WaitOnFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d03c      	beq.n	8005130 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	623b      	str	r3, [r7, #32]
   return(result);
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d4:	633b      	str	r3, [r7, #48]	; 0x30
 80050d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e6      	bne.n	80050b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3308      	adds	r3, #8
 80050ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3308      	adds	r3, #8
 8005106:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005108:	61fa      	str	r2, [r7, #28]
 800510a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	69b9      	ldr	r1, [r7, #24]
 800510e:	69fa      	ldr	r2, [r7, #28]
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	617b      	str	r3, [r7, #20]
   return(result);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e5      	bne.n	80050e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e011      	b.n	8005154 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3758      	adds	r7, #88	; 0x58
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	4613      	mov	r3, r2
 800516a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800516c:	e049      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005174:	d045      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005176:	f7fc fc97 	bl	8001aa8 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	429a      	cmp	r2, r3
 8005184:	d302      	bcc.n	800518c <UART_WaitOnFlagUntilTimeout+0x30>
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e048      	b.n	8005222 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d031      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d110      	bne.n	80051ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2208      	movs	r2, #8
 80051b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 f838 	bl	800522a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2208      	movs	r2, #8
 80051be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e029      	b.n	8005222 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051dc:	d111      	bne.n	8005202 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f81e 	bl	800522a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e00f      	b.n	8005222 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69da      	ldr	r2, [r3, #28]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	429a      	cmp	r2, r3
 8005210:	bf0c      	ite	eq
 8005212:	2301      	moveq	r3, #1
 8005214:	2300      	movne	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	429a      	cmp	r2, r3
 800521e:	d0a6      	beq.n	800516e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800522a:	b480      	push	{r7}
 800522c:	b095      	sub	sp, #84	; 0x54
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005250:	643b      	str	r3, [r7, #64]	; 0x40
 8005252:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005256:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800525e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e6      	bne.n	8005232 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3308      	adds	r3, #8
 800526a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	e853 3f00 	ldrex	r3, [r3]
 8005272:	61fb      	str	r3, [r7, #28]
   return(result);
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f023 0301 	bic.w	r3, r3, #1
 800527a:	64bb      	str	r3, [r7, #72]	; 0x48
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3308      	adds	r3, #8
 8005282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005284:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800528a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800528c:	e841 2300 	strex	r3, r2, [r1]
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e5      	bne.n	8005264 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529c:	2b01      	cmp	r3, #1
 800529e:	d118      	bne.n	80052d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	e853 3f00 	ldrex	r3, [r3]
 80052ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f023 0310 	bic.w	r3, r3, #16
 80052b4:	647b      	str	r3, [r7, #68]	; 0x44
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	6979      	ldr	r1, [r7, #20]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	613b      	str	r3, [r7, #16]
   return(result);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e6      	bne.n	80052a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052e6:	bf00      	nop
 80052e8:	3754      	adds	r7, #84	; 0x54
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80052f8:	4904      	ldr	r1, [pc, #16]	; (800530c <MX_FATFS_Init+0x18>)
 80052fa:	4805      	ldr	r0, [pc, #20]	; (8005310 <MX_FATFS_Init+0x1c>)
 80052fc:	f002 ff78 	bl	80081f0 <FATFS_LinkDriver>
 8005300:	4603      	mov	r3, r0
 8005302:	461a      	mov	r2, r3
 8005304:	4b03      	ldr	r3, [pc, #12]	; (8005314 <MX_FATFS_Init+0x20>)
 8005306:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005308:	bf00      	nop
 800530a:	bd80      	pop	{r7, pc}
 800530c:	200001f8 	.word	0x200001f8
 8005310:	20000010 	.word	0x20000010
 8005314:	200001f4 	.word	0x200001f4

08005318 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800531c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800531e:	4618      	mov	r0, r3
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	4618      	mov	r0, r3
 8005336:	f7fb fad1 	bl	80008dc <SD_disk_initialize>
 800533a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	4618      	mov	r0, r3
 8005352:	f7fb fba9 	bl	8000aa8 <SD_disk_status>
 8005356:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4603      	mov	r3, r0
 800536e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8005370:	7bf8      	ldrb	r0, [r7, #15]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	f7fb fbac 	bl	8000ad4 <SD_disk_read>
 800537c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
 8005392:	4603      	mov	r3, r0
 8005394:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8005396:	7bf8      	ldrb	r0, [r7, #15]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	f7fb fc03 	bl	8000ba8 <SD_disk_write>
 80053a2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	603a      	str	r2, [r7, #0]
 80053b6:	71fb      	strb	r3, [r7, #7]
 80053b8:	460b      	mov	r3, r1
 80053ba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80053bc:	79b9      	ldrb	r1, [r7, #6]
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fb fc74 	bl	8000cb0 <SD_disk_ioctl>
 80053c8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	4a08      	ldr	r2, [pc, #32]	; (8005404 <disk_status+0x30>)
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	79fa      	ldrb	r2, [r7, #7]
 80053ec:	4905      	ldr	r1, [pc, #20]	; (8005404 <disk_status+0x30>)
 80053ee:	440a      	add	r2, r1
 80053f0:	7a12      	ldrb	r2, [r2, #8]
 80053f2:	4610      	mov	r0, r2
 80053f4:	4798      	blx	r3
 80053f6:	4603      	mov	r3, r0
 80053f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000424 	.word	0x20000424

08005408 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	4603      	mov	r3, r0
 8005410:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	4a0d      	ldr	r2, [pc, #52]	; (8005450 <disk_initialize+0x48>)
 800541a:	5cd3      	ldrb	r3, [r2, r3]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d111      	bne.n	8005444 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	4a0b      	ldr	r2, [pc, #44]	; (8005450 <disk_initialize+0x48>)
 8005424:	2101      	movs	r1, #1
 8005426:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	4a09      	ldr	r2, [pc, #36]	; (8005450 <disk_initialize+0x48>)
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	79fa      	ldrb	r2, [r7, #7]
 8005436:	4906      	ldr	r1, [pc, #24]	; (8005450 <disk_initialize+0x48>)
 8005438:	440a      	add	r2, r1
 800543a:	7a12      	ldrb	r2, [r2, #8]
 800543c:	4610      	mov	r0, r2
 800543e:	4798      	blx	r3
 8005440:	4603      	mov	r3, r0
 8005442:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005444:	7bfb      	ldrb	r3, [r7, #15]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20000424 	.word	0x20000424

08005454 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	4603      	mov	r3, r0
 8005462:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <disk_read+0x3c>)
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	689c      	ldr	r4, [r3, #8]
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	4a07      	ldr	r2, [pc, #28]	; (8005490 <disk_read+0x3c>)
 8005474:	4413      	add	r3, r2
 8005476:	7a18      	ldrb	r0, [r3, #8]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	47a0      	blx	r4
 8005480:	4603      	mov	r3, r0
 8005482:	75fb      	strb	r3, [r7, #23]
  return res;
 8005484:	7dfb      	ldrb	r3, [r7, #23]
}
 8005486:	4618      	mov	r0, r3
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	bd90      	pop	{r4, r7, pc}
 800548e:	bf00      	nop
 8005490:	20000424 	.word	0x20000424

08005494 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005494:	b590      	push	{r4, r7, lr}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	607a      	str	r2, [r7, #4]
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	4603      	mov	r3, r0
 80054a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <disk_write+0x3c>)
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	68dc      	ldr	r4, [r3, #12]
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	4a07      	ldr	r2, [pc, #28]	; (80054d0 <disk_write+0x3c>)
 80054b4:	4413      	add	r3, r2
 80054b6:	7a18      	ldrb	r0, [r3, #8]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	47a0      	blx	r4
 80054c0:	4603      	mov	r3, r0
 80054c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd90      	pop	{r4, r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000424 	.word	0x20000424

080054d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	603a      	str	r2, [r7, #0]
 80054de:	71fb      	strb	r3, [r7, #7]
 80054e0:	460b      	mov	r3, r1
 80054e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	4a09      	ldr	r2, [pc, #36]	; (800550c <disk_ioctl+0x38>)
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	79fa      	ldrb	r2, [r7, #7]
 80054f2:	4906      	ldr	r1, [pc, #24]	; (800550c <disk_ioctl+0x38>)
 80054f4:	440a      	add	r2, r1
 80054f6:	7a10      	ldrb	r0, [r2, #8]
 80054f8:	79b9      	ldrb	r1, [r7, #6]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	4798      	blx	r3
 80054fe:	4603      	mov	r3, r0
 8005500:	73fb      	strb	r3, [r7, #15]
  return res;
 8005502:	7bfb      	ldrb	r3, [r7, #15]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000424 	.word	0x20000424

08005510 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3301      	adds	r3, #1
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005520:	89fb      	ldrh	r3, [r7, #14]
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	b21a      	sxth	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	b21b      	sxth	r3, r3
 800552c:	4313      	orrs	r3, r2
 800552e:	b21b      	sxth	r3, r3
 8005530:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005532:	89fb      	ldrh	r3, [r7, #14]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3303      	adds	r3, #3
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	021b      	lsls	r3, r3, #8
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	3202      	adds	r2, #2
 8005558:	7812      	ldrb	r2, [r2, #0]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	3201      	adds	r2, #1
 8005566:	7812      	ldrb	r2, [r2, #0]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	021b      	lsls	r3, r3, #8
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	7812      	ldrb	r2, [r2, #0]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
	return rv;
 8005578:	68fb      	ldr	r3, [r7, #12]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	460b      	mov	r3, r1
 8005590:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	887a      	ldrh	r2, [r7, #2]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	887b      	ldrh	r3, [r7, #2]
 80055a0:	0a1b      	lsrs	r3, r3, #8
 80055a2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	607a      	str	r2, [r7, #4]
 80055aa:	887a      	ldrh	r2, [r7, #2]
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	701a      	strb	r2, [r3, #0]
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	0a1b      	lsrs	r3, r3, #8
 80055d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	0a1b      	lsrs	r3, r3, #8
 80055e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	0a1b      	lsrs	r3, r3, #8
 80055fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	607a      	str	r2, [r7, #4]
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	701a      	strb	r2, [r3, #0]
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00d      	beq.n	800564a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	1c53      	adds	r3, r2, #1
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	1c59      	adds	r1, r3, #1
 8005638:	6179      	str	r1, [r7, #20]
 800563a:	7812      	ldrb	r2, [r2, #0]
 800563c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3b01      	subs	r3, #1
 8005642:	607b      	str	r3, [r7, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f1      	bne.n	800562e <mem_cpy+0x1a>
	}
}
 800564a:	bf00      	nop
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005656:	b480      	push	{r7}
 8005658:	b087      	sub	sp, #28
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	617a      	str	r2, [r7, #20]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3b01      	subs	r3, #1
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1f3      	bne.n	8005666 <mem_set+0x10>
}
 800567e:	bf00      	nop
 8005680:	bf00      	nop
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800568c:	b480      	push	{r7}
 800568e:	b089      	sub	sp, #36	; 0x24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	61fb      	str	r3, [r7, #28]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	61fa      	str	r2, [r7, #28]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	4619      	mov	r1, r3
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	61ba      	str	r2, [r7, #24]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	1acb      	subs	r3, r1, r3
 80056b8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3b01      	subs	r3, #1
 80056be:	607b      	str	r3, [r7, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <mem_cmp+0x40>
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0eb      	beq.n	80056a4 <mem_cmp+0x18>

	return r;
 80056cc:	697b      	ldr	r3, [r7, #20]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3724      	adds	r7, #36	; 0x24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80056e4:	e002      	b.n	80056ec <chk_chr+0x12>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3301      	adds	r3, #1
 80056ea:	607b      	str	r3, [r7, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <chk_chr+0x26>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d1f2      	bne.n	80056e6 <chk_chr+0xc>
	return *str;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	781b      	ldrb	r3, [r3, #0]
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800571a:	2300      	movs	r3, #0
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e029      	b.n	8005778 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005724:	4a27      	ldr	r2, [pc, #156]	; (80057c4 <chk_lock+0xb4>)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	4413      	add	r3, r2
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01d      	beq.n	800576e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005732:	4a24      	ldr	r2, [pc, #144]	; (80057c4 <chk_lock+0xb4>)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	4413      	add	r3, r2
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d116      	bne.n	8005772 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005744:	4a1f      	ldr	r2, [pc, #124]	; (80057c4 <chk_lock+0xb4>)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	4413      	add	r3, r2
 800574c:	3304      	adds	r3, #4
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005754:	429a      	cmp	r2, r3
 8005756:	d10c      	bne.n	8005772 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005758:	4a1a      	ldr	r2, [pc, #104]	; (80057c4 <chk_lock+0xb4>)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	4413      	add	r3, r2
 8005760:	3308      	adds	r3, #8
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005768:	429a      	cmp	r2, r3
 800576a:	d102      	bne.n	8005772 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800576c:	e007      	b.n	800577e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800576e:	2301      	movs	r3, #1
 8005770:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3301      	adds	r3, #1
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d9d2      	bls.n	8005724 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b02      	cmp	r3, #2
 8005782:	d109      	bne.n	8005798 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d102      	bne.n	8005790 <chk_lock+0x80>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b02      	cmp	r3, #2
 800578e:	d101      	bne.n	8005794 <chk_lock+0x84>
 8005790:	2300      	movs	r3, #0
 8005792:	e010      	b.n	80057b6 <chk_lock+0xa6>
 8005794:	2312      	movs	r3, #18
 8005796:	e00e      	b.n	80057b6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d108      	bne.n	80057b0 <chk_lock+0xa0>
 800579e:	4a09      	ldr	r2, [pc, #36]	; (80057c4 <chk_lock+0xb4>)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	4413      	add	r3, r2
 80057a6:	330c      	adds	r3, #12
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ae:	d101      	bne.n	80057b4 <chk_lock+0xa4>
 80057b0:	2310      	movs	r3, #16
 80057b2:	e000      	b.n	80057b6 <chk_lock+0xa6>
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20000204 	.word	0x20000204

080057c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80057ce:	2300      	movs	r3, #0
 80057d0:	607b      	str	r3, [r7, #4]
 80057d2:	e002      	b.n	80057da <enq_lock+0x12>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3301      	adds	r3, #1
 80057d8:	607b      	str	r3, [r7, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d806      	bhi.n	80057ee <enq_lock+0x26>
 80057e0:	4a09      	ldr	r2, [pc, #36]	; (8005808 <enq_lock+0x40>)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	4413      	add	r3, r2
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f2      	bne.n	80057d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	bf14      	ite	ne
 80057f4:	2301      	movne	r3, #1
 80057f6:	2300      	moveq	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	20000204 	.word	0x20000204

0800580c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	e01f      	b.n	800585c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800581c:	4a41      	ldr	r2, [pc, #260]	; (8005924 <inc_lock+0x118>)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	4413      	add	r3, r2
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d113      	bne.n	8005856 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800582e:	4a3d      	ldr	r2, [pc, #244]	; (8005924 <inc_lock+0x118>)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	4413      	add	r3, r2
 8005836:	3304      	adds	r3, #4
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800583e:	429a      	cmp	r2, r3
 8005840:	d109      	bne.n	8005856 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005842:	4a38      	ldr	r2, [pc, #224]	; (8005924 <inc_lock+0x118>)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	4413      	add	r3, r2
 800584a:	3308      	adds	r3, #8
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005852:	429a      	cmp	r2, r3
 8005854:	d006      	beq.n	8005864 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3301      	adds	r3, #1
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d9dc      	bls.n	800581c <inc_lock+0x10>
 8005862:	e000      	b.n	8005866 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005864:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d132      	bne.n	80058d2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	e002      	b.n	8005878 <inc_lock+0x6c>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3301      	adds	r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d806      	bhi.n	800588c <inc_lock+0x80>
 800587e:	4a29      	ldr	r2, [pc, #164]	; (8005924 <inc_lock+0x118>)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	4413      	add	r3, r2
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f2      	bne.n	8005872 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b02      	cmp	r3, #2
 8005890:	d101      	bne.n	8005896 <inc_lock+0x8a>
 8005892:	2300      	movs	r3, #0
 8005894:	e040      	b.n	8005918 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	4922      	ldr	r1, [pc, #136]	; (8005924 <inc_lock+0x118>)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	440b      	add	r3, r1
 80058a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	491e      	ldr	r1, [pc, #120]	; (8005924 <inc_lock+0x118>)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	440b      	add	r3, r1
 80058b0:	3304      	adds	r3, #4
 80058b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	491a      	ldr	r1, [pc, #104]	; (8005924 <inc_lock+0x118>)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	440b      	add	r3, r1
 80058c0:	3308      	adds	r3, #8
 80058c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80058c4:	4a17      	ldr	r2, [pc, #92]	; (8005924 <inc_lock+0x118>)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	4413      	add	r3, r2
 80058cc:	330c      	adds	r3, #12
 80058ce:	2200      	movs	r2, #0
 80058d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d009      	beq.n	80058ec <inc_lock+0xe0>
 80058d8:	4a12      	ldr	r2, [pc, #72]	; (8005924 <inc_lock+0x118>)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	4413      	add	r3, r2
 80058e0:	330c      	adds	r3, #12
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <inc_lock+0xe0>
 80058e8:	2300      	movs	r3, #0
 80058ea:	e015      	b.n	8005918 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d108      	bne.n	8005904 <inc_lock+0xf8>
 80058f2:	4a0c      	ldr	r2, [pc, #48]	; (8005924 <inc_lock+0x118>)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	4413      	add	r3, r2
 80058fa:	330c      	adds	r3, #12
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	3301      	adds	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	e001      	b.n	8005908 <inc_lock+0xfc>
 8005904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005908:	4906      	ldr	r1, [pc, #24]	; (8005924 <inc_lock+0x118>)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	440b      	add	r3, r1
 8005910:	330c      	adds	r3, #12
 8005912:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3301      	adds	r3, #1
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	20000204 	.word	0x20000204

08005928 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3b01      	subs	r3, #1
 8005934:	607b      	str	r3, [r7, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d825      	bhi.n	8005988 <dec_lock+0x60>
		n = Files[i].ctr;
 800593c:	4a17      	ldr	r2, [pc, #92]	; (800599c <dec_lock+0x74>)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	4413      	add	r3, r2
 8005944:	330c      	adds	r3, #12
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800594a:	89fb      	ldrh	r3, [r7, #14]
 800594c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005950:	d101      	bne.n	8005956 <dec_lock+0x2e>
 8005952:	2300      	movs	r3, #0
 8005954:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005956:	89fb      	ldrh	r3, [r7, #14]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <dec_lock+0x3a>
 800595c:	89fb      	ldrh	r3, [r7, #14]
 800595e:	3b01      	subs	r3, #1
 8005960:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005962:	4a0e      	ldr	r2, [pc, #56]	; (800599c <dec_lock+0x74>)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	4413      	add	r3, r2
 800596a:	330c      	adds	r3, #12
 800596c:	89fa      	ldrh	r2, [r7, #14]
 800596e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005970:	89fb      	ldrh	r3, [r7, #14]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d105      	bne.n	8005982 <dec_lock+0x5a>
 8005976:	4a09      	ldr	r2, [pc, #36]	; (800599c <dec_lock+0x74>)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	4413      	add	r3, r2
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	737b      	strb	r3, [r7, #13]
 8005986:	e001      	b.n	800598c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005988:	2302      	movs	r3, #2
 800598a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800598c:	7b7b      	ldrb	r3, [r7, #13]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	20000204 	.word	0x20000204

080059a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80059a8:	2300      	movs	r3, #0
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	e010      	b.n	80059d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80059ae:	4a0d      	ldr	r2, [pc, #52]	; (80059e4 <clear_lock+0x44>)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	4413      	add	r3, r2
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d105      	bne.n	80059ca <clear_lock+0x2a>
 80059be:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <clear_lock+0x44>)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	4413      	add	r3, r2
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3301      	adds	r3, #1
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d9eb      	bls.n	80059ae <clear_lock+0xe>
	}
}
 80059d6:	bf00      	nop
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	20000204 	.word	0x20000204

080059e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	78db      	ldrb	r3, [r3, #3]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d034      	beq.n	8005a66 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a00:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	7858      	ldrb	r0, [r3, #1]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	f7ff fd40 	bl	8005494 <disk_write>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	73fb      	strb	r3, [r7, #15]
 8005a1e:	e022      	b.n	8005a66 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	1ad2      	subs	r2, r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d217      	bcs.n	8005a66 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	789b      	ldrb	r3, [r3, #2]
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	e010      	b.n	8005a60 <sync_window+0x78>
					wsect += fs->fsize;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	4413      	add	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	7858      	ldrb	r0, [r3, #1]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a52:	2301      	movs	r3, #1
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	f7ff fd1d 	bl	8005494 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d8eb      	bhi.n	8005a3e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d01b      	beq.n	8005ac0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff ffad 	bl	80059e8 <sync_window>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d113      	bne.n	8005ac0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	7858      	ldrb	r0, [r3, #1]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	f7ff fcd5 	bl	8005454 <disk_read>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d004      	beq.n	8005aba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff ff87 	bl	80059e8 <sync_window>
 8005ada:	4603      	mov	r3, r0
 8005adc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d159      	bne.n	8005b98 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d149      	bne.n	8005b80 <sync_fs+0xb4>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	791b      	ldrb	r3, [r3, #4]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d145      	bne.n	8005b80 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	899b      	ldrh	r3, [r3, #12]
 8005afe:	461a      	mov	r2, r3
 8005b00:	2100      	movs	r1, #0
 8005b02:	f7ff fda8 	bl	8005656 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3338      	adds	r3, #56	; 0x38
 8005b0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005b0e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff fd37 	bl	8005586 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3338      	adds	r3, #56	; 0x38
 8005b1c:	4921      	ldr	r1, [pc, #132]	; (8005ba4 <sync_fs+0xd8>)
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fd4c 	bl	80055bc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3338      	adds	r3, #56	; 0x38
 8005b28:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005b2c:	491e      	ldr	r1, [pc, #120]	; (8005ba8 <sync_fs+0xdc>)
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff fd44 	bl	80055bc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3338      	adds	r3, #56	; 0x38
 8005b38:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	4619      	mov	r1, r3
 8005b42:	4610      	mov	r0, r2
 8005b44:	f7ff fd3a 	bl	80055bc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3338      	adds	r3, #56	; 0x38
 8005b4c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	4619      	mov	r1, r3
 8005b56:	4610      	mov	r0, r2
 8005b58:	f7ff fd30 	bl	80055bc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	7858      	ldrb	r0, [r3, #1]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b74:	2301      	movs	r3, #1
 8005b76:	f7ff fc8d 	bl	8005494 <disk_write>
			fs->fsi_flag = 0;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	785b      	ldrb	r3, [r3, #1]
 8005b84:	2200      	movs	r2, #0
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff fca3 	bl	80054d4 <disk_ioctl>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <sync_fs+0xcc>
 8005b94:	2301      	movs	r3, #1
 8005b96:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	41615252 	.word	0x41615252
 8005ba8:	61417272 	.word	0x61417272

08005bac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	3b02      	subs	r3, #2
 8005bba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	3b02      	subs	r3, #2
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d301      	bcc.n	8005bcc <clust2sect+0x20>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e008      	b.n	8005bde <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	895b      	ldrh	r3, [r3, #10]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	fb03 f202 	mul.w	r2, r3, r2
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	4413      	add	r3, r2
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b086      	sub	sp, #24
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d904      	bls.n	8005c0a <get_fat+0x20>
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d302      	bcc.n	8005c10 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	e0bb      	b.n	8005d88 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295
 8005c14:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	f000 8083 	beq.w	8005d26 <get_fat+0x13c>
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	f300 80a7 	bgt.w	8005d74 <get_fat+0x18a>
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d002      	beq.n	8005c30 <get_fat+0x46>
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d056      	beq.n	8005cdc <get_fat+0xf2>
 8005c2e:	e0a1      	b.n	8005d74 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	899b      	ldrh	r3, [r3, #12]
 8005c46:	4619      	mov	r1, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c4e:	4413      	add	r3, r2
 8005c50:	4619      	mov	r1, r3
 8005c52:	6938      	ldr	r0, [r7, #16]
 8005c54:	f7ff ff0c 	bl	8005a70 <move_window>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f040 808d 	bne.w	8005d7a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	60fa      	str	r2, [r7, #12]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	8992      	ldrh	r2, [r2, #12]
 8005c6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c6e:	fb01 f202 	mul.w	r2, r1, r2
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c7c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	899b      	ldrh	r3, [r3, #12]
 8005c86:	4619      	mov	r1, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c8e:	4413      	add	r3, r2
 8005c90:	4619      	mov	r1, r3
 8005c92:	6938      	ldr	r0, [r7, #16]
 8005c94:	f7ff feec 	bl	8005a70 <move_window>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d16f      	bne.n	8005d7e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	899b      	ldrh	r3, [r3, #12]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005caa:	fb01 f202 	mul.w	r2, r1, r2
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	461a      	mov	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <get_fat+0xe8>
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	e002      	b.n	8005cd8 <get_fat+0xee>
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd8:	617b      	str	r3, [r7, #20]
			break;
 8005cda:	e055      	b.n	8005d88 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	899b      	ldrh	r3, [r3, #12]
 8005ce4:	085b      	lsrs	r3, r3, #1
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	4619      	mov	r1, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cf0:	4413      	add	r3, r2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6938      	ldr	r0, [r7, #16]
 8005cf6:	f7ff febb 	bl	8005a70 <move_window>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d140      	bne.n	8005d82 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	8992      	ldrh	r2, [r2, #12]
 8005d0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d12:	fb00 f202 	mul.w	r2, r0, r2
 8005d16:	1a9b      	subs	r3, r3, r2
 8005d18:	440b      	add	r3, r1
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff fbf8 	bl	8005510 <ld_word>
 8005d20:	4603      	mov	r3, r0
 8005d22:	617b      	str	r3, [r7, #20]
			break;
 8005d24:	e030      	b.n	8005d88 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	899b      	ldrh	r3, [r3, #12]
 8005d2e:	089b      	lsrs	r3, r3, #2
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	4619      	mov	r1, r3
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d3a:	4413      	add	r3, r2
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6938      	ldr	r0, [r7, #16]
 8005d40:	f7ff fe96 	bl	8005a70 <move_window>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d11d      	bne.n	8005d86 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	8992      	ldrh	r2, [r2, #12]
 8005d58:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d5c:	fb00 f202 	mul.w	r2, r0, r2
 8005d60:	1a9b      	subs	r3, r3, r2
 8005d62:	440b      	add	r3, r1
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff fbeb 	bl	8005540 <ld_dword>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d70:	617b      	str	r3, [r7, #20]
			break;
 8005d72:	e009      	b.n	8005d88 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005d74:	2301      	movs	r3, #1
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	e006      	b.n	8005d88 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d7a:	bf00      	nop
 8005d7c:	e004      	b.n	8005d88 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d7e:	bf00      	nop
 8005d80:	e002      	b.n	8005d88 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d82:	bf00      	nop
 8005d84:	e000      	b.n	8005d88 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d86:	bf00      	nop
		}
	}

	return val;
 8005d88:	697b      	ldr	r3, [r7, #20]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005d92:	b590      	push	{r4, r7, lr}
 8005d94:	b089      	sub	sp, #36	; 0x24
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005d9e:	2302      	movs	r3, #2
 8005da0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	f240 8109 	bls.w	8005fbc <put_fat+0x22a>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	f080 8103 	bcs.w	8005fbc <put_fat+0x22a>
		switch (fs->fs_type) {
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	f000 80b6 	beq.w	8005f2c <put_fat+0x19a>
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	f300 80fb 	bgt.w	8005fbc <put_fat+0x22a>
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d003      	beq.n	8005dd2 <put_fat+0x40>
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	f000 8083 	beq.w	8005ed6 <put_fat+0x144>
 8005dd0:	e0f4      	b.n	8005fbc <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	61bb      	str	r3, [r7, #24]
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	085b      	lsrs	r3, r3, #1
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	4413      	add	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	899b      	ldrh	r3, [r3, #12]
 8005de8:	4619      	mov	r1, r3
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	fbb3 f3f1 	udiv	r3, r3, r1
 8005df0:	4413      	add	r3, r2
 8005df2:	4619      	mov	r1, r3
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f7ff fe3b 	bl	8005a70 <move_window>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005dfe:	7ffb      	ldrb	r3, [r7, #31]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f040 80d4 	bne.w	8005fae <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	61ba      	str	r2, [r7, #24]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	8992      	ldrh	r2, [r2, #12]
 8005e16:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e1a:	fb00 f202 	mul.w	r2, r0, r2
 8005e1e:	1a9b      	subs	r3, r3, r2
 8005e20:	440b      	add	r3, r1
 8005e22:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00d      	beq.n	8005e4a <put_fat+0xb8>
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	b25b      	sxtb	r3, r3
 8005e34:	f003 030f 	and.w	r3, r3, #15
 8005e38:	b25a      	sxtb	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	b25b      	sxtb	r3, r3
 8005e42:	4313      	orrs	r3, r2
 8005e44:	b25b      	sxtb	r3, r3
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	e001      	b.n	8005e4e <put_fat+0xbc>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	899b      	ldrh	r3, [r3, #12]
 8005e60:	4619      	mov	r1, r3
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e68:	4413      	add	r3, r2
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7ff fdff 	bl	8005a70 <move_window>
 8005e72:	4603      	mov	r3, r0
 8005e74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e76:	7ffb      	ldrb	r3, [r7, #31]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f040 809a 	bne.w	8005fb2 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	899b      	ldrh	r3, [r3, #12]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e90:	fb00 f202 	mul.w	r2, r0, r2
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	440b      	add	r3, r1
 8005e98:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <put_fat+0x11a>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	091b      	lsrs	r3, r3, #4
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	e00e      	b.n	8005eca <put_fat+0x138>
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	b25b      	sxtb	r3, r3
 8005eb2:	f023 030f 	bic.w	r3, r3, #15
 8005eb6:	b25a      	sxtb	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	0a1b      	lsrs	r3, r3, #8
 8005ebc:	b25b      	sxtb	r3, r3
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	b25b      	sxtb	r3, r3
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	b25b      	sxtb	r3, r3
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	70da      	strb	r2, [r3, #3]
			break;
 8005ed4:	e072      	b.n	8005fbc <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	899b      	ldrh	r3, [r3, #12]
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005eea:	4413      	add	r3, r2
 8005eec:	4619      	mov	r1, r3
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f7ff fdbe 	bl	8005a70 <move_window>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ef8:	7ffb      	ldrb	r3, [r7, #31]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d15b      	bne.n	8005fb6 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	8992      	ldrh	r2, [r2, #12]
 8005f0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f10:	fb00 f202 	mul.w	r2, r0, r2
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	440b      	add	r3, r1
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	b292      	uxth	r2, r2
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff fb31 	bl	8005586 <st_word>
			fs->wflag = 1;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	70da      	strb	r2, [r3, #3]
			break;
 8005f2a:	e047      	b.n	8005fbc <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	899b      	ldrh	r3, [r3, #12]
 8005f34:	089b      	lsrs	r3, r3, #2
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	4619      	mov	r1, r3
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f40:	4413      	add	r3, r2
 8005f42:	4619      	mov	r1, r3
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f7ff fd93 	bl	8005a70 <move_window>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f4e:	7ffb      	ldrb	r3, [r7, #31]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d132      	bne.n	8005fba <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	8992      	ldrh	r2, [r2, #12]
 8005f68:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f6c:	fb00 f202 	mul.w	r2, r0, r2
 8005f70:	1a9b      	subs	r3, r3, r2
 8005f72:	440b      	add	r3, r1
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff fae3 	bl	8005540 <ld_dword>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f80:	4323      	orrs	r3, r4
 8005f82:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	8992      	ldrh	r2, [r2, #12]
 8005f92:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f96:	fb00 f202 	mul.w	r2, r0, r2
 8005f9a:	1a9b      	subs	r3, r3, r2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	6879      	ldr	r1, [r7, #4]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7ff fb0b 	bl	80055bc <st_dword>
			fs->wflag = 1;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	70da      	strb	r2, [r3, #3]
			break;
 8005fac:	e006      	b.n	8005fbc <put_fat+0x22a>
			if (res != FR_OK) break;
 8005fae:	bf00      	nop
 8005fb0:	e004      	b.n	8005fbc <put_fat+0x22a>
			if (res != FR_OK) break;
 8005fb2:	bf00      	nop
 8005fb4:	e002      	b.n	8005fbc <put_fat+0x22a>
			if (res != FR_OK) break;
 8005fb6:	bf00      	nop
 8005fb8:	e000      	b.n	8005fbc <put_fat+0x22a>
			if (res != FR_OK) break;
 8005fba:	bf00      	nop
		}
	}
	return res;
 8005fbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3724      	adds	r7, #36	; 0x24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd90      	pop	{r4, r7, pc}

08005fc6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b088      	sub	sp, #32
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d904      	bls.n	8005fec <remove_chain+0x26>
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d301      	bcc.n	8005ff0 <remove_chain+0x2a>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e04b      	b.n	8006088 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00c      	beq.n	8006010 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	69b8      	ldr	r0, [r7, #24]
 8005ffe:	f7ff fec8 	bl	8005d92 <put_fat>
 8006002:	4603      	mov	r3, r0
 8006004:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006006:	7ffb      	ldrb	r3, [r7, #31]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <remove_chain+0x4a>
 800600c:	7ffb      	ldrb	r3, [r7, #31]
 800600e:	e03b      	b.n	8006088 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7ff fde9 	bl	8005bea <get_fat>
 8006018:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d031      	beq.n	8006084 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <remove_chain+0x64>
 8006026:	2302      	movs	r3, #2
 8006028:	e02e      	b.n	8006088 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006030:	d101      	bne.n	8006036 <remove_chain+0x70>
 8006032:	2301      	movs	r3, #1
 8006034:	e028      	b.n	8006088 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006036:	2200      	movs	r2, #0
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	69b8      	ldr	r0, [r7, #24]
 800603c:	f7ff fea9 	bl	8005d92 <put_fat>
 8006040:	4603      	mov	r3, r0
 8006042:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006044:	7ffb      	ldrb	r3, [r7, #31]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <remove_chain+0x88>
 800604a:	7ffb      	ldrb	r3, [r7, #31]
 800604c:	e01c      	b.n	8006088 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	3b02      	subs	r3, #2
 8006058:	429a      	cmp	r2, r3
 800605a:	d20b      	bcs.n	8006074 <remove_chain+0xae>
			fs->free_clst++;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	791b      	ldrb	r3, [r3, #4]
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	b2da      	uxtb	r2, r3
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	429a      	cmp	r2, r3
 8006080:	d3c6      	bcc.n	8006010 <remove_chain+0x4a>
 8006082:	e000      	b.n	8006086 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006084:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10d      	bne.n	80060c2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d004      	beq.n	80060bc <create_chain+0x2c>
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d31b      	bcc.n	80060f4 <create_chain+0x64>
 80060bc:	2301      	movs	r3, #1
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	e018      	b.n	80060f4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff fd90 	bl	8005bea <get_fat>
 80060ca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d801      	bhi.n	80060d6 <create_chain+0x46>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e070      	b.n	80061b8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d101      	bne.n	80060e2 <create_chain+0x52>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	e06a      	b.n	80061b8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d201      	bcs.n	80060f0 <create_chain+0x60>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	e063      	b.n	80061b8 <create_chain+0x128>
		scl = clst;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	3301      	adds	r3, #1
 80060fc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	69fa      	ldr	r2, [r7, #28]
 8006104:	429a      	cmp	r2, r3
 8006106:	d307      	bcc.n	8006118 <create_chain+0x88>
				ncl = 2;
 8006108:	2302      	movs	r3, #2
 800610a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	429a      	cmp	r2, r3
 8006112:	d901      	bls.n	8006118 <create_chain+0x88>
 8006114:	2300      	movs	r3, #0
 8006116:	e04f      	b.n	80061b8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006118:	69f9      	ldr	r1, [r7, #28]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff fd65 	bl	8005bea <get_fat>
 8006120:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00e      	beq.n	8006146 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d003      	beq.n	8006136 <create_chain+0xa6>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006134:	d101      	bne.n	800613a <create_chain+0xaa>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	e03e      	b.n	80061b8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	429a      	cmp	r2, r3
 8006140:	d1da      	bne.n	80060f8 <create_chain+0x68>
 8006142:	2300      	movs	r3, #0
 8006144:	e038      	b.n	80061b8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006146:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006148:	f04f 32ff 	mov.w	r2, #4294967295
 800614c:	69f9      	ldr	r1, [r7, #28]
 800614e:	6938      	ldr	r0, [r7, #16]
 8006150:	f7ff fe1f 	bl	8005d92 <put_fat>
 8006154:	4603      	mov	r3, r0
 8006156:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d109      	bne.n	8006172 <create_chain+0xe2>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d006      	beq.n	8006172 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6938      	ldr	r0, [r7, #16]
 800616a:	f7ff fe12 	bl	8005d92 <put_fat>
 800616e:	4603      	mov	r3, r0
 8006170:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006172:	7dfb      	ldrb	r3, [r7, #23]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d116      	bne.n	80061a6 <create_chain+0x116>
		fs->last_clst = ncl;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	69fa      	ldr	r2, [r7, #28]
 800617c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	3b02      	subs	r3, #2
 8006188:	429a      	cmp	r2, r3
 800618a:	d804      	bhi.n	8006196 <create_chain+0x106>
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	1e5a      	subs	r2, r3, #1
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	791b      	ldrb	r3, [r3, #4]
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	711a      	strb	r2, [r3, #4]
 80061a4:	e007      	b.n	80061b6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d102      	bne.n	80061b2 <create_chain+0x122>
 80061ac:	f04f 33ff 	mov.w	r3, #4294967295
 80061b0:	e000      	b.n	80061b4 <create_chain+0x124>
 80061b2:	2301      	movs	r3, #1
 80061b4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80061b6:	69fb      	ldr	r3, [r7, #28]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	3304      	adds	r3, #4
 80061d6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	899b      	ldrh	r3, [r3, #12]
 80061dc:	461a      	mov	r2, r3
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	8952      	ldrh	r2, [r2, #10]
 80061e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1d1a      	adds	r2, r3, #4
 80061f2:	613a      	str	r2, [r7, #16]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <clmt_clust+0x42>
 80061fe:	2300      	movs	r3, #0
 8006200:	e010      	b.n	8006224 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	429a      	cmp	r2, r3
 8006208:	d307      	bcc.n	800621a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	3304      	adds	r3, #4
 8006216:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006218:	e7e9      	b.n	80061ee <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800621a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	4413      	add	r3, r2
}
 8006224:	4618      	mov	r0, r3
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006246:	d204      	bcs.n	8006252 <dir_sdi+0x22>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	f003 031f 	and.w	r3, r3, #31
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006252:	2302      	movs	r3, #2
 8006254:	e071      	b.n	800633a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <dir_sdi+0x46>
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d902      	bls.n	8006276 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006274:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10c      	bne.n	8006296 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	8912      	ldrh	r2, [r2, #8]
 8006284:	4293      	cmp	r3, r2
 8006286:	d301      	bcc.n	800628c <dir_sdi+0x5c>
 8006288:	2302      	movs	r3, #2
 800628a:	e056      	b.n	800633a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	61da      	str	r2, [r3, #28]
 8006294:	e02d      	b.n	80062f2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	895b      	ldrh	r3, [r3, #10]
 800629a:	461a      	mov	r2, r3
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	899b      	ldrh	r3, [r3, #12]
 80062a0:	fb02 f303 	mul.w	r3, r2, r3
 80062a4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80062a6:	e019      	b.n	80062dc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6979      	ldr	r1, [r7, #20]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff fc9c 	bl	8005bea <get_fat>
 80062b2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ba:	d101      	bne.n	80062c0 <dir_sdi+0x90>
 80062bc:	2301      	movs	r3, #1
 80062be:	e03c      	b.n	800633a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d904      	bls.n	80062d0 <dir_sdi+0xa0>
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d301      	bcc.n	80062d4 <dir_sdi+0xa4>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e032      	b.n	800633a <dir_sdi+0x10a>
			ofs -= csz;
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d2e1      	bcs.n	80062a8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80062e4:	6979      	ldr	r1, [r7, #20]
 80062e6:	6938      	ldr	r0, [r7, #16]
 80062e8:	f7ff fc60 	bl	8005bac <clust2sect>
 80062ec:	4602      	mov	r2, r0
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <dir_sdi+0xd4>
 8006300:	2302      	movs	r3, #2
 8006302:	e01a      	b.n	800633a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	899b      	ldrh	r3, [r3, #12]
 800630c:	4619      	mov	r1, r3
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	fbb3 f3f1 	udiv	r3, r3, r1
 8006314:	441a      	add	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	899b      	ldrh	r3, [r3, #12]
 8006324:	461a      	mov	r2, r3
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	fbb3 f0f2 	udiv	r0, r3, r2
 800632c:	fb00 f202 	mul.w	r2, r0, r2
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	18ca      	adds	r2, r1, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b086      	sub	sp, #24
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	3320      	adds	r3, #32
 8006358:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <dir_next+0x28>
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006368:	d301      	bcc.n	800636e <dir_next+0x2c>
 800636a:	2304      	movs	r3, #4
 800636c:	e0bb      	b.n	80064e6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	899b      	ldrh	r3, [r3, #12]
 8006372:	461a      	mov	r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	fbb3 f1f2 	udiv	r1, r3, r2
 800637a:	fb01 f202 	mul.w	r2, r1, r2
 800637e:	1a9b      	subs	r3, r3, r2
 8006380:	2b00      	cmp	r3, #0
 8006382:	f040 809d 	bne.w	80064c0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10b      	bne.n	80063b0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	8912      	ldrh	r2, [r2, #8]
 80063a0:	4293      	cmp	r3, r2
 80063a2:	f0c0 808d 	bcc.w	80064c0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	61da      	str	r2, [r3, #28]
 80063ac:	2304      	movs	r3, #4
 80063ae:	e09a      	b.n	80064e6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	899b      	ldrh	r3, [r3, #12]
 80063b4:	461a      	mov	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	8952      	ldrh	r2, [r2, #10]
 80063c0:	3a01      	subs	r2, #1
 80063c2:	4013      	ands	r3, r2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d17b      	bne.n	80064c0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	4619      	mov	r1, r3
 80063d0:	4610      	mov	r0, r2
 80063d2:	f7ff fc0a 	bl	8005bea <get_fat>
 80063d6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d801      	bhi.n	80063e2 <dir_next+0xa0>
 80063de:	2302      	movs	r3, #2
 80063e0:	e081      	b.n	80064e6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e8:	d101      	bne.n	80063ee <dir_next+0xac>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e07b      	b.n	80064e6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d359      	bcc.n	80064ac <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	61da      	str	r2, [r3, #28]
 8006404:	2304      	movs	r3, #4
 8006406:	e06e      	b.n	80064e6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	4619      	mov	r1, r3
 8006410:	4610      	mov	r0, r2
 8006412:	f7ff fe3d 	bl	8006090 <create_chain>
 8006416:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <dir_next+0xe0>
 800641e:	2307      	movs	r3, #7
 8006420:	e061      	b.n	80064e6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <dir_next+0xea>
 8006428:	2302      	movs	r3, #2
 800642a:	e05c      	b.n	80064e6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006432:	d101      	bne.n	8006438 <dir_next+0xf6>
 8006434:	2301      	movs	r3, #1
 8006436:	e056      	b.n	80064e6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7ff fad5 	bl	80059e8 <sync_window>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <dir_next+0x106>
 8006444:	2301      	movs	r3, #1
 8006446:	e04e      	b.n	80064e6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	899b      	ldrh	r3, [r3, #12]
 8006452:	461a      	mov	r2, r3
 8006454:	2100      	movs	r1, #0
 8006456:	f7ff f8fe 	bl	8005656 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	6979      	ldr	r1, [r7, #20]
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f7ff fba3 	bl	8005bac <clust2sect>
 8006466:	4602      	mov	r2, r0
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	635a      	str	r2, [r3, #52]	; 0x34
 800646c:	e012      	b.n	8006494 <dir_next+0x152>
						fs->wflag = 1;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7ff fab7 	bl	80059e8 <sync_window>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <dir_next+0x142>
 8006480:	2301      	movs	r3, #1
 8006482:	e030      	b.n	80064e6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	3301      	adds	r3, #1
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	635a      	str	r2, [r3, #52]	; 0x34
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	895b      	ldrh	r3, [r3, #10]
 8006498:	461a      	mov	r2, r3
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4293      	cmp	r3, r2
 800649e:	d3e6      	bcc.n	800646e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	1ad2      	subs	r2, r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80064b2:	6979      	ldr	r1, [r7, #20]
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7ff fb79 	bl	8005bac <clust2sect>
 80064ba:	4602      	mov	r2, r0
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	899b      	ldrh	r3, [r3, #12]
 80064d0:	461a      	mov	r2, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80064d8:	fb00 f202 	mul.w	r2, r0, r2
 80064dc:	1a9b      	subs	r3, r3, r2
 80064de:	18ca      	adds	r2, r1, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b086      	sub	sp, #24
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80064fe:	2100      	movs	r1, #0
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff fe95 	bl	8006230 <dir_sdi>
 8006506:	4603      	mov	r3, r0
 8006508:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d12b      	bne.n	8006568 <dir_alloc+0x7a>
		n = 0;
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	4619      	mov	r1, r3
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f7ff faa8 	bl	8005a70 <move_window>
 8006520:	4603      	mov	r3, r0
 8006522:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006524:	7dfb      	ldrb	r3, [r7, #23]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d11d      	bne.n	8006566 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	2be5      	cmp	r3, #229	; 0xe5
 8006532:	d004      	beq.n	800653e <dir_alloc+0x50>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d107      	bne.n	800654e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	3301      	adds	r3, #1
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d102      	bne.n	8006552 <dir_alloc+0x64>
 800654c:	e00c      	b.n	8006568 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800654e:	2300      	movs	r3, #0
 8006550:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006552:	2101      	movs	r1, #1
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff fef4 	bl	8006342 <dir_next>
 800655a:	4603      	mov	r3, r0
 800655c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0d7      	beq.n	8006514 <dir_alloc+0x26>
 8006564:	e000      	b.n	8006568 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006566:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006568:	7dfb      	ldrb	r3, [r7, #23]
 800656a:	2b04      	cmp	r3, #4
 800656c:	d101      	bne.n	8006572 <dir_alloc+0x84>
 800656e:	2307      	movs	r3, #7
 8006570:	75fb      	strb	r3, [r7, #23]
	return res;
 8006572:	7dfb      	ldrb	r3, [r7, #23]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	331a      	adds	r3, #26
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe ffc0 	bl	8005510 <ld_word>
 8006590:	4603      	mov	r3, r0
 8006592:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b03      	cmp	r3, #3
 800659a:	d109      	bne.n	80065b0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	3314      	adds	r3, #20
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe ffb5 	bl	8005510 <ld_word>
 80065a6:	4603      	mov	r3, r0
 80065a8:	041b      	lsls	r3, r3, #16
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80065b0:	68fb      	ldr	r3, [r7, #12]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	331a      	adds	r3, #26
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	b292      	uxth	r2, r2
 80065ce:	4611      	mov	r1, r2
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe ffd8 	bl	8005586 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d109      	bne.n	80065f2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f103 0214 	add.w	r2, r3, #20
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	0c1b      	lsrs	r3, r3, #16
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	4619      	mov	r1, r3
 80065ec:	4610      	mov	r0, r2
 80065ee:	f7fe ffca 	bl	8005586 <st_word>
	}
}
 80065f2:	bf00      	nop
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80065fc:	b590      	push	{r4, r7, lr}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	331a      	adds	r3, #26
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe ff80 	bl	8005510 <ld_word>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <cmp_lfn+0x1e>
 8006616:	2300      	movs	r3, #0
 8006618:	e059      	b.n	80066ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006622:	1e5a      	subs	r2, r3, #1
 8006624:	4613      	mov	r3, r2
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006630:	2301      	movs	r3, #1
 8006632:	81fb      	strh	r3, [r7, #14]
 8006634:	2300      	movs	r3, #0
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	e033      	b.n	80066a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800663a:	4a27      	ldr	r2, [pc, #156]	; (80066d8 <cmp_lfn+0xdc>)
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	4413      	add	r3, r2
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	4413      	add	r3, r2
 8006648:	4618      	mov	r0, r3
 800664a:	f7fe ff61 	bl	8005510 <ld_word>
 800664e:	4603      	mov	r3, r0
 8006650:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006652:	89fb      	ldrh	r3, [r7, #14]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01a      	beq.n	800668e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2bfe      	cmp	r3, #254	; 0xfe
 800665c:	d812      	bhi.n	8006684 <cmp_lfn+0x88>
 800665e:	89bb      	ldrh	r3, [r7, #12]
 8006660:	4618      	mov	r0, r3
 8006662:	f001 fe11 	bl	8008288 <ff_wtoupper>
 8006666:	4603      	mov	r3, r0
 8006668:	461c      	mov	r4, r3
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	617a      	str	r2, [r7, #20]
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	4413      	add	r3, r2
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	4618      	mov	r0, r3
 800667a:	f001 fe05 	bl	8008288 <ff_wtoupper>
 800667e:	4603      	mov	r3, r0
 8006680:	429c      	cmp	r4, r3
 8006682:	d001      	beq.n	8006688 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006684:	2300      	movs	r3, #0
 8006686:	e022      	b.n	80066ce <cmp_lfn+0xd2>
			}
			wc = uc;
 8006688:	89bb      	ldrh	r3, [r7, #12]
 800668a:	81fb      	strh	r3, [r7, #14]
 800668c:	e006      	b.n	800669c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800668e:	89bb      	ldrh	r3, [r7, #12]
 8006690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006694:	4293      	cmp	r3, r2
 8006696:	d001      	beq.n	800669c <cmp_lfn+0xa0>
 8006698:	2300      	movs	r3, #0
 800669a:	e018      	b.n	80066ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	3301      	adds	r3, #1
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	2b0c      	cmp	r3, #12
 80066a6:	d9c8      	bls.n	800663a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <cmp_lfn+0xd0>
 80066b4:	89fb      	ldrh	r3, [r7, #14]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d008      	beq.n	80066cc <cmp_lfn+0xd0>
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	4413      	add	r3, r2
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <cmp_lfn+0xd0>
 80066c8:	2300      	movs	r3, #0
 80066ca:	e000      	b.n	80066ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80066cc:	2301      	movs	r3, #1
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd90      	pop	{r4, r7, pc}
 80066d6:	bf00      	nop
 80066d8:	08008ea0 	.word	0x08008ea0

080066dc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	4611      	mov	r1, r2
 80066e8:	461a      	mov	r2, r3
 80066ea:	460b      	mov	r3, r1
 80066ec:	71fb      	strb	r3, [r7, #7]
 80066ee:	4613      	mov	r3, r2
 80066f0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	330d      	adds	r3, #13
 80066f6:	79ba      	ldrb	r2, [r7, #6]
 80066f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	330b      	adds	r3, #11
 80066fe:	220f      	movs	r2, #15
 8006700:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	330c      	adds	r3, #12
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	331a      	adds	r3, #26
 800670e:	2100      	movs	r1, #0
 8006710:	4618      	mov	r0, r3
 8006712:	f7fe ff38 	bl	8005586 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	1e5a      	subs	r2, r3, #1
 800671a:	4613      	mov	r3, r2
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	82fb      	strh	r3, [r7, #22]
 800672a:	2300      	movs	r3, #0
 800672c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800672e:	8afb      	ldrh	r3, [r7, #22]
 8006730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006734:	4293      	cmp	r3, r2
 8006736:	d007      	beq.n	8006748 <put_lfn+0x6c>
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	61fa      	str	r2, [r7, #28]
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006748:	4a17      	ldr	r2, [pc, #92]	; (80067a8 <put_lfn+0xcc>)
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	4413      	add	r3, r2
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	461a      	mov	r2, r3
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4413      	add	r3, r2
 8006756:	8afa      	ldrh	r2, [r7, #22]
 8006758:	4611      	mov	r1, r2
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe ff13 	bl	8005586 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006760:	8afb      	ldrh	r3, [r7, #22]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d102      	bne.n	800676c <put_lfn+0x90>
 8006766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800676a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	3301      	adds	r3, #1
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	2b0c      	cmp	r3, #12
 8006776:	d9da      	bls.n	800672e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006778:	8afb      	ldrh	r3, [r7, #22]
 800677a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800677e:	4293      	cmp	r3, r2
 8006780:	d006      	beq.n	8006790 <put_lfn+0xb4>
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d103      	bne.n	8006798 <put_lfn+0xbc>
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006796:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	79fa      	ldrb	r2, [r7, #7]
 800679c:	701a      	strb	r2, [r3, #0]
}
 800679e:	bf00      	nop
 80067a0:	3720      	adds	r7, #32
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	08008ea0 	.word	0x08008ea0

080067ac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08c      	sub	sp, #48	; 0x30
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80067ba:	220b      	movs	r2, #11
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7fe ff28 	bl	8005614 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2b05      	cmp	r3, #5
 80067c8:	d92b      	bls.n	8006822 <gen_numname+0x76>
		sr = seq;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80067ce:	e022      	b.n	8006816 <gen_numname+0x6a>
			wc = *lfn++;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	1c9a      	adds	r2, r3, #2
 80067d4:	607a      	str	r2, [r7, #4]
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80067da:	2300      	movs	r3, #0
 80067dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80067de:	e017      	b.n	8006810 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	005a      	lsls	r2, r3, #1
 80067e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	4413      	add	r3, r2
 80067ec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80067ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067f0:	085b      	lsrs	r3, r3, #1
 80067f2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <gen_numname+0x5e>
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006804:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006808:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	3301      	adds	r3, #1
 800680e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006812:	2b0f      	cmp	r3, #15
 8006814:	d9e4      	bls.n	80067e0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1d8      	bne.n	80067d0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006822:	2307      	movs	r3, #7
 8006824:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	b2db      	uxtb	r3, r3
 8006830:	3330      	adds	r3, #48	; 0x30
 8006832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800683a:	2b39      	cmp	r3, #57	; 0x39
 800683c:	d904      	bls.n	8006848 <gen_numname+0x9c>
 800683e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006842:	3307      	adds	r3, #7
 8006844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	1e5a      	subs	r2, r3, #1
 800684c:	62ba      	str	r2, [r7, #40]	; 0x28
 800684e:	3330      	adds	r3, #48	; 0x30
 8006850:	443b      	add	r3, r7
 8006852:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006856:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	091b      	lsrs	r3, r3, #4
 800685e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1df      	bne.n	8006826 <gen_numname+0x7a>
	ns[i] = '~';
 8006866:	f107 0214 	add.w	r2, r7, #20
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	4413      	add	r3, r2
 800686e:	227e      	movs	r2, #126	; 0x7e
 8006870:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006872:	2300      	movs	r3, #0
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
 8006876:	e002      	b.n	800687e <gen_numname+0xd2>
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	3301      	adds	r3, #1
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
 800687e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006882:	429a      	cmp	r2, r3
 8006884:	d205      	bcs.n	8006892 <gen_numname+0xe6>
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	4413      	add	r3, r2
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b20      	cmp	r3, #32
 8006890:	d1f2      	bne.n	8006878 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	2b07      	cmp	r3, #7
 8006896:	d807      	bhi.n	80068a8 <gen_numname+0xfc>
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	62ba      	str	r2, [r7, #40]	; 0x28
 800689e:	3330      	adds	r3, #48	; 0x30
 80068a0:	443b      	add	r3, r7
 80068a2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80068a6:	e000      	b.n	80068aa <gen_numname+0xfe>
 80068a8:	2120      	movs	r1, #32
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	627a      	str	r2, [r7, #36]	; 0x24
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	460a      	mov	r2, r1
 80068b6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	2b07      	cmp	r3, #7
 80068bc:	d9e9      	bls.n	8006892 <gen_numname+0xe6>
}
 80068be:	bf00      	nop
 80068c0:	bf00      	nop
 80068c2:	3730      	adds	r7, #48	; 0x30
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80068d4:	230b      	movs	r3, #11
 80068d6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	0852      	lsrs	r2, r2, #1
 80068de:	01db      	lsls	r3, r3, #7
 80068e0:	4313      	orrs	r3, r2
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	1c59      	adds	r1, r3, #1
 80068e8:	6079      	str	r1, [r7, #4]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	4413      	add	r3, r2
 80068ee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	60bb      	str	r3, [r7, #8]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1ed      	bne.n	80068d8 <sum_sfn+0x10>
	return sum;
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b086      	sub	sp, #24
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006918:	2100      	movs	r1, #0
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff fc88 	bl	8006230 <dir_sdi>
 8006920:	4603      	mov	r3, r0
 8006922:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006924:	7dfb      	ldrb	r3, [r7, #23]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <dir_find+0x24>
 800692a:	7dfb      	ldrb	r3, [r7, #23]
 800692c:	e0a9      	b.n	8006a82 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800692e:	23ff      	movs	r3, #255	; 0xff
 8006930:	753b      	strb	r3, [r7, #20]
 8006932:	7d3b      	ldrb	r3, [r7, #20]
 8006934:	757b      	strb	r3, [r7, #21]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f04f 32ff 	mov.w	r2, #4294967295
 800693c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	4619      	mov	r1, r3
 8006944:	6938      	ldr	r0, [r7, #16]
 8006946:	f7ff f893 	bl	8005a70 <move_window>
 800694a:	4603      	mov	r3, r0
 800694c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800694e:	7dfb      	ldrb	r3, [r7, #23]
 8006950:	2b00      	cmp	r3, #0
 8006952:	f040 8090 	bne.w	8006a76 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800695e:	7dbb      	ldrb	r3, [r7, #22]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <dir_find+0x60>
 8006964:	2304      	movs	r3, #4
 8006966:	75fb      	strb	r3, [r7, #23]
 8006968:	e08a      	b.n	8006a80 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	330b      	adds	r3, #11
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006976:	73fb      	strb	r3, [r7, #15]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	7bfa      	ldrb	r2, [r7, #15]
 800697c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800697e:	7dbb      	ldrb	r3, [r7, #22]
 8006980:	2be5      	cmp	r3, #229	; 0xe5
 8006982:	d007      	beq.n	8006994 <dir_find+0x8a>
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <dir_find+0x98>
 800698e:	7bfb      	ldrb	r3, [r7, #15]
 8006990:	2b0f      	cmp	r3, #15
 8006992:	d006      	beq.n	80069a2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006994:	23ff      	movs	r3, #255	; 0xff
 8006996:	757b      	strb	r3, [r7, #21]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f04f 32ff 	mov.w	r2, #4294967295
 800699e:	631a      	str	r2, [r3, #48]	; 0x30
 80069a0:	e05e      	b.n	8006a60 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	2b0f      	cmp	r3, #15
 80069a6:	d136      	bne.n	8006a16 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80069ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d154      	bne.n	8006a60 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80069b6:	7dbb      	ldrb	r3, [r7, #22]
 80069b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00d      	beq.n	80069dc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	7b5b      	ldrb	r3, [r3, #13]
 80069c6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80069c8:	7dbb      	ldrb	r3, [r7, #22]
 80069ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ce:	75bb      	strb	r3, [r7, #22]
 80069d0:	7dbb      	ldrb	r3, [r7, #22]
 80069d2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	695a      	ldr	r2, [r3, #20]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80069dc:	7dba      	ldrb	r2, [r7, #22]
 80069de:	7d7b      	ldrb	r3, [r7, #21]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d115      	bne.n	8006a10 <dir_find+0x106>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	330d      	adds	r3, #13
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	7d3a      	ldrb	r2, [r7, #20]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d10e      	bne.n	8006a10 <dir_find+0x106>
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	691a      	ldr	r2, [r3, #16]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	4619      	mov	r1, r3
 80069fc:	4610      	mov	r0, r2
 80069fe:	f7ff fdfd 	bl	80065fc <cmp_lfn>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <dir_find+0x106>
 8006a08:	7d7b      	ldrb	r3, [r7, #21]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	e000      	b.n	8006a12 <dir_find+0x108>
 8006a10:	23ff      	movs	r3, #255	; 0xff
 8006a12:	757b      	strb	r3, [r7, #21]
 8006a14:	e024      	b.n	8006a60 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006a16:	7d7b      	ldrb	r3, [r7, #21]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d109      	bne.n	8006a30 <dir_find+0x126>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff ff51 	bl	80068c8 <sum_sfn>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	7d3b      	ldrb	r3, [r7, #20]
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d024      	beq.n	8006a7a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10a      	bne.n	8006a54 <dir_find+0x14a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a18      	ldr	r0, [r3, #32]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3324      	adds	r3, #36	; 0x24
 8006a46:	220b      	movs	r2, #11
 8006a48:	4619      	mov	r1, r3
 8006a4a:	f7fe fe1f 	bl	800568c <mem_cmp>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d014      	beq.n	8006a7e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006a54:	23ff      	movs	r3, #255	; 0xff
 8006a56:	757b      	strb	r3, [r7, #21]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006a60:	2100      	movs	r1, #0
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7ff fc6d 	bl	8006342 <dir_next>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006a6c:	7dfb      	ldrb	r3, [r7, #23]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f43f af65 	beq.w	800693e <dir_find+0x34>
 8006a74:	e004      	b.n	8006a80 <dir_find+0x176>
		if (res != FR_OK) break;
 8006a76:	bf00      	nop
 8006a78:	e002      	b.n	8006a80 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006a7a:	bf00      	nop
 8006a7c:	e000      	b.n	8006a80 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006a7e:	bf00      	nop

	return res;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08c      	sub	sp, #48	; 0x30
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006aa0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <dir_register+0x20>
 8006aa8:	2306      	movs	r3, #6
 8006aaa:	e0e0      	b.n	8006c6e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006aac:	2300      	movs	r3, #0
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab0:	e002      	b.n	8006ab8 <dir_register+0x2c>
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	4413      	add	r3, r2
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1f4      	bne.n	8006ab2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006ace:	f107 030c 	add.w	r3, r7, #12
 8006ad2:	220c      	movs	r2, #12
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fe fd9d 	bl	8005614 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d032      	beq.n	8006b4a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2240      	movs	r2, #64	; 0x40
 8006ae8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006aec:	2301      	movs	r3, #1
 8006aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8006af0:	e016      	b.n	8006b20 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	f107 010c 	add.w	r1, r7, #12
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	f7ff fe53 	bl	80067ac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff feff 	bl	800690a <dir_find>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	2b63      	cmp	r3, #99	; 0x63
 8006b24:	d9e5      	bls.n	8006af2 <dir_register+0x66>
 8006b26:	e000      	b.n	8006b2a <dir_register+0x9e>
			if (res != FR_OK) break;
 8006b28:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	2b64      	cmp	r3, #100	; 0x64
 8006b2e:	d101      	bne.n	8006b34 <dir_register+0xa8>
 8006b30:	2307      	movs	r3, #7
 8006b32:	e09c      	b.n	8006c6e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006b34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d002      	beq.n	8006b42 <dir_register+0xb6>
 8006b3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b40:	e095      	b.n	8006c6e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006b42:	7dfa      	ldrb	r2, [r7, #23]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d007      	beq.n	8006b64 <dir_register+0xd8>
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	330c      	adds	r3, #12
 8006b58:	4a47      	ldr	r2, [pc, #284]	; (8006c78 <dir_register+0x1ec>)
 8006b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5e:	089b      	lsrs	r3, r3, #2
 8006b60:	3301      	adds	r3, #1
 8006b62:	e000      	b.n	8006b66 <dir_register+0xda>
 8006b64:	2301      	movs	r3, #1
 8006b66:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006b68:	6a39      	ldr	r1, [r7, #32]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff fcbf 	bl	80064ee <dir_alloc>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d148      	bne.n	8006c10 <dir_register+0x184>
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	3b01      	subs	r3, #1
 8006b82:	623b      	str	r3, [r7, #32]
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d042      	beq.n	8006c10 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695a      	ldr	r2, [r3, #20]
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	015b      	lsls	r3, r3, #5
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff fb4a 	bl	8006230 <dir_sdi>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006ba2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d132      	bne.n	8006c10 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	3324      	adds	r3, #36	; 0x24
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff fe8a 	bl	80068c8 <sum_sfn>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	69f8      	ldr	r0, [r7, #28]
 8006bc0:	f7fe ff56 	bl	8005a70 <move_window>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006bca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d11d      	bne.n	8006c0e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	6918      	ldr	r0, [r3, #16]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a19      	ldr	r1, [r3, #32]
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	7efb      	ldrb	r3, [r7, #27]
 8006be0:	f7ff fd7c 	bl	80066dc <put_lfn>
				fs->wflag = 1;
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	2201      	movs	r2, #1
 8006be8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006bea:	2100      	movs	r1, #0
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff fba8 	bl	8006342 <dir_next>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d107      	bne.n	8006c10 <dir_register+0x184>
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	623b      	str	r3, [r7, #32]
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1d5      	bne.n	8006bb8 <dir_register+0x12c>
 8006c0c:	e000      	b.n	8006c10 <dir_register+0x184>
				if (res != FR_OK) break;
 8006c0e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d128      	bne.n	8006c6a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	69f8      	ldr	r0, [r7, #28]
 8006c20:	f7fe ff26 	bl	8005a70 <move_window>
 8006c24:	4603      	mov	r3, r0
 8006c26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006c2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d11b      	bne.n	8006c6a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	2220      	movs	r2, #32
 8006c38:	2100      	movs	r1, #0
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe fd0b 	bl	8005656 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a18      	ldr	r0, [r3, #32]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3324      	adds	r3, #36	; 0x24
 8006c48:	220b      	movs	r2, #11
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	f7fe fce2 	bl	8005614 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	330c      	adds	r3, #12
 8006c5c:	f002 0218 	and.w	r2, r2, #24
 8006c60:	b2d2      	uxtb	r2, r2
 8006c62:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	2201      	movs	r2, #1
 8006c68:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3730      	adds	r7, #48	; 0x30
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	4ec4ec4f 	.word	0x4ec4ec4f

08006c7c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08a      	sub	sp, #40	; 0x28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	2300      	movs	r3, #0
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	61ba      	str	r2, [r7, #24]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006caa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cac:	2b1f      	cmp	r3, #31
 8006cae:	d940      	bls.n	8006d32 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006cb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cb2:	2b2f      	cmp	r3, #47	; 0x2f
 8006cb4:	d006      	beq.n	8006cc4 <create_name+0x48>
 8006cb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cb8:	2b5c      	cmp	r3, #92	; 0x5c
 8006cba:	d110      	bne.n	8006cde <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006cbc:	e002      	b.n	8006cc4 <create_name+0x48>
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	4413      	add	r3, r2
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b2f      	cmp	r3, #47	; 0x2f
 8006cce:	d0f6      	beq.n	8006cbe <create_name+0x42>
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b5c      	cmp	r3, #92	; 0x5c
 8006cda:	d0f0      	beq.n	8006cbe <create_name+0x42>
			break;
 8006cdc:	e02a      	b.n	8006d34 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2bfe      	cmp	r3, #254	; 0xfe
 8006ce2:	d901      	bls.n	8006ce8 <create_name+0x6c>
 8006ce4:	2306      	movs	r3, #6
 8006ce6:	e17d      	b.n	8006fe4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006ce8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006cee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f001 fa8c 	bl	8008210 <ff_convert>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006cfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <create_name+0x8a>
 8006d02:	2306      	movs	r3, #6
 8006d04:	e16e      	b.n	8006fe4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d08:	2b7f      	cmp	r3, #127	; 0x7f
 8006d0a:	d809      	bhi.n	8006d20 <create_name+0xa4>
 8006d0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d0e:	4619      	mov	r1, r3
 8006d10:	488d      	ldr	r0, [pc, #564]	; (8006f48 <create_name+0x2cc>)
 8006d12:	f7fe fce2 	bl	80056da <chk_chr>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <create_name+0xa4>
 8006d1c:	2306      	movs	r3, #6
 8006d1e:	e161      	b.n	8006fe4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	617a      	str	r2, [r7, #20]
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d2e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006d30:	e7b4      	b.n	8006c9c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006d32:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	441a      	add	r2, r3
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006d3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d40:	2b1f      	cmp	r3, #31
 8006d42:	d801      	bhi.n	8006d48 <create_name+0xcc>
 8006d44:	2304      	movs	r3, #4
 8006d46:	e000      	b.n	8006d4a <create_name+0xce>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006d4e:	e011      	b.n	8006d74 <create_name+0xf8>
		w = lfn[di - 1];
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006d56:	3b01      	subs	r3, #1
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006d62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d002      	beq.n	8006d6e <create_name+0xf2>
 8006d68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d6c:	d106      	bne.n	8006d7c <create_name+0x100>
		di--;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1ea      	bne.n	8006d50 <create_name+0xd4>
 8006d7a:	e000      	b.n	8006d7e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006d7c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4413      	add	r3, r2
 8006d86:	2200      	movs	r2, #0
 8006d88:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <create_name+0x118>
 8006d90:	2306      	movs	r3, #6
 8006d92:	e127      	b.n	8006fe4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3324      	adds	r3, #36	; 0x24
 8006d98:	220b      	movs	r2, #11
 8006d9a:	2120      	movs	r1, #32
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fe fc5a 	bl	8005656 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006da2:	2300      	movs	r3, #0
 8006da4:	61bb      	str	r3, [r7, #24]
 8006da6:	e002      	b.n	8006dae <create_name+0x132>
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	3301      	adds	r3, #1
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	2b20      	cmp	r3, #32
 8006dba:	d0f5      	beq.n	8006da8 <create_name+0x12c>
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8006dc8:	d0ee      	beq.n	8006da8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d009      	beq.n	8006de4 <create_name+0x168>
 8006dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dd4:	f043 0303 	orr.w	r3, r3, #3
 8006dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006ddc:	e002      	b.n	8006de4 <create_name+0x168>
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <create_name+0x182>
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006df0:	3b01      	subs	r3, #1
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8006dfc:	d1ef      	bne.n	8006dde <create_name+0x162>

	i = b = 0; ni = 8;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e04:	2300      	movs	r3, #0
 8006e06:	623b      	str	r3, [r7, #32]
 8006e08:	2308      	movs	r3, #8
 8006e0a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	61ba      	str	r2, [r7, #24]
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 8090 	beq.w	8006f44 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006e24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	d006      	beq.n	8006e38 <create_name+0x1bc>
 8006e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e2e:	d10a      	bne.n	8006e46 <create_name+0x1ca>
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d006      	beq.n	8006e46 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e3c:	f043 0303 	orr.w	r3, r3, #3
 8006e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e44:	e07d      	b.n	8006f42 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006e46:	6a3a      	ldr	r2, [r7, #32]
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d203      	bcs.n	8006e56 <create_name+0x1da>
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d123      	bne.n	8006e9e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	2b0b      	cmp	r3, #11
 8006e5a:	d106      	bne.n	8006e6a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e60:	f043 0303 	orr.w	r3, r3, #3
 8006e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e68:	e075      	b.n	8006f56 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d005      	beq.n	8006e7e <create_name+0x202>
 8006e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e76:	f043 0303 	orr.w	r3, r3, #3
 8006e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d866      	bhi.n	8006f54 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	2308      	movs	r3, #8
 8006e8c:	623b      	str	r3, [r7, #32]
 8006e8e:	230b      	movs	r3, #11
 8006e90:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006e92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e9c:	e051      	b.n	8006f42 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ea2:	d914      	bls.n	8006ece <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006ea4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f001 f9b1 	bl	8008210 <ff_convert>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006eb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d004      	beq.n	8006ec2 <create_name+0x246>
 8006eb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eba:	3b80      	subs	r3, #128	; 0x80
 8006ebc:	4a23      	ldr	r2, [pc, #140]	; (8006f4c <create_name+0x2d0>)
 8006ebe:	5cd3      	ldrb	r3, [r2, r3]
 8006ec0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ec6:	f043 0302 	orr.w	r3, r3, #2
 8006eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006ece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d007      	beq.n	8006ee4 <create_name+0x268>
 8006ed4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	481d      	ldr	r0, [pc, #116]	; (8006f50 <create_name+0x2d4>)
 8006eda:	f7fe fbfe 	bl	80056da <chk_chr>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d008      	beq.n	8006ef6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006ee4:	235f      	movs	r3, #95	; 0x5f
 8006ee6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eec:	f043 0303 	orr.w	r3, r3, #3
 8006ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ef4:	e01b      	b.n	8006f2e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ef8:	2b40      	cmp	r3, #64	; 0x40
 8006efa:	d909      	bls.n	8006f10 <create_name+0x294>
 8006efc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006efe:	2b5a      	cmp	r3, #90	; 0x5a
 8006f00:	d806      	bhi.n	8006f10 <create_name+0x294>
					b |= 2;
 8006f02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f06:	f043 0302 	orr.w	r3, r3, #2
 8006f0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006f0e:	e00e      	b.n	8006f2e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006f10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f12:	2b60      	cmp	r3, #96	; 0x60
 8006f14:	d90b      	bls.n	8006f2e <create_name+0x2b2>
 8006f16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f18:	2b7a      	cmp	r3, #122	; 0x7a
 8006f1a:	d808      	bhi.n	8006f2e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006f1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f20:	f043 0301 	orr.w	r3, r3, #1
 8006f24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006f28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f2a:	3b20      	subs	r3, #32
 8006f2c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	623a      	str	r2, [r7, #32]
 8006f34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f36:	b2d1      	uxtb	r1, r2
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	460a      	mov	r2, r1
 8006f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006f42:	e763      	b.n	8006e0c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006f44:	bf00      	nop
 8006f46:	e006      	b.n	8006f56 <create_name+0x2da>
 8006f48:	08008d90 	.word	0x08008d90
 8006f4c:	08008e20 	.word	0x08008e20
 8006f50:	08008d9c 	.word	0x08008d9c
			if (si > di) break;			/* No extension */
 8006f54:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f5c:	2be5      	cmp	r3, #229	; 0xe5
 8006f5e:	d103      	bne.n	8006f68 <create_name+0x2ec>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2205      	movs	r2, #5
 8006f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	2b08      	cmp	r3, #8
 8006f6c:	d104      	bne.n	8006f78 <create_name+0x2fc>
 8006f6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006f78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f7c:	f003 030c 	and.w	r3, r3, #12
 8006f80:	2b0c      	cmp	r3, #12
 8006f82:	d005      	beq.n	8006f90 <create_name+0x314>
 8006f84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f88:	f003 0303 	and.w	r3, r3, #3
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d105      	bne.n	8006f9c <create_name+0x320>
 8006f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f94:	f043 0302 	orr.w	r3, r3, #2
 8006f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d117      	bne.n	8006fd8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006fa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fac:	f003 0303 	and.w	r3, r3, #3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d105      	bne.n	8006fc0 <create_name+0x344>
 8006fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fb8:	f043 0310 	orr.w	r3, r3, #16
 8006fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fc4:	f003 030c 	and.w	r3, r3, #12
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d105      	bne.n	8006fd8 <create_name+0x35c>
 8006fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fd0:	f043 0308 	orr.w	r3, r3, #8
 8006fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006fde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006fe2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3728      	adds	r7, #40	; 0x28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007000:	e002      	b.n	8007008 <follow_path+0x1c>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	3301      	adds	r3, #1
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b2f      	cmp	r3, #47	; 0x2f
 800700e:	d0f8      	beq.n	8007002 <follow_path+0x16>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b5c      	cmp	r3, #92	; 0x5c
 8007016:	d0f4      	beq.n	8007002 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	2200      	movs	r2, #0
 800701c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b1f      	cmp	r3, #31
 8007024:	d80a      	bhi.n	800703c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2280      	movs	r2, #128	; 0x80
 800702a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800702e:	2100      	movs	r1, #0
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff f8fd 	bl	8006230 <dir_sdi>
 8007036:	4603      	mov	r3, r0
 8007038:	75fb      	strb	r3, [r7, #23]
 800703a:	e048      	b.n	80070ce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800703c:	463b      	mov	r3, r7
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7ff fe1b 	bl	8006c7c <create_name>
 8007046:	4603      	mov	r3, r0
 8007048:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d139      	bne.n	80070c4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7ff fc5a 	bl	800690a <dir_find>
 8007056:	4603      	mov	r3, r0
 8007058:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007060:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	2b04      	cmp	r3, #4
 800706c:	d12c      	bne.n	80070c8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800706e:	7afb      	ldrb	r3, [r7, #11]
 8007070:	f003 0304 	and.w	r3, r3, #4
 8007074:	2b00      	cmp	r3, #0
 8007076:	d127      	bne.n	80070c8 <follow_path+0xdc>
 8007078:	2305      	movs	r3, #5
 800707a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800707c:	e024      	b.n	80070c8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800707e:	7afb      	ldrb	r3, [r7, #11]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d121      	bne.n	80070cc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	799b      	ldrb	r3, [r3, #6]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	d102      	bne.n	800709a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007094:	2305      	movs	r3, #5
 8007096:	75fb      	strb	r3, [r7, #23]
 8007098:	e019      	b.n	80070ce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	8992      	ldrh	r2, [r2, #12]
 80070a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80070ac:	fb00 f202 	mul.w	r2, r0, r2
 80070b0:	1a9b      	subs	r3, r3, r2
 80070b2:	440b      	add	r3, r1
 80070b4:	4619      	mov	r1, r3
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f7ff fa60 	bl	800657c <ld_clust>
 80070bc:	4602      	mov	r2, r0
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80070c2:	e7bb      	b.n	800703c <follow_path+0x50>
			if (res != FR_OK) break;
 80070c4:	bf00      	nop
 80070c6:	e002      	b.n	80070ce <follow_path+0xe2>
				break;
 80070c8:	bf00      	nop
 80070ca:	e000      	b.n	80070ce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80070cc:	bf00      	nop
			}
		}
	}

	return res;
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3718      	adds	r7, #24
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80070e0:	f04f 33ff 	mov.w	r3, #4294967295
 80070e4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d031      	beq.n	8007152 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	e002      	b.n	80070fc <get_ldnumber+0x24>
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	3301      	adds	r3, #1
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b1f      	cmp	r3, #31
 8007102:	d903      	bls.n	800710c <get_ldnumber+0x34>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b3a      	cmp	r3, #58	; 0x3a
 800710a:	d1f4      	bne.n	80070f6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b3a      	cmp	r3, #58	; 0x3a
 8007112:	d11c      	bne.n	800714e <get_ldnumber+0x76>
			tp = *path;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	60fa      	str	r2, [r7, #12]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	3b30      	subs	r3, #48	; 0x30
 8007124:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b09      	cmp	r3, #9
 800712a:	d80e      	bhi.n	800714a <get_ldnumber+0x72>
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	429a      	cmp	r2, r3
 8007132:	d10a      	bne.n	800714a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d107      	bne.n	800714a <get_ldnumber+0x72>
					vol = (int)i;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	3301      	adds	r3, #1
 8007142:	617b      	str	r3, [r7, #20]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	e002      	b.n	8007154 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800714e:	2300      	movs	r3, #0
 8007150:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007152:	693b      	ldr	r3, [r7, #16]
}
 8007154:	4618      	mov	r0, r3
 8007156:	371c      	adds	r7, #28
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	70da      	strb	r2, [r3, #3]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f04f 32ff 	mov.w	r2, #4294967295
 8007176:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7fe fc78 	bl	8005a70 <move_window>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <check_fs+0x2a>
 8007186:	2304      	movs	r3, #4
 8007188:	e038      	b.n	80071fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3338      	adds	r3, #56	; 0x38
 800718e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe f9bc 	bl	8005510 <ld_word>
 8007198:	4603      	mov	r3, r0
 800719a:	461a      	mov	r2, r3
 800719c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d001      	beq.n	80071a8 <check_fs+0x48>
 80071a4:	2303      	movs	r3, #3
 80071a6:	e029      	b.n	80071fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80071ae:	2be9      	cmp	r3, #233	; 0xe9
 80071b0:	d009      	beq.n	80071c6 <check_fs+0x66>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80071b8:	2beb      	cmp	r3, #235	; 0xeb
 80071ba:	d11e      	bne.n	80071fa <check_fs+0x9a>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80071c2:	2b90      	cmp	r3, #144	; 0x90
 80071c4:	d119      	bne.n	80071fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3338      	adds	r3, #56	; 0x38
 80071ca:	3336      	adds	r3, #54	; 0x36
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe f9b7 	bl	8005540 <ld_dword>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071d8:	4a0a      	ldr	r2, [pc, #40]	; (8007204 <check_fs+0xa4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d101      	bne.n	80071e2 <check_fs+0x82>
 80071de:	2300      	movs	r3, #0
 80071e0:	e00c      	b.n	80071fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3338      	adds	r3, #56	; 0x38
 80071e6:	3352      	adds	r3, #82	; 0x52
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fe f9a9 	bl	8005540 <ld_dword>
 80071ee:	4603      	mov	r3, r0
 80071f0:	4a05      	ldr	r2, [pc, #20]	; (8007208 <check_fs+0xa8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d101      	bne.n	80071fa <check_fs+0x9a>
 80071f6:	2300      	movs	r3, #0
 80071f8:	e000      	b.n	80071fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80071fa:	2302      	movs	r3, #2
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	00544146 	.word	0x00544146
 8007208:	33544146 	.word	0x33544146

0800720c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b096      	sub	sp, #88	; 0x58
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	4613      	mov	r3, r2
 8007218:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f7ff ff59 	bl	80070d8 <get_ldnumber>
 8007226:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800722a:	2b00      	cmp	r3, #0
 800722c:	da01      	bge.n	8007232 <find_volume+0x26>
 800722e:	230b      	movs	r3, #11
 8007230:	e265      	b.n	80076fe <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007232:	4a9f      	ldr	r2, [pc, #636]	; (80074b0 <find_volume+0x2a4>)
 8007234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800723a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800723c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <find_volume+0x3a>
 8007242:	230c      	movs	r3, #12
 8007244:	e25b      	b.n	80076fe <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800724a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800724c:	79fb      	ldrb	r3, [r7, #7]
 800724e:	f023 0301 	bic.w	r3, r3, #1
 8007252:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d01a      	beq.n	8007292 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe f8b7 	bl	80053d4 <disk_status>
 8007266:	4603      	mov	r3, r0
 8007268:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800726c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10c      	bne.n	8007292 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007278:	79fb      	ldrb	r3, [r7, #7]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <find_volume+0x82>
 800727e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007282:	f003 0304 	and.w	r3, r3, #4
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800728a:	230a      	movs	r3, #10
 800728c:	e237      	b.n	80076fe <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800728e:	2300      	movs	r3, #0
 8007290:	e235      	b.n	80076fe <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007294:	2200      	movs	r2, #0
 8007296:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729a:	b2da      	uxtb	r2, r3
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	785b      	ldrb	r3, [r3, #1]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fe f8af 	bl	8005408 <disk_initialize>
 80072aa:	4603      	mov	r3, r0
 80072ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80072b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80072bc:	2303      	movs	r3, #3
 80072be:	e21e      	b.n	80076fe <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80072c0:	79fb      	ldrb	r3, [r7, #7]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d007      	beq.n	80072d6 <find_volume+0xca>
 80072c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80072d2:	230a      	movs	r3, #10
 80072d4:	e213      	b.n	80076fe <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	7858      	ldrb	r0, [r3, #1]
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072dc:	330c      	adds	r3, #12
 80072de:	461a      	mov	r2, r3
 80072e0:	2102      	movs	r1, #2
 80072e2:	f7fe f8f7 	bl	80054d4 <disk_ioctl>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <find_volume+0xe4>
 80072ec:	2301      	movs	r3, #1
 80072ee:	e206      	b.n	80076fe <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	899b      	ldrh	r3, [r3, #12]
 80072f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f8:	d80d      	bhi.n	8007316 <find_volume+0x10a>
 80072fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fc:	899b      	ldrh	r3, [r3, #12]
 80072fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007302:	d308      	bcc.n	8007316 <find_volume+0x10a>
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	899b      	ldrh	r3, [r3, #12]
 8007308:	461a      	mov	r2, r3
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	899b      	ldrh	r3, [r3, #12]
 800730e:	3b01      	subs	r3, #1
 8007310:	4013      	ands	r3, r2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <find_volume+0x10e>
 8007316:	2301      	movs	r3, #1
 8007318:	e1f1      	b.n	80076fe <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800731a:	2300      	movs	r3, #0
 800731c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800731e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007320:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007322:	f7ff ff1d 	bl	8007160 <check_fs>
 8007326:	4603      	mov	r3, r0
 8007328:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800732c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007330:	2b02      	cmp	r3, #2
 8007332:	d149      	bne.n	80073c8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007334:	2300      	movs	r3, #0
 8007336:	643b      	str	r3, [r7, #64]	; 0x40
 8007338:	e01e      	b.n	8007378 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800733a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007348:	4413      	add	r3, r2
 800734a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	3304      	adds	r3, #4
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d006      	beq.n	8007364 <find_volume+0x158>
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	3308      	adds	r3, #8
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe f8f0 	bl	8005540 <ld_dword>
 8007360:	4602      	mov	r2, r0
 8007362:	e000      	b.n	8007366 <find_volume+0x15a>
 8007364:	2200      	movs	r2, #0
 8007366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	3358      	adds	r3, #88	; 0x58
 800736c:	443b      	add	r3, r7
 800736e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007374:	3301      	adds	r3, #1
 8007376:	643b      	str	r3, [r7, #64]	; 0x40
 8007378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800737a:	2b03      	cmp	r3, #3
 800737c:	d9dd      	bls.n	800733a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800737e:	2300      	movs	r3, #0
 8007380:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <find_volume+0x182>
 8007388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800738a:	3b01      	subs	r3, #1
 800738c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800738e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	3358      	adds	r3, #88	; 0x58
 8007394:	443b      	add	r3, r7
 8007396:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800739a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800739c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d005      	beq.n	80073ae <find_volume+0x1a2>
 80073a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073a6:	f7ff fedb 	bl	8007160 <check_fs>
 80073aa:	4603      	mov	r3, r0
 80073ac:	e000      	b.n	80073b0 <find_volume+0x1a4>
 80073ae:	2303      	movs	r3, #3
 80073b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80073b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d905      	bls.n	80073c8 <find_volume+0x1bc>
 80073bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073be:	3301      	adds	r3, #1
 80073c0:	643b      	str	r3, [r7, #64]	; 0x40
 80073c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d9e2      	bls.n	800738e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80073c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d101      	bne.n	80073d4 <find_volume+0x1c8>
 80073d0:	2301      	movs	r3, #1
 80073d2:	e194      	b.n	80076fe <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80073d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d901      	bls.n	80073e0 <find_volume+0x1d4>
 80073dc:	230d      	movs	r3, #13
 80073de:	e18e      	b.n	80076fe <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80073e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e2:	3338      	adds	r3, #56	; 0x38
 80073e4:	330b      	adds	r3, #11
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe f892 	bl	8005510 <ld_word>
 80073ec:	4603      	mov	r3, r0
 80073ee:	461a      	mov	r2, r3
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	899b      	ldrh	r3, [r3, #12]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d001      	beq.n	80073fc <find_volume+0x1f0>
 80073f8:	230d      	movs	r3, #13
 80073fa:	e180      	b.n	80076fe <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	3338      	adds	r3, #56	; 0x38
 8007400:	3316      	adds	r3, #22
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe f884 	bl	8005510 <ld_word>
 8007408:	4603      	mov	r3, r0
 800740a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800740c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d106      	bne.n	8007420 <find_volume+0x214>
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	3338      	adds	r3, #56	; 0x38
 8007416:	3324      	adds	r3, #36	; 0x24
 8007418:	4618      	mov	r0, r3
 800741a:	f7fe f891 	bl	8005540 <ld_dword>
 800741e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007424:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007428:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800742c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	789b      	ldrb	r3, [r3, #2]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d005      	beq.n	8007444 <find_volume+0x238>
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	789b      	ldrb	r3, [r3, #2]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d001      	beq.n	8007444 <find_volume+0x238>
 8007440:	230d      	movs	r3, #13
 8007442:	e15c      	b.n	80076fe <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	789b      	ldrb	r3, [r3, #2]
 8007448:	461a      	mov	r2, r3
 800744a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744c:	fb02 f303 	mul.w	r3, r2, r3
 8007450:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007458:	b29a      	uxth	r2, r3
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007460:	895b      	ldrh	r3, [r3, #10]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d008      	beq.n	8007478 <find_volume+0x26c>
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	895b      	ldrh	r3, [r3, #10]
 800746a:	461a      	mov	r2, r3
 800746c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746e:	895b      	ldrh	r3, [r3, #10]
 8007470:	3b01      	subs	r3, #1
 8007472:	4013      	ands	r3, r2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <find_volume+0x270>
 8007478:	230d      	movs	r3, #13
 800747a:	e140      	b.n	80076fe <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	3338      	adds	r3, #56	; 0x38
 8007480:	3311      	adds	r3, #17
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe f844 	bl	8005510 <ld_word>
 8007488:	4603      	mov	r3, r0
 800748a:	461a      	mov	r2, r3
 800748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	891b      	ldrh	r3, [r3, #8]
 8007494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007496:	8992      	ldrh	r2, [r2, #12]
 8007498:	0952      	lsrs	r2, r2, #5
 800749a:	b292      	uxth	r2, r2
 800749c:	fbb3 f1f2 	udiv	r1, r3, r2
 80074a0:	fb01 f202 	mul.w	r2, r1, r2
 80074a4:	1a9b      	subs	r3, r3, r2
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <find_volume+0x2a8>
 80074ac:	230d      	movs	r3, #13
 80074ae:	e126      	b.n	80076fe <find_volume+0x4f2>
 80074b0:	200001fc 	.word	0x200001fc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	3338      	adds	r3, #56	; 0x38
 80074b8:	3313      	adds	r3, #19
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fe f828 	bl	8005510 <ld_word>
 80074c0:	4603      	mov	r3, r0
 80074c2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80074c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d106      	bne.n	80074d8 <find_volume+0x2cc>
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	3338      	adds	r3, #56	; 0x38
 80074ce:	3320      	adds	r3, #32
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fe f835 	bl	8005540 <ld_dword>
 80074d6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80074d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074da:	3338      	adds	r3, #56	; 0x38
 80074dc:	330e      	adds	r3, #14
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fe f816 	bl	8005510 <ld_word>
 80074e4:	4603      	mov	r3, r0
 80074e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80074e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <find_volume+0x2e6>
 80074ee:	230d      	movs	r3, #13
 80074f0:	e105      	b.n	80076fe <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80074f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f6:	4413      	add	r3, r2
 80074f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074fa:	8911      	ldrh	r1, [r2, #8]
 80074fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074fe:	8992      	ldrh	r2, [r2, #12]
 8007500:	0952      	lsrs	r2, r2, #5
 8007502:	b292      	uxth	r2, r2
 8007504:	fbb1 f2f2 	udiv	r2, r1, r2
 8007508:	b292      	uxth	r2, r2
 800750a:	4413      	add	r3, r2
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800750e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	429a      	cmp	r2, r3
 8007514:	d201      	bcs.n	800751a <find_volume+0x30e>
 8007516:	230d      	movs	r3, #13
 8007518:	e0f1      	b.n	80076fe <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800751a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007522:	8952      	ldrh	r2, [r2, #10]
 8007524:	fbb3 f3f2 	udiv	r3, r3, r2
 8007528:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <find_volume+0x328>
 8007530:	230d      	movs	r3, #13
 8007532:	e0e4      	b.n	80076fe <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007534:	2303      	movs	r3, #3
 8007536:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007540:	4293      	cmp	r3, r2
 8007542:	d802      	bhi.n	800754a <find_volume+0x33e>
 8007544:	2302      	movs	r3, #2
 8007546:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007550:	4293      	cmp	r3, r2
 8007552:	d802      	bhi.n	800755a <find_volume+0x34e>
 8007554:	2301      	movs	r3, #1
 8007556:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	1c9a      	adds	r2, r3, #2
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007564:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007566:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007568:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800756a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800756c:	441a      	add	r2, r3
 800756e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007570:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007572:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	441a      	add	r2, r3
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800757c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007580:	2b03      	cmp	r3, #3
 8007582:	d11e      	bne.n	80075c2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007586:	3338      	adds	r3, #56	; 0x38
 8007588:	332a      	adds	r3, #42	; 0x2a
 800758a:	4618      	mov	r0, r3
 800758c:	f7fd ffc0 	bl	8005510 <ld_word>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <find_volume+0x38e>
 8007596:	230d      	movs	r3, #13
 8007598:	e0b1      	b.n	80076fe <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800759a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759c:	891b      	ldrh	r3, [r3, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <find_volume+0x39a>
 80075a2:	230d      	movs	r3, #13
 80075a4:	e0ab      	b.n	80076fe <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	3338      	adds	r3, #56	; 0x38
 80075aa:	332c      	adds	r3, #44	; 0x2c
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fd ffc7 	bl	8005540 <ld_dword>
 80075b2:	4602      	mov	r2, r0
 80075b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80075b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	647b      	str	r3, [r7, #68]	; 0x44
 80075c0:	e01f      	b.n	8007602 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	891b      	ldrh	r3, [r3, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <find_volume+0x3c2>
 80075ca:	230d      	movs	r3, #13
 80075cc:	e097      	b.n	80076fe <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d4:	441a      	add	r2, r3
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80075da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d103      	bne.n	80075ea <find_volume+0x3de>
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	e00a      	b.n	8007600 <find_volume+0x3f4>
 80075ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ec:	69da      	ldr	r2, [r3, #28]
 80075ee:	4613      	mov	r3, r2
 80075f0:	005b      	lsls	r3, r3, #1
 80075f2:	4413      	add	r3, r2
 80075f4:	085a      	lsrs	r2, r3, #1
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007600:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	6a1a      	ldr	r2, [r3, #32]
 8007606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007608:	899b      	ldrh	r3, [r3, #12]
 800760a:	4619      	mov	r1, r3
 800760c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800760e:	440b      	add	r3, r1
 8007610:	3b01      	subs	r3, #1
 8007612:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007614:	8989      	ldrh	r1, [r1, #12]
 8007616:	fbb3 f3f1 	udiv	r3, r3, r1
 800761a:	429a      	cmp	r2, r3
 800761c:	d201      	bcs.n	8007622 <find_volume+0x416>
 800761e:	230d      	movs	r3, #13
 8007620:	e06d      	b.n	80076fe <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	f04f 32ff 	mov.w	r2, #4294967295
 8007628:	619a      	str	r2, [r3, #24]
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007634:	2280      	movs	r2, #128	; 0x80
 8007636:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007638:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800763c:	2b03      	cmp	r3, #3
 800763e:	d149      	bne.n	80076d4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	3338      	adds	r3, #56	; 0x38
 8007644:	3330      	adds	r3, #48	; 0x30
 8007646:	4618      	mov	r0, r3
 8007648:	f7fd ff62 	bl	8005510 <ld_word>
 800764c:	4603      	mov	r3, r0
 800764e:	2b01      	cmp	r3, #1
 8007650:	d140      	bne.n	80076d4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007654:	3301      	adds	r3, #1
 8007656:	4619      	mov	r1, r3
 8007658:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800765a:	f7fe fa09 	bl	8005a70 <move_window>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d137      	bne.n	80076d4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007666:	2200      	movs	r2, #0
 8007668:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	3338      	adds	r3, #56	; 0x38
 800766e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007672:	4618      	mov	r0, r3
 8007674:	f7fd ff4c 	bl	8005510 <ld_word>
 8007678:	4603      	mov	r3, r0
 800767a:	461a      	mov	r2, r3
 800767c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007680:	429a      	cmp	r2, r3
 8007682:	d127      	bne.n	80076d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	3338      	adds	r3, #56	; 0x38
 8007688:	4618      	mov	r0, r3
 800768a:	f7fd ff59 	bl	8005540 <ld_dword>
 800768e:	4603      	mov	r3, r0
 8007690:	4a1d      	ldr	r2, [pc, #116]	; (8007708 <find_volume+0x4fc>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d11e      	bne.n	80076d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	3338      	adds	r3, #56	; 0x38
 800769a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fd ff4e 	bl	8005540 <ld_dword>
 80076a4:	4603      	mov	r3, r0
 80076a6:	4a19      	ldr	r2, [pc, #100]	; (800770c <find_volume+0x500>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d113      	bne.n	80076d4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80076ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ae:	3338      	adds	r3, #56	; 0x38
 80076b0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fd ff43 	bl	8005540 <ld_dword>
 80076ba:	4602      	mov	r2, r0
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	3338      	adds	r3, #56	; 0x38
 80076c4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fd ff39 	bl	8005540 <ld_dword>
 80076ce:	4602      	mov	r2, r0
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80076d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80076da:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80076dc:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <find_volume+0x504>)
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	3301      	adds	r3, #1
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <find_volume+0x504>)
 80076e6:	801a      	strh	r2, [r3, #0]
 80076e8:	4b09      	ldr	r3, [pc, #36]	; (8007710 <find_volume+0x504>)
 80076ea:	881a      	ldrh	r2, [r3, #0]
 80076ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ee:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80076f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f2:	4a08      	ldr	r2, [pc, #32]	; (8007714 <find_volume+0x508>)
 80076f4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80076f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076f8:	f7fe f952 	bl	80059a0 <clear_lock>
#endif
	return FR_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3758      	adds	r7, #88	; 0x58
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	41615252 	.word	0x41615252
 800770c:	61417272 	.word	0x61417272
 8007710:	20000200 	.word	0x20000200
 8007714:	20000224 	.word	0x20000224

08007718 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007722:	2309      	movs	r3, #9
 8007724:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01c      	beq.n	8007766 <validate+0x4e>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d018      	beq.n	8007766 <validate+0x4e>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d013      	beq.n	8007766 <validate+0x4e>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	889a      	ldrh	r2, [r3, #4]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	88db      	ldrh	r3, [r3, #6]
 8007748:	429a      	cmp	r2, r3
 800774a:	d10c      	bne.n	8007766 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	785b      	ldrb	r3, [r3, #1]
 8007752:	4618      	mov	r0, r3
 8007754:	f7fd fe3e 	bl	80053d4 <disk_status>
 8007758:	4603      	mov	r3, r0
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <validate+0x4e>
			res = FR_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d102      	bne.n	8007772 <validate+0x5a>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	e000      	b.n	8007774 <validate+0x5c>
 8007772:	2300      	movs	r3, #0
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	6013      	str	r3, [r2, #0]
	return res;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007796:	f107 0310 	add.w	r3, r7, #16
 800779a:	4618      	mov	r0, r3
 800779c:	f7ff fc9c 	bl	80070d8 <get_ldnumber>
 80077a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	da01      	bge.n	80077ac <f_mount+0x28>
 80077a8:	230b      	movs	r3, #11
 80077aa:	e02b      	b.n	8007804 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80077ac:	4a17      	ldr	r2, [pc, #92]	; (800780c <f_mount+0x88>)
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d005      	beq.n	80077c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80077bc:	69b8      	ldr	r0, [r7, #24]
 80077be:	f7fe f8ef 	bl	80059a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	2200      	movs	r2, #0
 80077c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	490d      	ldr	r1, [pc, #52]	; (800780c <f_mount+0x88>)
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <f_mount+0x66>
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d001      	beq.n	80077ee <f_mount+0x6a>
 80077ea:	2300      	movs	r3, #0
 80077ec:	e00a      	b.n	8007804 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80077ee:	f107 010c 	add.w	r1, r7, #12
 80077f2:	f107 0308 	add.w	r3, r7, #8
 80077f6:	2200      	movs	r2, #0
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff fd07 	bl	800720c <find_volume>
 80077fe:	4603      	mov	r3, r0
 8007800:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007802:	7dfb      	ldrb	r3, [r7, #23]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3720      	adds	r7, #32
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	200001fc 	.word	0x200001fc

08007810 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b09a      	sub	sp, #104	; 0x68
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	4613      	mov	r3, r2
 800781c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <f_open+0x18>
 8007824:	2309      	movs	r3, #9
 8007826:	e1bb      	b.n	8007ba0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800782e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007830:	79fa      	ldrb	r2, [r7, #7]
 8007832:	f107 0114 	add.w	r1, r7, #20
 8007836:	f107 0308 	add.w	r3, r7, #8
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff fce6 	bl	800720c <find_volume>
 8007840:	4603      	mov	r3, r0
 8007842:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007846:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800784a:	2b00      	cmp	r3, #0
 800784c:	f040 819f 	bne.w	8007b8e <f_open+0x37e>
		dj.obj.fs = fs;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	f107 0318 	add.w	r3, r7, #24
 800785a:	4611      	mov	r1, r2
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff fbc5 	bl	8006fec <follow_path>
 8007862:	4603      	mov	r3, r0
 8007864:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007868:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800786c:	2b00      	cmp	r3, #0
 800786e:	d11a      	bne.n	80078a6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007870:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007874:	b25b      	sxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	da03      	bge.n	8007882 <f_open+0x72>
				res = FR_INVALID_NAME;
 800787a:	2306      	movs	r3, #6
 800787c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007880:	e011      	b.n	80078a6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	f023 0301 	bic.w	r3, r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	bf14      	ite	ne
 800788c:	2301      	movne	r3, #1
 800788e:	2300      	moveq	r3, #0
 8007890:	b2db      	uxtb	r3, r3
 8007892:	461a      	mov	r2, r3
 8007894:	f107 0318 	add.w	r3, r7, #24
 8007898:	4611      	mov	r1, r2
 800789a:	4618      	mov	r0, r3
 800789c:	f7fd ff38 	bl	8005710 <chk_lock>
 80078a0:	4603      	mov	r3, r0
 80078a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	f003 031c 	and.w	r3, r3, #28
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d07f      	beq.n	80079b0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80078b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d017      	beq.n	80078e8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80078b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d10e      	bne.n	80078de <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80078c0:	f7fd ff82 	bl	80057c8 <enq_lock>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d006      	beq.n	80078d8 <f_open+0xc8>
 80078ca:	f107 0318 	add.w	r3, r7, #24
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff f8dc 	bl	8006a8c <dir_register>
 80078d4:	4603      	mov	r3, r0
 80078d6:	e000      	b.n	80078da <f_open+0xca>
 80078d8:	2312      	movs	r3, #18
 80078da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	f043 0308 	orr.w	r3, r3, #8
 80078e4:	71fb      	strb	r3, [r7, #7]
 80078e6:	e010      	b.n	800790a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80078e8:	7fbb      	ldrb	r3, [r7, #30]
 80078ea:	f003 0311 	and.w	r3, r3, #17
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d003      	beq.n	80078fa <f_open+0xea>
					res = FR_DENIED;
 80078f2:	2307      	movs	r3, #7
 80078f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80078f8:	e007      	b.n	800790a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80078fa:	79fb      	ldrb	r3, [r7, #7]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <f_open+0xfa>
 8007904:	2308      	movs	r3, #8
 8007906:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800790a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800790e:	2b00      	cmp	r3, #0
 8007910:	d168      	bne.n	80079e4 <f_open+0x1d4>
 8007912:	79fb      	ldrb	r3, [r7, #7]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d063      	beq.n	80079e4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800791c:	f7fd fcfc 	bl	8005318 <get_fattime>
 8007920:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	330e      	adds	r3, #14
 8007926:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007928:	4618      	mov	r0, r3
 800792a:	f7fd fe47 	bl	80055bc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800792e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007930:	3316      	adds	r3, #22
 8007932:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007934:	4618      	mov	r0, r3
 8007936:	f7fd fe41 	bl	80055bc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	330b      	adds	r3, #11
 800793e:	2220      	movs	r2, #32
 8007940:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007946:	4611      	mov	r1, r2
 8007948:	4618      	mov	r0, r3
 800794a:	f7fe fe17 	bl	800657c <ld_clust>
 800794e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007954:	2200      	movs	r2, #0
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe fe2f 	bl	80065ba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800795c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795e:	331c      	adds	r3, #28
 8007960:	2100      	movs	r1, #0
 8007962:	4618      	mov	r0, r3
 8007964:	f7fd fe2a 	bl	80055bc <st_dword>
					fs->wflag = 1;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2201      	movs	r2, #1
 800796c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800796e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007970:	2b00      	cmp	r3, #0
 8007972:	d037      	beq.n	80079e4 <f_open+0x1d4>
						dw = fs->winsect;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007978:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800797a:	f107 0318 	add.w	r3, r7, #24
 800797e:	2200      	movs	r2, #0
 8007980:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fb1f 	bl	8005fc6 <remove_chain>
 8007988:	4603      	mov	r3, r0
 800798a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800798e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007992:	2b00      	cmp	r3, #0
 8007994:	d126      	bne.n	80079e4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800799a:	4618      	mov	r0, r3
 800799c:	f7fe f868 	bl	8005a70 <move_window>
 80079a0:	4603      	mov	r3, r0
 80079a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079aa:	3a01      	subs	r2, #1
 80079ac:	615a      	str	r2, [r3, #20]
 80079ae:	e019      	b.n	80079e4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80079b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d115      	bne.n	80079e4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80079b8:	7fbb      	ldrb	r3, [r7, #30]
 80079ba:	f003 0310 	and.w	r3, r3, #16
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <f_open+0x1ba>
					res = FR_NO_FILE;
 80079c2:	2304      	movs	r3, #4
 80079c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80079c8:	e00c      	b.n	80079e4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80079ca:	79fb      	ldrb	r3, [r7, #7]
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d007      	beq.n	80079e4 <f_open+0x1d4>
 80079d4:	7fbb      	ldrb	r3, [r7, #30]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <f_open+0x1d4>
						res = FR_DENIED;
 80079de:	2307      	movs	r3, #7
 80079e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80079e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d128      	bne.n	8007a3e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	f003 0308 	and.w	r3, r3, #8
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80079f6:	79fb      	ldrb	r3, [r7, #7]
 80079f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	f023 0301 	bic.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bf14      	ite	ne
 8007a16:	2301      	movne	r3, #1
 8007a18:	2300      	moveq	r3, #0
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f107 0318 	add.w	r3, r7, #24
 8007a22:	4611      	mov	r1, r2
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fd fef1 	bl	800580c <inc_lock>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <f_open+0x22e>
 8007a38:	2302      	movs	r3, #2
 8007a3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007a3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f040 80a3 	bne.w	8007b8e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe fd94 	bl	800657c <ld_clust>
 8007a54:	4602      	mov	r2, r0
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5c:	331c      	adds	r3, #28
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fd fd6e 	bl	8005540 <ld_dword>
 8007a64:	4602      	mov	r2, r0
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	88da      	ldrh	r2, [r3, #6]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	79fa      	ldrb	r2, [r7, #7]
 8007a82:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3330      	adds	r3, #48	; 0x30
 8007a9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fd fdd8 	bl	8005656 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007aa6:	79fb      	ldrb	r3, [r7, #7]
 8007aa8:	f003 0320 	and.w	r3, r3, #32
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d06e      	beq.n	8007b8e <f_open+0x37e>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d06a      	beq.n	8007b8e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	895b      	ldrh	r3, [r3, #10]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	899b      	ldrh	r3, [r3, #12]
 8007aca:	fb02 f303 	mul.w	r3, r2, r3
 8007ace:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007adc:	e016      	b.n	8007b0c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fe f881 	bl	8005bea <get_fat>
 8007ae8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007aea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d802      	bhi.n	8007af6 <f_open+0x2e6>
 8007af0:	2302      	movs	r3, #2
 8007af2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d102      	bne.n	8007b04 <f_open+0x2f4>
 8007afe:	2301      	movs	r3, #1
 8007b00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007b04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d103      	bne.n	8007b1c <f_open+0x30c>
 8007b14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d8e0      	bhi.n	8007ade <f_open+0x2ce>
				}
				fp->clust = clst;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b20:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007b22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d131      	bne.n	8007b8e <f_open+0x37e>
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	899b      	ldrh	r3, [r3, #12]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b32:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b36:	fb01 f202 	mul.w	r2, r1, r2
 8007b3a:	1a9b      	subs	r3, r3, r2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d026      	beq.n	8007b8e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fe f831 	bl	8005bac <clust2sect>
 8007b4a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d103      	bne.n	8007b5a <f_open+0x34a>
						res = FR_INT_ERR;
 8007b52:	2302      	movs	r3, #2
 8007b54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007b58:	e019      	b.n	8007b8e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	899b      	ldrh	r3, [r3, #12]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b62:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b68:	441a      	add	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	7858      	ldrb	r0, [r3, #1]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6a1a      	ldr	r2, [r3, #32]
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	f7fd fc69 	bl	8005454 <disk_read>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <f_open+0x37e>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007b8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <f_open+0x38c>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007b9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3768      	adds	r7, #104	; 0x68
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08c      	sub	sp, #48	; 0x30
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f107 0210 	add.w	r2, r7, #16
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7ff fda5 	bl	8007718 <validate>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007bd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d107      	bne.n	8007bec <f_write+0x44>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	7d5b      	ldrb	r3, [r3, #21]
 8007be0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007be4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <f_write+0x4a>
 8007bec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007bf0:	e16a      	b.n	8007ec8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	7d1b      	ldrb	r3, [r3, #20]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <f_write+0x5a>
 8007bfe:	2307      	movs	r3, #7
 8007c00:	e162      	b.n	8007ec8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	699a      	ldr	r2, [r3, #24]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	441a      	add	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	f080 814c 	bcs.w	8007eac <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007c1c:	e146      	b.n	8007eac <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	8992      	ldrh	r2, [r2, #12]
 8007c26:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c2a:	fb01 f202 	mul.w	r2, r1, r2
 8007c2e:	1a9b      	subs	r3, r3, r2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f040 80f1 	bne.w	8007e18 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	8992      	ldrh	r2, [r2, #12]
 8007c3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	8952      	ldrh	r2, [r2, #10]
 8007c46:	3a01      	subs	r2, #1
 8007c48:	4013      	ands	r3, r2
 8007c4a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d143      	bne.n	8007cda <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10c      	bne.n	8007c74 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d11a      	bne.n	8007c9c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2100      	movs	r1, #0
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fa10 	bl	8006090 <create_chain>
 8007c70:	62b8      	str	r0, [r7, #40]	; 0x28
 8007c72:	e013      	b.n	8007c9c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d007      	beq.n	8007c8c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	4619      	mov	r1, r3
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f7fe fa9c 	bl	80061c0 <clmt_clust>
 8007c88:	62b8      	str	r0, [r7, #40]	; 0x28
 8007c8a:	e007      	b.n	8007c9c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	4619      	mov	r1, r3
 8007c94:	4610      	mov	r0, r2
 8007c96:	f7fe f9fb 	bl	8006090 <create_chain>
 8007c9a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 8109 	beq.w	8007eb6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d104      	bne.n	8007cb4 <f_write+0x10c>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2202      	movs	r2, #2
 8007cae:	755a      	strb	r2, [r3, #21]
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	e109      	b.n	8007ec8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cba:	d104      	bne.n	8007cc6 <f_write+0x11e>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	755a      	strb	r2, [r3, #21]
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e100      	b.n	8007ec8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cca:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d102      	bne.n	8007cda <f_write+0x132>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cd8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	7d1b      	ldrb	r3, [r3, #20]
 8007cde:	b25b      	sxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	da18      	bge.n	8007d16 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	7858      	ldrb	r0, [r3, #1]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6a1a      	ldr	r2, [r3, #32]
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	f7fd fbce 	bl	8005494 <disk_write>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d004      	beq.n	8007d08 <f_write+0x160>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	755a      	strb	r2, [r3, #21]
 8007d04:	2301      	movs	r3, #1
 8007d06:	e0df      	b.n	8007ec8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	7d1b      	ldrb	r3, [r3, #20]
 8007d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	4610      	mov	r0, r2
 8007d20:	f7fd ff44 	bl	8005bac <clust2sect>
 8007d24:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d104      	bne.n	8007d36 <f_write+0x18e>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	755a      	strb	r2, [r3, #21]
 8007d32:	2302      	movs	r3, #2
 8007d34:	e0c8      	b.n	8007ec8 <f_write+0x320>
			sect += csect;
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	899b      	ldrh	r3, [r3, #12]
 8007d42:	461a      	mov	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d4a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d043      	beq.n	8007dda <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	4413      	add	r3, r2
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	8952      	ldrh	r2, [r2, #10]
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d905      	bls.n	8007d6c <f_write+0x1c4>
					cc = fs->csize - csect;
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	895b      	ldrh	r3, [r3, #10]
 8007d64:	461a      	mov	r2, r3
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	7858      	ldrb	r0, [r3, #1]
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	69f9      	ldr	r1, [r7, #28]
 8007d76:	f7fd fb8d 	bl	8005494 <disk_write>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d004      	beq.n	8007d8a <f_write+0x1e2>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2201      	movs	r2, #1
 8007d84:	755a      	strb	r2, [r3, #21]
 8007d86:	2301      	movs	r3, #1
 8007d88:	e09e      	b.n	8007ec8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6a1a      	ldr	r2, [r3, #32]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	6a3a      	ldr	r2, [r7, #32]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d918      	bls.n	8007dca <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a1a      	ldr	r2, [r3, #32]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	8992      	ldrh	r2, [r2, #12]
 8007daa:	fb02 f303 	mul.w	r3, r2, r3
 8007dae:	69fa      	ldr	r2, [r7, #28]
 8007db0:	18d1      	adds	r1, r2, r3
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	899b      	ldrh	r3, [r3, #12]
 8007db6:	461a      	mov	r2, r3
 8007db8:	f7fd fc2c 	bl	8005614 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	7d1b      	ldrb	r3, [r3, #20]
 8007dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	899b      	ldrh	r3, [r3, #12]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	fb02 f303 	mul.w	r3, r2, r3
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007dd8:	e04b      	b.n	8007e72 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d016      	beq.n	8007e12 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d210      	bcs.n	8007e12 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	7858      	ldrb	r0, [r3, #1]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	f7fd fb29 	bl	8005454 <disk_read>
 8007e02:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d004      	beq.n	8007e12 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	755a      	strb	r2, [r3, #21]
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e05a      	b.n	8007ec8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	899b      	ldrh	r3, [r3, #12]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	8992      	ldrh	r2, [r2, #12]
 8007e26:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e2a:	fb01 f202 	mul.w	r2, r1, r2
 8007e2e:	1a9b      	subs	r3, r3, r2
 8007e30:	1ac3      	subs	r3, r0, r3
 8007e32:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d901      	bls.n	8007e40 <f_write+0x298>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	8992      	ldrh	r2, [r2, #12]
 8007e4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e52:	fb00 f202 	mul.w	r2, r0, r2
 8007e56:	1a9b      	subs	r3, r3, r2
 8007e58:	440b      	add	r3, r1
 8007e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5c:	69f9      	ldr	r1, [r7, #28]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fd fbd8 	bl	8005614 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	7d1b      	ldrb	r3, [r3, #20]
 8007e68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	4413      	add	r3, r2
 8007e78:	61fb      	str	r3, [r7, #28]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	699a      	ldr	r2, [r3, #24]
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	441a      	add	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	619a      	str	r2, [r3, #24]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	68da      	ldr	r2, [r3, #12]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	bf38      	it	cc
 8007e92:	461a      	movcc	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	60da      	str	r2, [r3, #12]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	441a      	add	r2, r3
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f47f aeb5 	bne.w	8007c1e <f_write+0x76>
 8007eb4:	e000      	b.n	8007eb8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007eb6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	7d1b      	ldrb	r3, [r3, #20]
 8007ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3730      	adds	r7, #48	; 0x30
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f107 0208 	add.w	r2, r7, #8
 8007ede:	4611      	mov	r1, r2
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7ff fc19 	bl	8007718 <validate>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d168      	bne.n	8007fc2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	7d1b      	ldrb	r3, [r3, #20]
 8007ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d062      	beq.n	8007fc2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	7d1b      	ldrb	r3, [r3, #20]
 8007f00:	b25b      	sxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	da15      	bge.n	8007f32 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	7858      	ldrb	r0, [r3, #1]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a1a      	ldr	r2, [r3, #32]
 8007f14:	2301      	movs	r3, #1
 8007f16:	f7fd fabd 	bl	8005494 <disk_write>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <f_sync+0x54>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e04f      	b.n	8007fc4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	7d1b      	ldrb	r3, [r3, #20]
 8007f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007f32:	f7fd f9f1 	bl	8005318 <get_fattime>
 8007f36:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4610      	mov	r0, r2
 8007f42:	f7fd fd95 	bl	8005a70 <move_window>
 8007f46:	4603      	mov	r3, r0
 8007f48:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d138      	bne.n	8007fc2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f54:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	330b      	adds	r3, #11
 8007f5a:	781a      	ldrb	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	330b      	adds	r3, #11
 8007f60:	f042 0220 	orr.w	r2, r2, #32
 8007f64:	b2d2      	uxtb	r2, r2
 8007f66:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	461a      	mov	r2, r3
 8007f72:	68f9      	ldr	r1, [r7, #12]
 8007f74:	f7fe fb21 	bl	80065ba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f103 021c 	add.w	r2, r3, #28
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	4619      	mov	r1, r3
 8007f84:	4610      	mov	r0, r2
 8007f86:	f7fd fb19 	bl	80055bc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3316      	adds	r3, #22
 8007f8e:	6939      	ldr	r1, [r7, #16]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fd fb13 	bl	80055bc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3312      	adds	r3, #18
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fd faf2 	bl	8005586 <st_word>
					fs->wflag = 1;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fd fd8e 	bl	8005acc <sync_fs>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	7d1b      	ldrb	r3, [r3, #20]
 8007fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff ff7b 	bl	8007ed0 <f_sync>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d118      	bne.n	8008016 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f107 0208 	add.w	r2, r7, #8
 8007fea:	4611      	mov	r1, r2
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff fb93 	bl	8007718 <validate>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10c      	bne.n	8008016 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	4618      	mov	r0, r3
 8008002:	f7fd fc91 	bl	8005928 <dec_lock>
 8008006:	4603      	mov	r3, r0
 8008008:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800800a:	7bfb      	ldrb	r3, [r7, #15]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d102      	bne.n	8008016 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008016:	7bfb      	ldrb	r3, [r7, #15]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	2b0a      	cmp	r3, #10
 8008030:	d103      	bne.n	800803a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008032:	210d      	movs	r1, #13
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7ff fff3 	bl	8008020 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	db25      	blt.n	8008092 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	60fa      	str	r2, [r7, #12]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	4413      	add	r3, r2
 8008050:	78fa      	ldrb	r2, [r7, #3]
 8008052:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b3c      	cmp	r3, #60	; 0x3c
 8008058:	dd12      	ble.n	8008080 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f103 010c 	add.w	r1, r3, #12
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	f107 0308 	add.w	r3, r7, #8
 800806a:	f7ff fd9d 	bl	8007ba8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	429a      	cmp	r2, r3
 8008074:	d101      	bne.n	800807a <putc_bfd+0x5a>
 8008076:	2300      	movs	r3, #0
 8008078:	e001      	b.n	800807e <putc_bfd+0x5e>
 800807a:	f04f 33ff 	mov.w	r3, #4294967295
 800807e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	609a      	str	r2, [r3, #8]
 8008090:	e000      	b.n	8008094 <putc_bfd+0x74>
	if (i < 0) return;
 8008092:	bf00      	nop
}
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	db16      	blt.n	80080d8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6818      	ldr	r0, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f103 010c 	add.w	r1, r3, #12
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	461a      	mov	r2, r3
 80080ba:	f107 030c 	add.w	r3, r7, #12
 80080be:	f7ff fd73 	bl	8007ba8 <f_write>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d107      	bne.n	80080d8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d102      	bne.n	80080d8 <putc_flush+0x3e>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	e001      	b.n	80080dc <putc_flush+0x42>
	return EOF;
 80080d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	605a      	str	r2, [r3, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	609a      	str	r2, [r3, #8]
}
 8008102:	bf00      	nop
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b096      	sub	sp, #88	; 0x58
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008118:	f107 030c 	add.w	r3, r7, #12
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff ffe0 	bl	80080e4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008124:	e009      	b.n	800813a <f_puts+0x2c>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	781a      	ldrb	r2, [r3, #0]
 800812e:	f107 030c 	add.w	r3, r7, #12
 8008132:	4611      	mov	r1, r2
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff ff73 	bl	8008020 <putc_bfd>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1f1      	bne.n	8008126 <f_puts+0x18>
	return putc_flush(&pb);
 8008142:	f107 030c 	add.w	r3, r7, #12
 8008146:	4618      	mov	r0, r3
 8008148:	f7ff ffa7 	bl	800809a <putc_flush>
 800814c:	4603      	mov	r3, r0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3758      	adds	r7, #88	; 0x58
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	4613      	mov	r3, r2
 8008164:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008166:	2301      	movs	r3, #1
 8008168:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800816e:	4b1f      	ldr	r3, [pc, #124]	; (80081ec <FATFS_LinkDriverEx+0x94>)
 8008170:	7a5b      	ldrb	r3, [r3, #9]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b00      	cmp	r3, #0
 8008176:	d131      	bne.n	80081dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008178:	4b1c      	ldr	r3, [pc, #112]	; (80081ec <FATFS_LinkDriverEx+0x94>)
 800817a:	7a5b      	ldrb	r3, [r3, #9]
 800817c:	b2db      	uxtb	r3, r3
 800817e:	461a      	mov	r2, r3
 8008180:	4b1a      	ldr	r3, [pc, #104]	; (80081ec <FATFS_LinkDriverEx+0x94>)
 8008182:	2100      	movs	r1, #0
 8008184:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008186:	4b19      	ldr	r3, [pc, #100]	; (80081ec <FATFS_LinkDriverEx+0x94>)
 8008188:	7a5b      	ldrb	r3, [r3, #9]
 800818a:	b2db      	uxtb	r3, r3
 800818c:	4a17      	ldr	r2, [pc, #92]	; (80081ec <FATFS_LinkDriverEx+0x94>)
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008196:	4b15      	ldr	r3, [pc, #84]	; (80081ec <FATFS_LinkDriverEx+0x94>)
 8008198:	7a5b      	ldrb	r3, [r3, #9]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	461a      	mov	r2, r3
 800819e:	4b13      	ldr	r3, [pc, #76]	; (80081ec <FATFS_LinkDriverEx+0x94>)
 80081a0:	4413      	add	r3, r2
 80081a2:	79fa      	ldrb	r2, [r7, #7]
 80081a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80081a6:	4b11      	ldr	r3, [pc, #68]	; (80081ec <FATFS_LinkDriverEx+0x94>)
 80081a8:	7a5b      	ldrb	r3, [r3, #9]
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	1c5a      	adds	r2, r3, #1
 80081ae:	b2d1      	uxtb	r1, r2
 80081b0:	4a0e      	ldr	r2, [pc, #56]	; (80081ec <FATFS_LinkDriverEx+0x94>)
 80081b2:	7251      	strb	r1, [r2, #9]
 80081b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80081b6:	7dbb      	ldrb	r3, [r7, #22]
 80081b8:	3330      	adds	r3, #48	; 0x30
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	3301      	adds	r3, #1
 80081c4:	223a      	movs	r2, #58	; 0x3a
 80081c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	3302      	adds	r3, #2
 80081cc:	222f      	movs	r2, #47	; 0x2f
 80081ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	3303      	adds	r3, #3
 80081d4:	2200      	movs	r2, #0
 80081d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	20000424 	.word	0x20000424

080081f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80081fa:	2200      	movs	r2, #0
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff ffaa 	bl	8008158 <FATFS_LinkDriverEx>
 8008204:	4603      	mov	r3, r0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	6039      	str	r1, [r7, #0]
 800821a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800821c:	88fb      	ldrh	r3, [r7, #6]
 800821e:	2b7f      	cmp	r3, #127	; 0x7f
 8008220:	d802      	bhi.n	8008228 <ff_convert+0x18>
		c = chr;
 8008222:	88fb      	ldrh	r3, [r7, #6]
 8008224:	81fb      	strh	r3, [r7, #14]
 8008226:	e025      	b.n	8008274 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00b      	beq.n	8008246 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800822e:	88fb      	ldrh	r3, [r7, #6]
 8008230:	2bff      	cmp	r3, #255	; 0xff
 8008232:	d805      	bhi.n	8008240 <ff_convert+0x30>
 8008234:	88fb      	ldrh	r3, [r7, #6]
 8008236:	3b80      	subs	r3, #128	; 0x80
 8008238:	4a12      	ldr	r2, [pc, #72]	; (8008284 <ff_convert+0x74>)
 800823a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800823e:	e000      	b.n	8008242 <ff_convert+0x32>
 8008240:	2300      	movs	r3, #0
 8008242:	81fb      	strh	r3, [r7, #14]
 8008244:	e016      	b.n	8008274 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008246:	2300      	movs	r3, #0
 8008248:	81fb      	strh	r3, [r7, #14]
 800824a:	e009      	b.n	8008260 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800824c:	89fb      	ldrh	r3, [r7, #14]
 800824e:	4a0d      	ldr	r2, [pc, #52]	; (8008284 <ff_convert+0x74>)
 8008250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008254:	88fa      	ldrh	r2, [r7, #6]
 8008256:	429a      	cmp	r2, r3
 8008258:	d006      	beq.n	8008268 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800825a:	89fb      	ldrh	r3, [r7, #14]
 800825c:	3301      	adds	r3, #1
 800825e:	81fb      	strh	r3, [r7, #14]
 8008260:	89fb      	ldrh	r3, [r7, #14]
 8008262:	2b7f      	cmp	r3, #127	; 0x7f
 8008264:	d9f2      	bls.n	800824c <ff_convert+0x3c>
 8008266:	e000      	b.n	800826a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008268:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800826a:	89fb      	ldrh	r3, [r7, #14]
 800826c:	3380      	adds	r3, #128	; 0x80
 800826e:	b29b      	uxth	r3, r3
 8008270:	b2db      	uxtb	r3, r3
 8008272:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008274:	89fb      	ldrh	r3, [r7, #14]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	08008eb0 	.word	0x08008eb0

08008288 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008288:	b480      	push	{r7}
 800828a:	b087      	sub	sp, #28
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008298:	d201      	bcs.n	800829e <ff_wtoupper+0x16>
 800829a:	4b3e      	ldr	r3, [pc, #248]	; (8008394 <ff_wtoupper+0x10c>)
 800829c:	e000      	b.n	80082a0 <ff_wtoupper+0x18>
 800829e:	4b3e      	ldr	r3, [pc, #248]	; (8008398 <ff_wtoupper+0x110>)
 80082a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	1c9a      	adds	r2, r3, #2
 80082a6:	617a      	str	r2, [r7, #20]
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80082ac:	8a7b      	ldrh	r3, [r7, #18]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d068      	beq.n	8008384 <ff_wtoupper+0xfc>
 80082b2:	88fa      	ldrh	r2, [r7, #6]
 80082b4:	8a7b      	ldrh	r3, [r7, #18]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d364      	bcc.n	8008384 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	1c9a      	adds	r2, r3, #2
 80082be:	617a      	str	r2, [r7, #20]
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	823b      	strh	r3, [r7, #16]
 80082c4:	8a3b      	ldrh	r3, [r7, #16]
 80082c6:	0a1b      	lsrs	r3, r3, #8
 80082c8:	81fb      	strh	r3, [r7, #14]
 80082ca:	8a3b      	ldrh	r3, [r7, #16]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80082d0:	88fa      	ldrh	r2, [r7, #6]
 80082d2:	8a79      	ldrh	r1, [r7, #18]
 80082d4:	8a3b      	ldrh	r3, [r7, #16]
 80082d6:	440b      	add	r3, r1
 80082d8:	429a      	cmp	r2, r3
 80082da:	da49      	bge.n	8008370 <ff_wtoupper+0xe8>
			switch (cmd) {
 80082dc:	89fb      	ldrh	r3, [r7, #14]
 80082de:	2b08      	cmp	r3, #8
 80082e0:	d84f      	bhi.n	8008382 <ff_wtoupper+0xfa>
 80082e2:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <ff_wtoupper+0x60>)
 80082e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e8:	0800830d 	.word	0x0800830d
 80082ec:	0800831f 	.word	0x0800831f
 80082f0:	08008335 	.word	0x08008335
 80082f4:	0800833d 	.word	0x0800833d
 80082f8:	08008345 	.word	0x08008345
 80082fc:	0800834d 	.word	0x0800834d
 8008300:	08008355 	.word	0x08008355
 8008304:	0800835d 	.word	0x0800835d
 8008308:	08008365 	.word	0x08008365
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800830c:	88fa      	ldrh	r2, [r7, #6]
 800830e:	8a7b      	ldrh	r3, [r7, #18]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	005b      	lsls	r3, r3, #1
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	4413      	add	r3, r2
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	80fb      	strh	r3, [r7, #6]
 800831c:	e027      	b.n	800836e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800831e:	88fa      	ldrh	r2, [r7, #6]
 8008320:	8a7b      	ldrh	r3, [r7, #18]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	b29b      	uxth	r3, r3
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	b29b      	uxth	r3, r3
 800832c:	88fa      	ldrh	r2, [r7, #6]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	80fb      	strh	r3, [r7, #6]
 8008332:	e01c      	b.n	800836e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008334:	88fb      	ldrh	r3, [r7, #6]
 8008336:	3b10      	subs	r3, #16
 8008338:	80fb      	strh	r3, [r7, #6]
 800833a:	e018      	b.n	800836e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800833c:	88fb      	ldrh	r3, [r7, #6]
 800833e:	3b20      	subs	r3, #32
 8008340:	80fb      	strh	r3, [r7, #6]
 8008342:	e014      	b.n	800836e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008344:	88fb      	ldrh	r3, [r7, #6]
 8008346:	3b30      	subs	r3, #48	; 0x30
 8008348:	80fb      	strh	r3, [r7, #6]
 800834a:	e010      	b.n	800836e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800834c:	88fb      	ldrh	r3, [r7, #6]
 800834e:	3b1a      	subs	r3, #26
 8008350:	80fb      	strh	r3, [r7, #6]
 8008352:	e00c      	b.n	800836e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008354:	88fb      	ldrh	r3, [r7, #6]
 8008356:	3308      	adds	r3, #8
 8008358:	80fb      	strh	r3, [r7, #6]
 800835a:	e008      	b.n	800836e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800835c:	88fb      	ldrh	r3, [r7, #6]
 800835e:	3b50      	subs	r3, #80	; 0x50
 8008360:	80fb      	strh	r3, [r7, #6]
 8008362:	e004      	b.n	800836e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008364:	88fb      	ldrh	r3, [r7, #6]
 8008366:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800836a:	80fb      	strh	r3, [r7, #6]
 800836c:	bf00      	nop
			}
			break;
 800836e:	e008      	b.n	8008382 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008370:	89fb      	ldrh	r3, [r7, #14]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d195      	bne.n	80082a2 <ff_wtoupper+0x1a>
 8008376:	8a3b      	ldrh	r3, [r7, #16]
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	4413      	add	r3, r2
 800837e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008380:	e78f      	b.n	80082a2 <ff_wtoupper+0x1a>
			break;
 8008382:	bf00      	nop
	}

	return chr;
 8008384:	88fb      	ldrh	r3, [r7, #6]
}
 8008386:	4618      	mov	r0, r3
 8008388:	371c      	adds	r7, #28
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	08008fb0 	.word	0x08008fb0
 8008398:	080091a4 	.word	0x080091a4

0800839c <malloc>:
 800839c:	4b02      	ldr	r3, [pc, #8]	; (80083a8 <malloc+0xc>)
 800839e:	4601      	mov	r1, r0
 80083a0:	6818      	ldr	r0, [r3, #0]
 80083a2:	f000 b82b 	b.w	80083fc <_malloc_r>
 80083a6:	bf00      	nop
 80083a8:	20000070 	.word	0x20000070

080083ac <free>:
 80083ac:	4b02      	ldr	r3, [pc, #8]	; (80083b8 <free+0xc>)
 80083ae:	4601      	mov	r1, r0
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	f000 b913 	b.w	80085dc <_free_r>
 80083b6:	bf00      	nop
 80083b8:	20000070 	.word	0x20000070

080083bc <sbrk_aligned>:
 80083bc:	b570      	push	{r4, r5, r6, lr}
 80083be:	4e0e      	ldr	r6, [pc, #56]	; (80083f8 <sbrk_aligned+0x3c>)
 80083c0:	460c      	mov	r4, r1
 80083c2:	6831      	ldr	r1, [r6, #0]
 80083c4:	4605      	mov	r5, r0
 80083c6:	b911      	cbnz	r1, 80083ce <sbrk_aligned+0x12>
 80083c8:	f000 f8cc 	bl	8008564 <_sbrk_r>
 80083cc:	6030      	str	r0, [r6, #0]
 80083ce:	4621      	mov	r1, r4
 80083d0:	4628      	mov	r0, r5
 80083d2:	f000 f8c7 	bl	8008564 <_sbrk_r>
 80083d6:	1c43      	adds	r3, r0, #1
 80083d8:	d00a      	beq.n	80083f0 <sbrk_aligned+0x34>
 80083da:	1cc4      	adds	r4, r0, #3
 80083dc:	f024 0403 	bic.w	r4, r4, #3
 80083e0:	42a0      	cmp	r0, r4
 80083e2:	d007      	beq.n	80083f4 <sbrk_aligned+0x38>
 80083e4:	1a21      	subs	r1, r4, r0
 80083e6:	4628      	mov	r0, r5
 80083e8:	f000 f8bc 	bl	8008564 <_sbrk_r>
 80083ec:	3001      	adds	r0, #1
 80083ee:	d101      	bne.n	80083f4 <sbrk_aligned+0x38>
 80083f0:	f04f 34ff 	mov.w	r4, #4294967295
 80083f4:	4620      	mov	r0, r4
 80083f6:	bd70      	pop	{r4, r5, r6, pc}
 80083f8:	20000434 	.word	0x20000434

080083fc <_malloc_r>:
 80083fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008400:	1ccd      	adds	r5, r1, #3
 8008402:	f025 0503 	bic.w	r5, r5, #3
 8008406:	3508      	adds	r5, #8
 8008408:	2d0c      	cmp	r5, #12
 800840a:	bf38      	it	cc
 800840c:	250c      	movcc	r5, #12
 800840e:	2d00      	cmp	r5, #0
 8008410:	4607      	mov	r7, r0
 8008412:	db01      	blt.n	8008418 <_malloc_r+0x1c>
 8008414:	42a9      	cmp	r1, r5
 8008416:	d905      	bls.n	8008424 <_malloc_r+0x28>
 8008418:	230c      	movs	r3, #12
 800841a:	603b      	str	r3, [r7, #0]
 800841c:	2600      	movs	r6, #0
 800841e:	4630      	mov	r0, r6
 8008420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008424:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80084f8 <_malloc_r+0xfc>
 8008428:	f000 f868 	bl	80084fc <__malloc_lock>
 800842c:	f8d8 3000 	ldr.w	r3, [r8]
 8008430:	461c      	mov	r4, r3
 8008432:	bb5c      	cbnz	r4, 800848c <_malloc_r+0x90>
 8008434:	4629      	mov	r1, r5
 8008436:	4638      	mov	r0, r7
 8008438:	f7ff ffc0 	bl	80083bc <sbrk_aligned>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	4604      	mov	r4, r0
 8008440:	d155      	bne.n	80084ee <_malloc_r+0xf2>
 8008442:	f8d8 4000 	ldr.w	r4, [r8]
 8008446:	4626      	mov	r6, r4
 8008448:	2e00      	cmp	r6, #0
 800844a:	d145      	bne.n	80084d8 <_malloc_r+0xdc>
 800844c:	2c00      	cmp	r4, #0
 800844e:	d048      	beq.n	80084e2 <_malloc_r+0xe6>
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	4631      	mov	r1, r6
 8008454:	4638      	mov	r0, r7
 8008456:	eb04 0903 	add.w	r9, r4, r3
 800845a:	f000 f883 	bl	8008564 <_sbrk_r>
 800845e:	4581      	cmp	r9, r0
 8008460:	d13f      	bne.n	80084e2 <_malloc_r+0xe6>
 8008462:	6821      	ldr	r1, [r4, #0]
 8008464:	1a6d      	subs	r5, r5, r1
 8008466:	4629      	mov	r1, r5
 8008468:	4638      	mov	r0, r7
 800846a:	f7ff ffa7 	bl	80083bc <sbrk_aligned>
 800846e:	3001      	adds	r0, #1
 8008470:	d037      	beq.n	80084e2 <_malloc_r+0xe6>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	442b      	add	r3, r5
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	f8d8 3000 	ldr.w	r3, [r8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d038      	beq.n	80084f2 <_malloc_r+0xf6>
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	42a2      	cmp	r2, r4
 8008484:	d12b      	bne.n	80084de <_malloc_r+0xe2>
 8008486:	2200      	movs	r2, #0
 8008488:	605a      	str	r2, [r3, #4]
 800848a:	e00f      	b.n	80084ac <_malloc_r+0xb0>
 800848c:	6822      	ldr	r2, [r4, #0]
 800848e:	1b52      	subs	r2, r2, r5
 8008490:	d41f      	bmi.n	80084d2 <_malloc_r+0xd6>
 8008492:	2a0b      	cmp	r2, #11
 8008494:	d917      	bls.n	80084c6 <_malloc_r+0xca>
 8008496:	1961      	adds	r1, r4, r5
 8008498:	42a3      	cmp	r3, r4
 800849a:	6025      	str	r5, [r4, #0]
 800849c:	bf18      	it	ne
 800849e:	6059      	strne	r1, [r3, #4]
 80084a0:	6863      	ldr	r3, [r4, #4]
 80084a2:	bf08      	it	eq
 80084a4:	f8c8 1000 	streq.w	r1, [r8]
 80084a8:	5162      	str	r2, [r4, r5]
 80084aa:	604b      	str	r3, [r1, #4]
 80084ac:	4638      	mov	r0, r7
 80084ae:	f104 060b 	add.w	r6, r4, #11
 80084b2:	f000 f829 	bl	8008508 <__malloc_unlock>
 80084b6:	f026 0607 	bic.w	r6, r6, #7
 80084ba:	1d23      	adds	r3, r4, #4
 80084bc:	1af2      	subs	r2, r6, r3
 80084be:	d0ae      	beq.n	800841e <_malloc_r+0x22>
 80084c0:	1b9b      	subs	r3, r3, r6
 80084c2:	50a3      	str	r3, [r4, r2]
 80084c4:	e7ab      	b.n	800841e <_malloc_r+0x22>
 80084c6:	42a3      	cmp	r3, r4
 80084c8:	6862      	ldr	r2, [r4, #4]
 80084ca:	d1dd      	bne.n	8008488 <_malloc_r+0x8c>
 80084cc:	f8c8 2000 	str.w	r2, [r8]
 80084d0:	e7ec      	b.n	80084ac <_malloc_r+0xb0>
 80084d2:	4623      	mov	r3, r4
 80084d4:	6864      	ldr	r4, [r4, #4]
 80084d6:	e7ac      	b.n	8008432 <_malloc_r+0x36>
 80084d8:	4634      	mov	r4, r6
 80084da:	6876      	ldr	r6, [r6, #4]
 80084dc:	e7b4      	b.n	8008448 <_malloc_r+0x4c>
 80084de:	4613      	mov	r3, r2
 80084e0:	e7cc      	b.n	800847c <_malloc_r+0x80>
 80084e2:	230c      	movs	r3, #12
 80084e4:	603b      	str	r3, [r7, #0]
 80084e6:	4638      	mov	r0, r7
 80084e8:	f000 f80e 	bl	8008508 <__malloc_unlock>
 80084ec:	e797      	b.n	800841e <_malloc_r+0x22>
 80084ee:	6025      	str	r5, [r4, #0]
 80084f0:	e7dc      	b.n	80084ac <_malloc_r+0xb0>
 80084f2:	605b      	str	r3, [r3, #4]
 80084f4:	deff      	udf	#255	; 0xff
 80084f6:	bf00      	nop
 80084f8:	20000430 	.word	0x20000430

080084fc <__malloc_lock>:
 80084fc:	4801      	ldr	r0, [pc, #4]	; (8008504 <__malloc_lock+0x8>)
 80084fe:	f000 b86b 	b.w	80085d8 <__retarget_lock_acquire_recursive>
 8008502:	bf00      	nop
 8008504:	20000574 	.word	0x20000574

08008508 <__malloc_unlock>:
 8008508:	4801      	ldr	r0, [pc, #4]	; (8008510 <__malloc_unlock+0x8>)
 800850a:	f000 b866 	b.w	80085da <__retarget_lock_release_recursive>
 800850e:	bf00      	nop
 8008510:	20000574 	.word	0x20000574

08008514 <siprintf>:
 8008514:	b40e      	push	{r1, r2, r3}
 8008516:	b500      	push	{lr}
 8008518:	b09c      	sub	sp, #112	; 0x70
 800851a:	ab1d      	add	r3, sp, #116	; 0x74
 800851c:	9002      	str	r0, [sp, #8]
 800851e:	9006      	str	r0, [sp, #24]
 8008520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008524:	4809      	ldr	r0, [pc, #36]	; (800854c <siprintf+0x38>)
 8008526:	9107      	str	r1, [sp, #28]
 8008528:	9104      	str	r1, [sp, #16]
 800852a:	4909      	ldr	r1, [pc, #36]	; (8008550 <siprintf+0x3c>)
 800852c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008530:	9105      	str	r1, [sp, #20]
 8008532:	6800      	ldr	r0, [r0, #0]
 8008534:	9301      	str	r3, [sp, #4]
 8008536:	a902      	add	r1, sp, #8
 8008538:	f000 f8f6 	bl	8008728 <_svfiprintf_r>
 800853c:	9b02      	ldr	r3, [sp, #8]
 800853e:	2200      	movs	r2, #0
 8008540:	701a      	strb	r2, [r3, #0]
 8008542:	b01c      	add	sp, #112	; 0x70
 8008544:	f85d eb04 	ldr.w	lr, [sp], #4
 8008548:	b003      	add	sp, #12
 800854a:	4770      	bx	lr
 800854c:	20000070 	.word	0x20000070
 8008550:	ffff0208 	.word	0xffff0208

08008554 <memset>:
 8008554:	4402      	add	r2, r0
 8008556:	4603      	mov	r3, r0
 8008558:	4293      	cmp	r3, r2
 800855a:	d100      	bne.n	800855e <memset+0xa>
 800855c:	4770      	bx	lr
 800855e:	f803 1b01 	strb.w	r1, [r3], #1
 8008562:	e7f9      	b.n	8008558 <memset+0x4>

08008564 <_sbrk_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4d06      	ldr	r5, [pc, #24]	; (8008580 <_sbrk_r+0x1c>)
 8008568:	2300      	movs	r3, #0
 800856a:	4604      	mov	r4, r0
 800856c:	4608      	mov	r0, r1
 800856e:	602b      	str	r3, [r5, #0]
 8008570:	f7f9 f9c0 	bl	80018f4 <_sbrk>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d102      	bne.n	800857e <_sbrk_r+0x1a>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	b103      	cbz	r3, 800857e <_sbrk_r+0x1a>
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	20000570 	.word	0x20000570

08008584 <__errno>:
 8008584:	4b01      	ldr	r3, [pc, #4]	; (800858c <__errno+0x8>)
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	20000070 	.word	0x20000070

08008590 <__libc_init_array>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	4d0d      	ldr	r5, [pc, #52]	; (80085c8 <__libc_init_array+0x38>)
 8008594:	4c0d      	ldr	r4, [pc, #52]	; (80085cc <__libc_init_array+0x3c>)
 8008596:	1b64      	subs	r4, r4, r5
 8008598:	10a4      	asrs	r4, r4, #2
 800859a:	2600      	movs	r6, #0
 800859c:	42a6      	cmp	r6, r4
 800859e:	d109      	bne.n	80085b4 <__libc_init_array+0x24>
 80085a0:	4d0b      	ldr	r5, [pc, #44]	; (80085d0 <__libc_init_array+0x40>)
 80085a2:	4c0c      	ldr	r4, [pc, #48]	; (80085d4 <__libc_init_array+0x44>)
 80085a4:	f000 fbae 	bl	8008d04 <_init>
 80085a8:	1b64      	subs	r4, r4, r5
 80085aa:	10a4      	asrs	r4, r4, #2
 80085ac:	2600      	movs	r6, #0
 80085ae:	42a6      	cmp	r6, r4
 80085b0:	d105      	bne.n	80085be <__libc_init_array+0x2e>
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b8:	4798      	blx	r3
 80085ba:	3601      	adds	r6, #1
 80085bc:	e7ee      	b.n	800859c <__libc_init_array+0xc>
 80085be:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c2:	4798      	blx	r3
 80085c4:	3601      	adds	r6, #1
 80085c6:	e7f2      	b.n	80085ae <__libc_init_array+0x1e>
 80085c8:	0800929c 	.word	0x0800929c
 80085cc:	0800929c 	.word	0x0800929c
 80085d0:	0800929c 	.word	0x0800929c
 80085d4:	080092a0 	.word	0x080092a0

080085d8 <__retarget_lock_acquire_recursive>:
 80085d8:	4770      	bx	lr

080085da <__retarget_lock_release_recursive>:
 80085da:	4770      	bx	lr

080085dc <_free_r>:
 80085dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085de:	2900      	cmp	r1, #0
 80085e0:	d044      	beq.n	800866c <_free_r+0x90>
 80085e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e6:	9001      	str	r0, [sp, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f1a1 0404 	sub.w	r4, r1, #4
 80085ee:	bfb8      	it	lt
 80085f0:	18e4      	addlt	r4, r4, r3
 80085f2:	f7ff ff83 	bl	80084fc <__malloc_lock>
 80085f6:	4a1e      	ldr	r2, [pc, #120]	; (8008670 <_free_r+0x94>)
 80085f8:	9801      	ldr	r0, [sp, #4]
 80085fa:	6813      	ldr	r3, [r2, #0]
 80085fc:	b933      	cbnz	r3, 800860c <_free_r+0x30>
 80085fe:	6063      	str	r3, [r4, #4]
 8008600:	6014      	str	r4, [r2, #0]
 8008602:	b003      	add	sp, #12
 8008604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008608:	f7ff bf7e 	b.w	8008508 <__malloc_unlock>
 800860c:	42a3      	cmp	r3, r4
 800860e:	d908      	bls.n	8008622 <_free_r+0x46>
 8008610:	6825      	ldr	r5, [r4, #0]
 8008612:	1961      	adds	r1, r4, r5
 8008614:	428b      	cmp	r3, r1
 8008616:	bf01      	itttt	eq
 8008618:	6819      	ldreq	r1, [r3, #0]
 800861a:	685b      	ldreq	r3, [r3, #4]
 800861c:	1949      	addeq	r1, r1, r5
 800861e:	6021      	streq	r1, [r4, #0]
 8008620:	e7ed      	b.n	80085fe <_free_r+0x22>
 8008622:	461a      	mov	r2, r3
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	b10b      	cbz	r3, 800862c <_free_r+0x50>
 8008628:	42a3      	cmp	r3, r4
 800862a:	d9fa      	bls.n	8008622 <_free_r+0x46>
 800862c:	6811      	ldr	r1, [r2, #0]
 800862e:	1855      	adds	r5, r2, r1
 8008630:	42a5      	cmp	r5, r4
 8008632:	d10b      	bne.n	800864c <_free_r+0x70>
 8008634:	6824      	ldr	r4, [r4, #0]
 8008636:	4421      	add	r1, r4
 8008638:	1854      	adds	r4, r2, r1
 800863a:	42a3      	cmp	r3, r4
 800863c:	6011      	str	r1, [r2, #0]
 800863e:	d1e0      	bne.n	8008602 <_free_r+0x26>
 8008640:	681c      	ldr	r4, [r3, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	6053      	str	r3, [r2, #4]
 8008646:	440c      	add	r4, r1
 8008648:	6014      	str	r4, [r2, #0]
 800864a:	e7da      	b.n	8008602 <_free_r+0x26>
 800864c:	d902      	bls.n	8008654 <_free_r+0x78>
 800864e:	230c      	movs	r3, #12
 8008650:	6003      	str	r3, [r0, #0]
 8008652:	e7d6      	b.n	8008602 <_free_r+0x26>
 8008654:	6825      	ldr	r5, [r4, #0]
 8008656:	1961      	adds	r1, r4, r5
 8008658:	428b      	cmp	r3, r1
 800865a:	bf04      	itt	eq
 800865c:	6819      	ldreq	r1, [r3, #0]
 800865e:	685b      	ldreq	r3, [r3, #4]
 8008660:	6063      	str	r3, [r4, #4]
 8008662:	bf04      	itt	eq
 8008664:	1949      	addeq	r1, r1, r5
 8008666:	6021      	streq	r1, [r4, #0]
 8008668:	6054      	str	r4, [r2, #4]
 800866a:	e7ca      	b.n	8008602 <_free_r+0x26>
 800866c:	b003      	add	sp, #12
 800866e:	bd30      	pop	{r4, r5, pc}
 8008670:	20000430 	.word	0x20000430

08008674 <__ssputs_r>:
 8008674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008678:	688e      	ldr	r6, [r1, #8]
 800867a:	461f      	mov	r7, r3
 800867c:	42be      	cmp	r6, r7
 800867e:	680b      	ldr	r3, [r1, #0]
 8008680:	4682      	mov	sl, r0
 8008682:	460c      	mov	r4, r1
 8008684:	4690      	mov	r8, r2
 8008686:	d82c      	bhi.n	80086e2 <__ssputs_r+0x6e>
 8008688:	898a      	ldrh	r2, [r1, #12]
 800868a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800868e:	d026      	beq.n	80086de <__ssputs_r+0x6a>
 8008690:	6965      	ldr	r5, [r4, #20]
 8008692:	6909      	ldr	r1, [r1, #16]
 8008694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008698:	eba3 0901 	sub.w	r9, r3, r1
 800869c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086a0:	1c7b      	adds	r3, r7, #1
 80086a2:	444b      	add	r3, r9
 80086a4:	106d      	asrs	r5, r5, #1
 80086a6:	429d      	cmp	r5, r3
 80086a8:	bf38      	it	cc
 80086aa:	461d      	movcc	r5, r3
 80086ac:	0553      	lsls	r3, r2, #21
 80086ae:	d527      	bpl.n	8008700 <__ssputs_r+0x8c>
 80086b0:	4629      	mov	r1, r5
 80086b2:	f7ff fea3 	bl	80083fc <_malloc_r>
 80086b6:	4606      	mov	r6, r0
 80086b8:	b360      	cbz	r0, 8008714 <__ssputs_r+0xa0>
 80086ba:	6921      	ldr	r1, [r4, #16]
 80086bc:	464a      	mov	r2, r9
 80086be:	f000 fadb 	bl	8008c78 <memcpy>
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086cc:	81a3      	strh	r3, [r4, #12]
 80086ce:	6126      	str	r6, [r4, #16]
 80086d0:	6165      	str	r5, [r4, #20]
 80086d2:	444e      	add	r6, r9
 80086d4:	eba5 0509 	sub.w	r5, r5, r9
 80086d8:	6026      	str	r6, [r4, #0]
 80086da:	60a5      	str	r5, [r4, #8]
 80086dc:	463e      	mov	r6, r7
 80086de:	42be      	cmp	r6, r7
 80086e0:	d900      	bls.n	80086e4 <__ssputs_r+0x70>
 80086e2:	463e      	mov	r6, r7
 80086e4:	6820      	ldr	r0, [r4, #0]
 80086e6:	4632      	mov	r2, r6
 80086e8:	4641      	mov	r1, r8
 80086ea:	f000 faab 	bl	8008c44 <memmove>
 80086ee:	68a3      	ldr	r3, [r4, #8]
 80086f0:	1b9b      	subs	r3, r3, r6
 80086f2:	60a3      	str	r3, [r4, #8]
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	4433      	add	r3, r6
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	2000      	movs	r0, #0
 80086fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008700:	462a      	mov	r2, r5
 8008702:	f000 fac7 	bl	8008c94 <_realloc_r>
 8008706:	4606      	mov	r6, r0
 8008708:	2800      	cmp	r0, #0
 800870a:	d1e0      	bne.n	80086ce <__ssputs_r+0x5a>
 800870c:	6921      	ldr	r1, [r4, #16]
 800870e:	4650      	mov	r0, sl
 8008710:	f7ff ff64 	bl	80085dc <_free_r>
 8008714:	230c      	movs	r3, #12
 8008716:	f8ca 3000 	str.w	r3, [sl]
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008720:	81a3      	strh	r3, [r4, #12]
 8008722:	f04f 30ff 	mov.w	r0, #4294967295
 8008726:	e7e9      	b.n	80086fc <__ssputs_r+0x88>

08008728 <_svfiprintf_r>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	4698      	mov	r8, r3
 800872e:	898b      	ldrh	r3, [r1, #12]
 8008730:	061b      	lsls	r3, r3, #24
 8008732:	b09d      	sub	sp, #116	; 0x74
 8008734:	4607      	mov	r7, r0
 8008736:	460d      	mov	r5, r1
 8008738:	4614      	mov	r4, r2
 800873a:	d50e      	bpl.n	800875a <_svfiprintf_r+0x32>
 800873c:	690b      	ldr	r3, [r1, #16]
 800873e:	b963      	cbnz	r3, 800875a <_svfiprintf_r+0x32>
 8008740:	2140      	movs	r1, #64	; 0x40
 8008742:	f7ff fe5b 	bl	80083fc <_malloc_r>
 8008746:	6028      	str	r0, [r5, #0]
 8008748:	6128      	str	r0, [r5, #16]
 800874a:	b920      	cbnz	r0, 8008756 <_svfiprintf_r+0x2e>
 800874c:	230c      	movs	r3, #12
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	f04f 30ff 	mov.w	r0, #4294967295
 8008754:	e0d0      	b.n	80088f8 <_svfiprintf_r+0x1d0>
 8008756:	2340      	movs	r3, #64	; 0x40
 8008758:	616b      	str	r3, [r5, #20]
 800875a:	2300      	movs	r3, #0
 800875c:	9309      	str	r3, [sp, #36]	; 0x24
 800875e:	2320      	movs	r3, #32
 8008760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008764:	f8cd 800c 	str.w	r8, [sp, #12]
 8008768:	2330      	movs	r3, #48	; 0x30
 800876a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008910 <_svfiprintf_r+0x1e8>
 800876e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008772:	f04f 0901 	mov.w	r9, #1
 8008776:	4623      	mov	r3, r4
 8008778:	469a      	mov	sl, r3
 800877a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800877e:	b10a      	cbz	r2, 8008784 <_svfiprintf_r+0x5c>
 8008780:	2a25      	cmp	r2, #37	; 0x25
 8008782:	d1f9      	bne.n	8008778 <_svfiprintf_r+0x50>
 8008784:	ebba 0b04 	subs.w	fp, sl, r4
 8008788:	d00b      	beq.n	80087a2 <_svfiprintf_r+0x7a>
 800878a:	465b      	mov	r3, fp
 800878c:	4622      	mov	r2, r4
 800878e:	4629      	mov	r1, r5
 8008790:	4638      	mov	r0, r7
 8008792:	f7ff ff6f 	bl	8008674 <__ssputs_r>
 8008796:	3001      	adds	r0, #1
 8008798:	f000 80a9 	beq.w	80088ee <_svfiprintf_r+0x1c6>
 800879c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800879e:	445a      	add	r2, fp
 80087a0:	9209      	str	r2, [sp, #36]	; 0x24
 80087a2:	f89a 3000 	ldrb.w	r3, [sl]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 80a1 	beq.w	80088ee <_svfiprintf_r+0x1c6>
 80087ac:	2300      	movs	r3, #0
 80087ae:	f04f 32ff 	mov.w	r2, #4294967295
 80087b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087b6:	f10a 0a01 	add.w	sl, sl, #1
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	9307      	str	r3, [sp, #28]
 80087be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087c2:	931a      	str	r3, [sp, #104]	; 0x68
 80087c4:	4654      	mov	r4, sl
 80087c6:	2205      	movs	r2, #5
 80087c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087cc:	4850      	ldr	r0, [pc, #320]	; (8008910 <_svfiprintf_r+0x1e8>)
 80087ce:	f7f7 fcff 	bl	80001d0 <memchr>
 80087d2:	9a04      	ldr	r2, [sp, #16]
 80087d4:	b9d8      	cbnz	r0, 800880e <_svfiprintf_r+0xe6>
 80087d6:	06d0      	lsls	r0, r2, #27
 80087d8:	bf44      	itt	mi
 80087da:	2320      	movmi	r3, #32
 80087dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087e0:	0711      	lsls	r1, r2, #28
 80087e2:	bf44      	itt	mi
 80087e4:	232b      	movmi	r3, #43	; 0x2b
 80087e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ea:	f89a 3000 	ldrb.w	r3, [sl]
 80087ee:	2b2a      	cmp	r3, #42	; 0x2a
 80087f0:	d015      	beq.n	800881e <_svfiprintf_r+0xf6>
 80087f2:	9a07      	ldr	r2, [sp, #28]
 80087f4:	4654      	mov	r4, sl
 80087f6:	2000      	movs	r0, #0
 80087f8:	f04f 0c0a 	mov.w	ip, #10
 80087fc:	4621      	mov	r1, r4
 80087fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008802:	3b30      	subs	r3, #48	; 0x30
 8008804:	2b09      	cmp	r3, #9
 8008806:	d94d      	bls.n	80088a4 <_svfiprintf_r+0x17c>
 8008808:	b1b0      	cbz	r0, 8008838 <_svfiprintf_r+0x110>
 800880a:	9207      	str	r2, [sp, #28]
 800880c:	e014      	b.n	8008838 <_svfiprintf_r+0x110>
 800880e:	eba0 0308 	sub.w	r3, r0, r8
 8008812:	fa09 f303 	lsl.w	r3, r9, r3
 8008816:	4313      	orrs	r3, r2
 8008818:	9304      	str	r3, [sp, #16]
 800881a:	46a2      	mov	sl, r4
 800881c:	e7d2      	b.n	80087c4 <_svfiprintf_r+0x9c>
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	1d19      	adds	r1, r3, #4
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	9103      	str	r1, [sp, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	bfbb      	ittet	lt
 800882a:	425b      	neglt	r3, r3
 800882c:	f042 0202 	orrlt.w	r2, r2, #2
 8008830:	9307      	strge	r3, [sp, #28]
 8008832:	9307      	strlt	r3, [sp, #28]
 8008834:	bfb8      	it	lt
 8008836:	9204      	strlt	r2, [sp, #16]
 8008838:	7823      	ldrb	r3, [r4, #0]
 800883a:	2b2e      	cmp	r3, #46	; 0x2e
 800883c:	d10c      	bne.n	8008858 <_svfiprintf_r+0x130>
 800883e:	7863      	ldrb	r3, [r4, #1]
 8008840:	2b2a      	cmp	r3, #42	; 0x2a
 8008842:	d134      	bne.n	80088ae <_svfiprintf_r+0x186>
 8008844:	9b03      	ldr	r3, [sp, #12]
 8008846:	1d1a      	adds	r2, r3, #4
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	9203      	str	r2, [sp, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	bfb8      	it	lt
 8008850:	f04f 33ff 	movlt.w	r3, #4294967295
 8008854:	3402      	adds	r4, #2
 8008856:	9305      	str	r3, [sp, #20]
 8008858:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008920 <_svfiprintf_r+0x1f8>
 800885c:	7821      	ldrb	r1, [r4, #0]
 800885e:	2203      	movs	r2, #3
 8008860:	4650      	mov	r0, sl
 8008862:	f7f7 fcb5 	bl	80001d0 <memchr>
 8008866:	b138      	cbz	r0, 8008878 <_svfiprintf_r+0x150>
 8008868:	9b04      	ldr	r3, [sp, #16]
 800886a:	eba0 000a 	sub.w	r0, r0, sl
 800886e:	2240      	movs	r2, #64	; 0x40
 8008870:	4082      	lsls	r2, r0
 8008872:	4313      	orrs	r3, r2
 8008874:	3401      	adds	r4, #1
 8008876:	9304      	str	r3, [sp, #16]
 8008878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887c:	4825      	ldr	r0, [pc, #148]	; (8008914 <_svfiprintf_r+0x1ec>)
 800887e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008882:	2206      	movs	r2, #6
 8008884:	f7f7 fca4 	bl	80001d0 <memchr>
 8008888:	2800      	cmp	r0, #0
 800888a:	d038      	beq.n	80088fe <_svfiprintf_r+0x1d6>
 800888c:	4b22      	ldr	r3, [pc, #136]	; (8008918 <_svfiprintf_r+0x1f0>)
 800888e:	bb1b      	cbnz	r3, 80088d8 <_svfiprintf_r+0x1b0>
 8008890:	9b03      	ldr	r3, [sp, #12]
 8008892:	3307      	adds	r3, #7
 8008894:	f023 0307 	bic.w	r3, r3, #7
 8008898:	3308      	adds	r3, #8
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800889e:	4433      	add	r3, r6
 80088a0:	9309      	str	r3, [sp, #36]	; 0x24
 80088a2:	e768      	b.n	8008776 <_svfiprintf_r+0x4e>
 80088a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80088a8:	460c      	mov	r4, r1
 80088aa:	2001      	movs	r0, #1
 80088ac:	e7a6      	b.n	80087fc <_svfiprintf_r+0xd4>
 80088ae:	2300      	movs	r3, #0
 80088b0:	3401      	adds	r4, #1
 80088b2:	9305      	str	r3, [sp, #20]
 80088b4:	4619      	mov	r1, r3
 80088b6:	f04f 0c0a 	mov.w	ip, #10
 80088ba:	4620      	mov	r0, r4
 80088bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088c0:	3a30      	subs	r2, #48	; 0x30
 80088c2:	2a09      	cmp	r2, #9
 80088c4:	d903      	bls.n	80088ce <_svfiprintf_r+0x1a6>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0c6      	beq.n	8008858 <_svfiprintf_r+0x130>
 80088ca:	9105      	str	r1, [sp, #20]
 80088cc:	e7c4      	b.n	8008858 <_svfiprintf_r+0x130>
 80088ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80088d2:	4604      	mov	r4, r0
 80088d4:	2301      	movs	r3, #1
 80088d6:	e7f0      	b.n	80088ba <_svfiprintf_r+0x192>
 80088d8:	ab03      	add	r3, sp, #12
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	462a      	mov	r2, r5
 80088de:	4b0f      	ldr	r3, [pc, #60]	; (800891c <_svfiprintf_r+0x1f4>)
 80088e0:	a904      	add	r1, sp, #16
 80088e2:	4638      	mov	r0, r7
 80088e4:	f3af 8000 	nop.w
 80088e8:	1c42      	adds	r2, r0, #1
 80088ea:	4606      	mov	r6, r0
 80088ec:	d1d6      	bne.n	800889c <_svfiprintf_r+0x174>
 80088ee:	89ab      	ldrh	r3, [r5, #12]
 80088f0:	065b      	lsls	r3, r3, #25
 80088f2:	f53f af2d 	bmi.w	8008750 <_svfiprintf_r+0x28>
 80088f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088f8:	b01d      	add	sp, #116	; 0x74
 80088fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088fe:	ab03      	add	r3, sp, #12
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	462a      	mov	r2, r5
 8008904:	4b05      	ldr	r3, [pc, #20]	; (800891c <_svfiprintf_r+0x1f4>)
 8008906:	a904      	add	r1, sp, #16
 8008908:	4638      	mov	r0, r7
 800890a:	f000 f879 	bl	8008a00 <_printf_i>
 800890e:	e7eb      	b.n	80088e8 <_svfiprintf_r+0x1c0>
 8008910:	08009260 	.word	0x08009260
 8008914:	0800926a 	.word	0x0800926a
 8008918:	00000000 	.word	0x00000000
 800891c:	08008675 	.word	0x08008675
 8008920:	08009266 	.word	0x08009266

08008924 <_printf_common>:
 8008924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008928:	4616      	mov	r6, r2
 800892a:	4699      	mov	r9, r3
 800892c:	688a      	ldr	r2, [r1, #8]
 800892e:	690b      	ldr	r3, [r1, #16]
 8008930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008934:	4293      	cmp	r3, r2
 8008936:	bfb8      	it	lt
 8008938:	4613      	movlt	r3, r2
 800893a:	6033      	str	r3, [r6, #0]
 800893c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008940:	4607      	mov	r7, r0
 8008942:	460c      	mov	r4, r1
 8008944:	b10a      	cbz	r2, 800894a <_printf_common+0x26>
 8008946:	3301      	adds	r3, #1
 8008948:	6033      	str	r3, [r6, #0]
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	0699      	lsls	r1, r3, #26
 800894e:	bf42      	ittt	mi
 8008950:	6833      	ldrmi	r3, [r6, #0]
 8008952:	3302      	addmi	r3, #2
 8008954:	6033      	strmi	r3, [r6, #0]
 8008956:	6825      	ldr	r5, [r4, #0]
 8008958:	f015 0506 	ands.w	r5, r5, #6
 800895c:	d106      	bne.n	800896c <_printf_common+0x48>
 800895e:	f104 0a19 	add.w	sl, r4, #25
 8008962:	68e3      	ldr	r3, [r4, #12]
 8008964:	6832      	ldr	r2, [r6, #0]
 8008966:	1a9b      	subs	r3, r3, r2
 8008968:	42ab      	cmp	r3, r5
 800896a:	dc26      	bgt.n	80089ba <_printf_common+0x96>
 800896c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008970:	1e13      	subs	r3, r2, #0
 8008972:	6822      	ldr	r2, [r4, #0]
 8008974:	bf18      	it	ne
 8008976:	2301      	movne	r3, #1
 8008978:	0692      	lsls	r2, r2, #26
 800897a:	d42b      	bmi.n	80089d4 <_printf_common+0xb0>
 800897c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008980:	4649      	mov	r1, r9
 8008982:	4638      	mov	r0, r7
 8008984:	47c0      	blx	r8
 8008986:	3001      	adds	r0, #1
 8008988:	d01e      	beq.n	80089c8 <_printf_common+0xa4>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	6922      	ldr	r2, [r4, #16]
 800898e:	f003 0306 	and.w	r3, r3, #6
 8008992:	2b04      	cmp	r3, #4
 8008994:	bf02      	ittt	eq
 8008996:	68e5      	ldreq	r5, [r4, #12]
 8008998:	6833      	ldreq	r3, [r6, #0]
 800899a:	1aed      	subeq	r5, r5, r3
 800899c:	68a3      	ldr	r3, [r4, #8]
 800899e:	bf0c      	ite	eq
 80089a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089a4:	2500      	movne	r5, #0
 80089a6:	4293      	cmp	r3, r2
 80089a8:	bfc4      	itt	gt
 80089aa:	1a9b      	subgt	r3, r3, r2
 80089ac:	18ed      	addgt	r5, r5, r3
 80089ae:	2600      	movs	r6, #0
 80089b0:	341a      	adds	r4, #26
 80089b2:	42b5      	cmp	r5, r6
 80089b4:	d11a      	bne.n	80089ec <_printf_common+0xc8>
 80089b6:	2000      	movs	r0, #0
 80089b8:	e008      	b.n	80089cc <_printf_common+0xa8>
 80089ba:	2301      	movs	r3, #1
 80089bc:	4652      	mov	r2, sl
 80089be:	4649      	mov	r1, r9
 80089c0:	4638      	mov	r0, r7
 80089c2:	47c0      	blx	r8
 80089c4:	3001      	adds	r0, #1
 80089c6:	d103      	bne.n	80089d0 <_printf_common+0xac>
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295
 80089cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d0:	3501      	adds	r5, #1
 80089d2:	e7c6      	b.n	8008962 <_printf_common+0x3e>
 80089d4:	18e1      	adds	r1, r4, r3
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	2030      	movs	r0, #48	; 0x30
 80089da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089de:	4422      	add	r2, r4
 80089e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089e8:	3302      	adds	r3, #2
 80089ea:	e7c7      	b.n	800897c <_printf_common+0x58>
 80089ec:	2301      	movs	r3, #1
 80089ee:	4622      	mov	r2, r4
 80089f0:	4649      	mov	r1, r9
 80089f2:	4638      	mov	r0, r7
 80089f4:	47c0      	blx	r8
 80089f6:	3001      	adds	r0, #1
 80089f8:	d0e6      	beq.n	80089c8 <_printf_common+0xa4>
 80089fa:	3601      	adds	r6, #1
 80089fc:	e7d9      	b.n	80089b2 <_printf_common+0x8e>
	...

08008a00 <_printf_i>:
 8008a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a04:	7e0f      	ldrb	r7, [r1, #24]
 8008a06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a08:	2f78      	cmp	r7, #120	; 0x78
 8008a0a:	4691      	mov	r9, r2
 8008a0c:	4680      	mov	r8, r0
 8008a0e:	460c      	mov	r4, r1
 8008a10:	469a      	mov	sl, r3
 8008a12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a16:	d807      	bhi.n	8008a28 <_printf_i+0x28>
 8008a18:	2f62      	cmp	r7, #98	; 0x62
 8008a1a:	d80a      	bhi.n	8008a32 <_printf_i+0x32>
 8008a1c:	2f00      	cmp	r7, #0
 8008a1e:	f000 80d4 	beq.w	8008bca <_printf_i+0x1ca>
 8008a22:	2f58      	cmp	r7, #88	; 0x58
 8008a24:	f000 80c0 	beq.w	8008ba8 <_printf_i+0x1a8>
 8008a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a30:	e03a      	b.n	8008aa8 <_printf_i+0xa8>
 8008a32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a36:	2b15      	cmp	r3, #21
 8008a38:	d8f6      	bhi.n	8008a28 <_printf_i+0x28>
 8008a3a:	a101      	add	r1, pc, #4	; (adr r1, 8008a40 <_printf_i+0x40>)
 8008a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a40:	08008a99 	.word	0x08008a99
 8008a44:	08008aad 	.word	0x08008aad
 8008a48:	08008a29 	.word	0x08008a29
 8008a4c:	08008a29 	.word	0x08008a29
 8008a50:	08008a29 	.word	0x08008a29
 8008a54:	08008a29 	.word	0x08008a29
 8008a58:	08008aad 	.word	0x08008aad
 8008a5c:	08008a29 	.word	0x08008a29
 8008a60:	08008a29 	.word	0x08008a29
 8008a64:	08008a29 	.word	0x08008a29
 8008a68:	08008a29 	.word	0x08008a29
 8008a6c:	08008bb1 	.word	0x08008bb1
 8008a70:	08008ad9 	.word	0x08008ad9
 8008a74:	08008b6b 	.word	0x08008b6b
 8008a78:	08008a29 	.word	0x08008a29
 8008a7c:	08008a29 	.word	0x08008a29
 8008a80:	08008bd3 	.word	0x08008bd3
 8008a84:	08008a29 	.word	0x08008a29
 8008a88:	08008ad9 	.word	0x08008ad9
 8008a8c:	08008a29 	.word	0x08008a29
 8008a90:	08008a29 	.word	0x08008a29
 8008a94:	08008b73 	.word	0x08008b73
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	1d1a      	adds	r2, r3, #4
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	602a      	str	r2, [r5, #0]
 8008aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e09f      	b.n	8008bec <_printf_i+0x1ec>
 8008aac:	6820      	ldr	r0, [r4, #0]
 8008aae:	682b      	ldr	r3, [r5, #0]
 8008ab0:	0607      	lsls	r7, r0, #24
 8008ab2:	f103 0104 	add.w	r1, r3, #4
 8008ab6:	6029      	str	r1, [r5, #0]
 8008ab8:	d501      	bpl.n	8008abe <_printf_i+0xbe>
 8008aba:	681e      	ldr	r6, [r3, #0]
 8008abc:	e003      	b.n	8008ac6 <_printf_i+0xc6>
 8008abe:	0646      	lsls	r6, r0, #25
 8008ac0:	d5fb      	bpl.n	8008aba <_printf_i+0xba>
 8008ac2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008ac6:	2e00      	cmp	r6, #0
 8008ac8:	da03      	bge.n	8008ad2 <_printf_i+0xd2>
 8008aca:	232d      	movs	r3, #45	; 0x2d
 8008acc:	4276      	negs	r6, r6
 8008ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ad2:	485a      	ldr	r0, [pc, #360]	; (8008c3c <_printf_i+0x23c>)
 8008ad4:	230a      	movs	r3, #10
 8008ad6:	e012      	b.n	8008afe <_printf_i+0xfe>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	6820      	ldr	r0, [r4, #0]
 8008adc:	1d19      	adds	r1, r3, #4
 8008ade:	6029      	str	r1, [r5, #0]
 8008ae0:	0605      	lsls	r5, r0, #24
 8008ae2:	d501      	bpl.n	8008ae8 <_printf_i+0xe8>
 8008ae4:	681e      	ldr	r6, [r3, #0]
 8008ae6:	e002      	b.n	8008aee <_printf_i+0xee>
 8008ae8:	0641      	lsls	r1, r0, #25
 8008aea:	d5fb      	bpl.n	8008ae4 <_printf_i+0xe4>
 8008aec:	881e      	ldrh	r6, [r3, #0]
 8008aee:	4853      	ldr	r0, [pc, #332]	; (8008c3c <_printf_i+0x23c>)
 8008af0:	2f6f      	cmp	r7, #111	; 0x6f
 8008af2:	bf0c      	ite	eq
 8008af4:	2308      	moveq	r3, #8
 8008af6:	230a      	movne	r3, #10
 8008af8:	2100      	movs	r1, #0
 8008afa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008afe:	6865      	ldr	r5, [r4, #4]
 8008b00:	60a5      	str	r5, [r4, #8]
 8008b02:	2d00      	cmp	r5, #0
 8008b04:	bfa2      	ittt	ge
 8008b06:	6821      	ldrge	r1, [r4, #0]
 8008b08:	f021 0104 	bicge.w	r1, r1, #4
 8008b0c:	6021      	strge	r1, [r4, #0]
 8008b0e:	b90e      	cbnz	r6, 8008b14 <_printf_i+0x114>
 8008b10:	2d00      	cmp	r5, #0
 8008b12:	d04b      	beq.n	8008bac <_printf_i+0x1ac>
 8008b14:	4615      	mov	r5, r2
 8008b16:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b1a:	fb03 6711 	mls	r7, r3, r1, r6
 8008b1e:	5dc7      	ldrb	r7, [r0, r7]
 8008b20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b24:	4637      	mov	r7, r6
 8008b26:	42bb      	cmp	r3, r7
 8008b28:	460e      	mov	r6, r1
 8008b2a:	d9f4      	bls.n	8008b16 <_printf_i+0x116>
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d10b      	bne.n	8008b48 <_printf_i+0x148>
 8008b30:	6823      	ldr	r3, [r4, #0]
 8008b32:	07de      	lsls	r6, r3, #31
 8008b34:	d508      	bpl.n	8008b48 <_printf_i+0x148>
 8008b36:	6923      	ldr	r3, [r4, #16]
 8008b38:	6861      	ldr	r1, [r4, #4]
 8008b3a:	4299      	cmp	r1, r3
 8008b3c:	bfde      	ittt	le
 8008b3e:	2330      	movle	r3, #48	; 0x30
 8008b40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b48:	1b52      	subs	r2, r2, r5
 8008b4a:	6122      	str	r2, [r4, #16]
 8008b4c:	f8cd a000 	str.w	sl, [sp]
 8008b50:	464b      	mov	r3, r9
 8008b52:	aa03      	add	r2, sp, #12
 8008b54:	4621      	mov	r1, r4
 8008b56:	4640      	mov	r0, r8
 8008b58:	f7ff fee4 	bl	8008924 <_printf_common>
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d14a      	bne.n	8008bf6 <_printf_i+0x1f6>
 8008b60:	f04f 30ff 	mov.w	r0, #4294967295
 8008b64:	b004      	add	sp, #16
 8008b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	f043 0320 	orr.w	r3, r3, #32
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	4833      	ldr	r0, [pc, #204]	; (8008c40 <_printf_i+0x240>)
 8008b74:	2778      	movs	r7, #120	; 0x78
 8008b76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	6829      	ldr	r1, [r5, #0]
 8008b7e:	061f      	lsls	r7, r3, #24
 8008b80:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b84:	d402      	bmi.n	8008b8c <_printf_i+0x18c>
 8008b86:	065f      	lsls	r7, r3, #25
 8008b88:	bf48      	it	mi
 8008b8a:	b2b6      	uxthmi	r6, r6
 8008b8c:	07df      	lsls	r7, r3, #31
 8008b8e:	bf48      	it	mi
 8008b90:	f043 0320 	orrmi.w	r3, r3, #32
 8008b94:	6029      	str	r1, [r5, #0]
 8008b96:	bf48      	it	mi
 8008b98:	6023      	strmi	r3, [r4, #0]
 8008b9a:	b91e      	cbnz	r6, 8008ba4 <_printf_i+0x1a4>
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	f023 0320 	bic.w	r3, r3, #32
 8008ba2:	6023      	str	r3, [r4, #0]
 8008ba4:	2310      	movs	r3, #16
 8008ba6:	e7a7      	b.n	8008af8 <_printf_i+0xf8>
 8008ba8:	4824      	ldr	r0, [pc, #144]	; (8008c3c <_printf_i+0x23c>)
 8008baa:	e7e4      	b.n	8008b76 <_printf_i+0x176>
 8008bac:	4615      	mov	r5, r2
 8008bae:	e7bd      	b.n	8008b2c <_printf_i+0x12c>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	6826      	ldr	r6, [r4, #0]
 8008bb4:	6961      	ldr	r1, [r4, #20]
 8008bb6:	1d18      	adds	r0, r3, #4
 8008bb8:	6028      	str	r0, [r5, #0]
 8008bba:	0635      	lsls	r5, r6, #24
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	d501      	bpl.n	8008bc4 <_printf_i+0x1c4>
 8008bc0:	6019      	str	r1, [r3, #0]
 8008bc2:	e002      	b.n	8008bca <_printf_i+0x1ca>
 8008bc4:	0670      	lsls	r0, r6, #25
 8008bc6:	d5fb      	bpl.n	8008bc0 <_printf_i+0x1c0>
 8008bc8:	8019      	strh	r1, [r3, #0]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	6123      	str	r3, [r4, #16]
 8008bce:	4615      	mov	r5, r2
 8008bd0:	e7bc      	b.n	8008b4c <_printf_i+0x14c>
 8008bd2:	682b      	ldr	r3, [r5, #0]
 8008bd4:	1d1a      	adds	r2, r3, #4
 8008bd6:	602a      	str	r2, [r5, #0]
 8008bd8:	681d      	ldr	r5, [r3, #0]
 8008bda:	6862      	ldr	r2, [r4, #4]
 8008bdc:	2100      	movs	r1, #0
 8008bde:	4628      	mov	r0, r5
 8008be0:	f7f7 faf6 	bl	80001d0 <memchr>
 8008be4:	b108      	cbz	r0, 8008bea <_printf_i+0x1ea>
 8008be6:	1b40      	subs	r0, r0, r5
 8008be8:	6060      	str	r0, [r4, #4]
 8008bea:	6863      	ldr	r3, [r4, #4]
 8008bec:	6123      	str	r3, [r4, #16]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bf4:	e7aa      	b.n	8008b4c <_printf_i+0x14c>
 8008bf6:	6923      	ldr	r3, [r4, #16]
 8008bf8:	462a      	mov	r2, r5
 8008bfa:	4649      	mov	r1, r9
 8008bfc:	4640      	mov	r0, r8
 8008bfe:	47d0      	blx	sl
 8008c00:	3001      	adds	r0, #1
 8008c02:	d0ad      	beq.n	8008b60 <_printf_i+0x160>
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	079b      	lsls	r3, r3, #30
 8008c08:	d413      	bmi.n	8008c32 <_printf_i+0x232>
 8008c0a:	68e0      	ldr	r0, [r4, #12]
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	4298      	cmp	r0, r3
 8008c10:	bfb8      	it	lt
 8008c12:	4618      	movlt	r0, r3
 8008c14:	e7a6      	b.n	8008b64 <_printf_i+0x164>
 8008c16:	2301      	movs	r3, #1
 8008c18:	4632      	mov	r2, r6
 8008c1a:	4649      	mov	r1, r9
 8008c1c:	4640      	mov	r0, r8
 8008c1e:	47d0      	blx	sl
 8008c20:	3001      	adds	r0, #1
 8008c22:	d09d      	beq.n	8008b60 <_printf_i+0x160>
 8008c24:	3501      	adds	r5, #1
 8008c26:	68e3      	ldr	r3, [r4, #12]
 8008c28:	9903      	ldr	r1, [sp, #12]
 8008c2a:	1a5b      	subs	r3, r3, r1
 8008c2c:	42ab      	cmp	r3, r5
 8008c2e:	dcf2      	bgt.n	8008c16 <_printf_i+0x216>
 8008c30:	e7eb      	b.n	8008c0a <_printf_i+0x20a>
 8008c32:	2500      	movs	r5, #0
 8008c34:	f104 0619 	add.w	r6, r4, #25
 8008c38:	e7f5      	b.n	8008c26 <_printf_i+0x226>
 8008c3a:	bf00      	nop
 8008c3c:	08009271 	.word	0x08009271
 8008c40:	08009282 	.word	0x08009282

08008c44 <memmove>:
 8008c44:	4288      	cmp	r0, r1
 8008c46:	b510      	push	{r4, lr}
 8008c48:	eb01 0402 	add.w	r4, r1, r2
 8008c4c:	d902      	bls.n	8008c54 <memmove+0x10>
 8008c4e:	4284      	cmp	r4, r0
 8008c50:	4623      	mov	r3, r4
 8008c52:	d807      	bhi.n	8008c64 <memmove+0x20>
 8008c54:	1e43      	subs	r3, r0, #1
 8008c56:	42a1      	cmp	r1, r4
 8008c58:	d008      	beq.n	8008c6c <memmove+0x28>
 8008c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c62:	e7f8      	b.n	8008c56 <memmove+0x12>
 8008c64:	4402      	add	r2, r0
 8008c66:	4601      	mov	r1, r0
 8008c68:	428a      	cmp	r2, r1
 8008c6a:	d100      	bne.n	8008c6e <memmove+0x2a>
 8008c6c:	bd10      	pop	{r4, pc}
 8008c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c76:	e7f7      	b.n	8008c68 <memmove+0x24>

08008c78 <memcpy>:
 8008c78:	440a      	add	r2, r1
 8008c7a:	4291      	cmp	r1, r2
 8008c7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c80:	d100      	bne.n	8008c84 <memcpy+0xc>
 8008c82:	4770      	bx	lr
 8008c84:	b510      	push	{r4, lr}
 8008c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c8e:	4291      	cmp	r1, r2
 8008c90:	d1f9      	bne.n	8008c86 <memcpy+0xe>
 8008c92:	bd10      	pop	{r4, pc}

08008c94 <_realloc_r>:
 8008c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c98:	4680      	mov	r8, r0
 8008c9a:	4614      	mov	r4, r2
 8008c9c:	460e      	mov	r6, r1
 8008c9e:	b921      	cbnz	r1, 8008caa <_realloc_r+0x16>
 8008ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	f7ff bba9 	b.w	80083fc <_malloc_r>
 8008caa:	b92a      	cbnz	r2, 8008cb8 <_realloc_r+0x24>
 8008cac:	f7ff fc96 	bl	80085dc <_free_r>
 8008cb0:	4625      	mov	r5, r4
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb8:	f000 f81b 	bl	8008cf2 <_malloc_usable_size_r>
 8008cbc:	4284      	cmp	r4, r0
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	d802      	bhi.n	8008cc8 <_realloc_r+0x34>
 8008cc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cc6:	d812      	bhi.n	8008cee <_realloc_r+0x5a>
 8008cc8:	4621      	mov	r1, r4
 8008cca:	4640      	mov	r0, r8
 8008ccc:	f7ff fb96 	bl	80083fc <_malloc_r>
 8008cd0:	4605      	mov	r5, r0
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d0ed      	beq.n	8008cb2 <_realloc_r+0x1e>
 8008cd6:	42bc      	cmp	r4, r7
 8008cd8:	4622      	mov	r2, r4
 8008cda:	4631      	mov	r1, r6
 8008cdc:	bf28      	it	cs
 8008cde:	463a      	movcs	r2, r7
 8008ce0:	f7ff ffca 	bl	8008c78 <memcpy>
 8008ce4:	4631      	mov	r1, r6
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	f7ff fc78 	bl	80085dc <_free_r>
 8008cec:	e7e1      	b.n	8008cb2 <_realloc_r+0x1e>
 8008cee:	4635      	mov	r5, r6
 8008cf0:	e7df      	b.n	8008cb2 <_realloc_r+0x1e>

08008cf2 <_malloc_usable_size_r>:
 8008cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf6:	1f18      	subs	r0, r3, #4
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	bfbc      	itt	lt
 8008cfc:	580b      	ldrlt	r3, [r1, r0]
 8008cfe:	18c0      	addlt	r0, r0, r3
 8008d00:	4770      	bx	lr
	...

08008d04 <_init>:
 8008d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d06:	bf00      	nop
 8008d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d0a:	bc08      	pop	{r3}
 8008d0c:	469e      	mov	lr, r3
 8008d0e:	4770      	bx	lr

08008d10 <_fini>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	bf00      	nop
 8008d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d16:	bc08      	pop	{r3}
 8008d18:	469e      	mov	lr, r3
 8008d1a:	4770      	bx	lr
