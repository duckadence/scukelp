
winchcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  08008f08  08008f08  00018f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094b0  080094b0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080094b0  080094b0  000194b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094b8  080094b8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094b8  080094b8  000194b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094bc  080094bc  000194bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080094c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000080  08009540  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  08009540  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000145c7  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f6c  00000000  00000000  000346ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  00037628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea1  00000000  00000000  00038918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002351c  00000000  00000000  000397b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a37d  00000000  00000000  0005ccd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7c87  00000000  00000000  00077052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055ac  00000000  00000000  0013ecdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00144288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ef0 	.word	0x08008ef0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08008ef0 	.word	0x08008ef0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <SELECT+0x1c>)
 8000578:	f001 fc8e 	bl	8001e98 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800057c:	2001      	movs	r0, #1
 800057e:	f001 fa17 	bl	80019b0 <HAL_Delay>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	48000400 	.word	0x48000400

0800058c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <DESELECT+0x1c>)
 8000598:	f001 fc7e 	bl	8001e98 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f001 fa07 	bl	80019b0 <HAL_Delay>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	48000400 	.word	0x48000400

080005ac <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005b6:	bf00      	nop
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <SPI_TxByte+0x30>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d1f8      	bne.n	80005b8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005c6:	1df9      	adds	r1, r7, #7
 80005c8:	2364      	movs	r3, #100	; 0x64
 80005ca:	2201      	movs	r2, #1
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <SPI_TxByte+0x30>)
 80005ce:	f003 fb1e 	bl	8003c0e <HAL_SPI_Transmit>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000f8 	.word	0x200000f8

080005e0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ec:	bf00      	nop
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <SPI_TxBuffer+0x30>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f003 0302 	and.w	r3, r3, #2
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	d1f8      	bne.n	80005ee <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80005fc:	887a      	ldrh	r2, [r7, #2]
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <SPI_TxBuffer+0x30>)
 8000604:	f003 fb03 	bl	8003c0e <HAL_SPI_Transmit>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200000f8 	.word	0x200000f8

08000614 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800061a:	23ff      	movs	r3, #255	; 0xff
 800061c:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800061e:	bf00      	nop
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <SPI_RxByte+0x34>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	2b02      	cmp	r3, #2
 800062c:	d1f8      	bne.n	8000620 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800062e:	1dba      	adds	r2, r7, #6
 8000630:	1df9      	adds	r1, r7, #7
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2301      	movs	r3, #1
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <SPI_RxByte+0x34>)
 800063a:	f003 fc5d 	bl	8003ef8 <HAL_SPI_TransmitReceive>

  return data;
 800063e:	79bb      	ldrb	r3, [r7, #6]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000f8 	.word	0x200000f8

0800064c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000654:	f7ff ffde 	bl	8000614 <SPI_RxByte>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	701a      	strb	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <SD_ReadyWait+0x30>)
 8000670:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000674:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000676:	f7ff ffcd 	bl	8000614 <SPI_RxByte>
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d003      	beq.n	800068c <SD_ReadyWait+0x24>
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <SD_ReadyWait+0x30>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f4      	bne.n	8000676 <SD_ReadyWait+0xe>

  return res;
 800068c:	79fb      	ldrb	r3, [r7, #7]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000009e 	.word	0x2000009e

0800069c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80006a2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006a6:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80006a8:	f7ff ff70 	bl	800058c <DESELECT>
  for(int i = 0; i < 10; i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	e005      	b.n	80006be <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80006b2:	20ff      	movs	r0, #255	; 0xff
 80006b4:	f7ff ff7a 	bl	80005ac <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	3301      	adds	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	2b09      	cmp	r3, #9
 80006c2:	ddf6      	ble.n	80006b2 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80006c4:	f7ff ff52 	bl	800056c <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80006c8:	2340      	movs	r3, #64	; 0x40
 80006ca:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 80006dc:	2395      	movs	r3, #149	; 0x95
 80006de:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 80006e0:	463b      	mov	r3, r7
 80006e2:	2106      	movs	r1, #6
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff7b 	bl	80005e0 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80006ea:	e002      	b.n	80006f2 <SD_PowerOn+0x56>
  {
    cnt--;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80006f2:	f7ff ff8f 	bl	8000614 <SPI_RxByte>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d002      	beq.n	8000702 <SD_PowerOn+0x66>
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1f4      	bne.n	80006ec <SD_PowerOn+0x50>
  }

  DESELECT();
 8000702:	f7ff ff43 	bl	800058c <DESELECT>
  SPI_TxByte(0XFF);
 8000706:	20ff      	movs	r0, #255	; 0xff
 8000708:	f7ff ff50 	bl	80005ac <SPI_TxByte>

  PowerFlag = 1;
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <SD_PowerOn+0x80>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000a1 	.word	0x200000a1

08000720 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <SD_PowerOff+0x14>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	200000a1 	.word	0x200000a1

08000738 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return PowerFlag;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <SD_CheckPower+0x14>)
 800073e:	781b      	ldrb	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	200000a1 	.word	0x200000a1

08000750 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SD_RxDataBlock+0x58>)
 800075c:	22c8      	movs	r2, #200	; 0xc8
 800075e:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000760:	f7ff ff58 	bl	8000614 <SPI_RxByte>
 8000764:	4603      	mov	r3, r0
 8000766:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	2bff      	cmp	r3, #255	; 0xff
 800076c:	d103      	bne.n	8000776 <SD_RxDataBlock+0x26>
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <SD_RxDataBlock+0x58>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1f4      	bne.n	8000760 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	2bfe      	cmp	r3, #254	; 0xfe
 800077a:	d001      	beq.n	8000780 <SD_RxDataBlock+0x30>
 800077c:	2300      	movs	r3, #0
 800077e:	e00f      	b.n	80007a0 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff60 	bl	800064c <SPI_RxBytePtr>
  } while(len--);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	1e5a      	subs	r2, r3, #1
 8000790:	603a      	str	r2, [r7, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1f4      	bne.n	8000780 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8000796:	f7ff ff3d 	bl	8000614 <SPI_RxByte>
  SPI_RxByte();
 800079a:	f7ff ff3b 	bl	8000614 <SPI_RxByte>

  return TRUE;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000009c 	.word	0x2000009c

080007ac <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80007bc:	f7ff ff54 	bl	8000668 <SD_ReadyWait>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2bff      	cmp	r3, #255	; 0xff
 80007c4:	d001      	beq.n	80007ca <SD_TxDataBlock+0x1e>
 80007c6:	2300      	movs	r3, #0
 80007c8:	e02f      	b.n	800082a <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff feed 	bl	80005ac <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80007d2:	78fb      	ldrb	r3, [r7, #3]
 80007d4:	2bfd      	cmp	r3, #253	; 0xfd
 80007d6:	d020      	beq.n	800081a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80007d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff feff 	bl	80005e0 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 80007e2:	f7ff ff17 	bl	8000614 <SPI_RxByte>
    SPI_RxByte();
 80007e6:	f7ff ff15 	bl	8000614 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 80007ea:	e00b      	b.n	8000804 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80007ec:	f7ff ff12 	bl	8000614 <SPI_RxByte>
 80007f0:	4603      	mov	r3, r0
 80007f2:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	f003 031f 	and.w	r3, r3, #31
 80007fa:	2b05      	cmp	r3, #5
 80007fc:	d006      	beq.n	800080c <SD_TxDataBlock+0x60>
      i++;
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	3301      	adds	r3, #1
 8000802:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	2b40      	cmp	r3, #64	; 0x40
 8000808:	d9f0      	bls.n	80007ec <SD_TxDataBlock+0x40>
 800080a:	e000      	b.n	800080e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800080c:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800080e:	bf00      	nop
 8000810:	f7ff ff00 	bl	8000614 <SPI_RxByte>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0fa      	beq.n	8000810 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	f003 031f 	and.w	r3, r3, #31
 8000820:	2b05      	cmp	r3, #5
 8000822:	d101      	bne.n	8000828 <SD_TxDataBlock+0x7c>
 8000824:	2301      	movs	r3, #1
 8000826:	e000      	b.n	800082a <SD_TxDataBlock+0x7e>

  return FALSE;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800083e:	f7ff ff13 	bl	8000668 <SD_ReadyWait>
 8000842:	4603      	mov	r3, r0
 8000844:	2bff      	cmp	r3, #255	; 0xff
 8000846:	d001      	beq.n	800084c <SD_SendCmd+0x1a>
 8000848:	23ff      	movs	r3, #255	; 0xff
 800084a:	e042      	b.n	80008d2 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff feac 	bl	80005ac <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	0e1b      	lsrs	r3, r3, #24
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fea6 	bl	80005ac <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	0c1b      	lsrs	r3, r3, #16
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fea0 	bl	80005ac <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	0a1b      	lsrs	r3, r3, #8
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe9a 	bl	80005ac <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fe95 	bl	80005ac <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b40      	cmp	r3, #64	; 0x40
 8000886:	d102      	bne.n	800088e <SD_SendCmd+0x5c>
 8000888:	2395      	movs	r3, #149	; 0x95
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e007      	b.n	800089e <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b48      	cmp	r3, #72	; 0x48
 8000892:	d102      	bne.n	800089a <SD_SendCmd+0x68>
 8000894:	2387      	movs	r3, #135	; 0x87
 8000896:	73fb      	strb	r3, [r7, #15]
 8000898:	e001      	b.n	800089e <SD_SendCmd+0x6c>
  else crc = 1;
 800089a:	2301      	movs	r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe83 	bl	80005ac <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b4c      	cmp	r3, #76	; 0x4c
 80008aa:	d101      	bne.n	80008b0 <SD_SendCmd+0x7e>
 80008ac:	f7ff feb2 	bl	8000614 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80008b0:	230a      	movs	r3, #10
 80008b2:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80008b4:	f7ff feae 	bl	8000614 <SPI_RxByte>
 80008b8:	4603      	mov	r3, r0
 80008ba:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80008bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	da05      	bge.n	80008d0 <SD_SendCmd+0x9e>
 80008c4:	7bbb      	ldrb	r3, [r7, #14]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	73bb      	strb	r3, [r7, #14]
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1f1      	bne.n	80008b4 <SD_SendCmd+0x82>

  return res;
 80008d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SD_disk_initialize+0x14>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e0d1      	b.n	8000a94 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80008f0:	4b6a      	ldr	r3, [pc, #424]	; (8000a9c <SD_disk_initialize+0x1c0>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <SD_disk_initialize+0x2a>
 80008fe:	4b67      	ldr	r3, [pc, #412]	; (8000a9c <SD_disk_initialize+0x1c0>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	e0c6      	b.n	8000a94 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000906:	f7ff fec9 	bl	800069c <SD_PowerOn>

  /* slave select */
  SELECT();
 800090a:	f7ff fe2f 	bl	800056c <SELECT>

  /* check disk type */
  type = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000912:	2100      	movs	r1, #0
 8000914:	2040      	movs	r0, #64	; 0x40
 8000916:	f7ff ff8c 	bl	8000832 <SD_SendCmd>
 800091a:	4603      	mov	r3, r0
 800091c:	2b01      	cmp	r3, #1
 800091e:	f040 80a1 	bne.w	8000a64 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000922:	4b5f      	ldr	r3, [pc, #380]	; (8000aa0 <SD_disk_initialize+0x1c4>)
 8000924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000928:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800092a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800092e:	2048      	movs	r0, #72	; 0x48
 8000930:	f7ff ff7f 	bl	8000832 <SD_SendCmd>
 8000934:	4603      	mov	r3, r0
 8000936:	2b01      	cmp	r3, #1
 8000938:	d155      	bne.n	80009e6 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800093a:	2300      	movs	r3, #0
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	e00c      	b.n	800095a <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000940:	7bfc      	ldrb	r4, [r7, #15]
 8000942:	f7ff fe67 	bl	8000614 <SPI_RxByte>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	f104 0310 	add.w	r3, r4, #16
 800094e:	443b      	add	r3, r7
 8000950:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	3301      	adds	r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	2b03      	cmp	r3, #3
 800095e:	d9ef      	bls.n	8000940 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000960:	7abb      	ldrb	r3, [r7, #10]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d17e      	bne.n	8000a64 <SD_disk_initialize+0x188>
 8000966:	7afb      	ldrb	r3, [r7, #11]
 8000968:	2baa      	cmp	r3, #170	; 0xaa
 800096a:	d17b      	bne.n	8000a64 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800096c:	2100      	movs	r1, #0
 800096e:	2077      	movs	r0, #119	; 0x77
 8000970:	f7ff ff5f 	bl	8000832 <SD_SendCmd>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d807      	bhi.n	800098a <SD_disk_initialize+0xae>
 800097a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800097e:	2069      	movs	r0, #105	; 0x69
 8000980:	f7ff ff57 	bl	8000832 <SD_SendCmd>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d004      	beq.n	8000994 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800098a:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <SD_disk_initialize+0x1c4>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1ec      	bne.n	800096c <SD_disk_initialize+0x90>
 8000992:	e000      	b.n	8000996 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000994:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000996:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <SD_disk_initialize+0x1c4>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d062      	beq.n	8000a64 <SD_disk_initialize+0x188>
 800099e:	2100      	movs	r1, #0
 80009a0:	207a      	movs	r0, #122	; 0x7a
 80009a2:	f7ff ff46 	bl	8000832 <SD_SendCmd>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d15b      	bne.n	8000a64 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]
 80009b0:	e00c      	b.n	80009cc <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80009b2:	7bfc      	ldrb	r4, [r7, #15]
 80009b4:	f7ff fe2e 	bl	8000614 <SPI_RxByte>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	f104 0310 	add.w	r3, r4, #16
 80009c0:	443b      	add	r3, r7
 80009c2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	3301      	adds	r3, #1
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d9ef      	bls.n	80009b2 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009d2:	7a3b      	ldrb	r3, [r7, #8]
 80009d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SD_disk_initialize+0x104>
 80009dc:	230c      	movs	r3, #12
 80009de:	e000      	b.n	80009e2 <SD_disk_initialize+0x106>
 80009e0:	2304      	movs	r3, #4
 80009e2:	73bb      	strb	r3, [r7, #14]
 80009e4:	e03e      	b.n	8000a64 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009e6:	2100      	movs	r1, #0
 80009e8:	2077      	movs	r0, #119	; 0x77
 80009ea:	f7ff ff22 	bl	8000832 <SD_SendCmd>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d808      	bhi.n	8000a06 <SD_disk_initialize+0x12a>
 80009f4:	2100      	movs	r1, #0
 80009f6:	2069      	movs	r0, #105	; 0x69
 80009f8:	f7ff ff1b 	bl	8000832 <SD_SendCmd>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d801      	bhi.n	8000a06 <SD_disk_initialize+0x12a>
 8000a02:	2302      	movs	r3, #2
 8000a04:	e000      	b.n	8000a08 <SD_disk_initialize+0x12c>
 8000a06:	2301      	movs	r3, #1
 8000a08:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d10e      	bne.n	8000a2e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a10:	2100      	movs	r1, #0
 8000a12:	2077      	movs	r0, #119	; 0x77
 8000a14:	f7ff ff0d 	bl	8000832 <SD_SendCmd>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d80e      	bhi.n	8000a3c <SD_disk_initialize+0x160>
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2069      	movs	r0, #105	; 0x69
 8000a22:	f7ff ff06 	bl	8000832 <SD_SendCmd>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d107      	bne.n	8000a3c <SD_disk_initialize+0x160>
 8000a2c:	e00c      	b.n	8000a48 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2041      	movs	r0, #65	; 0x41
 8000a32:	f7ff fefe 	bl	8000832 <SD_SendCmd>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d004      	beq.n	8000a46 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <SD_disk_initialize+0x1c4>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1e2      	bne.n	8000a0a <SD_disk_initialize+0x12e>
 8000a44:	e000      	b.n	8000a48 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a46:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <SD_disk_initialize+0x1c4>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d007      	beq.n	8000a60 <SD_disk_initialize+0x184>
 8000a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a54:	2050      	movs	r0, #80	; 0x50
 8000a56:	f7ff feec 	bl	8000832 <SD_SendCmd>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SD_disk_initialize+0x188>
 8000a60:	2300      	movs	r3, #0
 8000a62:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8000a64:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <SD_disk_initialize+0x1c8>)
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8000a6a:	f7ff fd8f 	bl	800058c <DESELECT>
  SPI_RxByte();
 8000a6e:	f7ff fdd1 	bl	8000614 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8000a72:	7bbb      	ldrb	r3, [r7, #14]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d008      	beq.n	8000a8a <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <SD_disk_initialize+0x1c0>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f023 0301 	bic.w	r3, r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <SD_disk_initialize+0x1c0>)
 8000a86:	701a      	strb	r2, [r3, #0]
 8000a88:	e001      	b.n	8000a8e <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000a8a:	f7ff fe49 	bl	8000720 <SD_PowerOff>
  }

  return Stat;
 8000a8e:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <SD_disk_initialize+0x1c0>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	2000009c 	.word	0x2000009c
 8000aa4:	200000a0 	.word	0x200000a0

08000aa8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SD_disk_status+0x14>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e002      	b.n	8000ac2 <SD_disk_status+0x1a>
  return Stat;
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <SD_disk_status+0x28>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000000 	.word	0x20000000

08000ad4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <SD_disk_read+0x1c>
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d101      	bne.n	8000af4 <SD_disk_read+0x20>
 8000af0:	2304      	movs	r3, #4
 8000af2:	e051      	b.n	8000b98 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000af4:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <SD_disk_read+0xcc>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SD_disk_read+0x32>
 8000b02:	2303      	movs	r3, #3
 8000b04:	e048      	b.n	8000b98 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <SD_disk_read+0xd0>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <SD_disk_read+0x44>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	025b      	lsls	r3, r3, #9
 8000b16:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b18:	f7ff fd28 	bl	800056c <SELECT>

  if (count == 1)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d111      	bne.n	8000b46 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2051      	movs	r0, #81	; 0x51
 8000b26:	f7ff fe84 	bl	8000832 <SD_SendCmd>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d129      	bne.n	8000b84 <SD_disk_read+0xb0>
 8000b30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b34:	68b8      	ldr	r0, [r7, #8]
 8000b36:	f7ff fe0b 	bl	8000750 <SD_RxDataBlock>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d021      	beq.n	8000b84 <SD_disk_read+0xb0>
 8000b40:	2300      	movs	r3, #0
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	e01e      	b.n	8000b84 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	2052      	movs	r0, #82	; 0x52
 8000b4a:	f7ff fe72 	bl	8000832 <SD_SendCmd>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d117      	bne.n	8000b84 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000b54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f7ff fdf9 	bl	8000750 <SD_RxDataBlock>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d00a      	beq.n	8000b7a <SD_disk_read+0xa6>
        buff += 512;
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b6a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1ed      	bne.n	8000b54 <SD_disk_read+0x80>
 8000b78:	e000      	b.n	8000b7c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000b7a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	204c      	movs	r0, #76	; 0x4c
 8000b80:	f7ff fe57 	bl	8000832 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8000b84:	f7ff fd02 	bl	800058c <DESELECT>
  SPI_RxByte();
 8000b88:	f7ff fd44 	bl	8000614 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf14      	ite	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	2300      	moveq	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	200000a0 	.word	0x200000a0

08000ba8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d102      	bne.n	8000bc4 <SD_disk_write+0x1c>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <SD_disk_write+0x20>
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	e06b      	b.n	8000ca0 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bc8:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <SD_disk_write+0x100>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SD_disk_write+0x32>
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e062      	b.n	8000ca0 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8000bda:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <SD_disk_write+0x100>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SD_disk_write+0x44>
 8000be8:	2302      	movs	r3, #2
 8000bea:	e059      	b.n	8000ca0 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <SD_disk_write+0x104>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <SD_disk_write+0x56>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	025b      	lsls	r3, r3, #9
 8000bfc:	607b      	str	r3, [r7, #4]

  SELECT();
 8000bfe:	f7ff fcb5 	bl	800056c <SELECT>

  if (count == 1)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d110      	bne.n	8000c2a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	2058      	movs	r0, #88	; 0x58
 8000c0c:	f7ff fe11 	bl	8000832 <SD_SendCmd>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d13a      	bne.n	8000c8c <SD_disk_write+0xe4>
 8000c16:	21fe      	movs	r1, #254	; 0xfe
 8000c18:	68b8      	ldr	r0, [r7, #8]
 8000c1a:	f7ff fdc7 	bl	80007ac <SD_TxDataBlock>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d033      	beq.n	8000c8c <SD_disk_write+0xe4>
      count = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	e030      	b.n	8000c8c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <SD_disk_write+0x104>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d007      	beq.n	8000c46 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c36:	2100      	movs	r1, #0
 8000c38:	2077      	movs	r0, #119	; 0x77
 8000c3a:	f7ff fdfa 	bl	8000832 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	2057      	movs	r0, #87	; 0x57
 8000c42:	f7ff fdf6 	bl	8000832 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	2059      	movs	r0, #89	; 0x59
 8000c4a:	f7ff fdf2 	bl	8000832 <SD_SendCmd>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d11b      	bne.n	8000c8c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c54:	21fc      	movs	r1, #252	; 0xfc
 8000c56:	68b8      	ldr	r0, [r7, #8]
 8000c58:	f7ff fda8 	bl	80007ac <SD_TxDataBlock>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d00a      	beq.n	8000c78 <SD_disk_write+0xd0>
        buff += 512;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c68:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1ee      	bne.n	8000c54 <SD_disk_write+0xac>
 8000c76:	e000      	b.n	8000c7a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c78:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000c7a:	21fd      	movs	r1, #253	; 0xfd
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff fd95 	bl	80007ac <SD_TxDataBlock>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <SD_disk_write+0xe4>
      {
        count = 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8000c8c:	f7ff fc7e 	bl	800058c <DESELECT>
  SPI_RxByte();
 8000c90:	f7ff fcc0 	bl	8000614 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bf14      	ite	ne
 8000c9a:	2301      	movne	r3, #1
 8000c9c:	2300      	moveq	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	200000a0 	.word	0x200000a0

08000cb0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b08b      	sub	sp, #44	; 0x2c
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	603a      	str	r2, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SD_disk_ioctl+0x1e>
 8000cca:	2304      	movs	r3, #4
 8000ccc:	e115      	b.n	8000efa <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	d124      	bne.n	8000d24 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d012      	beq.n	8000d08 <SD_disk_ioctl+0x58>
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	dc1a      	bgt.n	8000d1c <SD_disk_ioctl+0x6c>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <SD_disk_ioctl+0x40>
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d006      	beq.n	8000cfc <SD_disk_ioctl+0x4c>
 8000cee:	e015      	b.n	8000d1c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8000cf0:	f7ff fd16 	bl	8000720 <SD_PowerOff>
      res = RES_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000cfa:	e0fc      	b.n	8000ef6 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8000cfc:	f7ff fcce 	bl	800069c <SD_PowerOn>
      res = RES_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d06:	e0f6      	b.n	8000ef6 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8000d08:	6a3b      	ldr	r3, [r7, #32]
 8000d0a:	1c5c      	adds	r4, r3, #1
 8000d0c:	f7ff fd14 	bl	8000738 <SD_CheckPower>
 8000d10:	4603      	mov	r3, r0
 8000d12:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8000d14:	2300      	movs	r3, #0
 8000d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d1a:	e0ec      	b.n	8000ef6 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d22:	e0e8      	b.n	8000ef6 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d24:	4b77      	ldr	r3, [pc, #476]	; (8000f04 <SD_disk_ioctl+0x254>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SD_disk_ioctl+0x86>
 8000d32:	2303      	movs	r3, #3
 8000d34:	e0e1      	b.n	8000efa <SD_disk_ioctl+0x24a>

    SELECT();
 8000d36:	f7ff fc19 	bl	800056c <SELECT>

    switch (ctrl)
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	2b0d      	cmp	r3, #13
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <SD_disk_ioctl+0x228>
 8000d42:	a201      	add	r2, pc, #4	; (adr r2, 8000d48 <SD_disk_ioctl+0x98>)
 8000d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d48:	08000e43 	.word	0x08000e43
 8000d4c:	08000d81 	.word	0x08000d81
 8000d50:	08000e33 	.word	0x08000e33
 8000d54:	08000ed9 	.word	0x08000ed9
 8000d58:	08000ed9 	.word	0x08000ed9
 8000d5c:	08000ed9 	.word	0x08000ed9
 8000d60:	08000ed9 	.word	0x08000ed9
 8000d64:	08000ed9 	.word	0x08000ed9
 8000d68:	08000ed9 	.word	0x08000ed9
 8000d6c:	08000ed9 	.word	0x08000ed9
 8000d70:	08000ed9 	.word	0x08000ed9
 8000d74:	08000e55 	.word	0x08000e55
 8000d78:	08000e79 	.word	0x08000e79
 8000d7c:	08000e9d 	.word	0x08000e9d
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d80:	2100      	movs	r1, #0
 8000d82:	2049      	movs	r0, #73	; 0x49
 8000d84:	f7ff fd55 	bl	8000832 <SD_SendCmd>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 80a8 	bne.w	8000ee0 <SD_disk_ioctl+0x230>
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2110      	movs	r1, #16
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fcda 	bl	8000750 <SD_RxDataBlock>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 809e 	beq.w	8000ee0 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8000da4:	7b3b      	ldrb	r3, [r7, #12]
 8000da6:	099b      	lsrs	r3, r3, #6
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d10e      	bne.n	8000dcc <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dae:	7d7b      	ldrb	r3, [r7, #21]
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	7d3b      	ldrb	r3, [r7, #20]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4413      	add	r3, r2
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000dc2:	8bfb      	ldrh	r3, [r7, #30]
 8000dc4:	029a      	lsls	r2, r3, #10
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	e02e      	b.n	8000e2a <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dcc:	7c7b      	ldrb	r3, [r7, #17]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	7dbb      	ldrb	r3, [r7, #22]
 8000dd6:	09db      	lsrs	r3, r3, #7
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	7d7b      	ldrb	r3, [r7, #21]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f003 0306 	and.w	r3, r3, #6
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	3302      	adds	r3, #2
 8000df0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000df4:	7d3b      	ldrb	r3, [r7, #20]
 8000df6:	099b      	lsrs	r3, r3, #6
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	7cfb      	ldrb	r3, [r7, #19]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	4413      	add	r3, r2
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	7cbb      	ldrb	r3, [r7, #18]
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	3301      	adds	r3, #1
 8000e1a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e1c:	8bfa      	ldrh	r2, [r7, #30]
 8000e1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e22:	3b09      	subs	r3, #9
 8000e24:	409a      	lsls	r2, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000e30:	e056      	b.n	8000ee0 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e38:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e40:	e055      	b.n	8000eee <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e42:	f7ff fc11 	bl	8000668 <SD_ReadyWait>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d14b      	bne.n	8000ee4 <SD_disk_ioctl+0x234>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e52:	e047      	b.n	8000ee4 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e54:	2100      	movs	r1, #0
 8000e56:	2049      	movs	r0, #73	; 0x49
 8000e58:	f7ff fceb 	bl	8000832 <SD_SendCmd>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d142      	bne.n	8000ee8 <SD_disk_ioctl+0x238>
 8000e62:	2110      	movs	r1, #16
 8000e64:	6a38      	ldr	r0, [r7, #32]
 8000e66:	f7ff fc73 	bl	8000750 <SD_RxDataBlock>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d03b      	beq.n	8000ee8 <SD_disk_ioctl+0x238>
 8000e70:	2300      	movs	r3, #0
 8000e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e76:	e037      	b.n	8000ee8 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e78:	2100      	movs	r1, #0
 8000e7a:	204a      	movs	r0, #74	; 0x4a
 8000e7c:	f7ff fcd9 	bl	8000832 <SD_SendCmd>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d132      	bne.n	8000eec <SD_disk_ioctl+0x23c>
 8000e86:	2110      	movs	r1, #16
 8000e88:	6a38      	ldr	r0, [r7, #32]
 8000e8a:	f7ff fc61 	bl	8000750 <SD_RxDataBlock>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d02b      	beq.n	8000eec <SD_disk_ioctl+0x23c>
 8000e94:	2300      	movs	r3, #0
 8000e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e9a:	e027      	b.n	8000eec <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	207a      	movs	r0, #122	; 0x7a
 8000ea0:	f7ff fcc7 	bl	8000832 <SD_SendCmd>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d116      	bne.n	8000ed8 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eb0:	e00b      	b.n	8000eca <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8000eb2:	6a3c      	ldr	r4, [r7, #32]
 8000eb4:	1c63      	adds	r3, r4, #1
 8000eb6:	623b      	str	r3, [r7, #32]
 8000eb8:	f7ff fbac 	bl	8000614 <SPI_RxByte>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d9ef      	bls.n	8000eb2 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ede:	e006      	b.n	8000eee <SD_disk_ioctl+0x23e>
      break;
 8000ee0:	bf00      	nop
 8000ee2:	e004      	b.n	8000eee <SD_disk_ioctl+0x23e>
      break;
 8000ee4:	bf00      	nop
 8000ee6:	e002      	b.n	8000eee <SD_disk_ioctl+0x23e>
      break;
 8000ee8:	bf00      	nop
 8000eea:	e000      	b.n	8000eee <SD_disk_ioctl+0x23e>
      break;
 8000eec:	bf00      	nop
    }

    DESELECT();
 8000eee:	f7ff fb4d 	bl	800058c <DESELECT>
    SPI_RxByte();
 8000ef2:	f7ff fb8f 	bl	8000614 <SPI_RxByte>
  }

  return res;
 8000ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	372c      	adds	r7, #44	; 0x2c
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd90      	pop	{r4, r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000000 	.word	0x20000000

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0c:	f000 fcdb 	bl	80018c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f10:	f000 f812 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f14:	f000 f920 	bl	8001158 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f18:	f000 f8ee 	bl	80010f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f1c:	f000 f86e 	bl	8000ffc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f20:	f000 f8ac 	bl	800107c <MX_SPI1_Init>
  MX_FATFS_Init();
 8000f24:	f003 fffe 	bl	8004f24 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8000f28:	f000 f9c5 	bl	80012b6 <lcd_init>
  lcd_backlight(1); // Turn on backlight
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f000 f9f1 	bl	8001314 <lcd_backlight>

  process_SD_card();
 8000f32:	f000 fa07 	bl	8001344 <process_SD_card>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <main+0x2e>

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b096      	sub	sp, #88	; 0x58
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2244      	movs	r2, #68	; 0x44
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f007 fa48 	bl	80083dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f5e:	f001 fc2d 	bl	80027bc <HAL_PWREx_ControlVoltageScaling>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f68:	f000 fa5e 	bl	8001428 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f6c:	f001 fc08 	bl	8002780 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <SystemClock_Config+0xc0>)
 8000f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f76:	4a20      	ldr	r2, [pc, #128]	; (8000ff8 <SystemClock_Config+0xc0>)
 8000f78:	f023 0318 	bic.w	r3, r3, #24
 8000f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f80:	2314      	movs	r3, #20
 8000f82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f90:	2360      	movs	r3, #96	; 0x60
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f94:	2302      	movs	r3, #2
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fc57 	bl	8002868 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fc0:	f000 fa32 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2101      	movs	r1, #1
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 f857 	bl	8003090 <HAL_RCC_ClockConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000fe8:	f000 fa1e 	bl	8001428 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000fec:	f002 fc6a 	bl	80038c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ff0:	bf00      	nop
 8000ff2:	3758      	adds	r7, #88	; 0x58
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021000 	.word	0x40021000

08000ffc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_I2C1_Init+0x74>)
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <MX_I2C1_Init+0x78>)
 8001004:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_I2C1_Init+0x74>)
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <MX_I2C1_Init+0x7c>)
 800100a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_I2C1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_I2C1_Init+0x74>)
 8001014:	2201      	movs	r2, #1
 8001016:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_I2C1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_I2C1_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_I2C1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001036:	480e      	ldr	r0, [pc, #56]	; (8001070 <MX_I2C1_Init+0x74>)
 8001038:	f000 ff46 	bl	8001ec8 <HAL_I2C_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001042:	f000 f9f1 	bl	8001428 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <MX_I2C1_Init+0x74>)
 800104a:	f001 fb01 	bl	8002650 <HAL_I2CEx_ConfigAnalogFilter>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001054:	f000 f9e8 	bl	8001428 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001058:	2100      	movs	r1, #0
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_I2C1_Init+0x74>)
 800105c:	f001 fb43 	bl	80026e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001066:	f000 f9df 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000a4 	.word	0x200000a4
 8001074:	40005400 	.word	0x40005400
 8001078:	00707cbb 	.word	0x00707cbb

0800107c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_SPI1_Init+0x74>)
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <MX_SPI1_Init+0x78>)
 8001084:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_SPI1_Init+0x74>)
 8001088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800108c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_SPI1_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_SPI1_Init+0x74>)
 8001096:	f44f 7240 	mov.w	r2, #768	; 0x300
 800109a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_SPI1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010ca:	2207      	movs	r2, #7
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010d6:	2208      	movs	r2, #8
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010dc:	f002 fcf4 	bl	8003ac8 <HAL_SPI_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010e6:	f000 f99f 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000f8 	.word	0x200000f8
 80010f4:	40013000 	.word	0x40013000

080010f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_USART2_UART_Init+0x58>)
 80010fe:	4a15      	ldr	r2, [pc, #84]	; (8001154 <MX_USART2_UART_Init+0x5c>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800113c:	f003 fa62 	bl	8004604 <HAL_UART_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001146:	f000 f96f 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000015c 	.word	0x2000015c
 8001154:	40004400 	.word	0x40004400

08001158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_GPIO_Init+0x90>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <MX_GPIO_Init+0x90>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_GPIO_Init+0x90>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_GPIO_Init+0x90>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <MX_GPIO_Init+0x90>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_GPIO_Init+0x90>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_GPIO_Init+0x90>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a11      	ldr	r2, [pc, #68]	; (80011e8 <MX_GPIO_Init+0x90>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_GPIO_Init+0x90>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2110      	movs	r1, #16
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f000 fe6b 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011c2:	2310      	movs	r3, #16
 80011c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011dc:	f000 fcf2 	bl	8001bc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021000 	.word	0x40021000

080011ec <lcd_write_nibble>:

/* USER CODE BEGIN 4 */
void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	b2db      	uxtb	r3, r3
 8001202:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	79bb      	ldrb	r3, [r7, #6]
 8001208:	4313      	orrs	r3, r2
 800120a:	b2db      	uxtb	r3, r3
 800120c:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <lcd_write_nibble+0x7c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	b25a      	sxtb	r2, r3
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	b25b      	sxtb	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b25b      	sxtb	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	b2db      	uxtb	r3, r3
 800122a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800122c:	f107 020f 	add.w	r2, r7, #15
 8001230:	2364      	movs	r3, #100	; 0x64
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	214e      	movs	r1, #78	; 0x4e
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <lcd_write_nibble+0x80>)
 800123a:	f000 fee1 	bl	8002000 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f000 fbb6 	bl	80019b0 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	f023 0304 	bic.w	r3, r3, #4
 800124a:	b2db      	uxtb	r3, r3
 800124c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800124e:	f107 020f 	add.w	r2, r7, #15
 8001252:	2364      	movs	r3, #100	; 0x64
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	214e      	movs	r1, #78	; 0x4e
 800125a:	4804      	ldr	r0, [pc, #16]	; (800126c <lcd_write_nibble+0x80>)
 800125c:	f000 fed0 	bl	8002000 <HAL_I2C_Master_Transmit>
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000001 	.word	0x20000001
 800126c:	200000a4 	.word	0x200000a4

08001270 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ffad 	bl	80011ec <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ffa8 	bl	80011ec <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d002      	beq.n	80012a8 <lcd_send_cmd+0x38>
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d102      	bne.n	80012ae <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 80012a8:	2002      	movs	r0, #2
 80012aa:	f000 fb81 	bl	80019b0 <HAL_Delay>
  }
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <lcd_init>:
  uint8_t lower_nibble = data & 0x0F;
  lcd_write_nibble(upper_nibble, 1);
  lcd_write_nibble(lower_nibble, 1);
}

void lcd_init() {
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 80012ba:	2032      	movs	r0, #50	; 0x32
 80012bc:	f000 fb78 	bl	80019b0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80012c0:	2100      	movs	r1, #0
 80012c2:	2003      	movs	r0, #3
 80012c4:	f7ff ff92 	bl	80011ec <lcd_write_nibble>
  HAL_Delay(5);
 80012c8:	2005      	movs	r0, #5
 80012ca:	f000 fb71 	bl	80019b0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80012ce:	2100      	movs	r1, #0
 80012d0:	2003      	movs	r0, #3
 80012d2:	f7ff ff8b 	bl	80011ec <lcd_write_nibble>
  HAL_Delay(1);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f000 fb6a 	bl	80019b0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80012dc:	2100      	movs	r1, #0
 80012de:	2003      	movs	r0, #3
 80012e0:	f7ff ff84 	bl	80011ec <lcd_write_nibble>
  HAL_Delay(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f000 fb63 	bl	80019b0 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 80012ea:	2100      	movs	r1, #0
 80012ec:	2002      	movs	r0, #2
 80012ee:	f7ff ff7d 	bl	80011ec <lcd_write_nibble>
  lcd_send_cmd(0x28);
 80012f2:	2028      	movs	r0, #40	; 0x28
 80012f4:	f7ff ffbc 	bl	8001270 <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 80012f8:	200c      	movs	r0, #12
 80012fa:	f7ff ffb9 	bl	8001270 <lcd_send_cmd>
  lcd_send_cmd(0x06);
 80012fe:	2006      	movs	r0, #6
 8001300:	f7ff ffb6 	bl	8001270 <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8001304:	2001      	movs	r0, #1
 8001306:	f7ff ffb3 	bl	8001270 <lcd_send_cmd>
  HAL_Delay(2);
 800130a:	2002      	movs	r0, #2
 800130c:	f000 fb50 	bl	80019b0 <HAL_Delay>
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <lcd_backlight>:
void lcd_clear(void) {
	lcd_send_cmd(0x01);
    HAL_Delay(2);
}

void lcd_backlight(uint8_t state) {
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if (state) {
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <lcd_backlight+0x18>
    backlight_state = 1;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <lcd_backlight+0x2c>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
  } else {
    backlight_state = 0;
  }
}
 800132a:	e002      	b.n	8001332 <lcd_backlight+0x1e>
    backlight_state = 0;
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <lcd_backlight+0x2c>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000001 	.word	0x20000001

08001344 <process_SD_card>:

void process_SD_card( void )
{
 8001344:	b580      	push	{r7, lr}
 8001346:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0
  FRESULT     fres;                 //Result after operations

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 800134e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001352:	f103 0310 	add.w	r3, r3, #16
 8001356:	3b1c      	subs	r3, #28
 8001358:	2201      	movs	r2, #1
 800135a:	492c      	ldr	r1, [pc, #176]	; (800140c <process_SD_card+0xc8>)
 800135c:	4618      	mov	r0, r3
 800135e:	f006 f829 	bl	80073b4 <f_mount>
 8001362:	4603      	mov	r3, r0
 8001364:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001368:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 800136c:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 800136e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001372:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d009      	beq.n	8001390 <process_SD_card+0x4c>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 800137c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001380:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	4619      	mov	r1, r3
 8001388:	4821      	ldr	r0, [pc, #132]	; (8001410 <process_SD_card+0xcc>)
 800138a:	f006 fee1 	bl	8008150 <iprintf>
      break;
 800138e:	e02e      	b.n	80013ee <process_SD_card+0xaa>
    }

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8001390:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001394:	3b2c      	subs	r3, #44	; 0x2c
 8001396:	220b      	movs	r2, #11
 8001398:	491e      	ldr	r1, [pc, #120]	; (8001414 <process_SD_card+0xd0>)
 800139a:	4618      	mov	r0, r3
 800139c:	f006 f850 	bl	8007440 <f_open>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80013a6:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80013aa:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 80013ac:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80013b0:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <process_SD_card+0x8a>
    {
      printf("File creation/open Error : (%i)\r\n", fres);
 80013ba:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80013be:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4814      	ldr	r0, [pc, #80]	; (8001418 <process_SD_card+0xd4>)
 80013c8:	f006 fec2 	bl	8008150 <iprintf>
      break;
 80013cc:	e00f      	b.n	80013ee <process_SD_card+0xaa>
    }

    printf("Writing data!!!\r\n");
 80013ce:	4813      	ldr	r0, [pc, #76]	; (800141c <process_SD_card+0xd8>)
 80013d0:	f006 ff24 	bl	800821c <puts>
    //write the data
    f_puts("Welcome to EmbeTronicX", &fil);
 80013d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013d8:	3b2c      	subs	r3, #44	; 0x2c
 80013da:	4619      	mov	r1, r3
 80013dc:	4810      	ldr	r0, [pc, #64]	; (8001420 <process_SD_card+0xdc>)
 80013de:	f006 fcae 	bl	8007d3e <f_puts>

    //close your file
    f_close(&fil);
 80013e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e6:	3b2c      	subs	r3, #44	; 0x2c
 80013e8:	4618      	mov	r0, r3
 80013ea:	f006 fc07 	bl	8007bfc <f_close>
    }
#endif
  } while( false );

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	4906      	ldr	r1, [pc, #24]	; (800140c <process_SD_card+0xc8>)
 80013f2:	2000      	movs	r0, #0
 80013f4:	f005 ffde 	bl	80073b4 <f_mount>
  printf("SD Card Unmounted Successfully!!!\r\n");
 80013f8:	480a      	ldr	r0, [pc, #40]	; (8001424 <process_SD_card+0xe0>)
 80013fa:	f006 ff0f 	bl	800821c <puts>
}
 80013fe:	bf00      	nop
 8001400:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 8001404:	3730      	adds	r7, #48	; 0x30
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	08008f08 	.word	0x08008f08
 8001410:	08008f0c 	.word	0x08008f0c
 8001414:	08008f28 	.word	0x08008f28
 8001418:	08008f38 	.word	0x08008f38
 800141c:	08008f5c 	.word	0x08008f5c
 8001420:	08008f70 	.word	0x08008f70
 8001424:	08008f88 	.word	0x08008f88

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_MspInit+0x44>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_MspInit+0x44>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6613      	str	r3, [r2, #96]	; 0x60
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_MspInit+0x44>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_MspInit+0x44>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_MspInit+0x44>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6593      	str	r3, [r2, #88]	; 0x58
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_MspInit+0x44>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b09e      	sub	sp, #120	; 0x78
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	2254      	movs	r2, #84	; 0x54
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f006 ff9d 	bl	80083dc <memset>
  if(hi2c->Instance==I2C1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <HAL_I2C_MspInit+0xa4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d135      	bne.n	8001518 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014ac:	2340      	movs	r3, #64	; 0x40
 80014ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 f80d 	bl	80034d8 <HAL_RCCEx_PeriphCLKConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014c4:	f7ff ffb0 	bl	8001428 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_I2C_MspInit+0xa8>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	4a15      	ldr	r2, [pc, #84]	; (8001524 <HAL_I2C_MspInit+0xa8>)
 80014ce:	f043 0302 	orr.w	r3, r3, #2
 80014d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_I2C_MspInit+0xa8>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014e0:	23c0      	movs	r3, #192	; 0xc0
 80014e2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e4:	2312      	movs	r3, #18
 80014e6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f0:	2304      	movs	r3, #4
 80014f2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014f8:	4619      	mov	r1, r3
 80014fa:	480b      	ldr	r0, [pc, #44]	; (8001528 <HAL_I2C_MspInit+0xac>)
 80014fc:	f000 fb62 	bl	8001bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_I2C_MspInit+0xa8>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_I2C_MspInit+0xa8>)
 8001506:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800150a:	6593      	str	r3, [r2, #88]	; 0x58
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_I2C_MspInit+0xa8>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3778      	adds	r7, #120	; 0x78
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40005400 	.word	0x40005400
 8001524:	40021000 	.word	0x40021000
 8001528:	48000400 	.word	0x48000400

0800152c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <HAL_SPI_MspInit+0x7c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d128      	bne.n	80015a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_SPI_MspInit+0x80>)
 8001550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001552:	4a16      	ldr	r2, [pc, #88]	; (80015ac <HAL_SPI_MspInit+0x80>)
 8001554:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001558:	6613      	str	r3, [r2, #96]	; 0x60
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_SPI_MspInit+0x80>)
 800155c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_SPI_MspInit+0x80>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	4a10      	ldr	r2, [pc, #64]	; (80015ac <HAL_SPI_MspInit+0x80>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_SPI_MspInit+0x80>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800157e:	23e0      	movs	r3, #224	; 0xe0
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800158e:	2305      	movs	r3, #5
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159c:	f000 fb12 	bl	8001bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	; 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40013000 	.word	0x40013000
 80015ac:	40021000 	.word	0x40021000

080015b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b09e      	sub	sp, #120	; 0x78
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	2254      	movs	r2, #84	; 0x54
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f006 ff03 	bl	80083dc <memset>
  if(huart->Instance==USART2)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a28      	ldr	r2, [pc, #160]	; (800167c <HAL_UART_MspInit+0xcc>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d148      	bne.n	8001672 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 ff73 	bl	80034d8 <HAL_RCCEx_PeriphCLKConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015f8:	f7ff ff16 	bl	8001428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015fc:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_UART_MspInit+0xd0>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	4a1f      	ldr	r2, [pc, #124]	; (8001680 <HAL_UART_MspInit+0xd0>)
 8001602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001606:	6593      	str	r3, [r2, #88]	; 0x58
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_UART_MspInit+0xd0>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_UART_MspInit+0xd0>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	4a19      	ldr	r2, [pc, #100]	; (8001680 <HAL_UART_MspInit+0xd0>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_UART_MspInit+0xd0>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800162c:	2304      	movs	r3, #4
 800162e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800163c:	2307      	movs	r3, #7
 800163e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164a:	f000 fabb 	bl	8001bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800164e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001652:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001660:	2303      	movs	r3, #3
 8001662:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001668:	4619      	mov	r1, r3
 800166a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166e:	f000 faa9 	bl	8001bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3778      	adds	r7, #120	; 0x78
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40004400 	.word	0x40004400
 8001680:	40021000 	.word	0x40021000

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <SysTick_Handler+0x34>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <SysTick_Handler+0x18>
	  Timer1--;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <SysTick_Handler+0x34>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	3b01      	subs	r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <SysTick_Handler+0x34>)
 80016e2:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <SysTick_Handler+0x38>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <SysTick_Handler+0x2c>
	  Timer2--;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <SysTick_Handler+0x38>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <SysTick_Handler+0x38>)
 80016f6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 f93a 	bl	8001970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000009c 	.word	0x2000009c
 8001704:	2000009e 	.word	0x2000009e

08001708 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	e00a      	b.n	8001730 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800171a:	f3af 8000 	nop.w
 800171e:	4601      	mov	r1, r0
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	60ba      	str	r2, [r7, #8]
 8001726:	b2ca      	uxtb	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	429a      	cmp	r2, r3
 8001736:	dbf0      	blt.n	800171a <_read+0x12>
  }

  return len;
 8001738:	687b      	ldr	r3, [r7, #4]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e009      	b.n	8001768 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	60ba      	str	r2, [r7, #8]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf1      	blt.n	8001754 <_write+0x12>
  }
  return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_close>:

int _close(int file)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a2:	605a      	str	r2, [r3, #4]
  return 0;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <_isatty>:

int _isatty(int file)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ec:	4a14      	ldr	r2, [pc, #80]	; (8001840 <_sbrk+0x5c>)
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <_sbrk+0x60>)
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <_sbrk+0x64>)
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <_sbrk+0x68>)
 8001804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	429a      	cmp	r2, r3
 8001812:	d207      	bcs.n	8001824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001814:	f006 fe30 	bl	8008478 <__errno>
 8001818:	4603      	mov	r3, r0
 800181a:	220c      	movs	r2, #12
 800181c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	e009      	b.n	8001838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	4a05      	ldr	r2, [pc, #20]	; (8001848 <_sbrk+0x64>)
 8001834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20010000 	.word	0x20010000
 8001844:	00000400 	.word	0x00000400
 8001848:	200001e4 	.word	0x200001e4
 800184c:	20000578 	.word	0x20000578

08001850 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <SystemInit+0x20>)
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <SystemInit+0x20>)
 800185c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001878:	f7ff ffea 	bl	8001850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800187c:	480c      	ldr	r0, [pc, #48]	; (80018b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800187e:	490d      	ldr	r1, [pc, #52]	; (80018b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <LoopForever+0xe>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001894:	4c0a      	ldr	r4, [pc, #40]	; (80018c0 <LoopForever+0x16>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018a2:	f006 fdef 	bl	8008484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018a6:	f7ff fb2f 	bl	8000f08 <main>

080018aa <LoopForever>:

LoopForever:
    b LoopForever
 80018aa:	e7fe      	b.n	80018aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80018b8:	080094c0 	.word	0x080094c0
  ldr r2, =_sbss
 80018bc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80018c0:	20000574 	.word	0x20000574

080018c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC1_IRQHandler>

080018c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f000 f943 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d6:	2000      	movs	r0, #0
 80018d8:	f000 f80e 	bl	80018f8 <HAL_InitTick>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	e001      	b.n	80018ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e8:	f7ff fda4 	bl	8001434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_InitTick+0x6c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d023      	beq.n	8001954 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_InitTick+0x70>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <HAL_InitTick+0x6c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191a:	fbb3 f3f1 	udiv	r3, r3, r1
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f941 	bl	8001baa <HAL_SYSTICK_Config>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10f      	bne.n	800194e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d809      	bhi.n	8001948 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f000 f919 	bl	8001b72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_InitTick+0x74>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e007      	b.n	8001958 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e004      	b.n	8001958 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e001      	b.n	8001958 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000000c 	.word	0x2000000c
 8001968:	20000004 	.word	0x20000004
 800196c:	20000008 	.word	0x20000008

08001970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_IncTick+0x20>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_IncTick+0x24>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4413      	add	r3, r2
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <HAL_IncTick+0x24>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2000000c 	.word	0x2000000c
 8001994:	200001e8 	.word	0x200001e8

08001998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_GetTick+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200001e8 	.word	0x200001e8

080019b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b8:	f7ff ffee 	bl	8001998 <HAL_GetTick>
 80019bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c8:	d005      	beq.n	80019d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_Delay+0x44>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d6:	bf00      	nop
 80019d8:	f7ff ffde 	bl	8001998 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d8f7      	bhi.n	80019d8 <HAL_Delay+0x28>
  {
  }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2000000c 	.word	0x2000000c

080019f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2a:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	60d3      	str	r3, [r2, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <__NVIC_GetPriorityGrouping+0x18>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	f003 0307 	and.w	r3, r3, #7
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f7ff ff8e 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff47 	bl	80019f8 <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff5c 	bl	8001a40 <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff8e 	bl	8001ab0 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff5d 	bl	8001a5c <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffb0 	bl	8001b18 <SysTick_Config>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd2:	e148      	b.n	8001e66 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 813a 	beq.w	8001e60 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d005      	beq.n	8001c04 <HAL_GPIO_Init+0x40>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d130      	bne.n	8001c66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	f003 0201 	and.w	r2, r3, #1
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d017      	beq.n	8001ca2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d123      	bne.n	8001cf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	08da      	lsrs	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3208      	adds	r2, #8
 8001cf0:	6939      	ldr	r1, [r7, #16]
 8001cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0203 	and.w	r2, r3, #3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8094 	beq.w	8001e60 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d38:	4b52      	ldr	r3, [pc, #328]	; (8001e84 <HAL_GPIO_Init+0x2c0>)
 8001d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3c:	4a51      	ldr	r2, [pc, #324]	; (8001e84 <HAL_GPIO_Init+0x2c0>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6613      	str	r3, [r2, #96]	; 0x60
 8001d44:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <HAL_GPIO_Init+0x2c0>)
 8001d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d50:	4a4d      	ldr	r2, [pc, #308]	; (8001e88 <HAL_GPIO_Init+0x2c4>)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3302      	adds	r3, #2
 8001d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d7a:	d00d      	beq.n	8001d98 <HAL_GPIO_Init+0x1d4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a43      	ldr	r2, [pc, #268]	; (8001e8c <HAL_GPIO_Init+0x2c8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d007      	beq.n	8001d94 <HAL_GPIO_Init+0x1d0>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a42      	ldr	r2, [pc, #264]	; (8001e90 <HAL_GPIO_Init+0x2cc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d101      	bne.n	8001d90 <HAL_GPIO_Init+0x1cc>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e004      	b.n	8001d9a <HAL_GPIO_Init+0x1d6>
 8001d90:	2307      	movs	r3, #7
 8001d92:	e002      	b.n	8001d9a <HAL_GPIO_Init+0x1d6>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_GPIO_Init+0x1d6>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	f002 0203 	and.w	r2, r2, #3
 8001da0:	0092      	lsls	r2, r2, #2
 8001da2:	4093      	lsls	r3, r2
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001daa:	4937      	ldr	r1, [pc, #220]	; (8001e88 <HAL_GPIO_Init+0x2c4>)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001db8:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <HAL_GPIO_Init+0x2d0>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ddc:	4a2d      	ldr	r2, [pc, #180]	; (8001e94 <HAL_GPIO_Init+0x2d0>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001de2:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <HAL_GPIO_Init+0x2d0>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e06:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <HAL_GPIO_Init+0x2d0>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e30:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <HAL_GPIO_Init+0x2d0>)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_GPIO_Init+0x2d0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e5a:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <HAL_GPIO_Init+0x2d0>)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3301      	adds	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f47f aeaf 	bne.w	8001bd4 <HAL_GPIO_Init+0x10>
  }
}
 8001e76:	bf00      	nop
 8001e78:	bf00      	nop
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	48000800 	.word	0x48000800
 8001e94:	40010400 	.word	0x40010400

08001e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea8:	787b      	ldrb	r3, [r7, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb4:	e002      	b.n	8001ebc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eb6:	887a      	ldrh	r2, [r7, #2]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e08d      	b.n	8001ff6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff fac4 	bl	800147c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2224      	movs	r2, #36	; 0x24
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d107      	bne.n	8001f42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	e006      	b.n	8001f50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d108      	bne.n	8001f6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	e007      	b.n	8001f7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69d9      	ldr	r1, [r3, #28]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1a      	ldr	r2, [r3, #32]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	461a      	mov	r2, r3
 800200c:	460b      	mov	r3, r1
 800200e:	817b      	strh	r3, [r7, #10]
 8002010:	4613      	mov	r3, r2
 8002012:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b20      	cmp	r3, #32
 800201e:	f040 80fd 	bne.w	800221c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_I2C_Master_Transmit+0x30>
 800202c:	2302      	movs	r3, #2
 800202e:	e0f6      	b.n	800221e <HAL_I2C_Master_Transmit+0x21e>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002038:	f7ff fcae 	bl	8001998 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2319      	movs	r3, #25
 8002044:	2201      	movs	r2, #1
 8002046:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f914 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0e1      	b.n	800221e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2221      	movs	r2, #33	; 0x21
 800205e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2210      	movs	r2, #16
 8002066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	893a      	ldrh	r2, [r7, #8]
 800207a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	2bff      	cmp	r3, #255	; 0xff
 800208a:	d906      	bls.n	800209a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	22ff      	movs	r2, #255	; 0xff
 8002090:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002092:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	e007      	b.n	80020aa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80020a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d024      	beq.n	80020fc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	8979      	ldrh	r1, [r7, #10]
 80020ee:	4b4e      	ldr	r3, [pc, #312]	; (8002228 <HAL_I2C_Master_Transmit+0x228>)
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fa79 	bl	80025ec <I2C_TransferConfig>
 80020fa:	e066      	b.n	80021ca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	b2da      	uxtb	r2, r3
 8002102:	8979      	ldrh	r1, [r7, #10]
 8002104:	4b48      	ldr	r3, [pc, #288]	; (8002228 <HAL_I2C_Master_Transmit+0x228>)
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fa6e 	bl	80025ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002110:	e05b      	b.n	80021ca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	6a39      	ldr	r1, [r7, #32]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f8fd 	bl	8002316 <I2C_WaitOnTXISFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e07b      	b.n	800221e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d034      	beq.n	80021ca <HAL_I2C_Master_Transmit+0x1ca>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002164:	2b00      	cmp	r3, #0
 8002166:	d130      	bne.n	80021ca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	2200      	movs	r2, #0
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 f880 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e04d      	b.n	800221e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	2bff      	cmp	r3, #255	; 0xff
 800218a:	d90e      	bls.n	80021aa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	22ff      	movs	r2, #255	; 0xff
 8002190:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002196:	b2da      	uxtb	r2, r3
 8002198:	8979      	ldrh	r1, [r7, #10]
 800219a:	2300      	movs	r3, #0
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 fa22 	bl	80025ec <I2C_TransferConfig>
 80021a8:	e00f      	b.n	80021ca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	8979      	ldrh	r1, [r7, #10]
 80021bc:	2300      	movs	r3, #0
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 fa11 	bl	80025ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d19e      	bne.n	8002112 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	6a39      	ldr	r1, [r7, #32]
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f8e3 	bl	80023a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e01a      	b.n	800221e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2220      	movs	r2, #32
 80021ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6859      	ldr	r1, [r3, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <HAL_I2C_Master_Transmit+0x22c>)
 80021fc:	400b      	ands	r3, r1
 80021fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	e000      	b.n	800221e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800221c:	2302      	movs	r3, #2
  }
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	80002000 	.word	0x80002000
 800222c:	fe00e800 	.word	0xfe00e800

08002230 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d103      	bne.n	800224e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2200      	movs	r2, #0
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b01      	cmp	r3, #1
 800225a:	d007      	beq.n	800226c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	619a      	str	r2, [r3, #24]
  }
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002288:	e031      	b.n	80022ee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d02d      	beq.n	80022ee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002292:	f7ff fb81 	bl	8001998 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d302      	bcc.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d122      	bne.n	80022ee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	4013      	ands	r3, r2
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	bf0c      	ite	eq
 80022b8:	2301      	moveq	r3, #1
 80022ba:	2300      	movne	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d113      	bne.n	80022ee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699a      	ldr	r2, [r3, #24]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4013      	ands	r3, r2
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	bf0c      	ite	eq
 80022fe:	2301      	moveq	r3, #1
 8002300:	2300      	movne	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	429a      	cmp	r2, r3
 800230a:	d0be      	beq.n	800228a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002322:	e033      	b.n	800238c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f87f 	bl	800242c <I2C_IsErrorOccurred>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e031      	b.n	800239c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d025      	beq.n	800238c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002340:	f7ff fb2a 	bl	8001998 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	429a      	cmp	r2, r3
 800234e:	d302      	bcc.n	8002356 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d11a      	bne.n	800238c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b02      	cmp	r3, #2
 8002362:	d013      	beq.n	800238c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e007      	b.n	800239c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b02      	cmp	r3, #2
 8002398:	d1c4      	bne.n	8002324 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023b0:	e02f      	b.n	8002412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f838 	bl	800242c <I2C_IsErrorOccurred>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e02d      	b.n	8002422 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c6:	f7ff fae7 	bl	8001998 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d302      	bcc.n	80023dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d11a      	bne.n	8002412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	d013      	beq.n	8002412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	f043 0220 	orr.w	r2, r3, #32
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e007      	b.n	8002422 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b20      	cmp	r3, #32
 800241e:	d1c8      	bne.n	80023b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	; 0x28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d068      	beq.n	800252a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2210      	movs	r2, #16
 800245e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002460:	e049      	b.n	80024f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002468:	d045      	beq.n	80024f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800246a:	f7ff fa95 	bl	8001998 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	429a      	cmp	r2, r3
 8002478:	d302      	bcc.n	8002480 <I2C_IsErrorOccurred+0x54>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d13a      	bne.n	80024f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002492:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800249e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a2:	d121      	bne.n	80024e8 <I2C_IsErrorOccurred+0xbc>
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024aa:	d01d      	beq.n	80024e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d01a      	beq.n	80024e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80024c2:	f7ff fa69 	bl	8001998 <HAL_GetTick>
 80024c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024c8:	e00e      	b.n	80024e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024ca:	f7ff fa65 	bl	8001998 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b19      	cmp	r3, #25
 80024d6:	d907      	bls.n	80024e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	f043 0320 	orr.w	r3, r3, #32
 80024de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80024e6:	e006      	b.n	80024f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d1e9      	bne.n	80024ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b20      	cmp	r3, #32
 8002502:	d003      	beq.n	800250c <I2C_IsErrorOccurred+0xe0>
 8002504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0aa      	beq.n	8002462 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800250c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2220      	movs	r2, #32
 800251a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00b      	beq.n	8002554 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800254c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00b      	beq.n	8002576 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	f043 0308 	orr.w	r3, r3, #8
 8002564:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800256e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00b      	beq.n	8002598 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	f043 0302 	orr.w	r3, r3, #2
 8002586:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002590:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01c      	beq.n	80025da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7ff fe45 	bl	8002230 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <I2C_IsErrorOccurred+0x1bc>)
 80025b2:	400b      	ands	r3, r1
 80025b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	431a      	orrs	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80025da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3728      	adds	r7, #40	; 0x28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	fe00e800 	.word	0xfe00e800

080025ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	817b      	strh	r3, [r7, #10]
 80025fa:	4613      	mov	r3, r2
 80025fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025fe:	897b      	ldrh	r3, [r7, #10]
 8002600:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002604:	7a7b      	ldrb	r3, [r7, #9]
 8002606:	041b      	lsls	r3, r3, #16
 8002608:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800260c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	4313      	orrs	r3, r2
 8002616:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800261a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	0d5b      	lsrs	r3, r3, #21
 8002626:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <I2C_TransferConfig+0x60>)
 800262c:	430b      	orrs	r3, r1
 800262e:	43db      	mvns	r3, r3
 8002630:	ea02 0103 	and.w	r1, r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800263e:	bf00      	nop
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	03ff63ff 	.word	0x03ff63ff

08002650 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b20      	cmp	r3, #32
 8002664:	d138      	bne.n	80026d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002670:	2302      	movs	r3, #2
 8002672:	e032      	b.n	80026da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2224      	movs	r2, #36	; 0x24
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	e000      	b.n	80026da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026d8:	2302      	movs	r3, #2
  }
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d139      	bne.n	8002770 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002706:	2302      	movs	r3, #2
 8002708:	e033      	b.n	8002772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2224      	movs	r2, #36	; 0x24
 8002716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002738:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	e000      	b.n	8002772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002770:	2302      	movs	r3, #2
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a04      	ldr	r2, [pc, #16]	; (800279c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800278a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40007000 	.word	0x40007000

080027a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40007000 	.word	0x40007000

080027bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ca:	d130      	bne.n	800282e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027cc:	4b23      	ldr	r3, [pc, #140]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d8:	d038      	beq.n	800284c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027e2:	4a1e      	ldr	r2, [pc, #120]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2232      	movs	r2, #50	; 0x32
 80027f0:	fb02 f303 	mul.w	r3, r2, r3
 80027f4:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0c9b      	lsrs	r3, r3, #18
 80027fc:	3301      	adds	r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002800:	e002      	b.n	8002808 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3b01      	subs	r3, #1
 8002806:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002814:	d102      	bne.n	800281c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f2      	bne.n	8002802 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002828:	d110      	bne.n	800284c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e00f      	b.n	800284e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283a:	d007      	beq.n	800284c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800283c:	4b07      	ldr	r3, [pc, #28]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002844:	4a05      	ldr	r2, [pc, #20]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800284a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40007000 	.word	0x40007000
 8002860:	20000004 	.word	0x20000004
 8002864:	431bde83 	.word	0x431bde83

08002868 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	f000 bc02 	b.w	8003080 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800287c:	4b96      	ldr	r3, [pc, #600]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002886:	4b94      	ldr	r3, [pc, #592]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80e4 	beq.w	8002a66 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <HAL_RCC_OscConfig+0x4c>
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2b0c      	cmp	r3, #12
 80028a8:	f040 808b 	bne.w	80029c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	f040 8087 	bne.w	80029c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028b4:	4b88      	ldr	r3, [pc, #544]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_OscConfig+0x64>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e3d9      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	4b81      	ldr	r3, [pc, #516]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <HAL_RCC_OscConfig+0x7e>
 80028dc:	4b7e      	ldr	r3, [pc, #504]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e4:	e005      	b.n	80028f2 <HAL_RCC_OscConfig+0x8a>
 80028e6:	4b7c      	ldr	r3, [pc, #496]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 80028e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d223      	bcs.n	800293e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fd8c 	bl	8003418 <RCC_SetFlashLatencyFromMSIRange>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e3ba      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800290a:	4b73      	ldr	r3, [pc, #460]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a72      	ldr	r2, [pc, #456]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002910:	f043 0308 	orr.w	r3, r3, #8
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b70      	ldr	r3, [pc, #448]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	496d      	ldr	r1, [pc, #436]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002924:	4313      	orrs	r3, r2
 8002926:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002928:	4b6b      	ldr	r3, [pc, #428]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	4968      	ldr	r1, [pc, #416]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
 800293c:	e025      	b.n	800298a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800293e:	4b66      	ldr	r3, [pc, #408]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a65      	ldr	r2, [pc, #404]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002944:	f043 0308 	orr.w	r3, r3, #8
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4b63      	ldr	r3, [pc, #396]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	4960      	ldr	r1, [pc, #384]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002958:	4313      	orrs	r3, r2
 800295a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800295c:	4b5e      	ldr	r3, [pc, #376]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	495b      	ldr	r1, [pc, #364]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fd4c 	bl	8003418 <RCC_SetFlashLatencyFromMSIRange>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e37a      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800298a:	f000 fc81 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 800298e:	4602      	mov	r2, r0
 8002990:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	4950      	ldr	r1, [pc, #320]	; (8002adc <HAL_RCC_OscConfig+0x274>)
 800299c:	5ccb      	ldrb	r3, [r1, r3]
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	fa22 f303 	lsr.w	r3, r2, r3
 80029a6:	4a4e      	ldr	r2, [pc, #312]	; (8002ae0 <HAL_RCC_OscConfig+0x278>)
 80029a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029aa:	4b4e      	ldr	r3, [pc, #312]	; (8002ae4 <HAL_RCC_OscConfig+0x27c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe ffa2 	bl	80018f8 <HAL_InitTick>
 80029b4:	4603      	mov	r3, r0
 80029b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d052      	beq.n	8002a64 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	e35e      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d032      	beq.n	8002a30 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029ca:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a42      	ldr	r2, [pc, #264]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029d6:	f7fe ffdf 	bl	8001998 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029de:	f7fe ffdb 	bl	8001998 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e347      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029f0:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029fc:	4b36      	ldr	r3, [pc, #216]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a35      	ldr	r2, [pc, #212]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	4930      	ldr	r1, [pc, #192]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	492b      	ldr	r1, [pc, #172]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
 8002a2e:	e01a      	b.n	8002a66 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a30:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a28      	ldr	r2, [pc, #160]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe ffac 	bl	8001998 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a44:	f7fe ffa8 	bl	8001998 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e314      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x1dc>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d073      	beq.n	8002b5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_OscConfig+0x21c>
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	d10e      	bne.n	8002a9c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d10b      	bne.n	8002a9c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d063      	beq.n	8002b58 <HAL_RCC_OscConfig+0x2f0>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d15f      	bne.n	8002b58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e2f1      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa4:	d106      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e025      	b.n	8002b00 <HAL_RCC_OscConfig+0x298>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002abc:	d114      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x280>
 8002abe:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a02      	ldr	r2, [pc, #8]	; (8002ad8 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e013      	b.n	8002b00 <HAL_RCC_OscConfig+0x298>
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08008ff4 	.word	0x08008ff4
 8002ae0:	20000004 	.word	0x20000004
 8002ae4:	20000008 	.word	0x20000008
 8002ae8:	4ba0      	ldr	r3, [pc, #640]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a9f      	ldr	r2, [pc, #636]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b9d      	ldr	r3, [pc, #628]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a9c      	ldr	r2, [pc, #624]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe ff46 	bl	8001998 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe ff42 	bl	8001998 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e2ae      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b22:	4b92      	ldr	r3, [pc, #584]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x2a8>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe ff32 	bl	8001998 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe ff2e 	bl	8001998 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e29a      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b4a:	4b88      	ldr	r3, [pc, #544]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x2d0>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d060      	beq.n	8002c28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_OscConfig+0x310>
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d119      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d116      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b78:	4b7c      	ldr	r3, [pc, #496]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_OscConfig+0x328>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e277      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b90:	4b76      	ldr	r3, [pc, #472]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	061b      	lsls	r3, r3, #24
 8002b9e:	4973      	ldr	r1, [pc, #460]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba4:	e040      	b.n	8002c28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d023      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bae:	4b6f      	ldr	r3, [pc, #444]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a6e      	ldr	r2, [pc, #440]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bba:	f7fe feed 	bl	8001998 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc2:	f7fe fee9 	bl	8001998 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e255      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd4:	4b65      	ldr	r3, [pc, #404]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be0:	4b62      	ldr	r3, [pc, #392]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	495f      	ldr	r1, [pc, #380]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
 8002bf4:	e018      	b.n	8002c28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf6:	4b5d      	ldr	r3, [pc, #372]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a5c      	ldr	r2, [pc, #368]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c02:	f7fe fec9 	bl	8001998 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0a:	f7fe fec5 	bl	8001998 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e231      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c1c:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f0      	bne.n	8002c0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d03c      	beq.n	8002cae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01c      	beq.n	8002c76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3c:	4b4b      	ldr	r3, [pc, #300]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c42:	4a4a      	ldr	r2, [pc, #296]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4c:	f7fe fea4 	bl	8001998 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c54:	f7fe fea0 	bl	8001998 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e20c      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c66:	4b41      	ldr	r3, [pc, #260]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ef      	beq.n	8002c54 <HAL_RCC_OscConfig+0x3ec>
 8002c74:	e01b      	b.n	8002cae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c76:	4b3d      	ldr	r3, [pc, #244]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7c:	4a3b      	ldr	r2, [pc, #236]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c86:	f7fe fe87 	bl	8001998 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8e:	f7fe fe83 	bl	8001998 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e1ef      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca0:	4b32      	ldr	r3, [pc, #200]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1ef      	bne.n	8002c8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80a6 	beq.w	8002e08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cc0:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10d      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ccc:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd0:	4a26      	ldr	r2, [pc, #152]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd8:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <HAL_RCC_OscConfig+0x508>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d118      	bne.n	8002d26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cf4:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <HAL_RCC_OscConfig+0x508>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <HAL_RCC_OscConfig+0x508>)
 8002cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d00:	f7fe fe4a 	bl	8001998 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d08:	f7fe fe46 	bl	8001998 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e1b2      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <HAL_RCC_OscConfig+0x508>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d108      	bne.n	8002d40 <HAL_RCC_OscConfig+0x4d8>
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	4a0d      	ldr	r2, [pc, #52]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d3e:	e029      	b.n	8002d94 <HAL_RCC_OscConfig+0x52c>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d115      	bne.n	8002d74 <HAL_RCC_OscConfig+0x50c>
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	4a03      	ldr	r2, [pc, #12]	; (8002d6c <HAL_RCC_OscConfig+0x504>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d68:	e014      	b.n	8002d94 <HAL_RCC_OscConfig+0x52c>
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40007000 	.word	0x40007000
 8002d74:	4b9a      	ldr	r3, [pc, #616]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	4a99      	ldr	r2, [pc, #612]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d84:	4b96      	ldr	r3, [pc, #600]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8a:	4a95      	ldr	r2, [pc, #596]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d016      	beq.n	8002dca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9c:	f7fe fdfc 	bl	8001998 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da4:	f7fe fdf8 	bl	8001998 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e162      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dba:	4b89      	ldr	r3, [pc, #548]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0ed      	beq.n	8002da4 <HAL_RCC_OscConfig+0x53c>
 8002dc8:	e015      	b.n	8002df6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dca:	f7fe fde5 	bl	8001998 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd2:	f7fe fde1 	bl	8001998 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e14b      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002de8:	4b7d      	ldr	r3, [pc, #500]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1ed      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df6:	7ffb      	ldrb	r3, [r7, #31]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d105      	bne.n	8002e08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfc:	4b78      	ldr	r3, [pc, #480]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	4a77      	ldr	r2, [pc, #476]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d03c      	beq.n	8002e8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01c      	beq.n	8002e56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e1c:	4b70      	ldr	r3, [pc, #448]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e22:	4a6f      	ldr	r2, [pc, #444]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2c:	f7fe fdb4 	bl	8001998 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e34:	f7fe fdb0 	bl	8001998 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e11c      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e46:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002e48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ef      	beq.n	8002e34 <HAL_RCC_OscConfig+0x5cc>
 8002e54:	e01b      	b.n	8002e8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e56:	4b62      	ldr	r3, [pc, #392]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e5c:	4a60      	ldr	r2, [pc, #384]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e66:	f7fe fd97 	bl	8001998 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e6e:	f7fe fd93 	bl	8001998 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e0ff      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e80:	4b57      	ldr	r3, [pc, #348]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ef      	bne.n	8002e6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80f3 	beq.w	800307e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	f040 80c9 	bne.w	8003034 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ea2:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f003 0203 	and.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d12c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d123      	bne.n	8002f10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d11b      	bne.n	8002f10 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d113      	bne.n	8002f10 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	085b      	lsrs	r3, r3, #1
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d109      	bne.n	8002f10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d06b      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b0c      	cmp	r3, #12
 8002f14:	d062      	beq.n	8002fdc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f16:	4b32      	ldr	r3, [pc, #200]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0ac      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f26:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a2d      	ldr	r2, [pc, #180]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f32:	f7fe fd31 	bl	8001998 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fe fd2d 	bl	8001998 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e099      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f4c:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f58:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <HAL_RCC_OscConfig+0x77c>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f68:	3a01      	subs	r2, #1
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	4311      	orrs	r1, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f72:	0212      	lsls	r2, r2, #8
 8002f74:	4311      	orrs	r1, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f7a:	0852      	lsrs	r2, r2, #1
 8002f7c:	3a01      	subs	r2, #1
 8002f7e:	0552      	lsls	r2, r2, #21
 8002f80:	4311      	orrs	r1, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f86:	0852      	lsrs	r2, r2, #1
 8002f88:	3a01      	subs	r2, #1
 8002f8a:	0652      	lsls	r2, r2, #25
 8002f8c:	4311      	orrs	r1, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f92:	06d2      	lsls	r2, r2, #27
 8002f94:	430a      	orrs	r2, r1
 8002f96:	4912      	ldr	r1, [pc, #72]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fa8:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fb4:	f7fe fcf0 	bl	8001998 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe fcec 	bl	8001998 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e058      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fce:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <HAL_RCC_OscConfig+0x778>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fda:	e050      	b.n	800307e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e04f      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCC_OscConfig+0x820>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d144      	bne.n	800307e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b24      	ldr	r3, [pc, #144]	; (8003088 <HAL_RCC_OscConfig+0x820>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a23      	ldr	r2, [pc, #140]	; (8003088 <HAL_RCC_OscConfig+0x820>)
 8002ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003000:	4b21      	ldr	r3, [pc, #132]	; (8003088 <HAL_RCC_OscConfig+0x820>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a20      	ldr	r2, [pc, #128]	; (8003088 <HAL_RCC_OscConfig+0x820>)
 8003006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800300c:	f7fe fcc4 	bl	8001998 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe fcc0 	bl	8001998 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e02c      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003026:	4b18      	ldr	r3, [pc, #96]	; (8003088 <HAL_RCC_OscConfig+0x820>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x7ac>
 8003032:	e024      	b.n	800307e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b0c      	cmp	r3, #12
 8003038:	d01f      	beq.n	800307a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <HAL_RCC_OscConfig+0x820>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <HAL_RCC_OscConfig+0x820>)
 8003040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003046:	f7fe fca7 	bl	8001998 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304e:	f7fe fca3 	bl	8001998 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e00f      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <HAL_RCC_OscConfig+0x820>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_RCC_OscConfig+0x820>)
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	4905      	ldr	r1, [pc, #20]	; (8003088 <HAL_RCC_OscConfig+0x820>)
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_RCC_OscConfig+0x824>)
 8003074:	4013      	ands	r3, r2
 8003076:	60cb      	str	r3, [r1, #12]
 8003078:	e001      	b.n	800307e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	feeefffc 	.word	0xfeeefffc

08003090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0e7      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a4:	4b75      	ldr	r3, [pc, #468]	; (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d910      	bls.n	80030d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b72      	ldr	r3, [pc, #456]	; (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 0207 	bic.w	r2, r3, #7
 80030ba:	4970      	ldr	r1, [pc, #448]	; (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	4313      	orrs	r3, r2
 80030c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	4b6e      	ldr	r3, [pc, #440]	; (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0cf      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d010      	beq.n	8003102 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	4b66      	ldr	r3, [pc, #408]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d908      	bls.n	8003102 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f0:	4b63      	ldr	r3, [pc, #396]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4960      	ldr	r1, [pc, #384]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d04c      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003116:	4b5a      	ldr	r3, [pc, #360]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d121      	bne.n	8003166 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0a6      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800312e:	4b54      	ldr	r3, [pc, #336]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d115      	bne.n	8003166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e09a      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003146:	4b4e      	ldr	r3, [pc, #312]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e08e      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003156:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e086      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003166:	4b46      	ldr	r3, [pc, #280]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f023 0203 	bic.w	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4943      	ldr	r1, [pc, #268]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003178:	f7fe fc0e 	bl	8001998 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	e00a      	b.n	8003196 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003180:	f7fe fc0a 	bl	8001998 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e06e      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	4b3a      	ldr	r3, [pc, #232]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 020c 	and.w	r2, r3, #12
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d1eb      	bne.n	8003180 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d010      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	4b31      	ldr	r3, [pc, #196]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d208      	bcs.n	80031d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c4:	4b2e      	ldr	r3, [pc, #184]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	492b      	ldr	r1, [pc, #172]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d6:	4b29      	ldr	r3, [pc, #164]	; (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d210      	bcs.n	8003206 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e4:	4b25      	ldr	r3, [pc, #148]	; (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 0207 	bic.w	r2, r3, #7
 80031ec:	4923      	ldr	r1, [pc, #140]	; (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f4:	4b21      	ldr	r3, [pc, #132]	; (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d001      	beq.n	8003206 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e036      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	4918      	ldr	r1, [pc, #96]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	4313      	orrs	r3, r2
 8003222:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d009      	beq.n	8003244 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003230:	4b13      	ldr	r3, [pc, #76]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4910      	ldr	r1, [pc, #64]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	4313      	orrs	r3, r2
 8003242:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003244:	f000 f824 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	490b      	ldr	r1, [pc, #44]	; (8003284 <HAL_RCC_ClockConfig+0x1f4>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	4a09      	ldr	r2, [pc, #36]	; (8003288 <HAL_RCC_ClockConfig+0x1f8>)
 8003262:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_RCC_ClockConfig+0x1fc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe fb45 	bl	80018f8 <HAL_InitTick>
 800326e:	4603      	mov	r3, r0
 8003270:	72fb      	strb	r3, [r7, #11]

  return status;
 8003272:	7afb      	ldrb	r3, [r7, #11]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40022000 	.word	0x40022000
 8003280:	40021000 	.word	0x40021000
 8003284:	08008ff4 	.word	0x08008ff4
 8003288:	20000004 	.word	0x20000004
 800328c:	20000008 	.word	0x20000008

08003290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003290:	b480      	push	{r7}
 8003292:	b089      	sub	sp, #36	; 0x24
 8003294:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800329e:	4b3e      	ldr	r3, [pc, #248]	; (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032a8:	4b3b      	ldr	r3, [pc, #236]	; (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x34>
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d121      	bne.n	8003302 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d11e      	bne.n	8003302 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032c4:	4b34      	ldr	r3, [pc, #208]	; (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032d0:	4b31      	ldr	r3, [pc, #196]	; (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	e005      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032e0:	4b2d      	ldr	r3, [pc, #180]	; (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032ec:	4a2b      	ldr	r2, [pc, #172]	; (800339c <HAL_RCC_GetSysClockFreq+0x10c>)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10d      	bne.n	8003318 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b04      	cmp	r3, #4
 8003306:	d102      	bne.n	800330e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003308:	4b25      	ldr	r3, [pc, #148]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	e004      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d101      	bne.n	8003318 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003314:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003316:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d134      	bne.n	8003388 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800331e:	4b1e      	ldr	r3, [pc, #120]	; (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d003      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0xa6>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b03      	cmp	r3, #3
 8003332:	d003      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0xac>
 8003334:	e005      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003336:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003338:	617b      	str	r3, [r7, #20]
      break;
 800333a:	e005      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800333e:	617b      	str	r3, [r7, #20]
      break;
 8003340:	e002      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	617b      	str	r3, [r7, #20]
      break;
 8003346:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003348:	4b13      	ldr	r3, [pc, #76]	; (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	3301      	adds	r3, #1
 8003354:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	fb03 f202 	mul.w	r2, r3, r2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	fbb2 f3f3 	udiv	r3, r2, r3
 800336c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	0e5b      	lsrs	r3, r3, #25
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	3301      	adds	r3, #1
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003388:	69bb      	ldr	r3, [r7, #24]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3724      	adds	r7, #36	; 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	0800900c 	.word	0x0800900c
 80033a0:	00f42400 	.word	0x00f42400
 80033a4:	007a1200 	.word	0x007a1200

080033a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000004 	.word	0x20000004

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033c4:	f7ff fff0 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4904      	ldr	r1, [pc, #16]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	08009004 	.word	0x08009004

080033ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033f0:	f7ff ffda 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	0adb      	lsrs	r3, r3, #11
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	4904      	ldr	r1, [pc, #16]	; (8003414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000
 8003414:	08009004 	.word	0x08009004

08003418 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003424:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003430:	f7ff f9b6 	bl	80027a0 <HAL_PWREx_GetVoltageRange>
 8003434:	6178      	str	r0, [r7, #20]
 8003436:	e014      	b.n	8003462 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003438:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	4a24      	ldr	r2, [pc, #144]	; (80034d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800343e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003442:	6593      	str	r3, [r2, #88]	; 0x58
 8003444:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003450:	f7ff f9a6 	bl	80027a0 <HAL_PWREx_GetVoltageRange>
 8003454:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	4a1d      	ldr	r2, [pc, #116]	; (80034d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003460:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003468:	d10b      	bne.n	8003482 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b80      	cmp	r3, #128	; 0x80
 800346e:	d919      	bls.n	80034a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2ba0      	cmp	r3, #160	; 0xa0
 8003474:	d902      	bls.n	800347c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003476:	2302      	movs	r3, #2
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	e013      	b.n	80034a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800347c:	2301      	movs	r3, #1
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	e010      	b.n	80034a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d902      	bls.n	800348e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003488:	2303      	movs	r3, #3
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	e00a      	b.n	80034a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b80      	cmp	r3, #128	; 0x80
 8003492:	d102      	bne.n	800349a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003494:	2302      	movs	r3, #2
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	e004      	b.n	80034a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b70      	cmp	r3, #112	; 0x70
 800349e:	d101      	bne.n	80034a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034a0:	2301      	movs	r3, #1
 80034a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 0207 	bic.w	r2, r3, #7
 80034ac:	4909      	ldr	r1, [pc, #36]	; (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034b4:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d001      	beq.n	80034c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40022000 	.word	0x40022000

080034d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034e0:	2300      	movs	r3, #0
 80034e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034e4:	2300      	movs	r3, #0
 80034e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d031      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034fc:	d01a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80034fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003502:	d814      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d009      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003508:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800350c:	d10f      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800350e:	4b5d      	ldr	r3, [pc, #372]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	4a5c      	ldr	r2, [pc, #368]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003518:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800351a:	e00c      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f9de 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800352c:	e003      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	74fb      	strb	r3, [r7, #19]
      break;
 8003532:	e000      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800353c:	4b51      	ldr	r3, [pc, #324]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354a:	494e      	ldr	r1, [pc, #312]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003552:	e001      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 809e 	beq.w	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003566:	2300      	movs	r3, #0
 8003568:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800356a:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800357a:	2300      	movs	r3, #0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00d      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003580:	4b40      	ldr	r3, [pc, #256]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	4a3f      	ldr	r2, [pc, #252]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358a:	6593      	str	r3, [r2, #88]	; 0x58
 800358c:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003598:	2301      	movs	r3, #1
 800359a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359c:	4b3a      	ldr	r3, [pc, #232]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a39      	ldr	r2, [pc, #228]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035a8:	f7fe f9f6 	bl	8001998 <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035ae:	e009      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b0:	f7fe f9f2 	bl	8001998 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d902      	bls.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	74fb      	strb	r3, [r7, #19]
        break;
 80035c2:	e005      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035c4:	4b30      	ldr	r3, [pc, #192]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0ef      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d15a      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035d6:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01e      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d019      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035fe:	4b21      	ldr	r3, [pc, #132]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800360e:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	4a1b      	ldr	r2, [pc, #108]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800361e:	4a19      	ldr	r2, [pc, #100]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d016      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fe f9b2 	bl	8001998 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003636:	e00b      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003638:	f7fe f9ae 	bl	8001998 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d902      	bls.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	74fb      	strb	r3, [r7, #19]
            break;
 800364e:	e006      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ec      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003664:	4b07      	ldr	r3, [pc, #28]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003672:	4904      	ldr	r1, [pc, #16]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800367a:	e009      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800367c:	7cfb      	ldrb	r3, [r7, #19]
 800367e:	74bb      	strb	r3, [r7, #18]
 8003680:	e006      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000
 8003688:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003690:	7c7b      	ldrb	r3, [r7, #17]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d105      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003696:	4b8a      	ldr	r3, [pc, #552]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	4a89      	ldr	r2, [pc, #548]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800369c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ae:	4b84      	ldr	r3, [pc, #528]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	f023 0203 	bic.w	r2, r3, #3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4980      	ldr	r1, [pc, #512]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036d0:	4b7b      	ldr	r3, [pc, #492]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d6:	f023 020c 	bic.w	r2, r3, #12
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	4978      	ldr	r1, [pc, #480]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036f2:	4b73      	ldr	r3, [pc, #460]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003700:	496f      	ldr	r1, [pc, #444]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003714:	4b6a      	ldr	r3, [pc, #424]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003722:	4967      	ldr	r1, [pc, #412]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003736:	4b62      	ldr	r3, [pc, #392]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	495e      	ldr	r1, [pc, #376]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003758:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	4956      	ldr	r1, [pc, #344]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800377a:	4b51      	ldr	r3, [pc, #324]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003780:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	494d      	ldr	r1, [pc, #308]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d028      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800379c:	4b48      	ldr	r3, [pc, #288]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4945      	ldr	r1, [pc, #276]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ba:	d106      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037bc:	4b40      	ldr	r3, [pc, #256]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4a3f      	ldr	r2, [pc, #252]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037c6:	60d3      	str	r3, [r2, #12]
 80037c8:	e011      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037d2:	d10c      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3304      	adds	r3, #4
 80037d8:	2101      	movs	r1, #1
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f882 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 80037e0:	4603      	mov	r3, r0
 80037e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037e4:	7cfb      	ldrb	r3, [r7, #19]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80037ea:	7cfb      	ldrb	r3, [r7, #19]
 80037ec:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d028      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037fa:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003800:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	492d      	ldr	r1, [pc, #180]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003818:	d106      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800381a:	4b29      	ldr	r3, [pc, #164]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	4a28      	ldr	r2, [pc, #160]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003820:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003824:	60d3      	str	r3, [r2, #12]
 8003826:	e011      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003830:	d10c      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3304      	adds	r3, #4
 8003836:	2101      	movs	r1, #1
 8003838:	4618      	mov	r0, r3
 800383a:	f000 f853 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003842:	7cfb      	ldrb	r3, [r7, #19]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01c      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003866:	4916      	ldr	r1, [pc, #88]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003876:	d10c      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3304      	adds	r3, #4
 800387c:	2102      	movs	r1, #2
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f830 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003888:	7cfb      	ldrb	r3, [r7, #19]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800388e:	7cfb      	ldrb	r3, [r7, #19]
 8003890:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800389e:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ac:	4904      	ldr	r1, [pc, #16]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000

080038c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038ce:	f043 0304 	orr.w	r3, r3, #4
 80038d2:	6013      	str	r3, [r2, #0]
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000

080038e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038f2:	4b74      	ldr	r3, [pc, #464]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d018      	beq.n	8003930 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038fe:	4b71      	ldr	r3, [pc, #452]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0203 	and.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d10d      	bne.n	800392a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
       ||
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003916:	4b6b      	ldr	r3, [pc, #428]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
       ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d047      	beq.n	80039ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
 800392e:	e044      	b.n	80039ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d018      	beq.n	800396a <RCCEx_PLLSAI1_Config+0x86>
 8003938:	2b03      	cmp	r3, #3
 800393a:	d825      	bhi.n	8003988 <RCCEx_PLLSAI1_Config+0xa4>
 800393c:	2b01      	cmp	r3, #1
 800393e:	d002      	beq.n	8003946 <RCCEx_PLLSAI1_Config+0x62>
 8003940:	2b02      	cmp	r3, #2
 8003942:	d009      	beq.n	8003958 <RCCEx_PLLSAI1_Config+0x74>
 8003944:	e020      	b.n	8003988 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003946:	4b5f      	ldr	r3, [pc, #380]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d11d      	bne.n	800398e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003956:	e01a      	b.n	800398e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003958:	4b5a      	ldr	r3, [pc, #360]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d116      	bne.n	8003992 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003968:	e013      	b.n	8003992 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800396a:	4b56      	ldr	r3, [pc, #344]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10f      	bne.n	8003996 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003976:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003986:	e006      	b.n	8003996 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      break;
 800398c:	e004      	b.n	8003998 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800398e:	bf00      	nop
 8003990:	e002      	b.n	8003998 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003996:	bf00      	nop
    }

    if(status == HAL_OK)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10d      	bne.n	80039ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800399e:	4b49      	ldr	r3, [pc, #292]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6819      	ldr	r1, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	430b      	orrs	r3, r1
 80039b4:	4943      	ldr	r1, [pc, #268]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d17c      	bne.n	8003aba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039c0:	4b40      	ldr	r3, [pc, #256]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a3f      	ldr	r2, [pc, #252]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7fd ffe4 	bl	8001998 <HAL_GetTick>
 80039d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039d2:	e009      	b.n	80039e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039d4:	f7fd ffe0 	bl	8001998 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	73fb      	strb	r3, [r7, #15]
        break;
 80039e6:	e005      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039e8:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ef      	bne.n	80039d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d15f      	bne.n	8003aba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d110      	bne.n	8003a22 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a00:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6892      	ldr	r2, [r2, #8]
 8003a10:	0211      	lsls	r1, r2, #8
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68d2      	ldr	r2, [r2, #12]
 8003a16:	06d2      	lsls	r2, r2, #27
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	492a      	ldr	r1, [pc, #168]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	610b      	str	r3, [r1, #16]
 8003a20:	e027      	b.n	8003a72 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d112      	bne.n	8003a4e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a28:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6892      	ldr	r2, [r2, #8]
 8003a38:	0211      	lsls	r1, r2, #8
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6912      	ldr	r2, [r2, #16]
 8003a3e:	0852      	lsrs	r2, r2, #1
 8003a40:	3a01      	subs	r2, #1
 8003a42:	0552      	lsls	r2, r2, #21
 8003a44:	430a      	orrs	r2, r1
 8003a46:	491f      	ldr	r1, [pc, #124]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	610b      	str	r3, [r1, #16]
 8003a4c:	e011      	b.n	8003a72 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6892      	ldr	r2, [r2, #8]
 8003a5e:	0211      	lsls	r1, r2, #8
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6952      	ldr	r2, [r2, #20]
 8003a64:	0852      	lsrs	r2, r2, #1
 8003a66:	3a01      	subs	r2, #1
 8003a68:	0652      	lsls	r2, r2, #25
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	4915      	ldr	r1, [pc, #84]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7e:	f7fd ff8b 	bl	8001998 <HAL_GetTick>
 8003a82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a84:	e009      	b.n	8003a9a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a86:	f7fd ff87 	bl	8001998 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d902      	bls.n	8003a9a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	73fb      	strb	r3, [r7, #15]
          break;
 8003a98:	e005      	b.n	8003aa6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0ef      	beq.n	8003a86 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d106      	bne.n	8003aba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	4903      	ldr	r1, [pc, #12]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000

08003ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e095      	b.n	8003c06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d108      	bne.n	8003af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aea:	d009      	beq.n	8003b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	61da      	str	r2, [r3, #28]
 8003af2:	e005      	b.n	8003b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fd06 	bl	800152c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b40:	d902      	bls.n	8003b48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	e002      	b.n	8003b4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b56:	d007      	beq.n	8003b68 <HAL_SPI_Init+0xa0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b60:	d002      	beq.n	8003b68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	ea42 0103 	orr.w	r1, r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	0c1b      	lsrs	r3, r3, #16
 8003bc4:	f003 0204 	and.w	r2, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003be4:	ea42 0103 	orr.w	r1, r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b088      	sub	sp, #32
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	603b      	str	r3, [r7, #0]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_SPI_Transmit+0x22>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e15f      	b.n	8003ef0 <HAL_SPI_Transmit+0x2e2>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c38:	f7fd feae 	bl	8001998 <HAL_GetTick>
 8003c3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d002      	beq.n	8003c54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c52:	e148      	b.n	8003ee6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_SPI_Transmit+0x52>
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d102      	bne.n	8003c66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c64:	e13f      	b.n	8003ee6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2203      	movs	r2, #3
 8003c6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	88fa      	ldrh	r2, [r7, #6]
 8003c7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	88fa      	ldrh	r2, [r7, #6]
 8003c84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb0:	d10f      	bne.n	8003cd2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b40      	cmp	r3, #64	; 0x40
 8003cde:	d007      	beq.n	8003cf0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cf8:	d94f      	bls.n	8003d9a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_SPI_Transmit+0xfa>
 8003d02:	8afb      	ldrh	r3, [r7, #22]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d142      	bne.n	8003d8e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	881a      	ldrh	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	1c9a      	adds	r2, r3, #2
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d2c:	e02f      	b.n	8003d8e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d112      	bne.n	8003d62 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	881a      	ldrh	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	1c9a      	adds	r2, r3, #2
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d60:	e015      	b.n	8003d8e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d62:	f7fd fe19 	bl	8001998 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d803      	bhi.n	8003d7a <HAL_SPI_Transmit+0x16c>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d102      	bne.n	8003d80 <HAL_SPI_Transmit+0x172>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003d8c:	e0ab      	b.n	8003ee6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ca      	bne.n	8003d2e <HAL_SPI_Transmit+0x120>
 8003d98:	e080      	b.n	8003e9c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_SPI_Transmit+0x19a>
 8003da2:	8afb      	ldrh	r3, [r7, #22]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d174      	bne.n	8003e92 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d912      	bls.n	8003dd8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	881a      	ldrh	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	1c9a      	adds	r2, r3, #2
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b02      	subs	r3, #2
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dd6:	e05c      	b.n	8003e92 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	7812      	ldrb	r2, [r2, #0]
 8003de4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003dfe:	e048      	b.n	8003e92 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d12b      	bne.n	8003e66 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d912      	bls.n	8003e3e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	881a      	ldrh	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b02      	subs	r3, #2
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e3c:	e029      	b.n	8003e92 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	7812      	ldrb	r2, [r2, #0]
 8003e4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e64:	e015      	b.n	8003e92 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e66:	f7fd fd97 	bl	8001998 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d803      	bhi.n	8003e7e <HAL_SPI_Transmit+0x270>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d102      	bne.n	8003e84 <HAL_SPI_Transmit+0x276>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003e90:	e029      	b.n	8003ee6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1b1      	bne.n	8003e00 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	6839      	ldr	r1, [r7, #0]
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 fb69 	bl	8004578 <SPI_EndRxTxTransaction>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e003      	b.n	8003ee6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003eee:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3720      	adds	r7, #32
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08a      	sub	sp, #40	; 0x28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f06:	2301      	movs	r3, #1
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_SPI_TransmitReceive+0x26>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e20a      	b.n	8004334 <HAL_SPI_TransmitReceive+0x43c>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f26:	f7fd fd37 	bl	8001998 <HAL_GetTick>
 8003f2a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f32:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f3a:	887b      	ldrh	r3, [r7, #2]
 8003f3c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003f3e:	887b      	ldrh	r3, [r7, #2]
 8003f40:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f42:	7efb      	ldrb	r3, [r7, #27]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d00e      	beq.n	8003f66 <HAL_SPI_TransmitReceive+0x6e>
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f4e:	d106      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x66>
 8003f58:	7efb      	ldrb	r3, [r7, #27]
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d003      	beq.n	8003f66 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f64:	e1e0      	b.n	8004328 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_SPI_TransmitReceive+0x80>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_SPI_TransmitReceive+0x80>
 8003f72:	887b      	ldrh	r3, [r7, #2]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d103      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f7e:	e1d3      	b.n	8004328 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d003      	beq.n	8003f94 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2205      	movs	r2, #5
 8003f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	887a      	ldrh	r2, [r7, #2]
 8003fa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	887a      	ldrh	r2, [r7, #2]
 8003fac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	887a      	ldrh	r2, [r7, #2]
 8003fba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	887a      	ldrh	r2, [r7, #2]
 8003fc0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fd6:	d802      	bhi.n	8003fde <HAL_SPI_TransmitReceive+0xe6>
 8003fd8:	8a3b      	ldrh	r3, [r7, #16]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d908      	bls.n	8003ff0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	e007      	b.n	8004000 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d007      	beq.n	800401e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800401c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004026:	f240 8081 	bls.w	800412c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_SPI_TransmitReceive+0x140>
 8004032:	8a7b      	ldrh	r3, [r7, #18]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d16d      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	881a      	ldrh	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	1c9a      	adds	r2, r3, #2
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800405c:	e05a      	b.n	8004114 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b02      	cmp	r3, #2
 800406a:	d11b      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x1ac>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x1ac>
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	2b01      	cmp	r3, #1
 800407a:	d113      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	881a      	ldrh	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	1c9a      	adds	r2, r3, #2
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d11c      	bne.n	80040ec <HAL_SPI_TransmitReceive+0x1f4>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d016      	beq.n	80040ec <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	b292      	uxth	r2, r2
 80040ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	1c9a      	adds	r2, r3, #2
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040e8:	2301      	movs	r3, #1
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040ec:	f7fd fc54 	bl	8001998 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d80b      	bhi.n	8004114 <HAL_SPI_TransmitReceive+0x21c>
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004102:	d007      	beq.n	8004114 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004112:	e109      	b.n	8004328 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d19f      	bne.n	800405e <HAL_SPI_TransmitReceive+0x166>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d199      	bne.n	800405e <HAL_SPI_TransmitReceive+0x166>
 800412a:	e0e3      	b.n	80042f4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_SPI_TransmitReceive+0x244>
 8004134:	8a7b      	ldrh	r3, [r7, #18]
 8004136:	2b01      	cmp	r3, #1
 8004138:	f040 80cf 	bne.w	80042da <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d912      	bls.n	800416c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	881a      	ldrh	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004156:	1c9a      	adds	r2, r3, #2
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b02      	subs	r3, #2
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	87da      	strh	r2, [r3, #62]	; 0x3e
 800416a:	e0b6      	b.n	80042da <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	330c      	adds	r3, #12
 8004176:	7812      	ldrb	r2, [r2, #0]
 8004178:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004192:	e0a2      	b.n	80042da <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d134      	bne.n	800420c <HAL_SPI_TransmitReceive+0x314>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d02f      	beq.n	800420c <HAL_SPI_TransmitReceive+0x314>
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d12c      	bne.n	800420c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d912      	bls.n	80041e2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	881a      	ldrh	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	1c9a      	adds	r2, r3, #2
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b02      	subs	r3, #2
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041e0:	e012      	b.n	8004208 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	7812      	ldrb	r2, [r2, #0]
 80041ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b01      	cmp	r3, #1
 8004218:	d148      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x3b4>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d042      	beq.n	80042ac <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d923      	bls.n	800427a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	b292      	uxth	r2, r2
 800423e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	1c9a      	adds	r2, r3, #2
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b02      	subs	r3, #2
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	d81f      	bhi.n	80042a8 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004276:	605a      	str	r2, [r3, #4]
 8004278:	e016      	b.n	80042a8 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f103 020c 	add.w	r2, r3, #12
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	7812      	ldrb	r2, [r2, #0]
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042a8:	2301      	movs	r3, #1
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042ac:	f7fd fb74 	bl	8001998 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d803      	bhi.n	80042c4 <HAL_SPI_TransmitReceive+0x3cc>
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c2:	d102      	bne.n	80042ca <HAL_SPI_TransmitReceive+0x3d2>
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d107      	bne.n	80042da <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80042d8:	e026      	b.n	8004328 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f47f af57 	bne.w	8004194 <HAL_SPI_TransmitReceive+0x29c>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f47f af50 	bne.w	8004194 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f93d 	bl	8004578 <SPI_EndRxTxTransaction>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431e:	e003      	b.n	8004328 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004330:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004334:	4618      	mov	r0, r3
 8004336:	3728      	adds	r7, #40	; 0x28
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	4613      	mov	r3, r2
 800434a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800434c:	f7fd fb24 	bl	8001998 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	4413      	add	r3, r2
 800435a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800435c:	f7fd fb1c 	bl	8001998 <HAL_GetTick>
 8004360:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004362:	4b39      	ldr	r3, [pc, #228]	; (8004448 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	015b      	lsls	r3, r3, #5
 8004368:	0d1b      	lsrs	r3, r3, #20
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	fb02 f303 	mul.w	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004372:	e054      	b.n	800441e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437a:	d050      	beq.n	800441e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800437c:	f7fd fb0c 	bl	8001998 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	429a      	cmp	r2, r3
 800438a:	d902      	bls.n	8004392 <SPI_WaitFlagStateUntilTimeout+0x56>
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d13d      	bne.n	800440e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043aa:	d111      	bne.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b4:	d004      	beq.n	80043c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043be:	d107      	bne.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d8:	d10f      	bne.n	80043fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e017      	b.n	800443e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	3b01      	subs	r3, #1
 800441c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4013      	ands	r3, r2
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	429a      	cmp	r2, r3
 800442c:	bf0c      	ite	eq
 800442e:	2301      	moveq	r3, #1
 8004430:	2300      	movne	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	429a      	cmp	r2, r3
 800443a:	d19b      	bne.n	8004374 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000004 	.word	0x20000004

0800444c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800445e:	f7fd fa9b 	bl	8001998 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	4413      	add	r3, r2
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800446e:	f7fd fa93 	bl	8001998 <HAL_GetTick>
 8004472:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800447c:	4b3d      	ldr	r3, [pc, #244]	; (8004574 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	00da      	lsls	r2, r3, #3
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	0d1b      	lsrs	r3, r3, #20
 800448c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004494:	e060      	b.n	8004558 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800449c:	d107      	bne.n	80044ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d104      	bne.n	80044ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d050      	beq.n	8004558 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044b6:	f7fd fa6f 	bl	8001998 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d902      	bls.n	80044cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d13d      	bne.n	8004548 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044e4:	d111      	bne.n	800450a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ee:	d004      	beq.n	80044fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f8:	d107      	bne.n	800450a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004508:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004512:	d10f      	bne.n	8004534 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004532:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e010      	b.n	800456a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	3b01      	subs	r3, #1
 8004556:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4013      	ands	r3, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	d196      	bne.n	8004496 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3728      	adds	r7, #40	; 0x28
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000004 	.word	0x20000004

08004578 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2200      	movs	r2, #0
 800458c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f7ff ff5b 	bl	800444c <SPI_WaitFifoStateUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a0:	f043 0220 	orr.w	r2, r3, #32
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e027      	b.n	80045fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2200      	movs	r2, #0
 80045b4:	2180      	movs	r1, #128	; 0x80
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f7ff fec0 	bl	800433c <SPI_WaitFlagStateUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e014      	b.n	80045fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2200      	movs	r2, #0
 80045da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f7ff ff34 	bl	800444c <SPI_WaitFifoStateUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ee:	f043 0220 	orr.w	r2, r3, #32
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e000      	b.n	80045fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e040      	b.n	8004698 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fc ffc2 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2224      	movs	r2, #36	; 0x24
 8004630:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0201 	bic.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fa54 	bl	8004af8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f825 	bl	80046a0 <UART_SetConfig>
 8004656:	4603      	mov	r3, r0
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e01b      	b.n	8004698 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800466e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800467e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fad3 	bl	8004c3c <UART_CheckIdleState>
 8004696:	4603      	mov	r3, r0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a4:	b08a      	sub	sp, #40	; 0x28
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	431a      	orrs	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	431a      	orrs	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4bb4      	ldr	r3, [pc, #720]	; (80049a0 <UART_SetConfig+0x300>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046d8:	430b      	orrs	r3, r1
 80046da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4aa9      	ldr	r2, [pc, #676]	; (80049a4 <UART_SetConfig+0x304>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d004      	beq.n	800470c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004708:	4313      	orrs	r3, r2
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471c:	430a      	orrs	r2, r1
 800471e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4aa0      	ldr	r2, [pc, #640]	; (80049a8 <UART_SetConfig+0x308>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d126      	bne.n	8004778 <UART_SetConfig+0xd8>
 800472a:	4ba0      	ldr	r3, [pc, #640]	; (80049ac <UART_SetConfig+0x30c>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	2b03      	cmp	r3, #3
 8004736:	d81b      	bhi.n	8004770 <UART_SetConfig+0xd0>
 8004738:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <UART_SetConfig+0xa0>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004751 	.word	0x08004751
 8004744:	08004761 	.word	0x08004761
 8004748:	08004759 	.word	0x08004759
 800474c:	08004769 	.word	0x08004769
 8004750:	2301      	movs	r3, #1
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004756:	e080      	b.n	800485a <UART_SetConfig+0x1ba>
 8004758:	2302      	movs	r3, #2
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475e:	e07c      	b.n	800485a <UART_SetConfig+0x1ba>
 8004760:	2304      	movs	r3, #4
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004766:	e078      	b.n	800485a <UART_SetConfig+0x1ba>
 8004768:	2308      	movs	r3, #8
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476e:	e074      	b.n	800485a <UART_SetConfig+0x1ba>
 8004770:	2310      	movs	r3, #16
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e070      	b.n	800485a <UART_SetConfig+0x1ba>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a8c      	ldr	r2, [pc, #560]	; (80049b0 <UART_SetConfig+0x310>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d138      	bne.n	80047f4 <UART_SetConfig+0x154>
 8004782:	4b8a      	ldr	r3, [pc, #552]	; (80049ac <UART_SetConfig+0x30c>)
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004788:	f003 030c 	and.w	r3, r3, #12
 800478c:	2b0c      	cmp	r3, #12
 800478e:	d82d      	bhi.n	80047ec <UART_SetConfig+0x14c>
 8004790:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <UART_SetConfig+0xf8>)
 8004792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004796:	bf00      	nop
 8004798:	080047cd 	.word	0x080047cd
 800479c:	080047ed 	.word	0x080047ed
 80047a0:	080047ed 	.word	0x080047ed
 80047a4:	080047ed 	.word	0x080047ed
 80047a8:	080047dd 	.word	0x080047dd
 80047ac:	080047ed 	.word	0x080047ed
 80047b0:	080047ed 	.word	0x080047ed
 80047b4:	080047ed 	.word	0x080047ed
 80047b8:	080047d5 	.word	0x080047d5
 80047bc:	080047ed 	.word	0x080047ed
 80047c0:	080047ed 	.word	0x080047ed
 80047c4:	080047ed 	.word	0x080047ed
 80047c8:	080047e5 	.word	0x080047e5
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d2:	e042      	b.n	800485a <UART_SetConfig+0x1ba>
 80047d4:	2302      	movs	r3, #2
 80047d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047da:	e03e      	b.n	800485a <UART_SetConfig+0x1ba>
 80047dc:	2304      	movs	r3, #4
 80047de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e2:	e03a      	b.n	800485a <UART_SetConfig+0x1ba>
 80047e4:	2308      	movs	r3, #8
 80047e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ea:	e036      	b.n	800485a <UART_SetConfig+0x1ba>
 80047ec:	2310      	movs	r3, #16
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f2:	e032      	b.n	800485a <UART_SetConfig+0x1ba>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a6a      	ldr	r2, [pc, #424]	; (80049a4 <UART_SetConfig+0x304>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d12a      	bne.n	8004854 <UART_SetConfig+0x1b4>
 80047fe:	4b6b      	ldr	r3, [pc, #428]	; (80049ac <UART_SetConfig+0x30c>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004804:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004808:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800480c:	d01a      	beq.n	8004844 <UART_SetConfig+0x1a4>
 800480e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004812:	d81b      	bhi.n	800484c <UART_SetConfig+0x1ac>
 8004814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004818:	d00c      	beq.n	8004834 <UART_SetConfig+0x194>
 800481a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800481e:	d815      	bhi.n	800484c <UART_SetConfig+0x1ac>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <UART_SetConfig+0x18c>
 8004824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004828:	d008      	beq.n	800483c <UART_SetConfig+0x19c>
 800482a:	e00f      	b.n	800484c <UART_SetConfig+0x1ac>
 800482c:	2300      	movs	r3, #0
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004832:	e012      	b.n	800485a <UART_SetConfig+0x1ba>
 8004834:	2302      	movs	r3, #2
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483a:	e00e      	b.n	800485a <UART_SetConfig+0x1ba>
 800483c:	2304      	movs	r3, #4
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e00a      	b.n	800485a <UART_SetConfig+0x1ba>
 8004844:	2308      	movs	r3, #8
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e006      	b.n	800485a <UART_SetConfig+0x1ba>
 800484c:	2310      	movs	r3, #16
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004852:	e002      	b.n	800485a <UART_SetConfig+0x1ba>
 8004854:	2310      	movs	r3, #16
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a51      	ldr	r2, [pc, #324]	; (80049a4 <UART_SetConfig+0x304>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d17a      	bne.n	800495a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004868:	2b08      	cmp	r3, #8
 800486a:	d824      	bhi.n	80048b6 <UART_SetConfig+0x216>
 800486c:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <UART_SetConfig+0x1d4>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004899 	.word	0x08004899
 8004878:	080048b7 	.word	0x080048b7
 800487c:	080048a1 	.word	0x080048a1
 8004880:	080048b7 	.word	0x080048b7
 8004884:	080048a7 	.word	0x080048a7
 8004888:	080048b7 	.word	0x080048b7
 800488c:	080048b7 	.word	0x080048b7
 8004890:	080048b7 	.word	0x080048b7
 8004894:	080048af 	.word	0x080048af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004898:	f7fe fd92 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 800489c:	61f8      	str	r0, [r7, #28]
        break;
 800489e:	e010      	b.n	80048c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a0:	4b44      	ldr	r3, [pc, #272]	; (80049b4 <UART_SetConfig+0x314>)
 80048a2:	61fb      	str	r3, [r7, #28]
        break;
 80048a4:	e00d      	b.n	80048c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a6:	f7fe fcf3 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 80048aa:	61f8      	str	r0, [r7, #28]
        break;
 80048ac:	e009      	b.n	80048c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b2:	61fb      	str	r3, [r7, #28]
        break;
 80048b4:	e005      	b.n	80048c2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8107 	beq.w	8004ad8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4413      	add	r3, r2
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d305      	bcc.n	80048e6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d903      	bls.n	80048ee <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048ec:	e0f4      	b.n	8004ad8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	2200      	movs	r2, #0
 80048f2:	461c      	mov	r4, r3
 80048f4:	4615      	mov	r5, r2
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	022b      	lsls	r3, r5, #8
 8004900:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004904:	0222      	lsls	r2, r4, #8
 8004906:	68f9      	ldr	r1, [r7, #12]
 8004908:	6849      	ldr	r1, [r1, #4]
 800490a:	0849      	lsrs	r1, r1, #1
 800490c:	2000      	movs	r0, #0
 800490e:	4688      	mov	r8, r1
 8004910:	4681      	mov	r9, r0
 8004912:	eb12 0a08 	adds.w	sl, r2, r8
 8004916:	eb43 0b09 	adc.w	fp, r3, r9
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004928:	4650      	mov	r0, sl
 800492a:	4659      	mov	r1, fp
 800492c:	f7fb fca0 	bl	8000270 <__aeabi_uldivmod>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4613      	mov	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800493e:	d308      	bcc.n	8004952 <UART_SetConfig+0x2b2>
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004946:	d204      	bcs.n	8004952 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	60da      	str	r2, [r3, #12]
 8004950:	e0c2      	b.n	8004ad8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004958:	e0be      	b.n	8004ad8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004962:	d16a      	bne.n	8004a3a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004968:	2b08      	cmp	r3, #8
 800496a:	d834      	bhi.n	80049d6 <UART_SetConfig+0x336>
 800496c:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <UART_SetConfig+0x2d4>)
 800496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004972:	bf00      	nop
 8004974:	08004999 	.word	0x08004999
 8004978:	080049b9 	.word	0x080049b9
 800497c:	080049c1 	.word	0x080049c1
 8004980:	080049d7 	.word	0x080049d7
 8004984:	080049c7 	.word	0x080049c7
 8004988:	080049d7 	.word	0x080049d7
 800498c:	080049d7 	.word	0x080049d7
 8004990:	080049d7 	.word	0x080049d7
 8004994:	080049cf 	.word	0x080049cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004998:	f7fe fd12 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 800499c:	61f8      	str	r0, [r7, #28]
        break;
 800499e:	e020      	b.n	80049e2 <UART_SetConfig+0x342>
 80049a0:	efff69f3 	.word	0xefff69f3
 80049a4:	40008000 	.word	0x40008000
 80049a8:	40013800 	.word	0x40013800
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40004400 	.word	0x40004400
 80049b4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b8:	f7fe fd18 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
 80049bc:	61f8      	str	r0, [r7, #28]
        break;
 80049be:	e010      	b.n	80049e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c0:	4b4c      	ldr	r3, [pc, #304]	; (8004af4 <UART_SetConfig+0x454>)
 80049c2:	61fb      	str	r3, [r7, #28]
        break;
 80049c4:	e00d      	b.n	80049e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049c6:	f7fe fc63 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 80049ca:	61f8      	str	r0, [r7, #28]
        break;
 80049cc:	e009      	b.n	80049e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d2:	61fb      	str	r3, [r7, #28]
        break;
 80049d4:	e005      	b.n	80049e2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d077      	beq.n	8004ad8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	005a      	lsls	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	085b      	lsrs	r3, r3, #1
 80049f2:	441a      	add	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b0f      	cmp	r3, #15
 8004a02:	d916      	bls.n	8004a32 <UART_SetConfig+0x392>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0a:	d212      	bcs.n	8004a32 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f023 030f 	bic.w	r3, r3, #15
 8004a14:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	8afb      	ldrh	r3, [r7, #22]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	8afa      	ldrh	r2, [r7, #22]
 8004a2e:	60da      	str	r2, [r3, #12]
 8004a30:	e052      	b.n	8004ad8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a38:	e04e      	b.n	8004ad8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d827      	bhi.n	8004a92 <UART_SetConfig+0x3f2>
 8004a42:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <UART_SetConfig+0x3a8>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a6d 	.word	0x08004a6d
 8004a4c:	08004a75 	.word	0x08004a75
 8004a50:	08004a7d 	.word	0x08004a7d
 8004a54:	08004a93 	.word	0x08004a93
 8004a58:	08004a83 	.word	0x08004a83
 8004a5c:	08004a93 	.word	0x08004a93
 8004a60:	08004a93 	.word	0x08004a93
 8004a64:	08004a93 	.word	0x08004a93
 8004a68:	08004a8b 	.word	0x08004a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a6c:	f7fe fca8 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8004a70:	61f8      	str	r0, [r7, #28]
        break;
 8004a72:	e014      	b.n	8004a9e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a74:	f7fe fcba 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
 8004a78:	61f8      	str	r0, [r7, #28]
        break;
 8004a7a:	e010      	b.n	8004a9e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a7c:	4b1d      	ldr	r3, [pc, #116]	; (8004af4 <UART_SetConfig+0x454>)
 8004a7e:	61fb      	str	r3, [r7, #28]
        break;
 8004a80:	e00d      	b.n	8004a9e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a82:	f7fe fc05 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 8004a86:	61f8      	str	r0, [r7, #28]
        break;
 8004a88:	e009      	b.n	8004a9e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8e:	61fb      	str	r3, [r7, #28]
        break;
 8004a90:	e005      	b.n	8004a9e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a9c:	bf00      	nop
    }

    if (pclk != 0U)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d019      	beq.n	8004ad8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	085a      	lsrs	r2, r3, #1
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	441a      	add	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b0f      	cmp	r3, #15
 8004abc:	d909      	bls.n	8004ad2 <UART_SetConfig+0x432>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac4:	d205      	bcs.n	8004ad2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60da      	str	r2, [r3, #12]
 8004ad0:	e002      	b.n	8004ad8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ae4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3728      	adds	r7, #40	; 0x28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004af2:	bf00      	nop
 8004af4:	00f42400 	.word	0x00f42400

08004af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01a      	beq.n	8004c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf6:	d10a      	bne.n	8004c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]
  }
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b098      	sub	sp, #96	; 0x60
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c4c:	f7fc fea4 	bl	8001998 <HAL_GetTick>
 8004c50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d12e      	bne.n	8004cbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f88c 	bl	8004d8c <UART_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d021      	beq.n	8004cbe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c98:	647b      	str	r3, [r7, #68]	; 0x44
 8004c9a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e6      	bne.n	8004c7a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e062      	b.n	8004d84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d149      	bne.n	8004d60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f856 	bl	8004d8c <UART_WaitOnFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d03c      	beq.n	8004d60 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	623b      	str	r3, [r7, #32]
   return(result);
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d04:	633b      	str	r3, [r7, #48]	; 0x30
 8004d06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e6      	bne.n	8004ce6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3308      	adds	r3, #8
 8004d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d38:	61fa      	str	r2, [r7, #28]
 8004d3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	69b9      	ldr	r1, [r7, #24]
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	617b      	str	r3, [r7, #20]
   return(result);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e5      	bne.n	8004d18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e011      	b.n	8004d84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3758      	adds	r7, #88	; 0x58
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9c:	e049      	b.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	d045      	beq.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da6:	f7fc fdf7 	bl	8001998 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d302      	bcc.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e048      	b.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d031      	beq.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d110      	bne.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2208      	movs	r2, #8
 8004de2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f838 	bl	8004e5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2208      	movs	r2, #8
 8004dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e029      	b.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e0c:	d111      	bne.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 f81e 	bl	8004e5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e00f      	b.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	bf0c      	ite	eq
 8004e42:	2301      	moveq	r3, #1
 8004e44:	2300      	movne	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d0a6      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b095      	sub	sp, #84	; 0x54
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e80:	643b      	str	r3, [r7, #64]	; 0x40
 8004e82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e88:	e841 2300 	strex	r3, r2, [r1]
 8004e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e6      	bne.n	8004e62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3308      	adds	r3, #8
 8004e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e5      	bne.n	8004e94 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d118      	bne.n	8004f02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f023 0310 	bic.w	r3, r3, #16
 8004ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	6979      	ldr	r1, [r7, #20]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	613b      	str	r3, [r7, #16]
   return(result);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e6      	bne.n	8004ed0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f16:	bf00      	nop
 8004f18:	3754      	adds	r7, #84	; 0x54
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004f28:	4904      	ldr	r1, [pc, #16]	; (8004f3c <MX_FATFS_Init+0x18>)
 8004f2a:	4805      	ldr	r0, [pc, #20]	; (8004f40 <MX_FATFS_Init+0x1c>)
 8004f2c:	f002 ff78 	bl	8007e20 <FATFS_LinkDriver>
 8004f30:	4603      	mov	r3, r0
 8004f32:	461a      	mov	r2, r3
 8004f34:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <MX_FATFS_Init+0x20>)
 8004f36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004f38:	bf00      	nop
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	200001f0 	.word	0x200001f0
 8004f40:	20000010 	.word	0x20000010
 8004f44:	200001ec 	.word	0x200001ec

08004f48 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004f4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fb fcb9 	bl	80008dc <SD_disk_initialize>
 8004f6a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fb fd91 	bl	8000aa8 <SD_disk_status>
 8004f86:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8004fa0:	7bf8      	ldrb	r0, [r7, #15]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	f7fb fd94 	bl	8000ad4 <SD_disk_read>
 8004fac:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004fc6:	7bf8      	ldrb	r0, [r7, #15]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	f7fb fdeb 	bl	8000ba8 <SD_disk_write>
 8004fd2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	603a      	str	r2, [r7, #0]
 8004fe6:	71fb      	strb	r3, [r7, #7]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004fec:	79b9      	ldrb	r1, [r7, #6]
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fb fe5c 	bl	8000cb0 <SD_disk_ioctl>
 8004ff8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	4a08      	ldr	r2, [pc, #32]	; (8005034 <disk_status+0x30>)
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	79fa      	ldrb	r2, [r7, #7]
 800501c:	4905      	ldr	r1, [pc, #20]	; (8005034 <disk_status+0x30>)
 800501e:	440a      	add	r2, r1
 8005020:	7a12      	ldrb	r2, [r2, #8]
 8005022:	4610      	mov	r0, r2
 8005024:	4798      	blx	r3
 8005026:	4603      	mov	r3, r0
 8005028:	73fb      	strb	r3, [r7, #15]
  return stat;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	2000041c 	.word	0x2000041c

08005038 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	4a0d      	ldr	r2, [pc, #52]	; (8005080 <disk_initialize+0x48>)
 800504a:	5cd3      	ldrb	r3, [r2, r3]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d111      	bne.n	8005074 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	4a0b      	ldr	r2, [pc, #44]	; (8005080 <disk_initialize+0x48>)
 8005054:	2101      	movs	r1, #1
 8005056:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	4a09      	ldr	r2, [pc, #36]	; (8005080 <disk_initialize+0x48>)
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	79fa      	ldrb	r2, [r7, #7]
 8005066:	4906      	ldr	r1, [pc, #24]	; (8005080 <disk_initialize+0x48>)
 8005068:	440a      	add	r2, r1
 800506a:	7a12      	ldrb	r2, [r2, #8]
 800506c:	4610      	mov	r0, r2
 800506e:	4798      	blx	r3
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005074:	7bfb      	ldrb	r3, [r7, #15]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	2000041c 	.word	0x2000041c

08005084 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	4603      	mov	r3, r0
 8005092:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <disk_read+0x3c>)
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	689c      	ldr	r4, [r3, #8]
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	4a07      	ldr	r2, [pc, #28]	; (80050c0 <disk_read+0x3c>)
 80050a4:	4413      	add	r3, r2
 80050a6:	7a18      	ldrb	r0, [r3, #8]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	47a0      	blx	r4
 80050b0:	4603      	mov	r3, r0
 80050b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd90      	pop	{r4, r7, pc}
 80050be:	bf00      	nop
 80050c0:	2000041c 	.word	0x2000041c

080050c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4603      	mov	r3, r0
 80050d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	4a0a      	ldr	r2, [pc, #40]	; (8005100 <disk_write+0x3c>)
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	68dc      	ldr	r4, [r3, #12]
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	4a07      	ldr	r2, [pc, #28]	; (8005100 <disk_write+0x3c>)
 80050e4:	4413      	add	r3, r2
 80050e6:	7a18      	ldrb	r0, [r3, #8]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	47a0      	blx	r4
 80050f0:	4603      	mov	r3, r0
 80050f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd90      	pop	{r4, r7, pc}
 80050fe:	bf00      	nop
 8005100:	2000041c 	.word	0x2000041c

08005104 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	603a      	str	r2, [r7, #0]
 800510e:	71fb      	strb	r3, [r7, #7]
 8005110:	460b      	mov	r3, r1
 8005112:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	4a09      	ldr	r2, [pc, #36]	; (800513c <disk_ioctl+0x38>)
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	79fa      	ldrb	r2, [r7, #7]
 8005122:	4906      	ldr	r1, [pc, #24]	; (800513c <disk_ioctl+0x38>)
 8005124:	440a      	add	r2, r1
 8005126:	7a10      	ldrb	r0, [r2, #8]
 8005128:	79b9      	ldrb	r1, [r7, #6]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	4798      	blx	r3
 800512e:	4603      	mov	r3, r0
 8005130:	73fb      	strb	r3, [r7, #15]
  return res;
 8005132:	7bfb      	ldrb	r3, [r7, #15]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	2000041c 	.word	0x2000041c

08005140 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3301      	adds	r3, #1
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005150:	89fb      	ldrh	r3, [r7, #14]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	b21a      	sxth	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	b21b      	sxth	r3, r3
 800515c:	4313      	orrs	r3, r2
 800515e:	b21b      	sxth	r3, r3
 8005160:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005162:	89fb      	ldrh	r3, [r7, #14]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3303      	adds	r3, #3
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	3202      	adds	r2, #2
 8005188:	7812      	ldrb	r2, [r2, #0]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	021b      	lsls	r3, r3, #8
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	3201      	adds	r2, #1
 8005196:	7812      	ldrb	r2, [r2, #0]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	7812      	ldrb	r2, [r2, #0]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80051a8:	68fb      	ldr	r3, [r7, #12]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	460b      	mov	r3, r1
 80051c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	887a      	ldrh	r2, [r7, #2]
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	701a      	strb	r2, [r3, #0]
 80051ce:	887b      	ldrh	r3, [r7, #2]
 80051d0:	0a1b      	lsrs	r3, r3, #8
 80051d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	607a      	str	r2, [r7, #4]
 80051da:	887a      	ldrh	r2, [r7, #2]
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	0a1b      	lsrs	r3, r3, #8
 8005206:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	607a      	str	r2, [r7, #4]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	0a1b      	lsrs	r3, r3, #8
 8005218:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	0a1b      	lsrs	r3, r3, #8
 800522a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	701a      	strb	r2, [r3, #0]
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00d      	beq.n	800527a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	1c53      	adds	r3, r2, #1
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	1c59      	adds	r1, r3, #1
 8005268:	6179      	str	r1, [r7, #20]
 800526a:	7812      	ldrb	r2, [r2, #0]
 800526c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3b01      	subs	r3, #1
 8005272:	607b      	str	r3, [r7, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f1      	bne.n	800525e <mem_cpy+0x1a>
	}
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005286:	b480      	push	{r7}
 8005288:	b087      	sub	sp, #28
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	617a      	str	r2, [r7, #20]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	607b      	str	r3, [r7, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f3      	bne.n	8005296 <mem_set+0x10>
}
 80052ae:	bf00      	nop
 80052b0:	bf00      	nop
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80052bc:	b480      	push	{r7}
 80052be:	b089      	sub	sp, #36	; 0x24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	61fb      	str	r3, [r7, #28]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	61fa      	str	r2, [r7, #28]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	4619      	mov	r1, r3
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	61ba      	str	r2, [r7, #24]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	1acb      	subs	r3, r1, r3
 80052e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	607b      	str	r3, [r7, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <mem_cmp+0x40>
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0eb      	beq.n	80052d4 <mem_cmp+0x18>

	return r;
 80052fc:	697b      	ldr	r3, [r7, #20]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3724      	adds	r7, #36	; 0x24
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005314:	e002      	b.n	800531c <chk_chr+0x12>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3301      	adds	r3, #1
 800531a:	607b      	str	r3, [r7, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <chk_chr+0x26>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	4293      	cmp	r3, r2
 800532e:	d1f2      	bne.n	8005316 <chk_chr+0xc>
	return *str;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	781b      	ldrb	r3, [r3, #0]
}
 8005334:	4618      	mov	r0, r3
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800534a:	2300      	movs	r3, #0
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e029      	b.n	80053a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005354:	4a27      	ldr	r2, [pc, #156]	; (80053f4 <chk_lock+0xb4>)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	4413      	add	r3, r2
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01d      	beq.n	800539e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005362:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <chk_lock+0xb4>)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	4413      	add	r3, r2
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d116      	bne.n	80053a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005374:	4a1f      	ldr	r2, [pc, #124]	; (80053f4 <chk_lock+0xb4>)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	4413      	add	r3, r2
 800537c:	3304      	adds	r3, #4
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005384:	429a      	cmp	r2, r3
 8005386:	d10c      	bne.n	80053a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005388:	4a1a      	ldr	r2, [pc, #104]	; (80053f4 <chk_lock+0xb4>)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	4413      	add	r3, r2
 8005390:	3308      	adds	r3, #8
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005398:	429a      	cmp	r2, r3
 800539a:	d102      	bne.n	80053a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800539c:	e007      	b.n	80053ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800539e:	2301      	movs	r3, #1
 80053a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3301      	adds	r3, #1
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d9d2      	bls.n	8005354 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d109      	bne.n	80053c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d102      	bne.n	80053c0 <chk_lock+0x80>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d101      	bne.n	80053c4 <chk_lock+0x84>
 80053c0:	2300      	movs	r3, #0
 80053c2:	e010      	b.n	80053e6 <chk_lock+0xa6>
 80053c4:	2312      	movs	r3, #18
 80053c6:	e00e      	b.n	80053e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d108      	bne.n	80053e0 <chk_lock+0xa0>
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <chk_lock+0xb4>)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	4413      	add	r3, r2
 80053d6:	330c      	adds	r3, #12
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053de:	d101      	bne.n	80053e4 <chk_lock+0xa4>
 80053e0:	2310      	movs	r3, #16
 80053e2:	e000      	b.n	80053e6 <chk_lock+0xa6>
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	200001fc 	.word	0x200001fc

080053f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80053fe:	2300      	movs	r3, #0
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	e002      	b.n	800540a <enq_lock+0x12>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3301      	adds	r3, #1
 8005408:	607b      	str	r3, [r7, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d806      	bhi.n	800541e <enq_lock+0x26>
 8005410:	4a09      	ldr	r2, [pc, #36]	; (8005438 <enq_lock+0x40>)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	4413      	add	r3, r2
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f2      	bne.n	8005404 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b02      	cmp	r3, #2
 8005422:	bf14      	ite	ne
 8005424:	2301      	movne	r3, #1
 8005426:	2300      	moveq	r3, #0
 8005428:	b2db      	uxtb	r3, r3
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	200001fc 	.word	0x200001fc

0800543c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	e01f      	b.n	800548c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800544c:	4a41      	ldr	r2, [pc, #260]	; (8005554 <inc_lock+0x118>)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	4413      	add	r3, r2
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d113      	bne.n	8005486 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800545e:	4a3d      	ldr	r2, [pc, #244]	; (8005554 <inc_lock+0x118>)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	4413      	add	r3, r2
 8005466:	3304      	adds	r3, #4
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800546e:	429a      	cmp	r2, r3
 8005470:	d109      	bne.n	8005486 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005472:	4a38      	ldr	r2, [pc, #224]	; (8005554 <inc_lock+0x118>)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	4413      	add	r3, r2
 800547a:	3308      	adds	r3, #8
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005482:	429a      	cmp	r2, r3
 8005484:	d006      	beq.n	8005494 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3301      	adds	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d9dc      	bls.n	800544c <inc_lock+0x10>
 8005492:	e000      	b.n	8005496 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005494:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d132      	bne.n	8005502 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	e002      	b.n	80054a8 <inc_lock+0x6c>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3301      	adds	r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d806      	bhi.n	80054bc <inc_lock+0x80>
 80054ae:	4a29      	ldr	r2, [pc, #164]	; (8005554 <inc_lock+0x118>)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	4413      	add	r3, r2
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1f2      	bne.n	80054a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d101      	bne.n	80054c6 <inc_lock+0x8a>
 80054c2:	2300      	movs	r3, #0
 80054c4:	e040      	b.n	8005548 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4922      	ldr	r1, [pc, #136]	; (8005554 <inc_lock+0x118>)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	440b      	add	r3, r1
 80054d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	491e      	ldr	r1, [pc, #120]	; (8005554 <inc_lock+0x118>)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	440b      	add	r3, r1
 80054e0:	3304      	adds	r3, #4
 80054e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	695a      	ldr	r2, [r3, #20]
 80054e8:	491a      	ldr	r1, [pc, #104]	; (8005554 <inc_lock+0x118>)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	440b      	add	r3, r1
 80054f0:	3308      	adds	r3, #8
 80054f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80054f4:	4a17      	ldr	r2, [pc, #92]	; (8005554 <inc_lock+0x118>)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	4413      	add	r3, r2
 80054fc:	330c      	adds	r3, #12
 80054fe:	2200      	movs	r2, #0
 8005500:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d009      	beq.n	800551c <inc_lock+0xe0>
 8005508:	4a12      	ldr	r2, [pc, #72]	; (8005554 <inc_lock+0x118>)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	4413      	add	r3, r2
 8005510:	330c      	adds	r3, #12
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <inc_lock+0xe0>
 8005518:	2300      	movs	r3, #0
 800551a:	e015      	b.n	8005548 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d108      	bne.n	8005534 <inc_lock+0xf8>
 8005522:	4a0c      	ldr	r2, [pc, #48]	; (8005554 <inc_lock+0x118>)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	4413      	add	r3, r2
 800552a:	330c      	adds	r3, #12
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	3301      	adds	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	e001      	b.n	8005538 <inc_lock+0xfc>
 8005534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005538:	4906      	ldr	r1, [pc, #24]	; (8005554 <inc_lock+0x118>)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	440b      	add	r3, r1
 8005540:	330c      	adds	r3, #12
 8005542:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3301      	adds	r3, #1
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	200001fc 	.word	0x200001fc

08005558 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3b01      	subs	r3, #1
 8005564:	607b      	str	r3, [r7, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d825      	bhi.n	80055b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800556c:	4a17      	ldr	r2, [pc, #92]	; (80055cc <dec_lock+0x74>)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	4413      	add	r3, r2
 8005574:	330c      	adds	r3, #12
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800557a:	89fb      	ldrh	r3, [r7, #14]
 800557c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005580:	d101      	bne.n	8005586 <dec_lock+0x2e>
 8005582:	2300      	movs	r3, #0
 8005584:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005586:	89fb      	ldrh	r3, [r7, #14]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <dec_lock+0x3a>
 800558c:	89fb      	ldrh	r3, [r7, #14]
 800558e:	3b01      	subs	r3, #1
 8005590:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005592:	4a0e      	ldr	r2, [pc, #56]	; (80055cc <dec_lock+0x74>)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	4413      	add	r3, r2
 800559a:	330c      	adds	r3, #12
 800559c:	89fa      	ldrh	r2, [r7, #14]
 800559e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80055a0:	89fb      	ldrh	r3, [r7, #14]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d105      	bne.n	80055b2 <dec_lock+0x5a>
 80055a6:	4a09      	ldr	r2, [pc, #36]	; (80055cc <dec_lock+0x74>)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	4413      	add	r3, r2
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	737b      	strb	r3, [r7, #13]
 80055b6:	e001      	b.n	80055bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80055b8:	2302      	movs	r3, #2
 80055ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80055bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	200001fc 	.word	0x200001fc

080055d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	e010      	b.n	8005600 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80055de:	4a0d      	ldr	r2, [pc, #52]	; (8005614 <clear_lock+0x44>)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	4413      	add	r3, r2
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d105      	bne.n	80055fa <clear_lock+0x2a>
 80055ee:	4a09      	ldr	r2, [pc, #36]	; (8005614 <clear_lock+0x44>)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	4413      	add	r3, r2
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3301      	adds	r3, #1
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d9eb      	bls.n	80055de <clear_lock+0xe>
	}
}
 8005606:	bf00      	nop
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	200001fc 	.word	0x200001fc

08005618 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	78db      	ldrb	r3, [r3, #3]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d034      	beq.n	8005696 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005630:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	7858      	ldrb	r0, [r3, #1]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800563c:	2301      	movs	r3, #1
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	f7ff fd40 	bl	80050c4 <disk_write>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <sync_window+0x38>
			res = FR_DISK_ERR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
 800564e:	e022      	b.n	8005696 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	1ad2      	subs	r2, r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	429a      	cmp	r2, r3
 8005664:	d217      	bcs.n	8005696 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	789b      	ldrb	r3, [r3, #2]
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	e010      	b.n	8005690 <sync_window+0x78>
					wsect += fs->fsize;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4413      	add	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	7858      	ldrb	r0, [r3, #1]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005682:	2301      	movs	r3, #1
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	f7ff fd1d 	bl	80050c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	3b01      	subs	r3, #1
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d8eb      	bhi.n	800566e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005696:	7bfb      	ldrb	r3, [r7, #15]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d01b      	beq.n	80056f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff ffad 	bl	8005618 <sync_window>
 80056be:	4603      	mov	r3, r0
 80056c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d113      	bne.n	80056f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	7858      	ldrb	r0, [r3, #1]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80056d2:	2301      	movs	r3, #1
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	f7ff fcd5 	bl	8005084 <disk_read>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80056e0:	f04f 33ff 	mov.w	r3, #4294967295
 80056e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff ff87 	bl	8005618 <sync_window>
 800570a:	4603      	mov	r3, r0
 800570c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d159      	bne.n	80057c8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b03      	cmp	r3, #3
 800571a:	d149      	bne.n	80057b0 <sync_fs+0xb4>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	791b      	ldrb	r3, [r3, #4]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d145      	bne.n	80057b0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	899b      	ldrh	r3, [r3, #12]
 800572e:	461a      	mov	r2, r3
 8005730:	2100      	movs	r1, #0
 8005732:	f7ff fda8 	bl	8005286 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3338      	adds	r3, #56	; 0x38
 800573a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800573e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff fd37 	bl	80051b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3338      	adds	r3, #56	; 0x38
 800574c:	4921      	ldr	r1, [pc, #132]	; (80057d4 <sync_fs+0xd8>)
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff fd4c 	bl	80051ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3338      	adds	r3, #56	; 0x38
 8005758:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800575c:	491e      	ldr	r1, [pc, #120]	; (80057d8 <sync_fs+0xdc>)
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff fd44 	bl	80051ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3338      	adds	r3, #56	; 0x38
 8005768:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f7ff fd3a 	bl	80051ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3338      	adds	r3, #56	; 0x38
 800577c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f7ff fd30 	bl	80051ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	7858      	ldrb	r0, [r3, #1]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a4:	2301      	movs	r3, #1
 80057a6:	f7ff fc8d 	bl	80050c4 <disk_write>
			fs->fsi_flag = 0;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	2200      	movs	r2, #0
 80057b6:	2100      	movs	r1, #0
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff fca3 	bl	8005104 <disk_ioctl>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <sync_fs+0xcc>
 80057c4:	2301      	movs	r3, #1
 80057c6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	41615252 	.word	0x41615252
 80057d8:	61417272 	.word	0x61417272

080057dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	3b02      	subs	r3, #2
 80057ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	3b02      	subs	r3, #2
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d301      	bcc.n	80057fc <clust2sect+0x20>
 80057f8:	2300      	movs	r3, #0
 80057fa:	e008      	b.n	800580e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	895b      	ldrh	r3, [r3, #10]
 8005800:	461a      	mov	r2, r3
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	fb03 f202 	mul.w	r2, r3, r2
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	4413      	add	r3, r2
}
 800580e:	4618      	mov	r0, r3
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b086      	sub	sp, #24
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d904      	bls.n	800583a <get_fat+0x20>
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d302      	bcc.n	8005840 <get_fat+0x26>
		val = 1;	/* Internal error */
 800583a:	2301      	movs	r3, #1
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e0bb      	b.n	80059b8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005840:	f04f 33ff 	mov.w	r3, #4294967295
 8005844:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b03      	cmp	r3, #3
 800584c:	f000 8083 	beq.w	8005956 <get_fat+0x13c>
 8005850:	2b03      	cmp	r3, #3
 8005852:	f300 80a7 	bgt.w	80059a4 <get_fat+0x18a>
 8005856:	2b01      	cmp	r3, #1
 8005858:	d002      	beq.n	8005860 <get_fat+0x46>
 800585a:	2b02      	cmp	r3, #2
 800585c:	d056      	beq.n	800590c <get_fat+0xf2>
 800585e:	e0a1      	b.n	80059a4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	899b      	ldrh	r3, [r3, #12]
 8005876:	4619      	mov	r1, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	fbb3 f3f1 	udiv	r3, r3, r1
 800587e:	4413      	add	r3, r2
 8005880:	4619      	mov	r1, r3
 8005882:	6938      	ldr	r0, [r7, #16]
 8005884:	f7ff ff0c 	bl	80056a0 <move_window>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	f040 808d 	bne.w	80059aa <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	60fa      	str	r2, [r7, #12]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	8992      	ldrh	r2, [r2, #12]
 800589a:	fbb3 f1f2 	udiv	r1, r3, r2
 800589e:	fb01 f202 	mul.w	r2, r1, r2
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4413      	add	r3, r2
 80058a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	899b      	ldrh	r3, [r3, #12]
 80058b6:	4619      	mov	r1, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80058be:	4413      	add	r3, r2
 80058c0:	4619      	mov	r1, r3
 80058c2:	6938      	ldr	r0, [r7, #16]
 80058c4:	f7ff feec 	bl	80056a0 <move_window>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d16f      	bne.n	80059ae <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	899b      	ldrh	r3, [r3, #12]
 80058d2:	461a      	mov	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80058da:	fb01 f202 	mul.w	r2, r1, r2
 80058de:	1a9b      	subs	r3, r3, r2
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4413      	add	r3, r2
 80058e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	461a      	mov	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <get_fat+0xe8>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	091b      	lsrs	r3, r3, #4
 8005900:	e002      	b.n	8005908 <get_fat+0xee>
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005908:	617b      	str	r3, [r7, #20]
			break;
 800590a:	e055      	b.n	80059b8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	899b      	ldrh	r3, [r3, #12]
 8005914:	085b      	lsrs	r3, r3, #1
 8005916:	b29b      	uxth	r3, r3
 8005918:	4619      	mov	r1, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005920:	4413      	add	r3, r2
 8005922:	4619      	mov	r1, r3
 8005924:	6938      	ldr	r0, [r7, #16]
 8005926:	f7ff febb 	bl	80056a0 <move_window>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d140      	bne.n	80059b2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	8992      	ldrh	r2, [r2, #12]
 800593e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005942:	fb00 f202 	mul.w	r2, r0, r2
 8005946:	1a9b      	subs	r3, r3, r2
 8005948:	440b      	add	r3, r1
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff fbf8 	bl	8005140 <ld_word>
 8005950:	4603      	mov	r3, r0
 8005952:	617b      	str	r3, [r7, #20]
			break;
 8005954:	e030      	b.n	80059b8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	899b      	ldrh	r3, [r3, #12]
 800595e:	089b      	lsrs	r3, r3, #2
 8005960:	b29b      	uxth	r3, r3
 8005962:	4619      	mov	r1, r3
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	fbb3 f3f1 	udiv	r3, r3, r1
 800596a:	4413      	add	r3, r2
 800596c:	4619      	mov	r1, r3
 800596e:	6938      	ldr	r0, [r7, #16]
 8005970:	f7ff fe96 	bl	80056a0 <move_window>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d11d      	bne.n	80059b6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	8992      	ldrh	r2, [r2, #12]
 8005988:	fbb3 f0f2 	udiv	r0, r3, r2
 800598c:	fb00 f202 	mul.w	r2, r0, r2
 8005990:	1a9b      	subs	r3, r3, r2
 8005992:	440b      	add	r3, r1
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff fbeb 	bl	8005170 <ld_dword>
 800599a:	4603      	mov	r3, r0
 800599c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059a0:	617b      	str	r3, [r7, #20]
			break;
 80059a2:	e009      	b.n	80059b8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80059a4:	2301      	movs	r3, #1
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e006      	b.n	80059b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059aa:	bf00      	nop
 80059ac:	e004      	b.n	80059b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059ae:	bf00      	nop
 80059b0:	e002      	b.n	80059b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059b2:	bf00      	nop
 80059b4:	e000      	b.n	80059b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80059b6:	bf00      	nop
		}
	}

	return val;
 80059b8:	697b      	ldr	r3, [r7, #20]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80059c2:	b590      	push	{r4, r7, lr}
 80059c4:	b089      	sub	sp, #36	; 0x24
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80059ce:	2302      	movs	r3, #2
 80059d0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	f240 8109 	bls.w	8005bec <put_fat+0x22a>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	f080 8103 	bcs.w	8005bec <put_fat+0x22a>
		switch (fs->fs_type) {
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	f000 80b6 	beq.w	8005b5c <put_fat+0x19a>
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	f300 80fb 	bgt.w	8005bec <put_fat+0x22a>
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d003      	beq.n	8005a02 <put_fat+0x40>
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	f000 8083 	beq.w	8005b06 <put_fat+0x144>
 8005a00:	e0f4      	b.n	8005bec <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	085b      	lsrs	r3, r3, #1
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	899b      	ldrh	r3, [r3, #12]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a20:	4413      	add	r3, r2
 8005a22:	4619      	mov	r1, r3
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff fe3b 	bl	80056a0 <move_window>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a2e:	7ffb      	ldrb	r3, [r7, #31]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f040 80d4 	bne.w	8005bde <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	61ba      	str	r2, [r7, #24]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	8992      	ldrh	r2, [r2, #12]
 8005a46:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a4a:	fb00 f202 	mul.w	r2, r0, r2
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	440b      	add	r3, r1
 8005a52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00d      	beq.n	8005a7a <put_fat+0xb8>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	b25b      	sxtb	r3, r3
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	b25a      	sxtb	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	b25b      	sxtb	r3, r3
 8005a72:	4313      	orrs	r3, r2
 8005a74:	b25b      	sxtb	r3, r3
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	e001      	b.n	8005a7e <put_fat+0xbc>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2201      	movs	r2, #1
 8005a86:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	899b      	ldrh	r3, [r3, #12]
 8005a90:	4619      	mov	r1, r3
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a98:	4413      	add	r3, r2
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f7ff fdff 	bl	80056a0 <move_window>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005aa6:	7ffb      	ldrb	r3, [r7, #31]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f040 809a 	bne.w	8005be2 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	899b      	ldrh	r3, [r3, #12]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ac0:	fb00 f202 	mul.w	r2, r0, r2
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <put_fat+0x11a>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	091b      	lsrs	r3, r3, #4
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	e00e      	b.n	8005afa <put_fat+0x138>
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	b25b      	sxtb	r3, r3
 8005ae2:	f023 030f 	bic.w	r3, r3, #15
 8005ae6:	b25a      	sxtb	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	b25b      	sxtb	r3, r3
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	b25b      	sxtb	r3, r3
 8005af4:	4313      	orrs	r3, r2
 8005af6:	b25b      	sxtb	r3, r3
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	70da      	strb	r2, [r3, #3]
			break;
 8005b04:	e072      	b.n	8005bec <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	899b      	ldrh	r3, [r3, #12]
 8005b0e:	085b      	lsrs	r3, r3, #1
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	4619      	mov	r1, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b1a:	4413      	add	r3, r2
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7ff fdbe 	bl	80056a0 <move_window>
 8005b24:	4603      	mov	r3, r0
 8005b26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b28:	7ffb      	ldrb	r3, [r7, #31]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d15b      	bne.n	8005be6 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	8992      	ldrh	r2, [r2, #12]
 8005b3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b40:	fb00 f202 	mul.w	r2, r0, r2
 8005b44:	1a9b      	subs	r3, r3, r2
 8005b46:	440b      	add	r3, r1
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	b292      	uxth	r2, r2
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7ff fb31 	bl	80051b6 <st_word>
			fs->wflag = 1;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	70da      	strb	r2, [r3, #3]
			break;
 8005b5a:	e047      	b.n	8005bec <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	899b      	ldrh	r3, [r3, #12]
 8005b64:	089b      	lsrs	r3, r3, #2
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	4619      	mov	r1, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b70:	4413      	add	r3, r2
 8005b72:	4619      	mov	r1, r3
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f7ff fd93 	bl	80056a0 <move_window>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b7e:	7ffb      	ldrb	r3, [r7, #31]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d132      	bne.n	8005bea <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	8992      	ldrh	r2, [r2, #12]
 8005b98:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b9c:	fb00 f202 	mul.w	r2, r0, r2
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	440b      	add	r3, r1
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff fae3 	bl	8005170 <ld_dword>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005bb0:	4323      	orrs	r3, r4
 8005bb2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	8992      	ldrh	r2, [r2, #12]
 8005bc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8005bc6:	fb00 f202 	mul.w	r2, r0, r2
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	440b      	add	r3, r1
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff fb0b 	bl	80051ec <st_dword>
			fs->wflag = 1;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	70da      	strb	r2, [r3, #3]
			break;
 8005bdc:	e006      	b.n	8005bec <put_fat+0x22a>
			if (res != FR_OK) break;
 8005bde:	bf00      	nop
 8005be0:	e004      	b.n	8005bec <put_fat+0x22a>
			if (res != FR_OK) break;
 8005be2:	bf00      	nop
 8005be4:	e002      	b.n	8005bec <put_fat+0x22a>
			if (res != FR_OK) break;
 8005be6:	bf00      	nop
 8005be8:	e000      	b.n	8005bec <put_fat+0x22a>
			if (res != FR_OK) break;
 8005bea:	bf00      	nop
		}
	}
	return res;
 8005bec:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3724      	adds	r7, #36	; 0x24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd90      	pop	{r4, r7, pc}

08005bf6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b088      	sub	sp, #32
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d904      	bls.n	8005c1c <remove_chain+0x26>
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d301      	bcc.n	8005c20 <remove_chain+0x2a>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e04b      	b.n	8005cb8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00c      	beq.n	8005c40 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005c26:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	69b8      	ldr	r0, [r7, #24]
 8005c2e:	f7ff fec8 	bl	80059c2 <put_fat>
 8005c32:	4603      	mov	r3, r0
 8005c34:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005c36:	7ffb      	ldrb	r3, [r7, #31]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <remove_chain+0x4a>
 8005c3c:	7ffb      	ldrb	r3, [r7, #31]
 8005c3e:	e03b      	b.n	8005cb8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f7ff fde9 	bl	800581a <get_fat>
 8005c48:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d031      	beq.n	8005cb4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <remove_chain+0x64>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e02e      	b.n	8005cb8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c60:	d101      	bne.n	8005c66 <remove_chain+0x70>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e028      	b.n	8005cb8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005c66:	2200      	movs	r2, #0
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	69b8      	ldr	r0, [r7, #24]
 8005c6c:	f7ff fea9 	bl	80059c2 <put_fat>
 8005c70:	4603      	mov	r3, r0
 8005c72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005c74:	7ffb      	ldrb	r3, [r7, #31]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <remove_chain+0x88>
 8005c7a:	7ffb      	ldrb	r3, [r7, #31]
 8005c7c:	e01c      	b.n	8005cb8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	699a      	ldr	r2, [r3, #24]
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	3b02      	subs	r3, #2
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d20b      	bcs.n	8005ca4 <remove_chain+0xae>
			fs->free_clst++;
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	791b      	ldrb	r3, [r3, #4]
 8005c9a:	f043 0301 	orr.w	r3, r3, #1
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d3c6      	bcc.n	8005c40 <remove_chain+0x4a>
 8005cb2:	e000      	b.n	8005cb6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005cb4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3720      	adds	r7, #32
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10d      	bne.n	8005cf2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d004      	beq.n	8005cec <create_chain+0x2c>
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d31b      	bcc.n	8005d24 <create_chain+0x64>
 8005cec:	2301      	movs	r3, #1
 8005cee:	61bb      	str	r3, [r7, #24]
 8005cf0:	e018      	b.n	8005d24 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff fd90 	bl	800581a <get_fat>
 8005cfa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d801      	bhi.n	8005d06 <create_chain+0x46>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e070      	b.n	8005de8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0c:	d101      	bne.n	8005d12 <create_chain+0x52>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	e06a      	b.n	8005de8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d201      	bcs.n	8005d20 <create_chain+0x60>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	e063      	b.n	8005de8 <create_chain+0x128>
		scl = clst;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d307      	bcc.n	8005d48 <create_chain+0x88>
				ncl = 2;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005d3c:	69fa      	ldr	r2, [r7, #28]
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d901      	bls.n	8005d48 <create_chain+0x88>
 8005d44:	2300      	movs	r3, #0
 8005d46:	e04f      	b.n	8005de8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005d48:	69f9      	ldr	r1, [r7, #28]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff fd65 	bl	800581a <get_fat>
 8005d50:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00e      	beq.n	8005d76 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d003      	beq.n	8005d66 <create_chain+0xa6>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d64:	d101      	bne.n	8005d6a <create_chain+0xaa>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	e03e      	b.n	8005de8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d1da      	bne.n	8005d28 <create_chain+0x68>
 8005d72:	2300      	movs	r3, #0
 8005d74:	e038      	b.n	8005de8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005d76:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005d78:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7c:	69f9      	ldr	r1, [r7, #28]
 8005d7e:	6938      	ldr	r0, [r7, #16]
 8005d80:	f7ff fe1f 	bl	80059c2 <put_fat>
 8005d84:	4603      	mov	r3, r0
 8005d86:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <create_chain+0xe2>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d006      	beq.n	8005da2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6938      	ldr	r0, [r7, #16]
 8005d9a:	f7ff fe12 	bl	80059c2 <put_fat>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d116      	bne.n	8005dd6 <create_chain+0x116>
		fs->last_clst = ncl;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	3b02      	subs	r3, #2
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d804      	bhi.n	8005dc6 <create_chain+0x106>
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	1e5a      	subs	r2, r3, #1
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	791b      	ldrb	r3, [r3, #4]
 8005dca:	f043 0301 	orr.w	r3, r3, #1
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	711a      	strb	r2, [r3, #4]
 8005dd4:	e007      	b.n	8005de6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d102      	bne.n	8005de2 <create_chain+0x122>
 8005ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8005de0:	e000      	b.n	8005de4 <create_chain+0x124>
 8005de2:	2301      	movs	r3, #1
 8005de4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005de6:	69fb      	ldr	r3, [r7, #28]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3720      	adds	r7, #32
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	3304      	adds	r3, #4
 8005e06:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	899b      	ldrh	r3, [r3, #12]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	8952      	ldrh	r2, [r2, #10]
 8005e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1d1a      	adds	r2, r3, #4
 8005e22:	613a      	str	r2, [r7, #16]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <clmt_clust+0x42>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e010      	b.n	8005e54 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d307      	bcc.n	8005e4a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	3304      	adds	r3, #4
 8005e46:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e48:	e7e9      	b.n	8005e1e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005e4a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	4413      	add	r3, r2
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e76:	d204      	bcs.n	8005e82 <dir_sdi+0x22>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005e82:	2302      	movs	r3, #2
 8005e84:	e071      	b.n	8005f6a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d106      	bne.n	8005ea6 <dir_sdi+0x46>
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d902      	bls.n	8005ea6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10c      	bne.n	8005ec6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	095b      	lsrs	r3, r3, #5
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	8912      	ldrh	r2, [r2, #8]
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d301      	bcc.n	8005ebc <dir_sdi+0x5c>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e056      	b.n	8005f6a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	61da      	str	r2, [r3, #28]
 8005ec4:	e02d      	b.n	8005f22 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	895b      	ldrh	r3, [r3, #10]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	899b      	ldrh	r3, [r3, #12]
 8005ed0:	fb02 f303 	mul.w	r3, r2, r3
 8005ed4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005ed6:	e019      	b.n	8005f0c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6979      	ldr	r1, [r7, #20]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff fc9c 	bl	800581a <get_fat>
 8005ee2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d101      	bne.n	8005ef0 <dir_sdi+0x90>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e03c      	b.n	8005f6a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d904      	bls.n	8005f00 <dir_sdi+0xa0>
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d301      	bcc.n	8005f04 <dir_sdi+0xa4>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e032      	b.n	8005f6a <dir_sdi+0x10a>
			ofs -= csz;
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d2e1      	bcs.n	8005ed8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005f14:	6979      	ldr	r1, [r7, #20]
 8005f16:	6938      	ldr	r0, [r7, #16]
 8005f18:	f7ff fc60 	bl	80057dc <clust2sect>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <dir_sdi+0xd4>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e01a      	b.n	8005f6a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69da      	ldr	r2, [r3, #28]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	899b      	ldrh	r3, [r3, #12]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f44:	441a      	add	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	899b      	ldrh	r3, [r3, #12]
 8005f54:	461a      	mov	r2, r3
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f5c:	fb00 f202 	mul.w	r2, r0, r2
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	18ca      	adds	r2, r1, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b086      	sub	sp, #24
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	3320      	adds	r3, #32
 8005f88:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <dir_next+0x28>
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f98:	d301      	bcc.n	8005f9e <dir_next+0x2c>
 8005f9a:	2304      	movs	r3, #4
 8005f9c:	e0bb      	b.n	8006116 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	899b      	ldrh	r3, [r3, #12]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005faa:	fb01 f202 	mul.w	r2, r1, r2
 8005fae:	1a9b      	subs	r3, r3, r2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f040 809d 	bne.w	80060f0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	8912      	ldrh	r2, [r2, #8]
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	f0c0 808d 	bcc.w	80060f0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	61da      	str	r2, [r3, #28]
 8005fdc:	2304      	movs	r3, #4
 8005fde:	e09a      	b.n	8006116 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	899b      	ldrh	r3, [r3, #12]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	8952      	ldrh	r2, [r2, #10]
 8005ff0:	3a01      	subs	r2, #1
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d17b      	bne.n	80060f0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	4619      	mov	r1, r3
 8006000:	4610      	mov	r0, r2
 8006002:	f7ff fc0a 	bl	800581a <get_fat>
 8006006:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d801      	bhi.n	8006012 <dir_next+0xa0>
 800600e:	2302      	movs	r3, #2
 8006010:	e081      	b.n	8006116 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d101      	bne.n	800601e <dir_next+0xac>
 800601a:	2301      	movs	r3, #1
 800601c:	e07b      	b.n	8006116 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	429a      	cmp	r2, r3
 8006026:	d359      	bcc.n	80060dc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	61da      	str	r2, [r3, #28]
 8006034:	2304      	movs	r3, #4
 8006036:	e06e      	b.n	8006116 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f7ff fe3d 	bl	8005cc0 <create_chain>
 8006046:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <dir_next+0xe0>
 800604e:	2307      	movs	r3, #7
 8006050:	e061      	b.n	8006116 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <dir_next+0xea>
 8006058:	2302      	movs	r3, #2
 800605a:	e05c      	b.n	8006116 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d101      	bne.n	8006068 <dir_next+0xf6>
 8006064:	2301      	movs	r3, #1
 8006066:	e056      	b.n	8006116 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7ff fad5 	bl	8005618 <sync_window>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <dir_next+0x106>
 8006074:	2301      	movs	r3, #1
 8006076:	e04e      	b.n	8006116 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	899b      	ldrh	r3, [r3, #12]
 8006082:	461a      	mov	r2, r3
 8006084:	2100      	movs	r1, #0
 8006086:	f7ff f8fe 	bl	8005286 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800608a:	2300      	movs	r3, #0
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	6979      	ldr	r1, [r7, #20]
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f7ff fba3 	bl	80057dc <clust2sect>
 8006096:	4602      	mov	r2, r0
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	635a      	str	r2, [r3, #52]	; 0x34
 800609c:	e012      	b.n	80060c4 <dir_next+0x152>
						fs->wflag = 1;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff fab7 	bl	8005618 <sync_window>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <dir_next+0x142>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e030      	b.n	8006116 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	3301      	adds	r3, #1
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	635a      	str	r2, [r3, #52]	; 0x34
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	895b      	ldrh	r3, [r3, #10]
 80060c8:	461a      	mov	r2, r3
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d3e6      	bcc.n	800609e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad2      	subs	r2, r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80060e2:	6979      	ldr	r1, [r7, #20]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff fb79 	bl	80057dc <clust2sect>
 80060ea:	4602      	mov	r2, r0
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	899b      	ldrh	r3, [r3, #12]
 8006100:	461a      	mov	r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	fbb3 f0f2 	udiv	r0, r3, r2
 8006108:	fb00 f202 	mul.w	r2, r0, r2
 800610c:	1a9b      	subs	r3, r3, r2
 800610e:	18ca      	adds	r2, r1, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b086      	sub	sp, #24
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800612e:	2100      	movs	r1, #0
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff fe95 	bl	8005e60 <dir_sdi>
 8006136:	4603      	mov	r3, r0
 8006138:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800613a:	7dfb      	ldrb	r3, [r7, #23]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d12b      	bne.n	8006198 <dir_alloc+0x7a>
		n = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	4619      	mov	r1, r3
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7ff faa8 	bl	80056a0 <move_window>
 8006150:	4603      	mov	r3, r0
 8006152:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d11d      	bne.n	8006196 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2be5      	cmp	r3, #229	; 0xe5
 8006162:	d004      	beq.n	800616e <dir_alloc+0x50>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d107      	bne.n	800617e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	3301      	adds	r3, #1
 8006172:	613b      	str	r3, [r7, #16]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d102      	bne.n	8006182 <dir_alloc+0x64>
 800617c:	e00c      	b.n	8006198 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800617e:	2300      	movs	r3, #0
 8006180:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006182:	2101      	movs	r1, #1
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff fef4 	bl	8005f72 <dir_next>
 800618a:	4603      	mov	r3, r0
 800618c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800618e:	7dfb      	ldrb	r3, [r7, #23]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0d7      	beq.n	8006144 <dir_alloc+0x26>
 8006194:	e000      	b.n	8006198 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006196:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006198:	7dfb      	ldrb	r3, [r7, #23]
 800619a:	2b04      	cmp	r3, #4
 800619c:	d101      	bne.n	80061a2 <dir_alloc+0x84>
 800619e:	2307      	movs	r3, #7
 80061a0:	75fb      	strb	r3, [r7, #23]
	return res;
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	331a      	adds	r3, #26
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe ffc0 	bl	8005140 <ld_word>
 80061c0:	4603      	mov	r3, r0
 80061c2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d109      	bne.n	80061e0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	3314      	adds	r3, #20
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe ffb5 	bl	8005140 <ld_word>
 80061d6:	4603      	mov	r3, r0
 80061d8:	041b      	lsls	r3, r3, #16
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80061e0:	68fb      	ldr	r3, [r7, #12]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	331a      	adds	r3, #26
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	b292      	uxth	r2, r2
 80061fe:	4611      	mov	r1, r2
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe ffd8 	bl	80051b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b03      	cmp	r3, #3
 800620c:	d109      	bne.n	8006222 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f103 0214 	add.w	r2, r3, #20
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	0c1b      	lsrs	r3, r3, #16
 8006218:	b29b      	uxth	r3, r3
 800621a:	4619      	mov	r1, r3
 800621c:	4610      	mov	r0, r2
 800621e:	f7fe ffca 	bl	80051b6 <st_word>
	}
}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800622c:	b590      	push	{r4, r7, lr}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	331a      	adds	r3, #26
 800623a:	4618      	mov	r0, r3
 800623c:	f7fe ff80 	bl	8005140 <ld_word>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <cmp_lfn+0x1e>
 8006246:	2300      	movs	r3, #0
 8006248:	e059      	b.n	80062fe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006252:	1e5a      	subs	r2, r3, #1
 8006254:	4613      	mov	r3, r2
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006260:	2301      	movs	r3, #1
 8006262:	81fb      	strh	r3, [r7, #14]
 8006264:	2300      	movs	r3, #0
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	e033      	b.n	80062d2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800626a:	4a27      	ldr	r2, [pc, #156]	; (8006308 <cmp_lfn+0xdc>)
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4413      	add	r3, r2
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	4413      	add	r3, r2
 8006278:	4618      	mov	r0, r3
 800627a:	f7fe ff61 	bl	8005140 <ld_word>
 800627e:	4603      	mov	r3, r0
 8006280:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006282:	89fb      	ldrh	r3, [r7, #14]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01a      	beq.n	80062be <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2bfe      	cmp	r3, #254	; 0xfe
 800628c:	d812      	bhi.n	80062b4 <cmp_lfn+0x88>
 800628e:	89bb      	ldrh	r3, [r7, #12]
 8006290:	4618      	mov	r0, r3
 8006292:	f001 fe11 	bl	8007eb8 <ff_wtoupper>
 8006296:	4603      	mov	r3, r0
 8006298:	461c      	mov	r4, r3
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	617a      	str	r2, [r7, #20]
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	4413      	add	r3, r2
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f001 fe05 	bl	8007eb8 <ff_wtoupper>
 80062ae:	4603      	mov	r3, r0
 80062b0:	429c      	cmp	r4, r3
 80062b2:	d001      	beq.n	80062b8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80062b4:	2300      	movs	r3, #0
 80062b6:	e022      	b.n	80062fe <cmp_lfn+0xd2>
			}
			wc = uc;
 80062b8:	89bb      	ldrh	r3, [r7, #12]
 80062ba:	81fb      	strh	r3, [r7, #14]
 80062bc:	e006      	b.n	80062cc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80062be:	89bb      	ldrh	r3, [r7, #12]
 80062c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d001      	beq.n	80062cc <cmp_lfn+0xa0>
 80062c8:	2300      	movs	r3, #0
 80062ca:	e018      	b.n	80062fe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	3301      	adds	r3, #1
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	2b0c      	cmp	r3, #12
 80062d6:	d9c8      	bls.n	800626a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00b      	beq.n	80062fc <cmp_lfn+0xd0>
 80062e4:	89fb      	ldrh	r3, [r7, #14]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d008      	beq.n	80062fc <cmp_lfn+0xd0>
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <cmp_lfn+0xd0>
 80062f8:	2300      	movs	r3, #0
 80062fa:	e000      	b.n	80062fe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80062fc:	2301      	movs	r3, #1
}
 80062fe:	4618      	mov	r0, r3
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	bd90      	pop	{r4, r7, pc}
 8006306:	bf00      	nop
 8006308:	080090bc 	.word	0x080090bc

0800630c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4611      	mov	r1, r2
 8006318:	461a      	mov	r2, r3
 800631a:	460b      	mov	r3, r1
 800631c:	71fb      	strb	r3, [r7, #7]
 800631e:	4613      	mov	r3, r2
 8006320:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	330d      	adds	r3, #13
 8006326:	79ba      	ldrb	r2, [r7, #6]
 8006328:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	330b      	adds	r3, #11
 800632e:	220f      	movs	r2, #15
 8006330:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	330c      	adds	r3, #12
 8006336:	2200      	movs	r2, #0
 8006338:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	331a      	adds	r3, #26
 800633e:	2100      	movs	r1, #0
 8006340:	4618      	mov	r0, r3
 8006342:	f7fe ff38 	bl	80051b6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	1e5a      	subs	r2, r3, #1
 800634a:	4613      	mov	r3, r2
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	82fb      	strh	r3, [r7, #22]
 800635a:	2300      	movs	r3, #0
 800635c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800635e:	8afb      	ldrh	r3, [r7, #22]
 8006360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006364:	4293      	cmp	r3, r2
 8006366:	d007      	beq.n	8006378 <put_lfn+0x6c>
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	61fa      	str	r2, [r7, #28]
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006378:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <put_lfn+0xcc>)
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	4413      	add	r3, r2
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	461a      	mov	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4413      	add	r3, r2
 8006386:	8afa      	ldrh	r2, [r7, #22]
 8006388:	4611      	mov	r1, r2
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe ff13 	bl	80051b6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006390:	8afb      	ldrh	r3, [r7, #22]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d102      	bne.n	800639c <put_lfn+0x90>
 8006396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800639a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	3301      	adds	r3, #1
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b0c      	cmp	r3, #12
 80063a6:	d9da      	bls.n	800635e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80063a8:	8afb      	ldrh	r3, [r7, #22]
 80063aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d006      	beq.n	80063c0 <put_lfn+0xb4>
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d103      	bne.n	80063c8 <put_lfn+0xbc>
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063c6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	79fa      	ldrb	r2, [r7, #7]
 80063cc:	701a      	strb	r2, [r3, #0]
}
 80063ce:	bf00      	nop
 80063d0:	3720      	adds	r7, #32
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	080090bc 	.word	0x080090bc

080063dc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08c      	sub	sp, #48	; 0x30
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80063ea:	220b      	movs	r2, #11
 80063ec:	68b9      	ldr	r1, [r7, #8]
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f7fe ff28 	bl	8005244 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b05      	cmp	r3, #5
 80063f8:	d92b      	bls.n	8006452 <gen_numname+0x76>
		sr = seq;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80063fe:	e022      	b.n	8006446 <gen_numname+0x6a>
			wc = *lfn++;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	1c9a      	adds	r2, r3, #2
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800640a:	2300      	movs	r3, #0
 800640c:	62bb      	str	r3, [r7, #40]	; 0x28
 800640e:	e017      	b.n	8006440 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	005a      	lsls	r2, r3, #1
 8006414:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	4413      	add	r3, r2
 800641c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800641e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006420:	085b      	lsrs	r3, r3, #1
 8006422:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <gen_numname+0x5e>
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006434:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006438:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	3301      	adds	r3, #1
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	2b0f      	cmp	r3, #15
 8006444:	d9e4      	bls.n	8006410 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1d8      	bne.n	8006400 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006452:	2307      	movs	r3, #7
 8006454:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	b2db      	uxtb	r3, r3
 8006460:	3330      	adds	r3, #48	; 0x30
 8006462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800646a:	2b39      	cmp	r3, #57	; 0x39
 800646c:	d904      	bls.n	8006478 <gen_numname+0x9c>
 800646e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006472:	3307      	adds	r3, #7
 8006474:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	1e5a      	subs	r2, r3, #1
 800647c:	62ba      	str	r2, [r7, #40]	; 0x28
 800647e:	3330      	adds	r3, #48	; 0x30
 8006480:	443b      	add	r3, r7
 8006482:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006486:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1df      	bne.n	8006456 <gen_numname+0x7a>
	ns[i] = '~';
 8006496:	f107 0214 	add.w	r2, r7, #20
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	4413      	add	r3, r2
 800649e:	227e      	movs	r2, #126	; 0x7e
 80064a0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80064a2:	2300      	movs	r3, #0
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
 80064a6:	e002      	b.n	80064ae <gen_numname+0xd2>
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	3301      	adds	r3, #1
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
 80064ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d205      	bcs.n	80064c2 <gen_numname+0xe6>
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	4413      	add	r3, r2
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d1f2      	bne.n	80064a8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	2b07      	cmp	r3, #7
 80064c6:	d807      	bhi.n	80064d8 <gen_numname+0xfc>
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	62ba      	str	r2, [r7, #40]	; 0x28
 80064ce:	3330      	adds	r3, #48	; 0x30
 80064d0:	443b      	add	r3, r7
 80064d2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80064d6:	e000      	b.n	80064da <gen_numname+0xfe>
 80064d8:	2120      	movs	r1, #32
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	627a      	str	r2, [r7, #36]	; 0x24
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	460a      	mov	r2, r1
 80064e6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	2b07      	cmp	r3, #7
 80064ec:	d9e9      	bls.n	80064c2 <gen_numname+0xe6>
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	3730      	adds	r7, #48	; 0x30
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006504:	230b      	movs	r3, #11
 8006506:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	b2da      	uxtb	r2, r3
 800650c:	0852      	lsrs	r2, r2, #1
 800650e:	01db      	lsls	r3, r3, #7
 8006510:	4313      	orrs	r3, r2
 8006512:	b2da      	uxtb	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	1c59      	adds	r1, r3, #1
 8006518:	6079      	str	r1, [r7, #4]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	4413      	add	r3, r2
 800651e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	3b01      	subs	r3, #1
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1ed      	bne.n	8006508 <sum_sfn+0x10>
	return sum;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b086      	sub	sp, #24
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006548:	2100      	movs	r1, #0
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff fc88 	bl	8005e60 <dir_sdi>
 8006550:	4603      	mov	r3, r0
 8006552:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <dir_find+0x24>
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	e0a9      	b.n	80066b2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800655e:	23ff      	movs	r3, #255	; 0xff
 8006560:	753b      	strb	r3, [r7, #20]
 8006562:	7d3b      	ldrb	r3, [r7, #20]
 8006564:	757b      	strb	r3, [r7, #21]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f04f 32ff 	mov.w	r2, #4294967295
 800656c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	4619      	mov	r1, r3
 8006574:	6938      	ldr	r0, [r7, #16]
 8006576:	f7ff f893 	bl	80056a0 <move_window>
 800657a:	4603      	mov	r3, r0
 800657c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800657e:	7dfb      	ldrb	r3, [r7, #23]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f040 8090 	bne.w	80066a6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800658e:	7dbb      	ldrb	r3, [r7, #22]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d102      	bne.n	800659a <dir_find+0x60>
 8006594:	2304      	movs	r3, #4
 8006596:	75fb      	strb	r3, [r7, #23]
 8006598:	e08a      	b.n	80066b0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	330b      	adds	r3, #11
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065a6:	73fb      	strb	r3, [r7, #15]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	7bfa      	ldrb	r2, [r7, #15]
 80065ac:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80065ae:	7dbb      	ldrb	r3, [r7, #22]
 80065b0:	2be5      	cmp	r3, #229	; 0xe5
 80065b2:	d007      	beq.n	80065c4 <dir_find+0x8a>
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <dir_find+0x98>
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	2b0f      	cmp	r3, #15
 80065c2:	d006      	beq.n	80065d2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80065c4:	23ff      	movs	r3, #255	; 0xff
 80065c6:	757b      	strb	r3, [r7, #21]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f04f 32ff 	mov.w	r2, #4294967295
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
 80065d0:	e05e      	b.n	8006690 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	2b0f      	cmp	r3, #15
 80065d6:	d136      	bne.n	8006646 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80065de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d154      	bne.n	8006690 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80065e6:	7dbb      	ldrb	r3, [r7, #22]
 80065e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00d      	beq.n	800660c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	7b5b      	ldrb	r3, [r3, #13]
 80065f6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80065f8:	7dbb      	ldrb	r3, [r7, #22]
 80065fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065fe:	75bb      	strb	r3, [r7, #22]
 8006600:	7dbb      	ldrb	r3, [r7, #22]
 8006602:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	695a      	ldr	r2, [r3, #20]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800660c:	7dba      	ldrb	r2, [r7, #22]
 800660e:	7d7b      	ldrb	r3, [r7, #21]
 8006610:	429a      	cmp	r2, r3
 8006612:	d115      	bne.n	8006640 <dir_find+0x106>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	330d      	adds	r3, #13
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	7d3a      	ldrb	r2, [r7, #20]
 800661e:	429a      	cmp	r2, r3
 8006620:	d10e      	bne.n	8006640 <dir_find+0x106>
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	691a      	ldr	r2, [r3, #16]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f7ff fdfd 	bl	800622c <cmp_lfn>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <dir_find+0x106>
 8006638:	7d7b      	ldrb	r3, [r7, #21]
 800663a:	3b01      	subs	r3, #1
 800663c:	b2db      	uxtb	r3, r3
 800663e:	e000      	b.n	8006642 <dir_find+0x108>
 8006640:	23ff      	movs	r3, #255	; 0xff
 8006642:	757b      	strb	r3, [r7, #21]
 8006644:	e024      	b.n	8006690 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006646:	7d7b      	ldrb	r3, [r7, #21]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d109      	bne.n	8006660 <dir_find+0x126>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff ff51 	bl	80064f8 <sum_sfn>
 8006656:	4603      	mov	r3, r0
 8006658:	461a      	mov	r2, r3
 800665a:	7d3b      	ldrb	r3, [r7, #20]
 800665c:	4293      	cmp	r3, r2
 800665e:	d024      	beq.n	80066aa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <dir_find+0x14a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a18      	ldr	r0, [r3, #32]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3324      	adds	r3, #36	; 0x24
 8006676:	220b      	movs	r2, #11
 8006678:	4619      	mov	r1, r3
 800667a:	f7fe fe1f 	bl	80052bc <mem_cmp>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d014      	beq.n	80066ae <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006684:	23ff      	movs	r3, #255	; 0xff
 8006686:	757b      	strb	r3, [r7, #21]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f04f 32ff 	mov.w	r2, #4294967295
 800668e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006690:	2100      	movs	r1, #0
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff fc6d 	bl	8005f72 <dir_next>
 8006698:	4603      	mov	r3, r0
 800669a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f43f af65 	beq.w	800656e <dir_find+0x34>
 80066a4:	e004      	b.n	80066b0 <dir_find+0x176>
		if (res != FR_OK) break;
 80066a6:	bf00      	nop
 80066a8:	e002      	b.n	80066b0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80066aa:	bf00      	nop
 80066ac:	e000      	b.n	80066b0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80066ae:	bf00      	nop

	return res;
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
	...

080066bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08c      	sub	sp, #48	; 0x30
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80066d0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <dir_register+0x20>
 80066d8:	2306      	movs	r3, #6
 80066da:	e0e0      	b.n	800689e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80066dc:	2300      	movs	r3, #0
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
 80066e0:	e002      	b.n	80066e8 <dir_register+0x2c>
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	3301      	adds	r3, #1
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	4413      	add	r3, r2
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1f4      	bne.n	80066e2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80066fe:	f107 030c 	add.w	r3, r7, #12
 8006702:	220c      	movs	r2, #12
 8006704:	4618      	mov	r0, r3
 8006706:	f7fe fd9d 	bl	8005244 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d032      	beq.n	800677a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2240      	movs	r2, #64	; 0x40
 8006718:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800671c:	2301      	movs	r3, #1
 800671e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006720:	e016      	b.n	8006750 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	f107 010c 	add.w	r1, r7, #12
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	f7ff fe53 	bl	80063dc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff feff 	bl	800653a <dir_find>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	3301      	adds	r3, #1
 800674e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	2b63      	cmp	r3, #99	; 0x63
 8006754:	d9e5      	bls.n	8006722 <dir_register+0x66>
 8006756:	e000      	b.n	800675a <dir_register+0x9e>
			if (res != FR_OK) break;
 8006758:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	2b64      	cmp	r3, #100	; 0x64
 800675e:	d101      	bne.n	8006764 <dir_register+0xa8>
 8006760:	2307      	movs	r3, #7
 8006762:	e09c      	b.n	800689e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006764:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006768:	2b04      	cmp	r3, #4
 800676a:	d002      	beq.n	8006772 <dir_register+0xb6>
 800676c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006770:	e095      	b.n	800689e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006772:	7dfa      	ldrb	r2, [r7, #23]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <dir_register+0xd8>
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	330c      	adds	r3, #12
 8006788:	4a47      	ldr	r2, [pc, #284]	; (80068a8 <dir_register+0x1ec>)
 800678a:	fba2 2303 	umull	r2, r3, r2, r3
 800678e:	089b      	lsrs	r3, r3, #2
 8006790:	3301      	adds	r3, #1
 8006792:	e000      	b.n	8006796 <dir_register+0xda>
 8006794:	2301      	movs	r3, #1
 8006796:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006798:	6a39      	ldr	r1, [r7, #32]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff fcbf 	bl	800611e <dir_alloc>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80067a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d148      	bne.n	8006840 <dir_register+0x184>
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	623b      	str	r3, [r7, #32]
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d042      	beq.n	8006840 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695a      	ldr	r2, [r3, #20]
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	015b      	lsls	r3, r3, #5
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7ff fb4a 	bl	8005e60 <dir_sdi>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80067d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d132      	bne.n	8006840 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3324      	adds	r3, #36	; 0x24
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff fe8a 	bl	80064f8 <sum_sfn>
 80067e4:	4603      	mov	r3, r0
 80067e6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	4619      	mov	r1, r3
 80067ee:	69f8      	ldr	r0, [r7, #28]
 80067f0:	f7fe ff56 	bl	80056a0 <move_window>
 80067f4:	4603      	mov	r3, r0
 80067f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80067fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d11d      	bne.n	800683e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	6918      	ldr	r0, [r3, #16]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a19      	ldr	r1, [r3, #32]
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	b2da      	uxtb	r2, r3
 800680e:	7efb      	ldrb	r3, [r7, #27]
 8006810:	f7ff fd7c 	bl	800630c <put_lfn>
				fs->wflag = 1;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	2201      	movs	r2, #1
 8006818:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800681a:	2100      	movs	r1, #0
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff fba8 	bl	8005f72 <dir_next>
 8006822:	4603      	mov	r3, r0
 8006824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006828:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800682c:	2b00      	cmp	r3, #0
 800682e:	d107      	bne.n	8006840 <dir_register+0x184>
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	3b01      	subs	r3, #1
 8006834:	623b      	str	r3, [r7, #32]
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1d5      	bne.n	80067e8 <dir_register+0x12c>
 800683c:	e000      	b.n	8006840 <dir_register+0x184>
				if (res != FR_OK) break;
 800683e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006840:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006844:	2b00      	cmp	r3, #0
 8006846:	d128      	bne.n	800689a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	4619      	mov	r1, r3
 800684e:	69f8      	ldr	r0, [r7, #28]
 8006850:	f7fe ff26 	bl	80056a0 <move_window>
 8006854:	4603      	mov	r3, r0
 8006856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800685a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800685e:	2b00      	cmp	r3, #0
 8006860:	d11b      	bne.n	800689a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	2220      	movs	r2, #32
 8006868:	2100      	movs	r1, #0
 800686a:	4618      	mov	r0, r3
 800686c:	f7fe fd0b 	bl	8005286 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a18      	ldr	r0, [r3, #32]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3324      	adds	r3, #36	; 0x24
 8006878:	220b      	movs	r2, #11
 800687a:	4619      	mov	r1, r3
 800687c:	f7fe fce2 	bl	8005244 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	330c      	adds	r3, #12
 800688c:	f002 0218 	and.w	r2, r2, #24
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	2201      	movs	r2, #1
 8006898:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800689a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3730      	adds	r7, #48	; 0x30
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	4ec4ec4f 	.word	0x4ec4ec4f

080068ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08a      	sub	sp, #40	; 0x28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	2300      	movs	r3, #0
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	61ba      	str	r2, [r7, #24]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	4413      	add	r3, r2
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80068da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068dc:	2b1f      	cmp	r3, #31
 80068de:	d940      	bls.n	8006962 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80068e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068e2:	2b2f      	cmp	r3, #47	; 0x2f
 80068e4:	d006      	beq.n	80068f4 <create_name+0x48>
 80068e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068e8:	2b5c      	cmp	r3, #92	; 0x5c
 80068ea:	d110      	bne.n	800690e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80068ec:	e002      	b.n	80068f4 <create_name+0x48>
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	3301      	adds	r3, #1
 80068f2:	61bb      	str	r3, [r7, #24]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	4413      	add	r3, r2
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b2f      	cmp	r3, #47	; 0x2f
 80068fe:	d0f6      	beq.n	80068ee <create_name+0x42>
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	4413      	add	r3, r2
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b5c      	cmp	r3, #92	; 0x5c
 800690a:	d0f0      	beq.n	80068ee <create_name+0x42>
			break;
 800690c:	e02a      	b.n	8006964 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2bfe      	cmp	r3, #254	; 0xfe
 8006912:	d901      	bls.n	8006918 <create_name+0x6c>
 8006914:	2306      	movs	r3, #6
 8006916:	e17d      	b.n	8006c14 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006918:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800691a:	b2db      	uxtb	r3, r3
 800691c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800691e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006920:	2101      	movs	r1, #1
 8006922:	4618      	mov	r0, r3
 8006924:	f001 fa8c 	bl	8007e40 <ff_convert>
 8006928:	4603      	mov	r3, r0
 800692a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800692c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <create_name+0x8a>
 8006932:	2306      	movs	r3, #6
 8006934:	e16e      	b.n	8006c14 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006938:	2b7f      	cmp	r3, #127	; 0x7f
 800693a:	d809      	bhi.n	8006950 <create_name+0xa4>
 800693c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800693e:	4619      	mov	r1, r3
 8006940:	488d      	ldr	r0, [pc, #564]	; (8006b78 <create_name+0x2cc>)
 8006942:	f7fe fce2 	bl	800530a <chk_chr>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <create_name+0xa4>
 800694c:	2306      	movs	r3, #6
 800694e:	e161      	b.n	8006c14 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	617a      	str	r2, [r7, #20]
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800695e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006960:	e7b4      	b.n	80068cc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006962:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	441a      	add	r2, r3
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800696e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006970:	2b1f      	cmp	r3, #31
 8006972:	d801      	bhi.n	8006978 <create_name+0xcc>
 8006974:	2304      	movs	r3, #4
 8006976:	e000      	b.n	800697a <create_name+0xce>
 8006978:	2300      	movs	r3, #0
 800697a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800697e:	e011      	b.n	80069a4 <create_name+0xf8>
		w = lfn[di - 1];
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006986:	3b01      	subs	r3, #1
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4413      	add	r3, r2
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006994:	2b20      	cmp	r3, #32
 8006996:	d002      	beq.n	800699e <create_name+0xf2>
 8006998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800699a:	2b2e      	cmp	r3, #46	; 0x2e
 800699c:	d106      	bne.n	80069ac <create_name+0x100>
		di--;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1ea      	bne.n	8006980 <create_name+0xd4>
 80069aa:	e000      	b.n	80069ae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80069ac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	2200      	movs	r2, #0
 80069b8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <create_name+0x118>
 80069c0:	2306      	movs	r3, #6
 80069c2:	e127      	b.n	8006c14 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3324      	adds	r3, #36	; 0x24
 80069c8:	220b      	movs	r2, #11
 80069ca:	2120      	movs	r1, #32
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe fc5a 	bl	8005286 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80069d2:	2300      	movs	r3, #0
 80069d4:	61bb      	str	r3, [r7, #24]
 80069d6:	e002      	b.n	80069de <create_name+0x132>
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	3301      	adds	r3, #1
 80069dc:	61bb      	str	r3, [r7, #24]
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	2b20      	cmp	r3, #32
 80069ea:	d0f5      	beq.n	80069d8 <create_name+0x12c>
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4413      	add	r3, r2
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	2b2e      	cmp	r3, #46	; 0x2e
 80069f8:	d0ee      	beq.n	80069d8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d009      	beq.n	8006a14 <create_name+0x168>
 8006a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a04:	f043 0303 	orr.w	r3, r3, #3
 8006a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006a0c:	e002      	b.n	8006a14 <create_name+0x168>
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d009      	beq.n	8006a2e <create_name+0x182>
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006a20:	3b01      	subs	r3, #1
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a2c:	d1ef      	bne.n	8006a0e <create_name+0x162>

	i = b = 0; ni = 8;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006a34:	2300      	movs	r3, #0
 8006a36:	623b      	str	r3, [r7, #32]
 8006a38:	2308      	movs	r3, #8
 8006a3a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	61ba      	str	r2, [r7, #24]
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006a4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 8090 	beq.w	8006b74 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006a54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a56:	2b20      	cmp	r3, #32
 8006a58:	d006      	beq.n	8006a68 <create_name+0x1bc>
 8006a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a5c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a5e:	d10a      	bne.n	8006a76 <create_name+0x1ca>
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d006      	beq.n	8006a76 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a6c:	f043 0303 	orr.w	r3, r3, #3
 8006a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a74:	e07d      	b.n	8006b72 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006a76:	6a3a      	ldr	r2, [r7, #32]
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d203      	bcs.n	8006a86 <create_name+0x1da>
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d123      	bne.n	8006ace <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	2b0b      	cmp	r3, #11
 8006a8a:	d106      	bne.n	8006a9a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a90:	f043 0303 	orr.w	r3, r3, #3
 8006a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a98:	e075      	b.n	8006b86 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d005      	beq.n	8006aae <create_name+0x202>
 8006aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aa6:	f043 0303 	orr.w	r3, r3, #3
 8006aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d866      	bhi.n	8006b84 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	2308      	movs	r3, #8
 8006abc:	623b      	str	r3, [r7, #32]
 8006abe:	230b      	movs	r3, #11
 8006ac0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006acc:	e051      	b.n	8006b72 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006ace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad2:	d914      	bls.n	8006afe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006ad4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 f9b1 	bl	8007e40 <ff_convert>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006ae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d004      	beq.n	8006af2 <create_name+0x246>
 8006ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aea:	3b80      	subs	r3, #128	; 0x80
 8006aec:	4a23      	ldr	r2, [pc, #140]	; (8006b7c <create_name+0x2d0>)
 8006aee:	5cd3      	ldrb	r3, [r2, r3]
 8006af0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006af6:	f043 0302 	orr.w	r3, r3, #2
 8006afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006afe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <create_name+0x268>
 8006b04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b06:	4619      	mov	r1, r3
 8006b08:	481d      	ldr	r0, [pc, #116]	; (8006b80 <create_name+0x2d4>)
 8006b0a:	f7fe fbfe 	bl	800530a <chk_chr>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d008      	beq.n	8006b26 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006b14:	235f      	movs	r3, #95	; 0x5f
 8006b16:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b1c:	f043 0303 	orr.w	r3, r3, #3
 8006b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b24:	e01b      	b.n	8006b5e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b28:	2b40      	cmp	r3, #64	; 0x40
 8006b2a:	d909      	bls.n	8006b40 <create_name+0x294>
 8006b2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b2e:	2b5a      	cmp	r3, #90	; 0x5a
 8006b30:	d806      	bhi.n	8006b40 <create_name+0x294>
					b |= 2;
 8006b32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b36:	f043 0302 	orr.w	r3, r3, #2
 8006b3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b3e:	e00e      	b.n	8006b5e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b42:	2b60      	cmp	r3, #96	; 0x60
 8006b44:	d90b      	bls.n	8006b5e <create_name+0x2b2>
 8006b46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b48:	2b7a      	cmp	r3, #122	; 0x7a
 8006b4a:	d808      	bhi.n	8006b5e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006b4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b50:	f043 0301 	orr.w	r3, r3, #1
 8006b54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b5a:	3b20      	subs	r3, #32
 8006b5c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	623a      	str	r2, [r7, #32]
 8006b64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b66:	b2d1      	uxtb	r1, r2
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	460a      	mov	r2, r1
 8006b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006b72:	e763      	b.n	8006a3c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006b74:	bf00      	nop
 8006b76:	e006      	b.n	8006b86 <create_name+0x2da>
 8006b78:	08008fac 	.word	0x08008fac
 8006b7c:	0800903c 	.word	0x0800903c
 8006b80:	08008fb8 	.word	0x08008fb8
			if (si > di) break;			/* No extension */
 8006b84:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b8c:	2be5      	cmp	r3, #229	; 0xe5
 8006b8e:	d103      	bne.n	8006b98 <create_name+0x2ec>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2205      	movs	r2, #5
 8006b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	2b08      	cmp	r3, #8
 8006b9c:	d104      	bne.n	8006ba8 <create_name+0x2fc>
 8006b9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006ba8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bac:	f003 030c 	and.w	r3, r3, #12
 8006bb0:	2b0c      	cmp	r3, #12
 8006bb2:	d005      	beq.n	8006bc0 <create_name+0x314>
 8006bb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bb8:	f003 0303 	and.w	r3, r3, #3
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d105      	bne.n	8006bcc <create_name+0x320>
 8006bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bc4:	f043 0302 	orr.w	r3, r3, #2
 8006bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d117      	bne.n	8006c08 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006bd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d105      	bne.n	8006bf0 <create_name+0x344>
 8006be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006be8:	f043 0310 	orr.w	r3, r3, #16
 8006bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006bf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bf4:	f003 030c 	and.w	r3, r3, #12
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d105      	bne.n	8006c08 <create_name+0x35c>
 8006bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c00:	f043 0308 	orr.w	r3, r3, #8
 8006c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006c0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006c12:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3728      	adds	r7, #40	; 0x28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006c30:	e002      	b.n	8006c38 <follow_path+0x1c>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	3301      	adds	r3, #1
 8006c36:	603b      	str	r3, [r7, #0]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b2f      	cmp	r3, #47	; 0x2f
 8006c3e:	d0f8      	beq.n	8006c32 <follow_path+0x16>
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b5c      	cmp	r3, #92	; 0x5c
 8006c46:	d0f4      	beq.n	8006c32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b1f      	cmp	r3, #31
 8006c54:	d80a      	bhi.n	8006c6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2280      	movs	r2, #128	; 0x80
 8006c5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006c5e:	2100      	movs	r1, #0
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff f8fd 	bl	8005e60 <dir_sdi>
 8006c66:	4603      	mov	r3, r0
 8006c68:	75fb      	strb	r3, [r7, #23]
 8006c6a:	e048      	b.n	8006cfe <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c6c:	463b      	mov	r3, r7
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff fe1b 	bl	80068ac <create_name>
 8006c76:	4603      	mov	r3, r0
 8006c78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d139      	bne.n	8006cf4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff fc5a 	bl	800653a <dir_find>
 8006c86:	4603      	mov	r3, r0
 8006c88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d12c      	bne.n	8006cf8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006c9e:	7afb      	ldrb	r3, [r7, #11]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d127      	bne.n	8006cf8 <follow_path+0xdc>
 8006ca8:	2305      	movs	r3, #5
 8006caa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006cac:	e024      	b.n	8006cf8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006cae:	7afb      	ldrb	r3, [r7, #11]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d121      	bne.n	8006cfc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	799b      	ldrb	r3, [r3, #6]
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d102      	bne.n	8006cca <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006cc4:	2305      	movs	r3, #5
 8006cc6:	75fb      	strb	r3, [r7, #23]
 8006cc8:	e019      	b.n	8006cfe <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	8992      	ldrh	r2, [r2, #12]
 8006cd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cdc:	fb00 f202 	mul.w	r2, r0, r2
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	440b      	add	r3, r1
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f7ff fa60 	bl	80061ac <ld_clust>
 8006cec:	4602      	mov	r2, r0
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006cf2:	e7bb      	b.n	8006c6c <follow_path+0x50>
			if (res != FR_OK) break;
 8006cf4:	bf00      	nop
 8006cf6:	e002      	b.n	8006cfe <follow_path+0xe2>
				break;
 8006cf8:	bf00      	nop
 8006cfa:	e000      	b.n	8006cfe <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006cfc:	bf00      	nop
			}
		}
	}

	return res;
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006d10:	f04f 33ff 	mov.w	r3, #4294967295
 8006d14:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d031      	beq.n	8006d82 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	e002      	b.n	8006d2c <get_ldnumber+0x24>
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b1f      	cmp	r3, #31
 8006d32:	d903      	bls.n	8006d3c <get_ldnumber+0x34>
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b3a      	cmp	r3, #58	; 0x3a
 8006d3a:	d1f4      	bne.n	8006d26 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b3a      	cmp	r3, #58	; 0x3a
 8006d42:	d11c      	bne.n	8006d7e <get_ldnumber+0x76>
			tp = *path;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	60fa      	str	r2, [r7, #12]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	3b30      	subs	r3, #48	; 0x30
 8006d54:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b09      	cmp	r3, #9
 8006d5a:	d80e      	bhi.n	8006d7a <get_ldnumber+0x72>
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d10a      	bne.n	8006d7a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d107      	bne.n	8006d7a <get_ldnumber+0x72>
					vol = (int)i;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	3301      	adds	r3, #1
 8006d72:	617b      	str	r3, [r7, #20]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	e002      	b.n	8006d84 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006d7e:	2300      	movs	r3, #0
 8006d80:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006d82:	693b      	ldr	r3, [r7, #16]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	371c      	adds	r7, #28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	70da      	strb	r2, [r3, #3]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f04f 32ff 	mov.w	r2, #4294967295
 8006da6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7fe fc78 	bl	80056a0 <move_window>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <check_fs+0x2a>
 8006db6:	2304      	movs	r3, #4
 8006db8:	e038      	b.n	8006e2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3338      	adds	r3, #56	; 0x38
 8006dbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe f9bc 	bl	8005140 <ld_word>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d001      	beq.n	8006dd8 <check_fs+0x48>
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e029      	b.n	8006e2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006dde:	2be9      	cmp	r3, #233	; 0xe9
 8006de0:	d009      	beq.n	8006df6 <check_fs+0x66>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006de8:	2beb      	cmp	r3, #235	; 0xeb
 8006dea:	d11e      	bne.n	8006e2a <check_fs+0x9a>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006df2:	2b90      	cmp	r3, #144	; 0x90
 8006df4:	d119      	bne.n	8006e2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3338      	adds	r3, #56	; 0x38
 8006dfa:	3336      	adds	r3, #54	; 0x36
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fe f9b7 	bl	8005170 <ld_dword>
 8006e02:	4603      	mov	r3, r0
 8006e04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e08:	4a0a      	ldr	r2, [pc, #40]	; (8006e34 <check_fs+0xa4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d101      	bne.n	8006e12 <check_fs+0x82>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e00c      	b.n	8006e2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3338      	adds	r3, #56	; 0x38
 8006e16:	3352      	adds	r3, #82	; 0x52
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fe f9a9 	bl	8005170 <ld_dword>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	4a05      	ldr	r2, [pc, #20]	; (8006e38 <check_fs+0xa8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d101      	bne.n	8006e2a <check_fs+0x9a>
 8006e26:	2300      	movs	r3, #0
 8006e28:	e000      	b.n	8006e2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006e2a:	2302      	movs	r3, #2
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	00544146 	.word	0x00544146
 8006e38:	33544146 	.word	0x33544146

08006e3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b096      	sub	sp, #88	; 0x58
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	4613      	mov	r3, r2
 8006e48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f7ff ff59 	bl	8006d08 <get_ldnumber>
 8006e56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	da01      	bge.n	8006e62 <find_volume+0x26>
 8006e5e:	230b      	movs	r3, #11
 8006e60:	e265      	b.n	800732e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006e62:	4a9f      	ldr	r2, [pc, #636]	; (80070e0 <find_volume+0x2a4>)
 8006e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <find_volume+0x3a>
 8006e72:	230c      	movs	r3, #12
 8006e74:	e25b      	b.n	800732e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	f023 0301 	bic.w	r3, r3, #1
 8006e82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01a      	beq.n	8006ec2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	785b      	ldrb	r3, [r3, #1]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fe f8b7 	bl	8005004 <disk_status>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006e9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10c      	bne.n	8006ec2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d007      	beq.n	8006ebe <find_volume+0x82>
 8006eae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006eba:	230a      	movs	r3, #10
 8006ebc:	e237      	b.n	800732e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	e235      	b.n	800732e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	785b      	ldrb	r3, [r3, #1]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fe f8af 	bl	8005038 <disk_initialize>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006ee0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006eec:	2303      	movs	r3, #3
 8006eee:	e21e      	b.n	800732e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d007      	beq.n	8006f06 <find_volume+0xca>
 8006ef6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006efa:	f003 0304 	and.w	r3, r3, #4
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006f02:	230a      	movs	r3, #10
 8006f04:	e213      	b.n	800732e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f08:	7858      	ldrb	r0, [r3, #1]
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0c:	330c      	adds	r3, #12
 8006f0e:	461a      	mov	r2, r3
 8006f10:	2102      	movs	r1, #2
 8006f12:	f7fe f8f7 	bl	8005104 <disk_ioctl>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <find_volume+0xe4>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e206      	b.n	800732e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	899b      	ldrh	r3, [r3, #12]
 8006f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f28:	d80d      	bhi.n	8006f46 <find_volume+0x10a>
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	899b      	ldrh	r3, [r3, #12]
 8006f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f32:	d308      	bcc.n	8006f46 <find_volume+0x10a>
 8006f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f36:	899b      	ldrh	r3, [r3, #12]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	899b      	ldrh	r3, [r3, #12]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	4013      	ands	r3, r2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <find_volume+0x10e>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e1f1      	b.n	800732e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006f4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f52:	f7ff ff1d 	bl	8006d90 <check_fs>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006f5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d149      	bne.n	8006ff8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006f64:	2300      	movs	r3, #0
 8006f66:	643b      	str	r3, [r7, #64]	; 0x40
 8006f68:	e01e      	b.n	8006fa8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006f78:	4413      	add	r3, r2
 8006f7a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7e:	3304      	adds	r3, #4
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d006      	beq.n	8006f94 <find_volume+0x158>
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	3308      	adds	r3, #8
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe f8f0 	bl	8005170 <ld_dword>
 8006f90:	4602      	mov	r2, r0
 8006f92:	e000      	b.n	8006f96 <find_volume+0x15a>
 8006f94:	2200      	movs	r2, #0
 8006f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	3358      	adds	r3, #88	; 0x58
 8006f9c:	443b      	add	r3, r7
 8006f9e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	643b      	str	r3, [r7, #64]	; 0x40
 8006fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d9dd      	bls.n	8006f6a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006fae:	2300      	movs	r3, #0
 8006fb0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <find_volume+0x182>
 8006fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	3358      	adds	r3, #88	; 0x58
 8006fc4:	443b      	add	r3, r7
 8006fc6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006fca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <find_volume+0x1a2>
 8006fd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006fd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fd6:	f7ff fedb 	bl	8006d90 <check_fs>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	e000      	b.n	8006fe0 <find_volume+0x1a4>
 8006fde:	2303      	movs	r3, #3
 8006fe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d905      	bls.n	8006ff8 <find_volume+0x1bc>
 8006fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fee:	3301      	adds	r3, #1
 8006ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d9e2      	bls.n	8006fbe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006ff8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d101      	bne.n	8007004 <find_volume+0x1c8>
 8007000:	2301      	movs	r3, #1
 8007002:	e194      	b.n	800732e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007004:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007008:	2b01      	cmp	r3, #1
 800700a:	d901      	bls.n	8007010 <find_volume+0x1d4>
 800700c:	230d      	movs	r3, #13
 800700e:	e18e      	b.n	800732e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	3338      	adds	r3, #56	; 0x38
 8007014:	330b      	adds	r3, #11
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe f892 	bl	8005140 <ld_word>
 800701c:	4603      	mov	r3, r0
 800701e:	461a      	mov	r2, r3
 8007020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007022:	899b      	ldrh	r3, [r3, #12]
 8007024:	429a      	cmp	r2, r3
 8007026:	d001      	beq.n	800702c <find_volume+0x1f0>
 8007028:	230d      	movs	r3, #13
 800702a:	e180      	b.n	800732e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	3338      	adds	r3, #56	; 0x38
 8007030:	3316      	adds	r3, #22
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe f884 	bl	8005140 <ld_word>
 8007038:	4603      	mov	r3, r0
 800703a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800703c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d106      	bne.n	8007050 <find_volume+0x214>
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007044:	3338      	adds	r3, #56	; 0x38
 8007046:	3324      	adds	r3, #36	; 0x24
 8007048:	4618      	mov	r0, r3
 800704a:	f7fe f891 	bl	8005170 <ld_dword>
 800704e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007052:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007054:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007062:	789b      	ldrb	r3, [r3, #2]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d005      	beq.n	8007074 <find_volume+0x238>
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	789b      	ldrb	r3, [r3, #2]
 800706c:	2b02      	cmp	r3, #2
 800706e:	d001      	beq.n	8007074 <find_volume+0x238>
 8007070:	230d      	movs	r3, #13
 8007072:	e15c      	b.n	800732e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007076:	789b      	ldrb	r3, [r3, #2]
 8007078:	461a      	mov	r2, r3
 800707a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800707c:	fb02 f303 	mul.w	r3, r2, r3
 8007080:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007088:	b29a      	uxth	r2, r3
 800708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	895b      	ldrh	r3, [r3, #10]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d008      	beq.n	80070a8 <find_volume+0x26c>
 8007096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007098:	895b      	ldrh	r3, [r3, #10]
 800709a:	461a      	mov	r2, r3
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	895b      	ldrh	r3, [r3, #10]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	4013      	ands	r3, r2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <find_volume+0x270>
 80070a8:	230d      	movs	r3, #13
 80070aa:	e140      	b.n	800732e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	3338      	adds	r3, #56	; 0x38
 80070b0:	3311      	adds	r3, #17
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe f844 	bl	8005140 <ld_word>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461a      	mov	r2, r3
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80070c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c2:	891b      	ldrh	r3, [r3, #8]
 80070c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070c6:	8992      	ldrh	r2, [r2, #12]
 80070c8:	0952      	lsrs	r2, r2, #5
 80070ca:	b292      	uxth	r2, r2
 80070cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80070d0:	fb01 f202 	mul.w	r2, r1, r2
 80070d4:	1a9b      	subs	r3, r3, r2
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <find_volume+0x2a8>
 80070dc:	230d      	movs	r3, #13
 80070de:	e126      	b.n	800732e <find_volume+0x4f2>
 80070e0:	200001f4 	.word	0x200001f4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	3338      	adds	r3, #56	; 0x38
 80070e8:	3313      	adds	r3, #19
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fe f828 	bl	8005140 <ld_word>
 80070f0:	4603      	mov	r3, r0
 80070f2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80070f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d106      	bne.n	8007108 <find_volume+0x2cc>
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	3338      	adds	r3, #56	; 0x38
 80070fe:	3320      	adds	r3, #32
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe f835 	bl	8005170 <ld_dword>
 8007106:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710a:	3338      	adds	r3, #56	; 0x38
 800710c:	330e      	adds	r3, #14
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe f816 	bl	8005140 <ld_word>
 8007114:	4603      	mov	r3, r0
 8007116:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007118:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <find_volume+0x2e6>
 800711e:	230d      	movs	r3, #13
 8007120:	e105      	b.n	800732e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007122:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007126:	4413      	add	r3, r2
 8007128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800712a:	8911      	ldrh	r1, [r2, #8]
 800712c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800712e:	8992      	ldrh	r2, [r2, #12]
 8007130:	0952      	lsrs	r2, r2, #5
 8007132:	b292      	uxth	r2, r2
 8007134:	fbb1 f2f2 	udiv	r2, r1, r2
 8007138:	b292      	uxth	r2, r2
 800713a:	4413      	add	r3, r2
 800713c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800713e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	429a      	cmp	r2, r3
 8007144:	d201      	bcs.n	800714a <find_volume+0x30e>
 8007146:	230d      	movs	r3, #13
 8007148:	e0f1      	b.n	800732e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800714a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007152:	8952      	ldrh	r2, [r2, #10]
 8007154:	fbb3 f3f2 	udiv	r3, r3, r2
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <find_volume+0x328>
 8007160:	230d      	movs	r3, #13
 8007162:	e0e4      	b.n	800732e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007164:	2303      	movs	r3, #3
 8007166:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007170:	4293      	cmp	r3, r2
 8007172:	d802      	bhi.n	800717a <find_volume+0x33e>
 8007174:	2302      	movs	r3, #2
 8007176:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007180:	4293      	cmp	r3, r2
 8007182:	d802      	bhi.n	800718a <find_volume+0x34e>
 8007184:	2301      	movs	r3, #1
 8007186:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	1c9a      	adds	r2, r3, #2
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007196:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007198:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800719a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800719c:	441a      	add	r2, r3
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80071a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	441a      	add	r2, r3
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80071ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d11e      	bne.n	80071f2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80071b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b6:	3338      	adds	r3, #56	; 0x38
 80071b8:	332a      	adds	r3, #42	; 0x2a
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fd ffc0 	bl	8005140 <ld_word>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <find_volume+0x38e>
 80071c6:	230d      	movs	r3, #13
 80071c8:	e0b1      	b.n	800732e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	891b      	ldrh	r3, [r3, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <find_volume+0x39a>
 80071d2:	230d      	movs	r3, #13
 80071d4:	e0ab      	b.n	800732e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80071d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d8:	3338      	adds	r3, #56	; 0x38
 80071da:	332c      	adds	r3, #44	; 0x2c
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fd ffc7 	bl	8005170 <ld_dword>
 80071e2:	4602      	mov	r2, r0
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80071e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	647b      	str	r3, [r7, #68]	; 0x44
 80071f0:	e01f      	b.n	8007232 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80071f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f4:	891b      	ldrh	r3, [r3, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <find_volume+0x3c2>
 80071fa:	230d      	movs	r3, #13
 80071fc:	e097      	b.n	800732e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007204:	441a      	add	r2, r3
 8007206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007208:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800720a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800720e:	2b02      	cmp	r3, #2
 8007210:	d103      	bne.n	800721a <find_volume+0x3de>
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	e00a      	b.n	8007230 <find_volume+0x3f4>
 800721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721c:	69da      	ldr	r2, [r3, #28]
 800721e:	4613      	mov	r3, r2
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	4413      	add	r3, r2
 8007224:	085a      	lsrs	r2, r3, #1
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007230:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007234:	6a1a      	ldr	r2, [r3, #32]
 8007236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007238:	899b      	ldrh	r3, [r3, #12]
 800723a:	4619      	mov	r1, r3
 800723c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800723e:	440b      	add	r3, r1
 8007240:	3b01      	subs	r3, #1
 8007242:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007244:	8989      	ldrh	r1, [r1, #12]
 8007246:	fbb3 f3f1 	udiv	r3, r3, r1
 800724a:	429a      	cmp	r2, r3
 800724c:	d201      	bcs.n	8007252 <find_volume+0x416>
 800724e:	230d      	movs	r3, #13
 8007250:	e06d      	b.n	800732e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007254:	f04f 32ff 	mov.w	r2, #4294967295
 8007258:	619a      	str	r2, [r3, #24]
 800725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	2280      	movs	r2, #128	; 0x80
 8007266:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007268:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800726c:	2b03      	cmp	r3, #3
 800726e:	d149      	bne.n	8007304 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	3338      	adds	r3, #56	; 0x38
 8007274:	3330      	adds	r3, #48	; 0x30
 8007276:	4618      	mov	r0, r3
 8007278:	f7fd ff62 	bl	8005140 <ld_word>
 800727c:	4603      	mov	r3, r0
 800727e:	2b01      	cmp	r3, #1
 8007280:	d140      	bne.n	8007304 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007284:	3301      	adds	r3, #1
 8007286:	4619      	mov	r1, r3
 8007288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800728a:	f7fe fa09 	bl	80056a0 <move_window>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d137      	bne.n	8007304 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	2200      	movs	r2, #0
 8007298:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	3338      	adds	r3, #56	; 0x38
 800729e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fd ff4c 	bl	8005140 <ld_word>
 80072a8:	4603      	mov	r3, r0
 80072aa:	461a      	mov	r2, r3
 80072ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d127      	bne.n	8007304 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80072b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b6:	3338      	adds	r3, #56	; 0x38
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fd ff59 	bl	8005170 <ld_dword>
 80072be:	4603      	mov	r3, r0
 80072c0:	4a1d      	ldr	r2, [pc, #116]	; (8007338 <find_volume+0x4fc>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d11e      	bne.n	8007304 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	3338      	adds	r3, #56	; 0x38
 80072ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fd ff4e 	bl	8005170 <ld_dword>
 80072d4:	4603      	mov	r3, r0
 80072d6:	4a19      	ldr	r2, [pc, #100]	; (800733c <find_volume+0x500>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d113      	bne.n	8007304 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	3338      	adds	r3, #56	; 0x38
 80072e0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fd ff43 	bl	8005170 <ld_dword>
 80072ea:	4602      	mov	r2, r0
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	3338      	adds	r3, #56	; 0x38
 80072f4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fd ff39 	bl	8005170 <ld_dword>
 80072fe:	4602      	mov	r2, r0
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800730a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800730c:	4b0c      	ldr	r3, [pc, #48]	; (8007340 <find_volume+0x504>)
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	3301      	adds	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	4b0a      	ldr	r3, [pc, #40]	; (8007340 <find_volume+0x504>)
 8007316:	801a      	strh	r2, [r3, #0]
 8007318:	4b09      	ldr	r3, [pc, #36]	; (8007340 <find_volume+0x504>)
 800731a:	881a      	ldrh	r2, [r3, #0]
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007322:	4a08      	ldr	r2, [pc, #32]	; (8007344 <find_volume+0x508>)
 8007324:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007326:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007328:	f7fe f952 	bl	80055d0 <clear_lock>
#endif
	return FR_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3758      	adds	r7, #88	; 0x58
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	41615252 	.word	0x41615252
 800733c:	61417272 	.word	0x61417272
 8007340:	200001f8 	.word	0x200001f8
 8007344:	2000021c 	.word	0x2000021c

08007348 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007352:	2309      	movs	r3, #9
 8007354:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01c      	beq.n	8007396 <validate+0x4e>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d018      	beq.n	8007396 <validate+0x4e>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d013      	beq.n	8007396 <validate+0x4e>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	889a      	ldrh	r2, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	88db      	ldrh	r3, [r3, #6]
 8007378:	429a      	cmp	r2, r3
 800737a:	d10c      	bne.n	8007396 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	785b      	ldrb	r3, [r3, #1]
 8007382:	4618      	mov	r0, r3
 8007384:	f7fd fe3e 	bl	8005004 <disk_status>
 8007388:	4603      	mov	r3, r0
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <validate+0x4e>
			res = FR_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d102      	bne.n	80073a2 <validate+0x5a>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	e000      	b.n	80073a4 <validate+0x5c>
 80073a2:	2300      	movs	r3, #0
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	6013      	str	r3, [r2, #0]
	return res;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
	...

080073b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	4613      	mov	r3, r2
 80073c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80073c6:	f107 0310 	add.w	r3, r7, #16
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff fc9c 	bl	8006d08 <get_ldnumber>
 80073d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	da01      	bge.n	80073dc <f_mount+0x28>
 80073d8:	230b      	movs	r3, #11
 80073da:	e02b      	b.n	8007434 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80073dc:	4a17      	ldr	r2, [pc, #92]	; (800743c <f_mount+0x88>)
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80073ec:	69b8      	ldr	r0, [r7, #24]
 80073ee:	f7fe f8ef 	bl	80055d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	2200      	movs	r2, #0
 80073f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	490d      	ldr	r1, [pc, #52]	; (800743c <f_mount+0x88>)
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <f_mount+0x66>
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d001      	beq.n	800741e <f_mount+0x6a>
 800741a:	2300      	movs	r3, #0
 800741c:	e00a      	b.n	8007434 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800741e:	f107 010c 	add.w	r1, r7, #12
 8007422:	f107 0308 	add.w	r3, r7, #8
 8007426:	2200      	movs	r2, #0
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff fd07 	bl	8006e3c <find_volume>
 800742e:	4603      	mov	r3, r0
 8007430:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007432:	7dfb      	ldrb	r3, [r7, #23]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3720      	adds	r7, #32
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	200001f4 	.word	0x200001f4

08007440 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b09a      	sub	sp, #104	; 0x68
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <f_open+0x18>
 8007454:	2309      	movs	r3, #9
 8007456:	e1bb      	b.n	80077d0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800745e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007460:	79fa      	ldrb	r2, [r7, #7]
 8007462:	f107 0114 	add.w	r1, r7, #20
 8007466:	f107 0308 	add.w	r3, r7, #8
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff fce6 	bl	8006e3c <find_volume>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007476:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800747a:	2b00      	cmp	r3, #0
 800747c:	f040 819f 	bne.w	80077be <f_open+0x37e>
		dj.obj.fs = fs;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	f107 0318 	add.w	r3, r7, #24
 800748a:	4611      	mov	r1, r2
 800748c:	4618      	mov	r0, r3
 800748e:	f7ff fbc5 	bl	8006c1c <follow_path>
 8007492:	4603      	mov	r3, r0
 8007494:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007498:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800749c:	2b00      	cmp	r3, #0
 800749e:	d11a      	bne.n	80074d6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80074a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80074a4:	b25b      	sxtb	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	da03      	bge.n	80074b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80074aa:	2306      	movs	r3, #6
 80074ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80074b0:	e011      	b.n	80074d6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	f023 0301 	bic.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	bf14      	ite	ne
 80074bc:	2301      	movne	r3, #1
 80074be:	2300      	moveq	r3, #0
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	f107 0318 	add.w	r3, r7, #24
 80074c8:	4611      	mov	r1, r2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fd ff38 	bl	8005340 <chk_lock>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	f003 031c 	and.w	r3, r3, #28
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d07f      	beq.n	80075e0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80074e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d017      	beq.n	8007518 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80074e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d10e      	bne.n	800750e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80074f0:	f7fd ff82 	bl	80053f8 <enq_lock>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d006      	beq.n	8007508 <f_open+0xc8>
 80074fa:	f107 0318 	add.w	r3, r7, #24
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff f8dc 	bl	80066bc <dir_register>
 8007504:	4603      	mov	r3, r0
 8007506:	e000      	b.n	800750a <f_open+0xca>
 8007508:	2312      	movs	r3, #18
 800750a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	f043 0308 	orr.w	r3, r3, #8
 8007514:	71fb      	strb	r3, [r7, #7]
 8007516:	e010      	b.n	800753a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007518:	7fbb      	ldrb	r3, [r7, #30]
 800751a:	f003 0311 	and.w	r3, r3, #17
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <f_open+0xea>
					res = FR_DENIED;
 8007522:	2307      	movs	r3, #7
 8007524:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007528:	e007      	b.n	800753a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <f_open+0xfa>
 8007534:	2308      	movs	r3, #8
 8007536:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800753a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800753e:	2b00      	cmp	r3, #0
 8007540:	d168      	bne.n	8007614 <f_open+0x1d4>
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d063      	beq.n	8007614 <f_open+0x1d4>
				dw = GET_FATTIME();
 800754c:	f7fd fcfc 	bl	8004f48 <get_fattime>
 8007550:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	330e      	adds	r3, #14
 8007556:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007558:	4618      	mov	r0, r3
 800755a:	f7fd fe47 	bl	80051ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	3316      	adds	r3, #22
 8007562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007564:	4618      	mov	r0, r3
 8007566:	f7fd fe41 	bl	80051ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800756a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756c:	330b      	adds	r3, #11
 800756e:	2220      	movs	r2, #32
 8007570:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007576:	4611      	mov	r1, r2
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe fe17 	bl	80061ac <ld_clust>
 800757e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007584:	2200      	movs	r2, #0
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe fe2f 	bl	80061ea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800758c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758e:	331c      	adds	r3, #28
 8007590:	2100      	movs	r1, #0
 8007592:	4618      	mov	r0, r3
 8007594:	f7fd fe2a 	bl	80051ec <st_dword>
					fs->wflag = 1;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	2201      	movs	r2, #1
 800759c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800759e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d037      	beq.n	8007614 <f_open+0x1d4>
						dw = fs->winsect;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80075aa:	f107 0318 	add.w	r3, r7, #24
 80075ae:	2200      	movs	r2, #0
 80075b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fb1f 	bl	8005bf6 <remove_chain>
 80075b8:	4603      	mov	r3, r0
 80075ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80075be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d126      	bne.n	8007614 <f_open+0x1d4>
							res = move_window(fs, dw);
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe f868 	bl	80056a0 <move_window>
 80075d0:	4603      	mov	r3, r0
 80075d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075da:	3a01      	subs	r2, #1
 80075dc:	615a      	str	r2, [r3, #20]
 80075de:	e019      	b.n	8007614 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80075e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d115      	bne.n	8007614 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80075e8:	7fbb      	ldrb	r3, [r7, #30]
 80075ea:	f003 0310 	and.w	r3, r3, #16
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <f_open+0x1ba>
					res = FR_NO_FILE;
 80075f2:	2304      	movs	r3, #4
 80075f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80075f8:	e00c      	b.n	8007614 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d007      	beq.n	8007614 <f_open+0x1d4>
 8007604:	7fbb      	ldrb	r3, [r7, #30]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <f_open+0x1d4>
						res = FR_DENIED;
 800760e:	2307      	movs	r3, #7
 8007610:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007614:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007618:	2b00      	cmp	r3, #0
 800761a:	d128      	bne.n	800766e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800761c:	79fb      	ldrb	r3, [r7, #7]
 800761e:	f003 0308 	and.w	r3, r3, #8
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800762c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf14      	ite	ne
 8007646:	2301      	movne	r3, #1
 8007648:	2300      	moveq	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	f107 0318 	add.w	r3, r7, #24
 8007652:	4611      	mov	r1, r2
 8007654:	4618      	mov	r0, r3
 8007656:	f7fd fef1 	bl	800543c <inc_lock>
 800765a:	4602      	mov	r2, r0
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <f_open+0x22e>
 8007668:	2302      	movs	r3, #2
 800766a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800766e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007672:	2b00      	cmp	r3, #0
 8007674:	f040 80a3 	bne.w	80077be <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800767c:	4611      	mov	r1, r2
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe fd94 	bl	80061ac <ld_clust>
 8007684:	4602      	mov	r2, r0
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	331c      	adds	r3, #28
 800768e:	4618      	mov	r0, r3
 8007690:	f7fd fd6e 	bl	8005170 <ld_dword>
 8007694:	4602      	mov	r2, r0
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	88da      	ldrh	r2, [r3, #6]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	79fa      	ldrb	r2, [r7, #7]
 80076b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3330      	adds	r3, #48	; 0x30
 80076ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80076ce:	2100      	movs	r1, #0
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fd fdd8 	bl	8005286 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	f003 0320 	and.w	r3, r3, #32
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d06e      	beq.n	80077be <f_open+0x37e>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d06a      	beq.n	80077be <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	68da      	ldr	r2, [r3, #12]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	895b      	ldrh	r3, [r3, #10]
 80076f4:	461a      	mov	r2, r3
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	899b      	ldrh	r3, [r3, #12]
 80076fa:	fb02 f303 	mul.w	r3, r2, r3
 80076fe:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800770c:	e016      	b.n	800773c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe f881 	bl	800581a <get_fat>
 8007718:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800771a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800771c:	2b01      	cmp	r3, #1
 800771e:	d802      	bhi.n	8007726 <f_open+0x2e6>
 8007720:	2302      	movs	r3, #2
 8007722:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772c:	d102      	bne.n	8007734 <f_open+0x2f4>
 800772e:	2301      	movs	r3, #1
 8007730:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007734:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800773c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007740:	2b00      	cmp	r3, #0
 8007742:	d103      	bne.n	800774c <f_open+0x30c>
 8007744:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007748:	429a      	cmp	r2, r3
 800774a:	d8e0      	bhi.n	800770e <f_open+0x2ce>
				}
				fp->clust = clst;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007750:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007752:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007756:	2b00      	cmp	r3, #0
 8007758:	d131      	bne.n	80077be <f_open+0x37e>
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	899b      	ldrh	r3, [r3, #12]
 800775e:	461a      	mov	r2, r3
 8007760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007762:	fbb3 f1f2 	udiv	r1, r3, r2
 8007766:	fb01 f202 	mul.w	r2, r1, r2
 800776a:	1a9b      	subs	r3, r3, r2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d026      	beq.n	80077be <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007774:	4618      	mov	r0, r3
 8007776:	f7fe f831 	bl	80057dc <clust2sect>
 800777a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800777c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d103      	bne.n	800778a <f_open+0x34a>
						res = FR_INT_ERR;
 8007782:	2302      	movs	r3, #2
 8007784:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007788:	e019      	b.n	80077be <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	899b      	ldrh	r3, [r3, #12]
 800778e:	461a      	mov	r2, r3
 8007790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007792:	fbb3 f2f2 	udiv	r2, r3, r2
 8007796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007798:	441a      	add	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	7858      	ldrb	r0, [r3, #1]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6a1a      	ldr	r2, [r3, #32]
 80077ac:	2301      	movs	r3, #1
 80077ae:	f7fd fc69 	bl	8005084 <disk_read>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <f_open+0x37e>
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80077be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <f_open+0x38c>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80077cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3768      	adds	r7, #104	; 0x68
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08c      	sub	sp, #48	; 0x30
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f107 0210 	add.w	r2, r7, #16
 80077f6:	4611      	mov	r1, r2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff fda5 	bl	8007348 <validate>
 80077fe:	4603      	mov	r3, r0
 8007800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007808:	2b00      	cmp	r3, #0
 800780a:	d107      	bne.n	800781c <f_write+0x44>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	7d5b      	ldrb	r3, [r3, #21]
 8007810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <f_write+0x4a>
 800781c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007820:	e16a      	b.n	8007af8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	7d1b      	ldrb	r3, [r3, #20]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <f_write+0x5a>
 800782e:	2307      	movs	r3, #7
 8007830:	e162      	b.n	8007af8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	699a      	ldr	r2, [r3, #24]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	441a      	add	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	429a      	cmp	r2, r3
 8007840:	f080 814c 	bcs.w	8007adc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	43db      	mvns	r3, r3
 800784a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800784c:	e146      	b.n	8007adc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	8992      	ldrh	r2, [r2, #12]
 8007856:	fbb3 f1f2 	udiv	r1, r3, r2
 800785a:	fb01 f202 	mul.w	r2, r1, r2
 800785e:	1a9b      	subs	r3, r3, r2
 8007860:	2b00      	cmp	r3, #0
 8007862:	f040 80f1 	bne.w	8007a48 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	8992      	ldrh	r2, [r2, #12]
 800786e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	8952      	ldrh	r2, [r2, #10]
 8007876:	3a01      	subs	r2, #1
 8007878:	4013      	ands	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d143      	bne.n	800790a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10c      	bne.n	80078a4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	2b00      	cmp	r3, #0
 8007894:	d11a      	bne.n	80078cc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2100      	movs	r1, #0
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fa10 	bl	8005cc0 <create_chain>
 80078a0:	62b8      	str	r0, [r7, #40]	; 0x28
 80078a2:	e013      	b.n	80078cc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d007      	beq.n	80078bc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	4619      	mov	r1, r3
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f7fe fa9c 	bl	8005df0 <clmt_clust>
 80078b8:	62b8      	str	r0, [r7, #40]	; 0x28
 80078ba:	e007      	b.n	80078cc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	4619      	mov	r1, r3
 80078c4:	4610      	mov	r0, r2
 80078c6:	f7fe f9fb 	bl	8005cc0 <create_chain>
 80078ca:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80078cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 8109 	beq.w	8007ae6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d104      	bne.n	80078e4 <f_write+0x10c>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2202      	movs	r2, #2
 80078de:	755a      	strb	r2, [r3, #21]
 80078e0:	2302      	movs	r3, #2
 80078e2:	e109      	b.n	8007af8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ea:	d104      	bne.n	80078f6 <f_write+0x11e>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2201      	movs	r2, #1
 80078f0:	755a      	strb	r2, [r3, #21]
 80078f2:	2301      	movs	r3, #1
 80078f4:	e100      	b.n	8007af8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078fa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d102      	bne.n	800790a <f_write+0x132>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007908:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	7d1b      	ldrb	r3, [r3, #20]
 800790e:	b25b      	sxtb	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	da18      	bge.n	8007946 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	7858      	ldrb	r0, [r3, #1]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6a1a      	ldr	r2, [r3, #32]
 8007922:	2301      	movs	r3, #1
 8007924:	f7fd fbce 	bl	80050c4 <disk_write>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d004      	beq.n	8007938 <f_write+0x160>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2201      	movs	r2, #1
 8007932:	755a      	strb	r2, [r3, #21]
 8007934:	2301      	movs	r3, #1
 8007936:	e0df      	b.n	8007af8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	7d1b      	ldrb	r3, [r3, #20]
 800793c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007940:	b2da      	uxtb	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	4619      	mov	r1, r3
 800794e:	4610      	mov	r0, r2
 8007950:	f7fd ff44 	bl	80057dc <clust2sect>
 8007954:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d104      	bne.n	8007966 <f_write+0x18e>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2202      	movs	r2, #2
 8007960:	755a      	strb	r2, [r3, #21]
 8007962:	2302      	movs	r3, #2
 8007964:	e0c8      	b.n	8007af8 <f_write+0x320>
			sect += csect;
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	4413      	add	r3, r2
 800796c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	899b      	ldrh	r3, [r3, #12]
 8007972:	461a      	mov	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	fbb3 f3f2 	udiv	r3, r3, r2
 800797a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d043      	beq.n	8007a0a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	4413      	add	r3, r2
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	8952      	ldrh	r2, [r2, #10]
 800798c:	4293      	cmp	r3, r2
 800798e:	d905      	bls.n	800799c <f_write+0x1c4>
					cc = fs->csize - csect;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	895b      	ldrh	r3, [r3, #10]
 8007994:	461a      	mov	r2, r3
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	7858      	ldrb	r0, [r3, #1]
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	69f9      	ldr	r1, [r7, #28]
 80079a6:	f7fd fb8d 	bl	80050c4 <disk_write>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <f_write+0x1e2>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2201      	movs	r2, #1
 80079b4:	755a      	strb	r2, [r3, #21]
 80079b6:	2301      	movs	r3, #1
 80079b8:	e09e      	b.n	8007af8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a1a      	ldr	r2, [r3, #32]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	6a3a      	ldr	r2, [r7, #32]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d918      	bls.n	80079fa <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6a1a      	ldr	r2, [r3, #32]
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	8992      	ldrh	r2, [r2, #12]
 80079da:	fb02 f303 	mul.w	r3, r2, r3
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	18d1      	adds	r1, r2, r3
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	899b      	ldrh	r3, [r3, #12]
 80079e6:	461a      	mov	r2, r3
 80079e8:	f7fd fc2c 	bl	8005244 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	7d1b      	ldrb	r3, [r3, #20]
 80079f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	899b      	ldrh	r3, [r3, #12]
 80079fe:	461a      	mov	r2, r3
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	fb02 f303 	mul.w	r3, r2, r3
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007a08:	e04b      	b.n	8007aa2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d016      	beq.n	8007a42 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	699a      	ldr	r2, [r3, #24]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d210      	bcs.n	8007a42 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	7858      	ldrb	r0, [r3, #1]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	f7fd fb29 	bl	8005084 <disk_read>
 8007a32:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	755a      	strb	r2, [r3, #21]
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e05a      	b.n	8007af8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	899b      	ldrh	r3, [r3, #12]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	8992      	ldrh	r2, [r2, #12]
 8007a56:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a5a:	fb01 f202 	mul.w	r2, r1, r2
 8007a5e:	1a9b      	subs	r3, r3, r2
 8007a60:	1ac3      	subs	r3, r0, r3
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d901      	bls.n	8007a70 <f_write+0x298>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	8992      	ldrh	r2, [r2, #12]
 8007a7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a82:	fb00 f202 	mul.w	r2, r0, r2
 8007a86:	1a9b      	subs	r3, r3, r2
 8007a88:	440b      	add	r3, r1
 8007a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a8c:	69f9      	ldr	r1, [r7, #28]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fd fbd8 	bl	8005244 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	7d1b      	ldrb	r3, [r3, #20]
 8007a98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007aa2:	69fa      	ldr	r2, [r7, #28]
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	4413      	add	r3, r2
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	699a      	ldr	r2, [r3, #24]
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	441a      	add	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	619a      	str	r2, [r3, #24]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	bf38      	it	cc
 8007ac2:	461a      	movcc	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	60da      	str	r2, [r3, #12]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	441a      	add	r2, r3
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f47f aeb5 	bne.w	800784e <f_write+0x76>
 8007ae4:	e000      	b.n	8007ae8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007ae6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	7d1b      	ldrb	r3, [r3, #20]
 8007aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3730      	adds	r7, #48	; 0x30
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f107 0208 	add.w	r2, r7, #8
 8007b0e:	4611      	mov	r1, r2
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff fc19 	bl	8007348 <validate>
 8007b16:	4603      	mov	r3, r0
 8007b18:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d168      	bne.n	8007bf2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	7d1b      	ldrb	r3, [r3, #20]
 8007b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d062      	beq.n	8007bf2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	7d1b      	ldrb	r3, [r3, #20]
 8007b30:	b25b      	sxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	da15      	bge.n	8007b62 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	7858      	ldrb	r0, [r3, #1]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a1a      	ldr	r2, [r3, #32]
 8007b44:	2301      	movs	r3, #1
 8007b46:	f7fd fabd 	bl	80050c4 <disk_write>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <f_sync+0x54>
 8007b50:	2301      	movs	r3, #1
 8007b52:	e04f      	b.n	8007bf4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7d1b      	ldrb	r3, [r3, #20]
 8007b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007b62:	f7fd f9f1 	bl	8004f48 <get_fattime>
 8007b66:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4610      	mov	r0, r2
 8007b72:	f7fd fd95 	bl	80056a0 <move_window>
 8007b76:	4603      	mov	r3, r0
 8007b78:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d138      	bne.n	8007bf2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b84:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	330b      	adds	r3, #11
 8007b8a:	781a      	ldrb	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	330b      	adds	r3, #11
 8007b90:	f042 0220 	orr.w	r2, r2, #32
 8007b94:	b2d2      	uxtb	r2, r2
 8007b96:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	68f9      	ldr	r1, [r7, #12]
 8007ba4:	f7fe fb21 	bl	80061ea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f103 021c 	add.w	r2, r3, #28
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f7fd fb19 	bl	80051ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3316      	adds	r3, #22
 8007bbe:	6939      	ldr	r1, [r7, #16]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fd fb13 	bl	80051ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3312      	adds	r3, #18
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fd faf2 	bl	80051b6 <st_word>
					fs->wflag = 1;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fd fd8e 	bl	80056fc <sync_fs>
 8007be0:	4603      	mov	r3, r0
 8007be2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	7d1b      	ldrb	r3, [r3, #20]
 8007be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7ff ff7b 	bl	8007b00 <f_sync>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d118      	bne.n	8007c46 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f107 0208 	add.w	r2, r7, #8
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7ff fb93 	bl	8007348 <validate>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10c      	bne.n	8007c46 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fd fc91 	bl	8005558 <dec_lock>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d102      	bne.n	8007c46 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	2b0a      	cmp	r3, #10
 8007c60:	d103      	bne.n	8007c6a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007c62:	210d      	movs	r1, #13
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff fff3 	bl	8007c50 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	db25      	blt.n	8007cc2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	60fa      	str	r2, [r7, #12]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	4413      	add	r3, r2
 8007c80:	78fa      	ldrb	r2, [r7, #3]
 8007c82:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b3c      	cmp	r3, #60	; 0x3c
 8007c88:	dd12      	ble.n	8007cb0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6818      	ldr	r0, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f103 010c 	add.w	r1, r3, #12
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	f107 0308 	add.w	r3, r7, #8
 8007c9a:	f7ff fd9d 	bl	80077d8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d101      	bne.n	8007caa <putc_bfd+0x5a>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e001      	b.n	8007cae <putc_bfd+0x5e>
 8007caa:	f04f 33ff 	mov.w	r3, #4294967295
 8007cae:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	609a      	str	r2, [r3, #8]
 8007cc0:	e000      	b.n	8007cc4 <putc_bfd+0x74>
	if (i < 0) return;
 8007cc2:	bf00      	nop
}
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	db16      	blt.n	8007d08 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6818      	ldr	r0, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f103 010c 	add.w	r1, r3, #12
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f107 030c 	add.w	r3, r7, #12
 8007cee:	f7ff fd73 	bl	80077d8 <f_write>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d107      	bne.n	8007d08 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d102      	bne.n	8007d08 <putc_flush+0x3e>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	e001      	b.n	8007d0c <putc_flush+0x42>
	return EOF;
 8007d08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	605a      	str	r2, [r3, #4]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	609a      	str	r2, [r3, #8]
}
 8007d32:	bf00      	nop
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b096      	sub	sp, #88	; 0x58
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007d48:	f107 030c 	add.w	r3, r7, #12
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff ffe0 	bl	8007d14 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007d54:	e009      	b.n	8007d6a <f_puts+0x2c>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	781a      	ldrb	r2, [r3, #0]
 8007d5e:	f107 030c 	add.w	r3, r7, #12
 8007d62:	4611      	mov	r1, r2
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7ff ff73 	bl	8007c50 <putc_bfd>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1f1      	bne.n	8007d56 <f_puts+0x18>
	return putc_flush(&pb);
 8007d72:	f107 030c 	add.w	r3, r7, #12
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff ffa7 	bl	8007cca <putc_flush>
 8007d7c:	4603      	mov	r3, r0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3758      	adds	r7, #88	; 0x58
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007d96:	2301      	movs	r3, #1
 8007d98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007d9e:	4b1f      	ldr	r3, [pc, #124]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007da0:	7a5b      	ldrb	r3, [r3, #9]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d131      	bne.n	8007e0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007da8:	4b1c      	ldr	r3, [pc, #112]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007daa:	7a5b      	ldrb	r3, [r3, #9]
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	461a      	mov	r2, r3
 8007db0:	4b1a      	ldr	r3, [pc, #104]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007db2:	2100      	movs	r1, #0
 8007db4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007db6:	4b19      	ldr	r3, [pc, #100]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007db8:	7a5b      	ldrb	r3, [r3, #9]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	4a17      	ldr	r2, [pc, #92]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007dc6:	4b15      	ldr	r3, [pc, #84]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007dc8:	7a5b      	ldrb	r3, [r3, #9]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	461a      	mov	r2, r3
 8007dce:	4b13      	ldr	r3, [pc, #76]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007dd0:	4413      	add	r3, r2
 8007dd2:	79fa      	ldrb	r2, [r7, #7]
 8007dd4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007dd6:	4b11      	ldr	r3, [pc, #68]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007dd8:	7a5b      	ldrb	r3, [r3, #9]
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	b2d1      	uxtb	r1, r2
 8007de0:	4a0e      	ldr	r2, [pc, #56]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007de2:	7251      	strb	r1, [r2, #9]
 8007de4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007de6:	7dbb      	ldrb	r3, [r7, #22]
 8007de8:	3330      	adds	r3, #48	; 0x30
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	3301      	adds	r3, #1
 8007df4:	223a      	movs	r2, #58	; 0x3a
 8007df6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	3302      	adds	r3, #2
 8007dfc:	222f      	movs	r2, #47	; 0x2f
 8007dfe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	3303      	adds	r3, #3
 8007e04:	2200      	movs	r2, #0
 8007e06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	371c      	adds	r7, #28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	2000041c 	.word	0x2000041c

08007e20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff ffaa 	bl	8007d88 <FATFS_LinkDriverEx>
 8007e34:	4603      	mov	r3, r0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	6039      	str	r1, [r7, #0]
 8007e4a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007e4c:	88fb      	ldrh	r3, [r7, #6]
 8007e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8007e50:	d802      	bhi.n	8007e58 <ff_convert+0x18>
		c = chr;
 8007e52:	88fb      	ldrh	r3, [r7, #6]
 8007e54:	81fb      	strh	r3, [r7, #14]
 8007e56:	e025      	b.n	8007ea4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00b      	beq.n	8007e76 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007e5e:	88fb      	ldrh	r3, [r7, #6]
 8007e60:	2bff      	cmp	r3, #255	; 0xff
 8007e62:	d805      	bhi.n	8007e70 <ff_convert+0x30>
 8007e64:	88fb      	ldrh	r3, [r7, #6]
 8007e66:	3b80      	subs	r3, #128	; 0x80
 8007e68:	4a12      	ldr	r2, [pc, #72]	; (8007eb4 <ff_convert+0x74>)
 8007e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e6e:	e000      	b.n	8007e72 <ff_convert+0x32>
 8007e70:	2300      	movs	r3, #0
 8007e72:	81fb      	strh	r3, [r7, #14]
 8007e74:	e016      	b.n	8007ea4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007e76:	2300      	movs	r3, #0
 8007e78:	81fb      	strh	r3, [r7, #14]
 8007e7a:	e009      	b.n	8007e90 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007e7c:	89fb      	ldrh	r3, [r7, #14]
 8007e7e:	4a0d      	ldr	r2, [pc, #52]	; (8007eb4 <ff_convert+0x74>)
 8007e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e84:	88fa      	ldrh	r2, [r7, #6]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d006      	beq.n	8007e98 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007e8a:	89fb      	ldrh	r3, [r7, #14]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	81fb      	strh	r3, [r7, #14]
 8007e90:	89fb      	ldrh	r3, [r7, #14]
 8007e92:	2b7f      	cmp	r3, #127	; 0x7f
 8007e94:	d9f2      	bls.n	8007e7c <ff_convert+0x3c>
 8007e96:	e000      	b.n	8007e9a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007e98:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007e9a:	89fb      	ldrh	r3, [r7, #14]
 8007e9c:	3380      	adds	r3, #128	; 0x80
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007ea4:	89fb      	ldrh	r3, [r7, #14]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	080090cc 	.word	0x080090cc

08007eb8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec8:	d201      	bcs.n	8007ece <ff_wtoupper+0x16>
 8007eca:	4b3e      	ldr	r3, [pc, #248]	; (8007fc4 <ff_wtoupper+0x10c>)
 8007ecc:	e000      	b.n	8007ed0 <ff_wtoupper+0x18>
 8007ece:	4b3e      	ldr	r3, [pc, #248]	; (8007fc8 <ff_wtoupper+0x110>)
 8007ed0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	1c9a      	adds	r2, r3, #2
 8007ed6:	617a      	str	r2, [r7, #20]
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007edc:	8a7b      	ldrh	r3, [r7, #18]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d068      	beq.n	8007fb4 <ff_wtoupper+0xfc>
 8007ee2:	88fa      	ldrh	r2, [r7, #6]
 8007ee4:	8a7b      	ldrh	r3, [r7, #18]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d364      	bcc.n	8007fb4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	1c9a      	adds	r2, r3, #2
 8007eee:	617a      	str	r2, [r7, #20]
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	823b      	strh	r3, [r7, #16]
 8007ef4:	8a3b      	ldrh	r3, [r7, #16]
 8007ef6:	0a1b      	lsrs	r3, r3, #8
 8007ef8:	81fb      	strh	r3, [r7, #14]
 8007efa:	8a3b      	ldrh	r3, [r7, #16]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007f00:	88fa      	ldrh	r2, [r7, #6]
 8007f02:	8a79      	ldrh	r1, [r7, #18]
 8007f04:	8a3b      	ldrh	r3, [r7, #16]
 8007f06:	440b      	add	r3, r1
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	da49      	bge.n	8007fa0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007f0c:	89fb      	ldrh	r3, [r7, #14]
 8007f0e:	2b08      	cmp	r3, #8
 8007f10:	d84f      	bhi.n	8007fb2 <ff_wtoupper+0xfa>
 8007f12:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <ff_wtoupper+0x60>)
 8007f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f18:	08007f3d 	.word	0x08007f3d
 8007f1c:	08007f4f 	.word	0x08007f4f
 8007f20:	08007f65 	.word	0x08007f65
 8007f24:	08007f6d 	.word	0x08007f6d
 8007f28:	08007f75 	.word	0x08007f75
 8007f2c:	08007f7d 	.word	0x08007f7d
 8007f30:	08007f85 	.word	0x08007f85
 8007f34:	08007f8d 	.word	0x08007f8d
 8007f38:	08007f95 	.word	0x08007f95
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007f3c:	88fa      	ldrh	r2, [r7, #6]
 8007f3e:	8a7b      	ldrh	r3, [r7, #18]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4413      	add	r3, r2
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	80fb      	strh	r3, [r7, #6]
 8007f4c:	e027      	b.n	8007f9e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007f4e:	88fa      	ldrh	r2, [r7, #6]
 8007f50:	8a7b      	ldrh	r3, [r7, #18]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	88fa      	ldrh	r2, [r7, #6]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	80fb      	strh	r3, [r7, #6]
 8007f62:	e01c      	b.n	8007f9e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007f64:	88fb      	ldrh	r3, [r7, #6]
 8007f66:	3b10      	subs	r3, #16
 8007f68:	80fb      	strh	r3, [r7, #6]
 8007f6a:	e018      	b.n	8007f9e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	3b20      	subs	r3, #32
 8007f70:	80fb      	strh	r3, [r7, #6]
 8007f72:	e014      	b.n	8007f9e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007f74:	88fb      	ldrh	r3, [r7, #6]
 8007f76:	3b30      	subs	r3, #48	; 0x30
 8007f78:	80fb      	strh	r3, [r7, #6]
 8007f7a:	e010      	b.n	8007f9e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007f7c:	88fb      	ldrh	r3, [r7, #6]
 8007f7e:	3b1a      	subs	r3, #26
 8007f80:	80fb      	strh	r3, [r7, #6]
 8007f82:	e00c      	b.n	8007f9e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007f84:	88fb      	ldrh	r3, [r7, #6]
 8007f86:	3308      	adds	r3, #8
 8007f88:	80fb      	strh	r3, [r7, #6]
 8007f8a:	e008      	b.n	8007f9e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007f8c:	88fb      	ldrh	r3, [r7, #6]
 8007f8e:	3b50      	subs	r3, #80	; 0x50
 8007f90:	80fb      	strh	r3, [r7, #6]
 8007f92:	e004      	b.n	8007f9e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007f94:	88fb      	ldrh	r3, [r7, #6]
 8007f96:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007f9a:	80fb      	strh	r3, [r7, #6]
 8007f9c:	bf00      	nop
			}
			break;
 8007f9e:	e008      	b.n	8007fb2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007fa0:	89fb      	ldrh	r3, [r7, #14]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d195      	bne.n	8007ed2 <ff_wtoupper+0x1a>
 8007fa6:	8a3b      	ldrh	r3, [r7, #16]
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	4413      	add	r3, r2
 8007fae:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007fb0:	e78f      	b.n	8007ed2 <ff_wtoupper+0x1a>
			break;
 8007fb2:	bf00      	nop
	}

	return chr;
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	080091cc 	.word	0x080091cc
 8007fc8:	080093c0 	.word	0x080093c0

08007fcc <std>:
 8007fcc:	2300      	movs	r3, #0
 8007fce:	b510      	push	{r4, lr}
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fda:	6083      	str	r3, [r0, #8]
 8007fdc:	8181      	strh	r1, [r0, #12]
 8007fde:	6643      	str	r3, [r0, #100]	; 0x64
 8007fe0:	81c2      	strh	r2, [r0, #14]
 8007fe2:	6183      	str	r3, [r0, #24]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	305c      	adds	r0, #92	; 0x5c
 8007fea:	f000 f9f7 	bl	80083dc <memset>
 8007fee:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <std+0x58>)
 8007ff0:	6263      	str	r3, [r4, #36]	; 0x24
 8007ff2:	4b0d      	ldr	r3, [pc, #52]	; (8008028 <std+0x5c>)
 8007ff4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ff6:	4b0d      	ldr	r3, [pc, #52]	; (800802c <std+0x60>)
 8007ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ffa:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <std+0x64>)
 8007ffc:	6323      	str	r3, [r4, #48]	; 0x30
 8007ffe:	4b0d      	ldr	r3, [pc, #52]	; (8008034 <std+0x68>)
 8008000:	6224      	str	r4, [r4, #32]
 8008002:	429c      	cmp	r4, r3
 8008004:	d006      	beq.n	8008014 <std+0x48>
 8008006:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800800a:	4294      	cmp	r4, r2
 800800c:	d002      	beq.n	8008014 <std+0x48>
 800800e:	33d0      	adds	r3, #208	; 0xd0
 8008010:	429c      	cmp	r4, r3
 8008012:	d105      	bne.n	8008020 <std+0x54>
 8008014:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800801c:	f000 ba56 	b.w	80084cc <__retarget_lock_init_recursive>
 8008020:	bd10      	pop	{r4, pc}
 8008022:	bf00      	nop
 8008024:	0800822d 	.word	0x0800822d
 8008028:	0800824f 	.word	0x0800824f
 800802c:	08008287 	.word	0x08008287
 8008030:	080082ab 	.word	0x080082ab
 8008034:	20000428 	.word	0x20000428

08008038 <stdio_exit_handler>:
 8008038:	4a02      	ldr	r2, [pc, #8]	; (8008044 <stdio_exit_handler+0xc>)
 800803a:	4903      	ldr	r1, [pc, #12]	; (8008048 <stdio_exit_handler+0x10>)
 800803c:	4803      	ldr	r0, [pc, #12]	; (800804c <stdio_exit_handler+0x14>)
 800803e:	f000 b869 	b.w	8008114 <_fwalk_sglue>
 8008042:	bf00      	nop
 8008044:	20000024 	.word	0x20000024
 8008048:	08008d79 	.word	0x08008d79
 800804c:	20000030 	.word	0x20000030

08008050 <cleanup_stdio>:
 8008050:	6841      	ldr	r1, [r0, #4]
 8008052:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <cleanup_stdio+0x34>)
 8008054:	4299      	cmp	r1, r3
 8008056:	b510      	push	{r4, lr}
 8008058:	4604      	mov	r4, r0
 800805a:	d001      	beq.n	8008060 <cleanup_stdio+0x10>
 800805c:	f000 fe8c 	bl	8008d78 <_fflush_r>
 8008060:	68a1      	ldr	r1, [r4, #8]
 8008062:	4b09      	ldr	r3, [pc, #36]	; (8008088 <cleanup_stdio+0x38>)
 8008064:	4299      	cmp	r1, r3
 8008066:	d002      	beq.n	800806e <cleanup_stdio+0x1e>
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fe85 	bl	8008d78 <_fflush_r>
 800806e:	68e1      	ldr	r1, [r4, #12]
 8008070:	4b06      	ldr	r3, [pc, #24]	; (800808c <cleanup_stdio+0x3c>)
 8008072:	4299      	cmp	r1, r3
 8008074:	d004      	beq.n	8008080 <cleanup_stdio+0x30>
 8008076:	4620      	mov	r0, r4
 8008078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800807c:	f000 be7c 	b.w	8008d78 <_fflush_r>
 8008080:	bd10      	pop	{r4, pc}
 8008082:	bf00      	nop
 8008084:	20000428 	.word	0x20000428
 8008088:	20000490 	.word	0x20000490
 800808c:	200004f8 	.word	0x200004f8

08008090 <global_stdio_init.part.0>:
 8008090:	b510      	push	{r4, lr}
 8008092:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <global_stdio_init.part.0+0x30>)
 8008094:	4c0b      	ldr	r4, [pc, #44]	; (80080c4 <global_stdio_init.part.0+0x34>)
 8008096:	4a0c      	ldr	r2, [pc, #48]	; (80080c8 <global_stdio_init.part.0+0x38>)
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	4620      	mov	r0, r4
 800809c:	2200      	movs	r2, #0
 800809e:	2104      	movs	r1, #4
 80080a0:	f7ff ff94 	bl	8007fcc <std>
 80080a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80080a8:	2201      	movs	r2, #1
 80080aa:	2109      	movs	r1, #9
 80080ac:	f7ff ff8e 	bl	8007fcc <std>
 80080b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80080b4:	2202      	movs	r2, #2
 80080b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080ba:	2112      	movs	r1, #18
 80080bc:	f7ff bf86 	b.w	8007fcc <std>
 80080c0:	20000560 	.word	0x20000560
 80080c4:	20000428 	.word	0x20000428
 80080c8:	08008039 	.word	0x08008039

080080cc <__sfp_lock_acquire>:
 80080cc:	4801      	ldr	r0, [pc, #4]	; (80080d4 <__sfp_lock_acquire+0x8>)
 80080ce:	f000 b9fe 	b.w	80084ce <__retarget_lock_acquire_recursive>
 80080d2:	bf00      	nop
 80080d4:	20000569 	.word	0x20000569

080080d8 <__sfp_lock_release>:
 80080d8:	4801      	ldr	r0, [pc, #4]	; (80080e0 <__sfp_lock_release+0x8>)
 80080da:	f000 b9f9 	b.w	80084d0 <__retarget_lock_release_recursive>
 80080de:	bf00      	nop
 80080e0:	20000569 	.word	0x20000569

080080e4 <__sinit>:
 80080e4:	b510      	push	{r4, lr}
 80080e6:	4604      	mov	r4, r0
 80080e8:	f7ff fff0 	bl	80080cc <__sfp_lock_acquire>
 80080ec:	6a23      	ldr	r3, [r4, #32]
 80080ee:	b11b      	cbz	r3, 80080f8 <__sinit+0x14>
 80080f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080f4:	f7ff bff0 	b.w	80080d8 <__sfp_lock_release>
 80080f8:	4b04      	ldr	r3, [pc, #16]	; (800810c <__sinit+0x28>)
 80080fa:	6223      	str	r3, [r4, #32]
 80080fc:	4b04      	ldr	r3, [pc, #16]	; (8008110 <__sinit+0x2c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1f5      	bne.n	80080f0 <__sinit+0xc>
 8008104:	f7ff ffc4 	bl	8008090 <global_stdio_init.part.0>
 8008108:	e7f2      	b.n	80080f0 <__sinit+0xc>
 800810a:	bf00      	nop
 800810c:	08008051 	.word	0x08008051
 8008110:	20000560 	.word	0x20000560

08008114 <_fwalk_sglue>:
 8008114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008118:	4607      	mov	r7, r0
 800811a:	4688      	mov	r8, r1
 800811c:	4614      	mov	r4, r2
 800811e:	2600      	movs	r6, #0
 8008120:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008124:	f1b9 0901 	subs.w	r9, r9, #1
 8008128:	d505      	bpl.n	8008136 <_fwalk_sglue+0x22>
 800812a:	6824      	ldr	r4, [r4, #0]
 800812c:	2c00      	cmp	r4, #0
 800812e:	d1f7      	bne.n	8008120 <_fwalk_sglue+0xc>
 8008130:	4630      	mov	r0, r6
 8008132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008136:	89ab      	ldrh	r3, [r5, #12]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d907      	bls.n	800814c <_fwalk_sglue+0x38>
 800813c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008140:	3301      	adds	r3, #1
 8008142:	d003      	beq.n	800814c <_fwalk_sglue+0x38>
 8008144:	4629      	mov	r1, r5
 8008146:	4638      	mov	r0, r7
 8008148:	47c0      	blx	r8
 800814a:	4306      	orrs	r6, r0
 800814c:	3568      	adds	r5, #104	; 0x68
 800814e:	e7e9      	b.n	8008124 <_fwalk_sglue+0x10>

08008150 <iprintf>:
 8008150:	b40f      	push	{r0, r1, r2, r3}
 8008152:	b507      	push	{r0, r1, r2, lr}
 8008154:	4906      	ldr	r1, [pc, #24]	; (8008170 <iprintf+0x20>)
 8008156:	ab04      	add	r3, sp, #16
 8008158:	6808      	ldr	r0, [r1, #0]
 800815a:	f853 2b04 	ldr.w	r2, [r3], #4
 800815e:	6881      	ldr	r1, [r0, #8]
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	f000 fad9 	bl	8008718 <_vfiprintf_r>
 8008166:	b003      	add	sp, #12
 8008168:	f85d eb04 	ldr.w	lr, [sp], #4
 800816c:	b004      	add	sp, #16
 800816e:	4770      	bx	lr
 8008170:	2000007c 	.word	0x2000007c

08008174 <_puts_r>:
 8008174:	6a03      	ldr	r3, [r0, #32]
 8008176:	b570      	push	{r4, r5, r6, lr}
 8008178:	6884      	ldr	r4, [r0, #8]
 800817a:	4605      	mov	r5, r0
 800817c:	460e      	mov	r6, r1
 800817e:	b90b      	cbnz	r3, 8008184 <_puts_r+0x10>
 8008180:	f7ff ffb0 	bl	80080e4 <__sinit>
 8008184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008186:	07db      	lsls	r3, r3, #31
 8008188:	d405      	bmi.n	8008196 <_puts_r+0x22>
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	0598      	lsls	r0, r3, #22
 800818e:	d402      	bmi.n	8008196 <_puts_r+0x22>
 8008190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008192:	f000 f99c 	bl	80084ce <__retarget_lock_acquire_recursive>
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	0719      	lsls	r1, r3, #28
 800819a:	d513      	bpl.n	80081c4 <_puts_r+0x50>
 800819c:	6923      	ldr	r3, [r4, #16]
 800819e:	b18b      	cbz	r3, 80081c4 <_puts_r+0x50>
 80081a0:	3e01      	subs	r6, #1
 80081a2:	68a3      	ldr	r3, [r4, #8]
 80081a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081a8:	3b01      	subs	r3, #1
 80081aa:	60a3      	str	r3, [r4, #8]
 80081ac:	b9e9      	cbnz	r1, 80081ea <_puts_r+0x76>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	da2e      	bge.n	8008210 <_puts_r+0x9c>
 80081b2:	4622      	mov	r2, r4
 80081b4:	210a      	movs	r1, #10
 80081b6:	4628      	mov	r0, r5
 80081b8:	f000 f87b 	bl	80082b2 <__swbuf_r>
 80081bc:	3001      	adds	r0, #1
 80081be:	d007      	beq.n	80081d0 <_puts_r+0x5c>
 80081c0:	250a      	movs	r5, #10
 80081c2:	e007      	b.n	80081d4 <_puts_r+0x60>
 80081c4:	4621      	mov	r1, r4
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 f8b0 	bl	800832c <__swsetup_r>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d0e7      	beq.n	80081a0 <_puts_r+0x2c>
 80081d0:	f04f 35ff 	mov.w	r5, #4294967295
 80081d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081d6:	07da      	lsls	r2, r3, #31
 80081d8:	d405      	bmi.n	80081e6 <_puts_r+0x72>
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	059b      	lsls	r3, r3, #22
 80081de:	d402      	bmi.n	80081e6 <_puts_r+0x72>
 80081e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081e2:	f000 f975 	bl	80084d0 <__retarget_lock_release_recursive>
 80081e6:	4628      	mov	r0, r5
 80081e8:	bd70      	pop	{r4, r5, r6, pc}
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	da04      	bge.n	80081f8 <_puts_r+0x84>
 80081ee:	69a2      	ldr	r2, [r4, #24]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	dc06      	bgt.n	8008202 <_puts_r+0x8e>
 80081f4:	290a      	cmp	r1, #10
 80081f6:	d004      	beq.n	8008202 <_puts_r+0x8e>
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	6022      	str	r2, [r4, #0]
 80081fe:	7019      	strb	r1, [r3, #0]
 8008200:	e7cf      	b.n	80081a2 <_puts_r+0x2e>
 8008202:	4622      	mov	r2, r4
 8008204:	4628      	mov	r0, r5
 8008206:	f000 f854 	bl	80082b2 <__swbuf_r>
 800820a:	3001      	adds	r0, #1
 800820c:	d1c9      	bne.n	80081a2 <_puts_r+0x2e>
 800820e:	e7df      	b.n	80081d0 <_puts_r+0x5c>
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	250a      	movs	r5, #10
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	6022      	str	r2, [r4, #0]
 8008218:	701d      	strb	r5, [r3, #0]
 800821a:	e7db      	b.n	80081d4 <_puts_r+0x60>

0800821c <puts>:
 800821c:	4b02      	ldr	r3, [pc, #8]	; (8008228 <puts+0xc>)
 800821e:	4601      	mov	r1, r0
 8008220:	6818      	ldr	r0, [r3, #0]
 8008222:	f7ff bfa7 	b.w	8008174 <_puts_r>
 8008226:	bf00      	nop
 8008228:	2000007c 	.word	0x2000007c

0800822c <__sread>:
 800822c:	b510      	push	{r4, lr}
 800822e:	460c      	mov	r4, r1
 8008230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008234:	f000 f8fc 	bl	8008430 <_read_r>
 8008238:	2800      	cmp	r0, #0
 800823a:	bfab      	itete	ge
 800823c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800823e:	89a3      	ldrhlt	r3, [r4, #12]
 8008240:	181b      	addge	r3, r3, r0
 8008242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008246:	bfac      	ite	ge
 8008248:	6563      	strge	r3, [r4, #84]	; 0x54
 800824a:	81a3      	strhlt	r3, [r4, #12]
 800824c:	bd10      	pop	{r4, pc}

0800824e <__swrite>:
 800824e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008252:	461f      	mov	r7, r3
 8008254:	898b      	ldrh	r3, [r1, #12]
 8008256:	05db      	lsls	r3, r3, #23
 8008258:	4605      	mov	r5, r0
 800825a:	460c      	mov	r4, r1
 800825c:	4616      	mov	r6, r2
 800825e:	d505      	bpl.n	800826c <__swrite+0x1e>
 8008260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008264:	2302      	movs	r3, #2
 8008266:	2200      	movs	r2, #0
 8008268:	f000 f8d0 	bl	800840c <_lseek_r>
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008276:	81a3      	strh	r3, [r4, #12]
 8008278:	4632      	mov	r2, r6
 800827a:	463b      	mov	r3, r7
 800827c:	4628      	mov	r0, r5
 800827e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008282:	f000 b8e7 	b.w	8008454 <_write_r>

08008286 <__sseek>:
 8008286:	b510      	push	{r4, lr}
 8008288:	460c      	mov	r4, r1
 800828a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828e:	f000 f8bd 	bl	800840c <_lseek_r>
 8008292:	1c43      	adds	r3, r0, #1
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	bf15      	itete	ne
 8008298:	6560      	strne	r0, [r4, #84]	; 0x54
 800829a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800829e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082a2:	81a3      	strheq	r3, [r4, #12]
 80082a4:	bf18      	it	ne
 80082a6:	81a3      	strhne	r3, [r4, #12]
 80082a8:	bd10      	pop	{r4, pc}

080082aa <__sclose>:
 80082aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ae:	f000 b89d 	b.w	80083ec <_close_r>

080082b2 <__swbuf_r>:
 80082b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b4:	460e      	mov	r6, r1
 80082b6:	4614      	mov	r4, r2
 80082b8:	4605      	mov	r5, r0
 80082ba:	b118      	cbz	r0, 80082c4 <__swbuf_r+0x12>
 80082bc:	6a03      	ldr	r3, [r0, #32]
 80082be:	b90b      	cbnz	r3, 80082c4 <__swbuf_r+0x12>
 80082c0:	f7ff ff10 	bl	80080e4 <__sinit>
 80082c4:	69a3      	ldr	r3, [r4, #24]
 80082c6:	60a3      	str	r3, [r4, #8]
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	071a      	lsls	r2, r3, #28
 80082cc:	d525      	bpl.n	800831a <__swbuf_r+0x68>
 80082ce:	6923      	ldr	r3, [r4, #16]
 80082d0:	b31b      	cbz	r3, 800831a <__swbuf_r+0x68>
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	6922      	ldr	r2, [r4, #16]
 80082d6:	1a98      	subs	r0, r3, r2
 80082d8:	6963      	ldr	r3, [r4, #20]
 80082da:	b2f6      	uxtb	r6, r6
 80082dc:	4283      	cmp	r3, r0
 80082de:	4637      	mov	r7, r6
 80082e0:	dc04      	bgt.n	80082ec <__swbuf_r+0x3a>
 80082e2:	4621      	mov	r1, r4
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 fd47 	bl	8008d78 <_fflush_r>
 80082ea:	b9e0      	cbnz	r0, 8008326 <__swbuf_r+0x74>
 80082ec:	68a3      	ldr	r3, [r4, #8]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	60a3      	str	r3, [r4, #8]
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	1c5a      	adds	r2, r3, #1
 80082f6:	6022      	str	r2, [r4, #0]
 80082f8:	701e      	strb	r6, [r3, #0]
 80082fa:	6962      	ldr	r2, [r4, #20]
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	429a      	cmp	r2, r3
 8008300:	d004      	beq.n	800830c <__swbuf_r+0x5a>
 8008302:	89a3      	ldrh	r3, [r4, #12]
 8008304:	07db      	lsls	r3, r3, #31
 8008306:	d506      	bpl.n	8008316 <__swbuf_r+0x64>
 8008308:	2e0a      	cmp	r6, #10
 800830a:	d104      	bne.n	8008316 <__swbuf_r+0x64>
 800830c:	4621      	mov	r1, r4
 800830e:	4628      	mov	r0, r5
 8008310:	f000 fd32 	bl	8008d78 <_fflush_r>
 8008314:	b938      	cbnz	r0, 8008326 <__swbuf_r+0x74>
 8008316:	4638      	mov	r0, r7
 8008318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831a:	4621      	mov	r1, r4
 800831c:	4628      	mov	r0, r5
 800831e:	f000 f805 	bl	800832c <__swsetup_r>
 8008322:	2800      	cmp	r0, #0
 8008324:	d0d5      	beq.n	80082d2 <__swbuf_r+0x20>
 8008326:	f04f 37ff 	mov.w	r7, #4294967295
 800832a:	e7f4      	b.n	8008316 <__swbuf_r+0x64>

0800832c <__swsetup_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4b2a      	ldr	r3, [pc, #168]	; (80083d8 <__swsetup_r+0xac>)
 8008330:	4605      	mov	r5, r0
 8008332:	6818      	ldr	r0, [r3, #0]
 8008334:	460c      	mov	r4, r1
 8008336:	b118      	cbz	r0, 8008340 <__swsetup_r+0x14>
 8008338:	6a03      	ldr	r3, [r0, #32]
 800833a:	b90b      	cbnz	r3, 8008340 <__swsetup_r+0x14>
 800833c:	f7ff fed2 	bl	80080e4 <__sinit>
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008346:	0718      	lsls	r0, r3, #28
 8008348:	d422      	bmi.n	8008390 <__swsetup_r+0x64>
 800834a:	06d9      	lsls	r1, r3, #27
 800834c:	d407      	bmi.n	800835e <__swsetup_r+0x32>
 800834e:	2309      	movs	r3, #9
 8008350:	602b      	str	r3, [r5, #0]
 8008352:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008356:	81a3      	strh	r3, [r4, #12]
 8008358:	f04f 30ff 	mov.w	r0, #4294967295
 800835c:	e034      	b.n	80083c8 <__swsetup_r+0x9c>
 800835e:	0758      	lsls	r0, r3, #29
 8008360:	d512      	bpl.n	8008388 <__swsetup_r+0x5c>
 8008362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008364:	b141      	cbz	r1, 8008378 <__swsetup_r+0x4c>
 8008366:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800836a:	4299      	cmp	r1, r3
 800836c:	d002      	beq.n	8008374 <__swsetup_r+0x48>
 800836e:	4628      	mov	r0, r5
 8008370:	f000 f8b0 	bl	80084d4 <_free_r>
 8008374:	2300      	movs	r3, #0
 8008376:	6363      	str	r3, [r4, #52]	; 0x34
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800837e:	81a3      	strh	r3, [r4, #12]
 8008380:	2300      	movs	r3, #0
 8008382:	6063      	str	r3, [r4, #4]
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	6023      	str	r3, [r4, #0]
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	f043 0308 	orr.w	r3, r3, #8
 800838e:	81a3      	strh	r3, [r4, #12]
 8008390:	6923      	ldr	r3, [r4, #16]
 8008392:	b94b      	cbnz	r3, 80083a8 <__swsetup_r+0x7c>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800839a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800839e:	d003      	beq.n	80083a8 <__swsetup_r+0x7c>
 80083a0:	4621      	mov	r1, r4
 80083a2:	4628      	mov	r0, r5
 80083a4:	f000 fd36 	bl	8008e14 <__smakebuf_r>
 80083a8:	89a0      	ldrh	r0, [r4, #12]
 80083aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083ae:	f010 0301 	ands.w	r3, r0, #1
 80083b2:	d00a      	beq.n	80083ca <__swsetup_r+0x9e>
 80083b4:	2300      	movs	r3, #0
 80083b6:	60a3      	str	r3, [r4, #8]
 80083b8:	6963      	ldr	r3, [r4, #20]
 80083ba:	425b      	negs	r3, r3
 80083bc:	61a3      	str	r3, [r4, #24]
 80083be:	6923      	ldr	r3, [r4, #16]
 80083c0:	b943      	cbnz	r3, 80083d4 <__swsetup_r+0xa8>
 80083c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083c6:	d1c4      	bne.n	8008352 <__swsetup_r+0x26>
 80083c8:	bd38      	pop	{r3, r4, r5, pc}
 80083ca:	0781      	lsls	r1, r0, #30
 80083cc:	bf58      	it	pl
 80083ce:	6963      	ldrpl	r3, [r4, #20]
 80083d0:	60a3      	str	r3, [r4, #8]
 80083d2:	e7f4      	b.n	80083be <__swsetup_r+0x92>
 80083d4:	2000      	movs	r0, #0
 80083d6:	e7f7      	b.n	80083c8 <__swsetup_r+0x9c>
 80083d8:	2000007c 	.word	0x2000007c

080083dc <memset>:
 80083dc:	4402      	add	r2, r0
 80083de:	4603      	mov	r3, r0
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d100      	bne.n	80083e6 <memset+0xa>
 80083e4:	4770      	bx	lr
 80083e6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ea:	e7f9      	b.n	80083e0 <memset+0x4>

080083ec <_close_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4d06      	ldr	r5, [pc, #24]	; (8008408 <_close_r+0x1c>)
 80083f0:	2300      	movs	r3, #0
 80083f2:	4604      	mov	r4, r0
 80083f4:	4608      	mov	r0, r1
 80083f6:	602b      	str	r3, [r5, #0]
 80083f8:	f7f9 f9bf 	bl	800177a <_close>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d102      	bne.n	8008406 <_close_r+0x1a>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	b103      	cbz	r3, 8008406 <_close_r+0x1a>
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	20000564 	.word	0x20000564

0800840c <_lseek_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d07      	ldr	r5, [pc, #28]	; (800842c <_lseek_r+0x20>)
 8008410:	4604      	mov	r4, r0
 8008412:	4608      	mov	r0, r1
 8008414:	4611      	mov	r1, r2
 8008416:	2200      	movs	r2, #0
 8008418:	602a      	str	r2, [r5, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	f7f9 f9d4 	bl	80017c8 <_lseek>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_lseek_r+0x1e>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_lseek_r+0x1e>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	20000564 	.word	0x20000564

08008430 <_read_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	4d07      	ldr	r5, [pc, #28]	; (8008450 <_read_r+0x20>)
 8008434:	4604      	mov	r4, r0
 8008436:	4608      	mov	r0, r1
 8008438:	4611      	mov	r1, r2
 800843a:	2200      	movs	r2, #0
 800843c:	602a      	str	r2, [r5, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	f7f9 f962 	bl	8001708 <_read>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	d102      	bne.n	800844e <_read_r+0x1e>
 8008448:	682b      	ldr	r3, [r5, #0]
 800844a:	b103      	cbz	r3, 800844e <_read_r+0x1e>
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	20000564 	.word	0x20000564

08008454 <_write_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	4d07      	ldr	r5, [pc, #28]	; (8008474 <_write_r+0x20>)
 8008458:	4604      	mov	r4, r0
 800845a:	4608      	mov	r0, r1
 800845c:	4611      	mov	r1, r2
 800845e:	2200      	movs	r2, #0
 8008460:	602a      	str	r2, [r5, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	f7f9 f96d 	bl	8001742 <_write>
 8008468:	1c43      	adds	r3, r0, #1
 800846a:	d102      	bne.n	8008472 <_write_r+0x1e>
 800846c:	682b      	ldr	r3, [r5, #0]
 800846e:	b103      	cbz	r3, 8008472 <_write_r+0x1e>
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	bd38      	pop	{r3, r4, r5, pc}
 8008474:	20000564 	.word	0x20000564

08008478 <__errno>:
 8008478:	4b01      	ldr	r3, [pc, #4]	; (8008480 <__errno+0x8>)
 800847a:	6818      	ldr	r0, [r3, #0]
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	2000007c 	.word	0x2000007c

08008484 <__libc_init_array>:
 8008484:	b570      	push	{r4, r5, r6, lr}
 8008486:	4d0d      	ldr	r5, [pc, #52]	; (80084bc <__libc_init_array+0x38>)
 8008488:	4c0d      	ldr	r4, [pc, #52]	; (80084c0 <__libc_init_array+0x3c>)
 800848a:	1b64      	subs	r4, r4, r5
 800848c:	10a4      	asrs	r4, r4, #2
 800848e:	2600      	movs	r6, #0
 8008490:	42a6      	cmp	r6, r4
 8008492:	d109      	bne.n	80084a8 <__libc_init_array+0x24>
 8008494:	4d0b      	ldr	r5, [pc, #44]	; (80084c4 <__libc_init_array+0x40>)
 8008496:	4c0c      	ldr	r4, [pc, #48]	; (80084c8 <__libc_init_array+0x44>)
 8008498:	f000 fd2a 	bl	8008ef0 <_init>
 800849c:	1b64      	subs	r4, r4, r5
 800849e:	10a4      	asrs	r4, r4, #2
 80084a0:	2600      	movs	r6, #0
 80084a2:	42a6      	cmp	r6, r4
 80084a4:	d105      	bne.n	80084b2 <__libc_init_array+0x2e>
 80084a6:	bd70      	pop	{r4, r5, r6, pc}
 80084a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ac:	4798      	blx	r3
 80084ae:	3601      	adds	r6, #1
 80084b0:	e7ee      	b.n	8008490 <__libc_init_array+0xc>
 80084b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b6:	4798      	blx	r3
 80084b8:	3601      	adds	r6, #1
 80084ba:	e7f2      	b.n	80084a2 <__libc_init_array+0x1e>
 80084bc:	080094b8 	.word	0x080094b8
 80084c0:	080094b8 	.word	0x080094b8
 80084c4:	080094b8 	.word	0x080094b8
 80084c8:	080094bc 	.word	0x080094bc

080084cc <__retarget_lock_init_recursive>:
 80084cc:	4770      	bx	lr

080084ce <__retarget_lock_acquire_recursive>:
 80084ce:	4770      	bx	lr

080084d0 <__retarget_lock_release_recursive>:
 80084d0:	4770      	bx	lr
	...

080084d4 <_free_r>:
 80084d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084d6:	2900      	cmp	r1, #0
 80084d8:	d044      	beq.n	8008564 <_free_r+0x90>
 80084da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084de:	9001      	str	r0, [sp, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f1a1 0404 	sub.w	r4, r1, #4
 80084e6:	bfb8      	it	lt
 80084e8:	18e4      	addlt	r4, r4, r3
 80084ea:	f000 f8df 	bl	80086ac <__malloc_lock>
 80084ee:	4a1e      	ldr	r2, [pc, #120]	; (8008568 <_free_r+0x94>)
 80084f0:	9801      	ldr	r0, [sp, #4]
 80084f2:	6813      	ldr	r3, [r2, #0]
 80084f4:	b933      	cbnz	r3, 8008504 <_free_r+0x30>
 80084f6:	6063      	str	r3, [r4, #4]
 80084f8:	6014      	str	r4, [r2, #0]
 80084fa:	b003      	add	sp, #12
 80084fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008500:	f000 b8da 	b.w	80086b8 <__malloc_unlock>
 8008504:	42a3      	cmp	r3, r4
 8008506:	d908      	bls.n	800851a <_free_r+0x46>
 8008508:	6825      	ldr	r5, [r4, #0]
 800850a:	1961      	adds	r1, r4, r5
 800850c:	428b      	cmp	r3, r1
 800850e:	bf01      	itttt	eq
 8008510:	6819      	ldreq	r1, [r3, #0]
 8008512:	685b      	ldreq	r3, [r3, #4]
 8008514:	1949      	addeq	r1, r1, r5
 8008516:	6021      	streq	r1, [r4, #0]
 8008518:	e7ed      	b.n	80084f6 <_free_r+0x22>
 800851a:	461a      	mov	r2, r3
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	b10b      	cbz	r3, 8008524 <_free_r+0x50>
 8008520:	42a3      	cmp	r3, r4
 8008522:	d9fa      	bls.n	800851a <_free_r+0x46>
 8008524:	6811      	ldr	r1, [r2, #0]
 8008526:	1855      	adds	r5, r2, r1
 8008528:	42a5      	cmp	r5, r4
 800852a:	d10b      	bne.n	8008544 <_free_r+0x70>
 800852c:	6824      	ldr	r4, [r4, #0]
 800852e:	4421      	add	r1, r4
 8008530:	1854      	adds	r4, r2, r1
 8008532:	42a3      	cmp	r3, r4
 8008534:	6011      	str	r1, [r2, #0]
 8008536:	d1e0      	bne.n	80084fa <_free_r+0x26>
 8008538:	681c      	ldr	r4, [r3, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	6053      	str	r3, [r2, #4]
 800853e:	440c      	add	r4, r1
 8008540:	6014      	str	r4, [r2, #0]
 8008542:	e7da      	b.n	80084fa <_free_r+0x26>
 8008544:	d902      	bls.n	800854c <_free_r+0x78>
 8008546:	230c      	movs	r3, #12
 8008548:	6003      	str	r3, [r0, #0]
 800854a:	e7d6      	b.n	80084fa <_free_r+0x26>
 800854c:	6825      	ldr	r5, [r4, #0]
 800854e:	1961      	adds	r1, r4, r5
 8008550:	428b      	cmp	r3, r1
 8008552:	bf04      	itt	eq
 8008554:	6819      	ldreq	r1, [r3, #0]
 8008556:	685b      	ldreq	r3, [r3, #4]
 8008558:	6063      	str	r3, [r4, #4]
 800855a:	bf04      	itt	eq
 800855c:	1949      	addeq	r1, r1, r5
 800855e:	6021      	streq	r1, [r4, #0]
 8008560:	6054      	str	r4, [r2, #4]
 8008562:	e7ca      	b.n	80084fa <_free_r+0x26>
 8008564:	b003      	add	sp, #12
 8008566:	bd30      	pop	{r4, r5, pc}
 8008568:	2000056c 	.word	0x2000056c

0800856c <sbrk_aligned>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	4e0e      	ldr	r6, [pc, #56]	; (80085a8 <sbrk_aligned+0x3c>)
 8008570:	460c      	mov	r4, r1
 8008572:	6831      	ldr	r1, [r6, #0]
 8008574:	4605      	mov	r5, r0
 8008576:	b911      	cbnz	r1, 800857e <sbrk_aligned+0x12>
 8008578:	f000 fcaa 	bl	8008ed0 <_sbrk_r>
 800857c:	6030      	str	r0, [r6, #0]
 800857e:	4621      	mov	r1, r4
 8008580:	4628      	mov	r0, r5
 8008582:	f000 fca5 	bl	8008ed0 <_sbrk_r>
 8008586:	1c43      	adds	r3, r0, #1
 8008588:	d00a      	beq.n	80085a0 <sbrk_aligned+0x34>
 800858a:	1cc4      	adds	r4, r0, #3
 800858c:	f024 0403 	bic.w	r4, r4, #3
 8008590:	42a0      	cmp	r0, r4
 8008592:	d007      	beq.n	80085a4 <sbrk_aligned+0x38>
 8008594:	1a21      	subs	r1, r4, r0
 8008596:	4628      	mov	r0, r5
 8008598:	f000 fc9a 	bl	8008ed0 <_sbrk_r>
 800859c:	3001      	adds	r0, #1
 800859e:	d101      	bne.n	80085a4 <sbrk_aligned+0x38>
 80085a0:	f04f 34ff 	mov.w	r4, #4294967295
 80085a4:	4620      	mov	r0, r4
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	20000570 	.word	0x20000570

080085ac <_malloc_r>:
 80085ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b0:	1ccd      	adds	r5, r1, #3
 80085b2:	f025 0503 	bic.w	r5, r5, #3
 80085b6:	3508      	adds	r5, #8
 80085b8:	2d0c      	cmp	r5, #12
 80085ba:	bf38      	it	cc
 80085bc:	250c      	movcc	r5, #12
 80085be:	2d00      	cmp	r5, #0
 80085c0:	4607      	mov	r7, r0
 80085c2:	db01      	blt.n	80085c8 <_malloc_r+0x1c>
 80085c4:	42a9      	cmp	r1, r5
 80085c6:	d905      	bls.n	80085d4 <_malloc_r+0x28>
 80085c8:	230c      	movs	r3, #12
 80085ca:	603b      	str	r3, [r7, #0]
 80085cc:	2600      	movs	r6, #0
 80085ce:	4630      	mov	r0, r6
 80085d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80086a8 <_malloc_r+0xfc>
 80085d8:	f000 f868 	bl	80086ac <__malloc_lock>
 80085dc:	f8d8 3000 	ldr.w	r3, [r8]
 80085e0:	461c      	mov	r4, r3
 80085e2:	bb5c      	cbnz	r4, 800863c <_malloc_r+0x90>
 80085e4:	4629      	mov	r1, r5
 80085e6:	4638      	mov	r0, r7
 80085e8:	f7ff ffc0 	bl	800856c <sbrk_aligned>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	4604      	mov	r4, r0
 80085f0:	d155      	bne.n	800869e <_malloc_r+0xf2>
 80085f2:	f8d8 4000 	ldr.w	r4, [r8]
 80085f6:	4626      	mov	r6, r4
 80085f8:	2e00      	cmp	r6, #0
 80085fa:	d145      	bne.n	8008688 <_malloc_r+0xdc>
 80085fc:	2c00      	cmp	r4, #0
 80085fe:	d048      	beq.n	8008692 <_malloc_r+0xe6>
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	4631      	mov	r1, r6
 8008604:	4638      	mov	r0, r7
 8008606:	eb04 0903 	add.w	r9, r4, r3
 800860a:	f000 fc61 	bl	8008ed0 <_sbrk_r>
 800860e:	4581      	cmp	r9, r0
 8008610:	d13f      	bne.n	8008692 <_malloc_r+0xe6>
 8008612:	6821      	ldr	r1, [r4, #0]
 8008614:	1a6d      	subs	r5, r5, r1
 8008616:	4629      	mov	r1, r5
 8008618:	4638      	mov	r0, r7
 800861a:	f7ff ffa7 	bl	800856c <sbrk_aligned>
 800861e:	3001      	adds	r0, #1
 8008620:	d037      	beq.n	8008692 <_malloc_r+0xe6>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	442b      	add	r3, r5
 8008626:	6023      	str	r3, [r4, #0]
 8008628:	f8d8 3000 	ldr.w	r3, [r8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d038      	beq.n	80086a2 <_malloc_r+0xf6>
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	42a2      	cmp	r2, r4
 8008634:	d12b      	bne.n	800868e <_malloc_r+0xe2>
 8008636:	2200      	movs	r2, #0
 8008638:	605a      	str	r2, [r3, #4]
 800863a:	e00f      	b.n	800865c <_malloc_r+0xb0>
 800863c:	6822      	ldr	r2, [r4, #0]
 800863e:	1b52      	subs	r2, r2, r5
 8008640:	d41f      	bmi.n	8008682 <_malloc_r+0xd6>
 8008642:	2a0b      	cmp	r2, #11
 8008644:	d917      	bls.n	8008676 <_malloc_r+0xca>
 8008646:	1961      	adds	r1, r4, r5
 8008648:	42a3      	cmp	r3, r4
 800864a:	6025      	str	r5, [r4, #0]
 800864c:	bf18      	it	ne
 800864e:	6059      	strne	r1, [r3, #4]
 8008650:	6863      	ldr	r3, [r4, #4]
 8008652:	bf08      	it	eq
 8008654:	f8c8 1000 	streq.w	r1, [r8]
 8008658:	5162      	str	r2, [r4, r5]
 800865a:	604b      	str	r3, [r1, #4]
 800865c:	4638      	mov	r0, r7
 800865e:	f104 060b 	add.w	r6, r4, #11
 8008662:	f000 f829 	bl	80086b8 <__malloc_unlock>
 8008666:	f026 0607 	bic.w	r6, r6, #7
 800866a:	1d23      	adds	r3, r4, #4
 800866c:	1af2      	subs	r2, r6, r3
 800866e:	d0ae      	beq.n	80085ce <_malloc_r+0x22>
 8008670:	1b9b      	subs	r3, r3, r6
 8008672:	50a3      	str	r3, [r4, r2]
 8008674:	e7ab      	b.n	80085ce <_malloc_r+0x22>
 8008676:	42a3      	cmp	r3, r4
 8008678:	6862      	ldr	r2, [r4, #4]
 800867a:	d1dd      	bne.n	8008638 <_malloc_r+0x8c>
 800867c:	f8c8 2000 	str.w	r2, [r8]
 8008680:	e7ec      	b.n	800865c <_malloc_r+0xb0>
 8008682:	4623      	mov	r3, r4
 8008684:	6864      	ldr	r4, [r4, #4]
 8008686:	e7ac      	b.n	80085e2 <_malloc_r+0x36>
 8008688:	4634      	mov	r4, r6
 800868a:	6876      	ldr	r6, [r6, #4]
 800868c:	e7b4      	b.n	80085f8 <_malloc_r+0x4c>
 800868e:	4613      	mov	r3, r2
 8008690:	e7cc      	b.n	800862c <_malloc_r+0x80>
 8008692:	230c      	movs	r3, #12
 8008694:	603b      	str	r3, [r7, #0]
 8008696:	4638      	mov	r0, r7
 8008698:	f000 f80e 	bl	80086b8 <__malloc_unlock>
 800869c:	e797      	b.n	80085ce <_malloc_r+0x22>
 800869e:	6025      	str	r5, [r4, #0]
 80086a0:	e7dc      	b.n	800865c <_malloc_r+0xb0>
 80086a2:	605b      	str	r3, [r3, #4]
 80086a4:	deff      	udf	#255	; 0xff
 80086a6:	bf00      	nop
 80086a8:	2000056c 	.word	0x2000056c

080086ac <__malloc_lock>:
 80086ac:	4801      	ldr	r0, [pc, #4]	; (80086b4 <__malloc_lock+0x8>)
 80086ae:	f7ff bf0e 	b.w	80084ce <__retarget_lock_acquire_recursive>
 80086b2:	bf00      	nop
 80086b4:	20000568 	.word	0x20000568

080086b8 <__malloc_unlock>:
 80086b8:	4801      	ldr	r0, [pc, #4]	; (80086c0 <__malloc_unlock+0x8>)
 80086ba:	f7ff bf09 	b.w	80084d0 <__retarget_lock_release_recursive>
 80086be:	bf00      	nop
 80086c0:	20000568 	.word	0x20000568

080086c4 <__sfputc_r>:
 80086c4:	6893      	ldr	r3, [r2, #8]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	b410      	push	{r4}
 80086cc:	6093      	str	r3, [r2, #8]
 80086ce:	da08      	bge.n	80086e2 <__sfputc_r+0x1e>
 80086d0:	6994      	ldr	r4, [r2, #24]
 80086d2:	42a3      	cmp	r3, r4
 80086d4:	db01      	blt.n	80086da <__sfputc_r+0x16>
 80086d6:	290a      	cmp	r1, #10
 80086d8:	d103      	bne.n	80086e2 <__sfputc_r+0x1e>
 80086da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086de:	f7ff bde8 	b.w	80082b2 <__swbuf_r>
 80086e2:	6813      	ldr	r3, [r2, #0]
 80086e4:	1c58      	adds	r0, r3, #1
 80086e6:	6010      	str	r0, [r2, #0]
 80086e8:	7019      	strb	r1, [r3, #0]
 80086ea:	4608      	mov	r0, r1
 80086ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <__sfputs_r>:
 80086f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f4:	4606      	mov	r6, r0
 80086f6:	460f      	mov	r7, r1
 80086f8:	4614      	mov	r4, r2
 80086fa:	18d5      	adds	r5, r2, r3
 80086fc:	42ac      	cmp	r4, r5
 80086fe:	d101      	bne.n	8008704 <__sfputs_r+0x12>
 8008700:	2000      	movs	r0, #0
 8008702:	e007      	b.n	8008714 <__sfputs_r+0x22>
 8008704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008708:	463a      	mov	r2, r7
 800870a:	4630      	mov	r0, r6
 800870c:	f7ff ffda 	bl	80086c4 <__sfputc_r>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d1f3      	bne.n	80086fc <__sfputs_r+0xa>
 8008714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008718 <_vfiprintf_r>:
 8008718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871c:	460d      	mov	r5, r1
 800871e:	b09d      	sub	sp, #116	; 0x74
 8008720:	4614      	mov	r4, r2
 8008722:	4698      	mov	r8, r3
 8008724:	4606      	mov	r6, r0
 8008726:	b118      	cbz	r0, 8008730 <_vfiprintf_r+0x18>
 8008728:	6a03      	ldr	r3, [r0, #32]
 800872a:	b90b      	cbnz	r3, 8008730 <_vfiprintf_r+0x18>
 800872c:	f7ff fcda 	bl	80080e4 <__sinit>
 8008730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008732:	07d9      	lsls	r1, r3, #31
 8008734:	d405      	bmi.n	8008742 <_vfiprintf_r+0x2a>
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	059a      	lsls	r2, r3, #22
 800873a:	d402      	bmi.n	8008742 <_vfiprintf_r+0x2a>
 800873c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800873e:	f7ff fec6 	bl	80084ce <__retarget_lock_acquire_recursive>
 8008742:	89ab      	ldrh	r3, [r5, #12]
 8008744:	071b      	lsls	r3, r3, #28
 8008746:	d501      	bpl.n	800874c <_vfiprintf_r+0x34>
 8008748:	692b      	ldr	r3, [r5, #16]
 800874a:	b99b      	cbnz	r3, 8008774 <_vfiprintf_r+0x5c>
 800874c:	4629      	mov	r1, r5
 800874e:	4630      	mov	r0, r6
 8008750:	f7ff fdec 	bl	800832c <__swsetup_r>
 8008754:	b170      	cbz	r0, 8008774 <_vfiprintf_r+0x5c>
 8008756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008758:	07dc      	lsls	r4, r3, #31
 800875a:	d504      	bpl.n	8008766 <_vfiprintf_r+0x4e>
 800875c:	f04f 30ff 	mov.w	r0, #4294967295
 8008760:	b01d      	add	sp, #116	; 0x74
 8008762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008766:	89ab      	ldrh	r3, [r5, #12]
 8008768:	0598      	lsls	r0, r3, #22
 800876a:	d4f7      	bmi.n	800875c <_vfiprintf_r+0x44>
 800876c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800876e:	f7ff feaf 	bl	80084d0 <__retarget_lock_release_recursive>
 8008772:	e7f3      	b.n	800875c <_vfiprintf_r+0x44>
 8008774:	2300      	movs	r3, #0
 8008776:	9309      	str	r3, [sp, #36]	; 0x24
 8008778:	2320      	movs	r3, #32
 800877a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800877e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008782:	2330      	movs	r3, #48	; 0x30
 8008784:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008938 <_vfiprintf_r+0x220>
 8008788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800878c:	f04f 0901 	mov.w	r9, #1
 8008790:	4623      	mov	r3, r4
 8008792:	469a      	mov	sl, r3
 8008794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008798:	b10a      	cbz	r2, 800879e <_vfiprintf_r+0x86>
 800879a:	2a25      	cmp	r2, #37	; 0x25
 800879c:	d1f9      	bne.n	8008792 <_vfiprintf_r+0x7a>
 800879e:	ebba 0b04 	subs.w	fp, sl, r4
 80087a2:	d00b      	beq.n	80087bc <_vfiprintf_r+0xa4>
 80087a4:	465b      	mov	r3, fp
 80087a6:	4622      	mov	r2, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	4630      	mov	r0, r6
 80087ac:	f7ff ffa1 	bl	80086f2 <__sfputs_r>
 80087b0:	3001      	adds	r0, #1
 80087b2:	f000 80a9 	beq.w	8008908 <_vfiprintf_r+0x1f0>
 80087b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087b8:	445a      	add	r2, fp
 80087ba:	9209      	str	r2, [sp, #36]	; 0x24
 80087bc:	f89a 3000 	ldrb.w	r3, [sl]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 80a1 	beq.w	8008908 <_vfiprintf_r+0x1f0>
 80087c6:	2300      	movs	r3, #0
 80087c8:	f04f 32ff 	mov.w	r2, #4294967295
 80087cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087d0:	f10a 0a01 	add.w	sl, sl, #1
 80087d4:	9304      	str	r3, [sp, #16]
 80087d6:	9307      	str	r3, [sp, #28]
 80087d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087dc:	931a      	str	r3, [sp, #104]	; 0x68
 80087de:	4654      	mov	r4, sl
 80087e0:	2205      	movs	r2, #5
 80087e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e6:	4854      	ldr	r0, [pc, #336]	; (8008938 <_vfiprintf_r+0x220>)
 80087e8:	f7f7 fcf2 	bl	80001d0 <memchr>
 80087ec:	9a04      	ldr	r2, [sp, #16]
 80087ee:	b9d8      	cbnz	r0, 8008828 <_vfiprintf_r+0x110>
 80087f0:	06d1      	lsls	r1, r2, #27
 80087f2:	bf44      	itt	mi
 80087f4:	2320      	movmi	r3, #32
 80087f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087fa:	0713      	lsls	r3, r2, #28
 80087fc:	bf44      	itt	mi
 80087fe:	232b      	movmi	r3, #43	; 0x2b
 8008800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008804:	f89a 3000 	ldrb.w	r3, [sl]
 8008808:	2b2a      	cmp	r3, #42	; 0x2a
 800880a:	d015      	beq.n	8008838 <_vfiprintf_r+0x120>
 800880c:	9a07      	ldr	r2, [sp, #28]
 800880e:	4654      	mov	r4, sl
 8008810:	2000      	movs	r0, #0
 8008812:	f04f 0c0a 	mov.w	ip, #10
 8008816:	4621      	mov	r1, r4
 8008818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800881c:	3b30      	subs	r3, #48	; 0x30
 800881e:	2b09      	cmp	r3, #9
 8008820:	d94d      	bls.n	80088be <_vfiprintf_r+0x1a6>
 8008822:	b1b0      	cbz	r0, 8008852 <_vfiprintf_r+0x13a>
 8008824:	9207      	str	r2, [sp, #28]
 8008826:	e014      	b.n	8008852 <_vfiprintf_r+0x13a>
 8008828:	eba0 0308 	sub.w	r3, r0, r8
 800882c:	fa09 f303 	lsl.w	r3, r9, r3
 8008830:	4313      	orrs	r3, r2
 8008832:	9304      	str	r3, [sp, #16]
 8008834:	46a2      	mov	sl, r4
 8008836:	e7d2      	b.n	80087de <_vfiprintf_r+0xc6>
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	1d19      	adds	r1, r3, #4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	9103      	str	r1, [sp, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	bfbb      	ittet	lt
 8008844:	425b      	neglt	r3, r3
 8008846:	f042 0202 	orrlt.w	r2, r2, #2
 800884a:	9307      	strge	r3, [sp, #28]
 800884c:	9307      	strlt	r3, [sp, #28]
 800884e:	bfb8      	it	lt
 8008850:	9204      	strlt	r2, [sp, #16]
 8008852:	7823      	ldrb	r3, [r4, #0]
 8008854:	2b2e      	cmp	r3, #46	; 0x2e
 8008856:	d10c      	bne.n	8008872 <_vfiprintf_r+0x15a>
 8008858:	7863      	ldrb	r3, [r4, #1]
 800885a:	2b2a      	cmp	r3, #42	; 0x2a
 800885c:	d134      	bne.n	80088c8 <_vfiprintf_r+0x1b0>
 800885e:	9b03      	ldr	r3, [sp, #12]
 8008860:	1d1a      	adds	r2, r3, #4
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	9203      	str	r2, [sp, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	bfb8      	it	lt
 800886a:	f04f 33ff 	movlt.w	r3, #4294967295
 800886e:	3402      	adds	r4, #2
 8008870:	9305      	str	r3, [sp, #20]
 8008872:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008948 <_vfiprintf_r+0x230>
 8008876:	7821      	ldrb	r1, [r4, #0]
 8008878:	2203      	movs	r2, #3
 800887a:	4650      	mov	r0, sl
 800887c:	f7f7 fca8 	bl	80001d0 <memchr>
 8008880:	b138      	cbz	r0, 8008892 <_vfiprintf_r+0x17a>
 8008882:	9b04      	ldr	r3, [sp, #16]
 8008884:	eba0 000a 	sub.w	r0, r0, sl
 8008888:	2240      	movs	r2, #64	; 0x40
 800888a:	4082      	lsls	r2, r0
 800888c:	4313      	orrs	r3, r2
 800888e:	3401      	adds	r4, #1
 8008890:	9304      	str	r3, [sp, #16]
 8008892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008896:	4829      	ldr	r0, [pc, #164]	; (800893c <_vfiprintf_r+0x224>)
 8008898:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800889c:	2206      	movs	r2, #6
 800889e:	f7f7 fc97 	bl	80001d0 <memchr>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d03f      	beq.n	8008926 <_vfiprintf_r+0x20e>
 80088a6:	4b26      	ldr	r3, [pc, #152]	; (8008940 <_vfiprintf_r+0x228>)
 80088a8:	bb1b      	cbnz	r3, 80088f2 <_vfiprintf_r+0x1da>
 80088aa:	9b03      	ldr	r3, [sp, #12]
 80088ac:	3307      	adds	r3, #7
 80088ae:	f023 0307 	bic.w	r3, r3, #7
 80088b2:	3308      	adds	r3, #8
 80088b4:	9303      	str	r3, [sp, #12]
 80088b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b8:	443b      	add	r3, r7
 80088ba:	9309      	str	r3, [sp, #36]	; 0x24
 80088bc:	e768      	b.n	8008790 <_vfiprintf_r+0x78>
 80088be:	fb0c 3202 	mla	r2, ip, r2, r3
 80088c2:	460c      	mov	r4, r1
 80088c4:	2001      	movs	r0, #1
 80088c6:	e7a6      	b.n	8008816 <_vfiprintf_r+0xfe>
 80088c8:	2300      	movs	r3, #0
 80088ca:	3401      	adds	r4, #1
 80088cc:	9305      	str	r3, [sp, #20]
 80088ce:	4619      	mov	r1, r3
 80088d0:	f04f 0c0a 	mov.w	ip, #10
 80088d4:	4620      	mov	r0, r4
 80088d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088da:	3a30      	subs	r2, #48	; 0x30
 80088dc:	2a09      	cmp	r2, #9
 80088de:	d903      	bls.n	80088e8 <_vfiprintf_r+0x1d0>
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d0c6      	beq.n	8008872 <_vfiprintf_r+0x15a>
 80088e4:	9105      	str	r1, [sp, #20]
 80088e6:	e7c4      	b.n	8008872 <_vfiprintf_r+0x15a>
 80088e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80088ec:	4604      	mov	r4, r0
 80088ee:	2301      	movs	r3, #1
 80088f0:	e7f0      	b.n	80088d4 <_vfiprintf_r+0x1bc>
 80088f2:	ab03      	add	r3, sp, #12
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	462a      	mov	r2, r5
 80088f8:	4b12      	ldr	r3, [pc, #72]	; (8008944 <_vfiprintf_r+0x22c>)
 80088fa:	a904      	add	r1, sp, #16
 80088fc:	4630      	mov	r0, r6
 80088fe:	f3af 8000 	nop.w
 8008902:	4607      	mov	r7, r0
 8008904:	1c78      	adds	r0, r7, #1
 8008906:	d1d6      	bne.n	80088b6 <_vfiprintf_r+0x19e>
 8008908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800890a:	07d9      	lsls	r1, r3, #31
 800890c:	d405      	bmi.n	800891a <_vfiprintf_r+0x202>
 800890e:	89ab      	ldrh	r3, [r5, #12]
 8008910:	059a      	lsls	r2, r3, #22
 8008912:	d402      	bmi.n	800891a <_vfiprintf_r+0x202>
 8008914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008916:	f7ff fddb 	bl	80084d0 <__retarget_lock_release_recursive>
 800891a:	89ab      	ldrh	r3, [r5, #12]
 800891c:	065b      	lsls	r3, r3, #25
 800891e:	f53f af1d 	bmi.w	800875c <_vfiprintf_r+0x44>
 8008922:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008924:	e71c      	b.n	8008760 <_vfiprintf_r+0x48>
 8008926:	ab03      	add	r3, sp, #12
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	462a      	mov	r2, r5
 800892c:	4b05      	ldr	r3, [pc, #20]	; (8008944 <_vfiprintf_r+0x22c>)
 800892e:	a904      	add	r1, sp, #16
 8008930:	4630      	mov	r0, r6
 8008932:	f000 f879 	bl	8008a28 <_printf_i>
 8008936:	e7e4      	b.n	8008902 <_vfiprintf_r+0x1ea>
 8008938:	0800947c 	.word	0x0800947c
 800893c:	08009486 	.word	0x08009486
 8008940:	00000000 	.word	0x00000000
 8008944:	080086f3 	.word	0x080086f3
 8008948:	08009482 	.word	0x08009482

0800894c <_printf_common>:
 800894c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008950:	4616      	mov	r6, r2
 8008952:	4699      	mov	r9, r3
 8008954:	688a      	ldr	r2, [r1, #8]
 8008956:	690b      	ldr	r3, [r1, #16]
 8008958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800895c:	4293      	cmp	r3, r2
 800895e:	bfb8      	it	lt
 8008960:	4613      	movlt	r3, r2
 8008962:	6033      	str	r3, [r6, #0]
 8008964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008968:	4607      	mov	r7, r0
 800896a:	460c      	mov	r4, r1
 800896c:	b10a      	cbz	r2, 8008972 <_printf_common+0x26>
 800896e:	3301      	adds	r3, #1
 8008970:	6033      	str	r3, [r6, #0]
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	0699      	lsls	r1, r3, #26
 8008976:	bf42      	ittt	mi
 8008978:	6833      	ldrmi	r3, [r6, #0]
 800897a:	3302      	addmi	r3, #2
 800897c:	6033      	strmi	r3, [r6, #0]
 800897e:	6825      	ldr	r5, [r4, #0]
 8008980:	f015 0506 	ands.w	r5, r5, #6
 8008984:	d106      	bne.n	8008994 <_printf_common+0x48>
 8008986:	f104 0a19 	add.w	sl, r4, #25
 800898a:	68e3      	ldr	r3, [r4, #12]
 800898c:	6832      	ldr	r2, [r6, #0]
 800898e:	1a9b      	subs	r3, r3, r2
 8008990:	42ab      	cmp	r3, r5
 8008992:	dc26      	bgt.n	80089e2 <_printf_common+0x96>
 8008994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008998:	1e13      	subs	r3, r2, #0
 800899a:	6822      	ldr	r2, [r4, #0]
 800899c:	bf18      	it	ne
 800899e:	2301      	movne	r3, #1
 80089a0:	0692      	lsls	r2, r2, #26
 80089a2:	d42b      	bmi.n	80089fc <_printf_common+0xb0>
 80089a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089a8:	4649      	mov	r1, r9
 80089aa:	4638      	mov	r0, r7
 80089ac:	47c0      	blx	r8
 80089ae:	3001      	adds	r0, #1
 80089b0:	d01e      	beq.n	80089f0 <_printf_common+0xa4>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	6922      	ldr	r2, [r4, #16]
 80089b6:	f003 0306 	and.w	r3, r3, #6
 80089ba:	2b04      	cmp	r3, #4
 80089bc:	bf02      	ittt	eq
 80089be:	68e5      	ldreq	r5, [r4, #12]
 80089c0:	6833      	ldreq	r3, [r6, #0]
 80089c2:	1aed      	subeq	r5, r5, r3
 80089c4:	68a3      	ldr	r3, [r4, #8]
 80089c6:	bf0c      	ite	eq
 80089c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089cc:	2500      	movne	r5, #0
 80089ce:	4293      	cmp	r3, r2
 80089d0:	bfc4      	itt	gt
 80089d2:	1a9b      	subgt	r3, r3, r2
 80089d4:	18ed      	addgt	r5, r5, r3
 80089d6:	2600      	movs	r6, #0
 80089d8:	341a      	adds	r4, #26
 80089da:	42b5      	cmp	r5, r6
 80089dc:	d11a      	bne.n	8008a14 <_printf_common+0xc8>
 80089de:	2000      	movs	r0, #0
 80089e0:	e008      	b.n	80089f4 <_printf_common+0xa8>
 80089e2:	2301      	movs	r3, #1
 80089e4:	4652      	mov	r2, sl
 80089e6:	4649      	mov	r1, r9
 80089e8:	4638      	mov	r0, r7
 80089ea:	47c0      	blx	r8
 80089ec:	3001      	adds	r0, #1
 80089ee:	d103      	bne.n	80089f8 <_printf_common+0xac>
 80089f0:	f04f 30ff 	mov.w	r0, #4294967295
 80089f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f8:	3501      	adds	r5, #1
 80089fa:	e7c6      	b.n	800898a <_printf_common+0x3e>
 80089fc:	18e1      	adds	r1, r4, r3
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	2030      	movs	r0, #48	; 0x30
 8008a02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a06:	4422      	add	r2, r4
 8008a08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a10:	3302      	adds	r3, #2
 8008a12:	e7c7      	b.n	80089a4 <_printf_common+0x58>
 8008a14:	2301      	movs	r3, #1
 8008a16:	4622      	mov	r2, r4
 8008a18:	4649      	mov	r1, r9
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	47c0      	blx	r8
 8008a1e:	3001      	adds	r0, #1
 8008a20:	d0e6      	beq.n	80089f0 <_printf_common+0xa4>
 8008a22:	3601      	adds	r6, #1
 8008a24:	e7d9      	b.n	80089da <_printf_common+0x8e>
	...

08008a28 <_printf_i>:
 8008a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a2c:	7e0f      	ldrb	r7, [r1, #24]
 8008a2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a30:	2f78      	cmp	r7, #120	; 0x78
 8008a32:	4691      	mov	r9, r2
 8008a34:	4680      	mov	r8, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	469a      	mov	sl, r3
 8008a3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a3e:	d807      	bhi.n	8008a50 <_printf_i+0x28>
 8008a40:	2f62      	cmp	r7, #98	; 0x62
 8008a42:	d80a      	bhi.n	8008a5a <_printf_i+0x32>
 8008a44:	2f00      	cmp	r7, #0
 8008a46:	f000 80d4 	beq.w	8008bf2 <_printf_i+0x1ca>
 8008a4a:	2f58      	cmp	r7, #88	; 0x58
 8008a4c:	f000 80c0 	beq.w	8008bd0 <_printf_i+0x1a8>
 8008a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a58:	e03a      	b.n	8008ad0 <_printf_i+0xa8>
 8008a5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a5e:	2b15      	cmp	r3, #21
 8008a60:	d8f6      	bhi.n	8008a50 <_printf_i+0x28>
 8008a62:	a101      	add	r1, pc, #4	; (adr r1, 8008a68 <_printf_i+0x40>)
 8008a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a68:	08008ac1 	.word	0x08008ac1
 8008a6c:	08008ad5 	.word	0x08008ad5
 8008a70:	08008a51 	.word	0x08008a51
 8008a74:	08008a51 	.word	0x08008a51
 8008a78:	08008a51 	.word	0x08008a51
 8008a7c:	08008a51 	.word	0x08008a51
 8008a80:	08008ad5 	.word	0x08008ad5
 8008a84:	08008a51 	.word	0x08008a51
 8008a88:	08008a51 	.word	0x08008a51
 8008a8c:	08008a51 	.word	0x08008a51
 8008a90:	08008a51 	.word	0x08008a51
 8008a94:	08008bd9 	.word	0x08008bd9
 8008a98:	08008b01 	.word	0x08008b01
 8008a9c:	08008b93 	.word	0x08008b93
 8008aa0:	08008a51 	.word	0x08008a51
 8008aa4:	08008a51 	.word	0x08008a51
 8008aa8:	08008bfb 	.word	0x08008bfb
 8008aac:	08008a51 	.word	0x08008a51
 8008ab0:	08008b01 	.word	0x08008b01
 8008ab4:	08008a51 	.word	0x08008a51
 8008ab8:	08008a51 	.word	0x08008a51
 8008abc:	08008b9b 	.word	0x08008b9b
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	1d1a      	adds	r2, r3, #4
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	602a      	str	r2, [r5, #0]
 8008ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e09f      	b.n	8008c14 <_printf_i+0x1ec>
 8008ad4:	6820      	ldr	r0, [r4, #0]
 8008ad6:	682b      	ldr	r3, [r5, #0]
 8008ad8:	0607      	lsls	r7, r0, #24
 8008ada:	f103 0104 	add.w	r1, r3, #4
 8008ade:	6029      	str	r1, [r5, #0]
 8008ae0:	d501      	bpl.n	8008ae6 <_printf_i+0xbe>
 8008ae2:	681e      	ldr	r6, [r3, #0]
 8008ae4:	e003      	b.n	8008aee <_printf_i+0xc6>
 8008ae6:	0646      	lsls	r6, r0, #25
 8008ae8:	d5fb      	bpl.n	8008ae2 <_printf_i+0xba>
 8008aea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008aee:	2e00      	cmp	r6, #0
 8008af0:	da03      	bge.n	8008afa <_printf_i+0xd2>
 8008af2:	232d      	movs	r3, #45	; 0x2d
 8008af4:	4276      	negs	r6, r6
 8008af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008afa:	485a      	ldr	r0, [pc, #360]	; (8008c64 <_printf_i+0x23c>)
 8008afc:	230a      	movs	r3, #10
 8008afe:	e012      	b.n	8008b26 <_printf_i+0xfe>
 8008b00:	682b      	ldr	r3, [r5, #0]
 8008b02:	6820      	ldr	r0, [r4, #0]
 8008b04:	1d19      	adds	r1, r3, #4
 8008b06:	6029      	str	r1, [r5, #0]
 8008b08:	0605      	lsls	r5, r0, #24
 8008b0a:	d501      	bpl.n	8008b10 <_printf_i+0xe8>
 8008b0c:	681e      	ldr	r6, [r3, #0]
 8008b0e:	e002      	b.n	8008b16 <_printf_i+0xee>
 8008b10:	0641      	lsls	r1, r0, #25
 8008b12:	d5fb      	bpl.n	8008b0c <_printf_i+0xe4>
 8008b14:	881e      	ldrh	r6, [r3, #0]
 8008b16:	4853      	ldr	r0, [pc, #332]	; (8008c64 <_printf_i+0x23c>)
 8008b18:	2f6f      	cmp	r7, #111	; 0x6f
 8008b1a:	bf0c      	ite	eq
 8008b1c:	2308      	moveq	r3, #8
 8008b1e:	230a      	movne	r3, #10
 8008b20:	2100      	movs	r1, #0
 8008b22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b26:	6865      	ldr	r5, [r4, #4]
 8008b28:	60a5      	str	r5, [r4, #8]
 8008b2a:	2d00      	cmp	r5, #0
 8008b2c:	bfa2      	ittt	ge
 8008b2e:	6821      	ldrge	r1, [r4, #0]
 8008b30:	f021 0104 	bicge.w	r1, r1, #4
 8008b34:	6021      	strge	r1, [r4, #0]
 8008b36:	b90e      	cbnz	r6, 8008b3c <_printf_i+0x114>
 8008b38:	2d00      	cmp	r5, #0
 8008b3a:	d04b      	beq.n	8008bd4 <_printf_i+0x1ac>
 8008b3c:	4615      	mov	r5, r2
 8008b3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b42:	fb03 6711 	mls	r7, r3, r1, r6
 8008b46:	5dc7      	ldrb	r7, [r0, r7]
 8008b48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b4c:	4637      	mov	r7, r6
 8008b4e:	42bb      	cmp	r3, r7
 8008b50:	460e      	mov	r6, r1
 8008b52:	d9f4      	bls.n	8008b3e <_printf_i+0x116>
 8008b54:	2b08      	cmp	r3, #8
 8008b56:	d10b      	bne.n	8008b70 <_printf_i+0x148>
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	07de      	lsls	r6, r3, #31
 8008b5c:	d508      	bpl.n	8008b70 <_printf_i+0x148>
 8008b5e:	6923      	ldr	r3, [r4, #16]
 8008b60:	6861      	ldr	r1, [r4, #4]
 8008b62:	4299      	cmp	r1, r3
 8008b64:	bfde      	ittt	le
 8008b66:	2330      	movle	r3, #48	; 0x30
 8008b68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b70:	1b52      	subs	r2, r2, r5
 8008b72:	6122      	str	r2, [r4, #16]
 8008b74:	f8cd a000 	str.w	sl, [sp]
 8008b78:	464b      	mov	r3, r9
 8008b7a:	aa03      	add	r2, sp, #12
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	4640      	mov	r0, r8
 8008b80:	f7ff fee4 	bl	800894c <_printf_common>
 8008b84:	3001      	adds	r0, #1
 8008b86:	d14a      	bne.n	8008c1e <_printf_i+0x1f6>
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	b004      	add	sp, #16
 8008b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	f043 0320 	orr.w	r3, r3, #32
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	4833      	ldr	r0, [pc, #204]	; (8008c68 <_printf_i+0x240>)
 8008b9c:	2778      	movs	r7, #120	; 0x78
 8008b9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	6829      	ldr	r1, [r5, #0]
 8008ba6:	061f      	lsls	r7, r3, #24
 8008ba8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bac:	d402      	bmi.n	8008bb4 <_printf_i+0x18c>
 8008bae:	065f      	lsls	r7, r3, #25
 8008bb0:	bf48      	it	mi
 8008bb2:	b2b6      	uxthmi	r6, r6
 8008bb4:	07df      	lsls	r7, r3, #31
 8008bb6:	bf48      	it	mi
 8008bb8:	f043 0320 	orrmi.w	r3, r3, #32
 8008bbc:	6029      	str	r1, [r5, #0]
 8008bbe:	bf48      	it	mi
 8008bc0:	6023      	strmi	r3, [r4, #0]
 8008bc2:	b91e      	cbnz	r6, 8008bcc <_printf_i+0x1a4>
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	f023 0320 	bic.w	r3, r3, #32
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	2310      	movs	r3, #16
 8008bce:	e7a7      	b.n	8008b20 <_printf_i+0xf8>
 8008bd0:	4824      	ldr	r0, [pc, #144]	; (8008c64 <_printf_i+0x23c>)
 8008bd2:	e7e4      	b.n	8008b9e <_printf_i+0x176>
 8008bd4:	4615      	mov	r5, r2
 8008bd6:	e7bd      	b.n	8008b54 <_printf_i+0x12c>
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	6826      	ldr	r6, [r4, #0]
 8008bdc:	6961      	ldr	r1, [r4, #20]
 8008bde:	1d18      	adds	r0, r3, #4
 8008be0:	6028      	str	r0, [r5, #0]
 8008be2:	0635      	lsls	r5, r6, #24
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	d501      	bpl.n	8008bec <_printf_i+0x1c4>
 8008be8:	6019      	str	r1, [r3, #0]
 8008bea:	e002      	b.n	8008bf2 <_printf_i+0x1ca>
 8008bec:	0670      	lsls	r0, r6, #25
 8008bee:	d5fb      	bpl.n	8008be8 <_printf_i+0x1c0>
 8008bf0:	8019      	strh	r1, [r3, #0]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	6123      	str	r3, [r4, #16]
 8008bf6:	4615      	mov	r5, r2
 8008bf8:	e7bc      	b.n	8008b74 <_printf_i+0x14c>
 8008bfa:	682b      	ldr	r3, [r5, #0]
 8008bfc:	1d1a      	adds	r2, r3, #4
 8008bfe:	602a      	str	r2, [r5, #0]
 8008c00:	681d      	ldr	r5, [r3, #0]
 8008c02:	6862      	ldr	r2, [r4, #4]
 8008c04:	2100      	movs	r1, #0
 8008c06:	4628      	mov	r0, r5
 8008c08:	f7f7 fae2 	bl	80001d0 <memchr>
 8008c0c:	b108      	cbz	r0, 8008c12 <_printf_i+0x1ea>
 8008c0e:	1b40      	subs	r0, r0, r5
 8008c10:	6060      	str	r0, [r4, #4]
 8008c12:	6863      	ldr	r3, [r4, #4]
 8008c14:	6123      	str	r3, [r4, #16]
 8008c16:	2300      	movs	r3, #0
 8008c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c1c:	e7aa      	b.n	8008b74 <_printf_i+0x14c>
 8008c1e:	6923      	ldr	r3, [r4, #16]
 8008c20:	462a      	mov	r2, r5
 8008c22:	4649      	mov	r1, r9
 8008c24:	4640      	mov	r0, r8
 8008c26:	47d0      	blx	sl
 8008c28:	3001      	adds	r0, #1
 8008c2a:	d0ad      	beq.n	8008b88 <_printf_i+0x160>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	079b      	lsls	r3, r3, #30
 8008c30:	d413      	bmi.n	8008c5a <_printf_i+0x232>
 8008c32:	68e0      	ldr	r0, [r4, #12]
 8008c34:	9b03      	ldr	r3, [sp, #12]
 8008c36:	4298      	cmp	r0, r3
 8008c38:	bfb8      	it	lt
 8008c3a:	4618      	movlt	r0, r3
 8008c3c:	e7a6      	b.n	8008b8c <_printf_i+0x164>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	4632      	mov	r2, r6
 8008c42:	4649      	mov	r1, r9
 8008c44:	4640      	mov	r0, r8
 8008c46:	47d0      	blx	sl
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d09d      	beq.n	8008b88 <_printf_i+0x160>
 8008c4c:	3501      	adds	r5, #1
 8008c4e:	68e3      	ldr	r3, [r4, #12]
 8008c50:	9903      	ldr	r1, [sp, #12]
 8008c52:	1a5b      	subs	r3, r3, r1
 8008c54:	42ab      	cmp	r3, r5
 8008c56:	dcf2      	bgt.n	8008c3e <_printf_i+0x216>
 8008c58:	e7eb      	b.n	8008c32 <_printf_i+0x20a>
 8008c5a:	2500      	movs	r5, #0
 8008c5c:	f104 0619 	add.w	r6, r4, #25
 8008c60:	e7f5      	b.n	8008c4e <_printf_i+0x226>
 8008c62:	bf00      	nop
 8008c64:	0800948d 	.word	0x0800948d
 8008c68:	0800949e 	.word	0x0800949e

08008c6c <__sflush_r>:
 8008c6c:	898a      	ldrh	r2, [r1, #12]
 8008c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c72:	4605      	mov	r5, r0
 8008c74:	0710      	lsls	r0, r2, #28
 8008c76:	460c      	mov	r4, r1
 8008c78:	d458      	bmi.n	8008d2c <__sflush_r+0xc0>
 8008c7a:	684b      	ldr	r3, [r1, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	dc05      	bgt.n	8008c8c <__sflush_r+0x20>
 8008c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dc02      	bgt.n	8008c8c <__sflush_r+0x20>
 8008c86:	2000      	movs	r0, #0
 8008c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c8e:	2e00      	cmp	r6, #0
 8008c90:	d0f9      	beq.n	8008c86 <__sflush_r+0x1a>
 8008c92:	2300      	movs	r3, #0
 8008c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c98:	682f      	ldr	r7, [r5, #0]
 8008c9a:	6a21      	ldr	r1, [r4, #32]
 8008c9c:	602b      	str	r3, [r5, #0]
 8008c9e:	d032      	beq.n	8008d06 <__sflush_r+0x9a>
 8008ca0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	075a      	lsls	r2, r3, #29
 8008ca6:	d505      	bpl.n	8008cb4 <__sflush_r+0x48>
 8008ca8:	6863      	ldr	r3, [r4, #4]
 8008caa:	1ac0      	subs	r0, r0, r3
 8008cac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cae:	b10b      	cbz	r3, 8008cb4 <__sflush_r+0x48>
 8008cb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cb2:	1ac0      	subs	r0, r0, r3
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cba:	6a21      	ldr	r1, [r4, #32]
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	47b0      	blx	r6
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	89a3      	ldrh	r3, [r4, #12]
 8008cc4:	d106      	bne.n	8008cd4 <__sflush_r+0x68>
 8008cc6:	6829      	ldr	r1, [r5, #0]
 8008cc8:	291d      	cmp	r1, #29
 8008cca:	d82b      	bhi.n	8008d24 <__sflush_r+0xb8>
 8008ccc:	4a29      	ldr	r2, [pc, #164]	; (8008d74 <__sflush_r+0x108>)
 8008cce:	410a      	asrs	r2, r1
 8008cd0:	07d6      	lsls	r6, r2, #31
 8008cd2:	d427      	bmi.n	8008d24 <__sflush_r+0xb8>
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	6062      	str	r2, [r4, #4]
 8008cd8:	04d9      	lsls	r1, r3, #19
 8008cda:	6922      	ldr	r2, [r4, #16]
 8008cdc:	6022      	str	r2, [r4, #0]
 8008cde:	d504      	bpl.n	8008cea <__sflush_r+0x7e>
 8008ce0:	1c42      	adds	r2, r0, #1
 8008ce2:	d101      	bne.n	8008ce8 <__sflush_r+0x7c>
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	b903      	cbnz	r3, 8008cea <__sflush_r+0x7e>
 8008ce8:	6560      	str	r0, [r4, #84]	; 0x54
 8008cea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cec:	602f      	str	r7, [r5, #0]
 8008cee:	2900      	cmp	r1, #0
 8008cf0:	d0c9      	beq.n	8008c86 <__sflush_r+0x1a>
 8008cf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cf6:	4299      	cmp	r1, r3
 8008cf8:	d002      	beq.n	8008d00 <__sflush_r+0x94>
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	f7ff fbea 	bl	80084d4 <_free_r>
 8008d00:	2000      	movs	r0, #0
 8008d02:	6360      	str	r0, [r4, #52]	; 0x34
 8008d04:	e7c0      	b.n	8008c88 <__sflush_r+0x1c>
 8008d06:	2301      	movs	r3, #1
 8008d08:	4628      	mov	r0, r5
 8008d0a:	47b0      	blx	r6
 8008d0c:	1c41      	adds	r1, r0, #1
 8008d0e:	d1c8      	bne.n	8008ca2 <__sflush_r+0x36>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0c5      	beq.n	8008ca2 <__sflush_r+0x36>
 8008d16:	2b1d      	cmp	r3, #29
 8008d18:	d001      	beq.n	8008d1e <__sflush_r+0xb2>
 8008d1a:	2b16      	cmp	r3, #22
 8008d1c:	d101      	bne.n	8008d22 <__sflush_r+0xb6>
 8008d1e:	602f      	str	r7, [r5, #0]
 8008d20:	e7b1      	b.n	8008c86 <__sflush_r+0x1a>
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d28:	81a3      	strh	r3, [r4, #12]
 8008d2a:	e7ad      	b.n	8008c88 <__sflush_r+0x1c>
 8008d2c:	690f      	ldr	r7, [r1, #16]
 8008d2e:	2f00      	cmp	r7, #0
 8008d30:	d0a9      	beq.n	8008c86 <__sflush_r+0x1a>
 8008d32:	0793      	lsls	r3, r2, #30
 8008d34:	680e      	ldr	r6, [r1, #0]
 8008d36:	bf08      	it	eq
 8008d38:	694b      	ldreq	r3, [r1, #20]
 8008d3a:	600f      	str	r7, [r1, #0]
 8008d3c:	bf18      	it	ne
 8008d3e:	2300      	movne	r3, #0
 8008d40:	eba6 0807 	sub.w	r8, r6, r7
 8008d44:	608b      	str	r3, [r1, #8]
 8008d46:	f1b8 0f00 	cmp.w	r8, #0
 8008d4a:	dd9c      	ble.n	8008c86 <__sflush_r+0x1a>
 8008d4c:	6a21      	ldr	r1, [r4, #32]
 8008d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d50:	4643      	mov	r3, r8
 8008d52:	463a      	mov	r2, r7
 8008d54:	4628      	mov	r0, r5
 8008d56:	47b0      	blx	r6
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	dc06      	bgt.n	8008d6a <__sflush_r+0xfe>
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	e78e      	b.n	8008c88 <__sflush_r+0x1c>
 8008d6a:	4407      	add	r7, r0
 8008d6c:	eba8 0800 	sub.w	r8, r8, r0
 8008d70:	e7e9      	b.n	8008d46 <__sflush_r+0xda>
 8008d72:	bf00      	nop
 8008d74:	dfbffffe 	.word	0xdfbffffe

08008d78 <_fflush_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	690b      	ldr	r3, [r1, #16]
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	460c      	mov	r4, r1
 8008d80:	b913      	cbnz	r3, 8008d88 <_fflush_r+0x10>
 8008d82:	2500      	movs	r5, #0
 8008d84:	4628      	mov	r0, r5
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	b118      	cbz	r0, 8008d92 <_fflush_r+0x1a>
 8008d8a:	6a03      	ldr	r3, [r0, #32]
 8008d8c:	b90b      	cbnz	r3, 8008d92 <_fflush_r+0x1a>
 8008d8e:	f7ff f9a9 	bl	80080e4 <__sinit>
 8008d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0f3      	beq.n	8008d82 <_fflush_r+0xa>
 8008d9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d9c:	07d0      	lsls	r0, r2, #31
 8008d9e:	d404      	bmi.n	8008daa <_fflush_r+0x32>
 8008da0:	0599      	lsls	r1, r3, #22
 8008da2:	d402      	bmi.n	8008daa <_fflush_r+0x32>
 8008da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008da6:	f7ff fb92 	bl	80084ce <__retarget_lock_acquire_recursive>
 8008daa:	4628      	mov	r0, r5
 8008dac:	4621      	mov	r1, r4
 8008dae:	f7ff ff5d 	bl	8008c6c <__sflush_r>
 8008db2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008db4:	07da      	lsls	r2, r3, #31
 8008db6:	4605      	mov	r5, r0
 8008db8:	d4e4      	bmi.n	8008d84 <_fflush_r+0xc>
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	059b      	lsls	r3, r3, #22
 8008dbe:	d4e1      	bmi.n	8008d84 <_fflush_r+0xc>
 8008dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dc2:	f7ff fb85 	bl	80084d0 <__retarget_lock_release_recursive>
 8008dc6:	e7dd      	b.n	8008d84 <_fflush_r+0xc>

08008dc8 <__swhatbuf_r>:
 8008dc8:	b570      	push	{r4, r5, r6, lr}
 8008dca:	460c      	mov	r4, r1
 8008dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd0:	2900      	cmp	r1, #0
 8008dd2:	b096      	sub	sp, #88	; 0x58
 8008dd4:	4615      	mov	r5, r2
 8008dd6:	461e      	mov	r6, r3
 8008dd8:	da0d      	bge.n	8008df6 <__swhatbuf_r+0x2e>
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008de0:	f04f 0100 	mov.w	r1, #0
 8008de4:	bf0c      	ite	eq
 8008de6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008dea:	2340      	movne	r3, #64	; 0x40
 8008dec:	2000      	movs	r0, #0
 8008dee:	6031      	str	r1, [r6, #0]
 8008df0:	602b      	str	r3, [r5, #0]
 8008df2:	b016      	add	sp, #88	; 0x58
 8008df4:	bd70      	pop	{r4, r5, r6, pc}
 8008df6:	466a      	mov	r2, sp
 8008df8:	f000 f848 	bl	8008e8c <_fstat_r>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	dbec      	blt.n	8008dda <__swhatbuf_r+0x12>
 8008e00:	9901      	ldr	r1, [sp, #4]
 8008e02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008e06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008e0a:	4259      	negs	r1, r3
 8008e0c:	4159      	adcs	r1, r3
 8008e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e12:	e7eb      	b.n	8008dec <__swhatbuf_r+0x24>

08008e14 <__smakebuf_r>:
 8008e14:	898b      	ldrh	r3, [r1, #12]
 8008e16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e18:	079d      	lsls	r5, r3, #30
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	d507      	bpl.n	8008e30 <__smakebuf_r+0x1c>
 8008e20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	6123      	str	r3, [r4, #16]
 8008e28:	2301      	movs	r3, #1
 8008e2a:	6163      	str	r3, [r4, #20]
 8008e2c:	b002      	add	sp, #8
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}
 8008e30:	ab01      	add	r3, sp, #4
 8008e32:	466a      	mov	r2, sp
 8008e34:	f7ff ffc8 	bl	8008dc8 <__swhatbuf_r>
 8008e38:	9900      	ldr	r1, [sp, #0]
 8008e3a:	4605      	mov	r5, r0
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	f7ff fbb5 	bl	80085ac <_malloc_r>
 8008e42:	b948      	cbnz	r0, 8008e58 <__smakebuf_r+0x44>
 8008e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e48:	059a      	lsls	r2, r3, #22
 8008e4a:	d4ef      	bmi.n	8008e2c <__smakebuf_r+0x18>
 8008e4c:	f023 0303 	bic.w	r3, r3, #3
 8008e50:	f043 0302 	orr.w	r3, r3, #2
 8008e54:	81a3      	strh	r3, [r4, #12]
 8008e56:	e7e3      	b.n	8008e20 <__smakebuf_r+0xc>
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	6020      	str	r0, [r4, #0]
 8008e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e60:	81a3      	strh	r3, [r4, #12]
 8008e62:	9b00      	ldr	r3, [sp, #0]
 8008e64:	6163      	str	r3, [r4, #20]
 8008e66:	9b01      	ldr	r3, [sp, #4]
 8008e68:	6120      	str	r0, [r4, #16]
 8008e6a:	b15b      	cbz	r3, 8008e84 <__smakebuf_r+0x70>
 8008e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e70:	4630      	mov	r0, r6
 8008e72:	f000 f81d 	bl	8008eb0 <_isatty_r>
 8008e76:	b128      	cbz	r0, 8008e84 <__smakebuf_r+0x70>
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	f023 0303 	bic.w	r3, r3, #3
 8008e7e:	f043 0301 	orr.w	r3, r3, #1
 8008e82:	81a3      	strh	r3, [r4, #12]
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	431d      	orrs	r5, r3
 8008e88:	81a5      	strh	r5, [r4, #12]
 8008e8a:	e7cf      	b.n	8008e2c <__smakebuf_r+0x18>

08008e8c <_fstat_r>:
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4d07      	ldr	r5, [pc, #28]	; (8008eac <_fstat_r+0x20>)
 8008e90:	2300      	movs	r3, #0
 8008e92:	4604      	mov	r4, r0
 8008e94:	4608      	mov	r0, r1
 8008e96:	4611      	mov	r1, r2
 8008e98:	602b      	str	r3, [r5, #0]
 8008e9a:	f7f8 fc7a 	bl	8001792 <_fstat>
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	d102      	bne.n	8008ea8 <_fstat_r+0x1c>
 8008ea2:	682b      	ldr	r3, [r5, #0]
 8008ea4:	b103      	cbz	r3, 8008ea8 <_fstat_r+0x1c>
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	bd38      	pop	{r3, r4, r5, pc}
 8008eaa:	bf00      	nop
 8008eac:	20000564 	.word	0x20000564

08008eb0 <_isatty_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4d06      	ldr	r5, [pc, #24]	; (8008ecc <_isatty_r+0x1c>)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	4608      	mov	r0, r1
 8008eba:	602b      	str	r3, [r5, #0]
 8008ebc:	f7f8 fc79 	bl	80017b2 <_isatty>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_isatty_r+0x1a>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_isatty_r+0x1a>
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	20000564 	.word	0x20000564

08008ed0 <_sbrk_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4d06      	ldr	r5, [pc, #24]	; (8008eec <_sbrk_r+0x1c>)
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	4608      	mov	r0, r1
 8008eda:	602b      	str	r3, [r5, #0]
 8008edc:	f7f8 fc82 	bl	80017e4 <_sbrk>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	d102      	bne.n	8008eea <_sbrk_r+0x1a>
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	b103      	cbz	r3, 8008eea <_sbrk_r+0x1a>
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	bd38      	pop	{r3, r4, r5, pc}
 8008eec:	20000564 	.word	0x20000564

08008ef0 <_init>:
 8008ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef2:	bf00      	nop
 8008ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ef6:	bc08      	pop	{r3}
 8008ef8:	469e      	mov	lr, r3
 8008efa:	4770      	bx	lr

08008efc <_fini>:
 8008efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efe:	bf00      	nop
 8008f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f02:	bc08      	pop	{r3}
 8008f04:	469e      	mov	lr, r3
 8008f06:	4770      	bx	lr
