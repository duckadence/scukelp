
fskdemod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001356c  0800a0f4  0800a0f4  0001a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d660  0801d660  0003005c  2**0
                  CONTENTS
  4 .ARM          00000008  0801d660  0801d660  0002d660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d668  0801d668  0003005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d668  0801d668  0002d668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d66c  0801d66c  0002d66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0801d670  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005550  2000005c  0801d6cc  0003005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200055ac  0801d6cc  000355ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001936b  00000000  00000000  000300cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000330c  00000000  00000000  0004943a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  0004c748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022521  00000000  00000000  0004dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba4a  00000000  00000000  00070119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de0f9  00000000  00000000  0008bb63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000fda  00000000  00000000  00169c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c90  00000000  00000000  0016ac38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001708c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0dc 	.word	0x0800a0dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800a0dc 	.word	0x0800a0dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b970 	b.w	8000a00 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9e08      	ldr	r6, [sp, #32]
 800073e:	460d      	mov	r5, r1
 8000740:	4604      	mov	r4, r0
 8000742:	460f      	mov	r7, r1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d14a      	bne.n	80007de <__udivmoddi4+0xa6>
 8000748:	428a      	cmp	r2, r1
 800074a:	4694      	mov	ip, r2
 800074c:	d965      	bls.n	800081a <__udivmoddi4+0xe2>
 800074e:	fab2 f382 	clz	r3, r2
 8000752:	b143      	cbz	r3, 8000766 <__udivmoddi4+0x2e>
 8000754:	fa02 fc03 	lsl.w	ip, r2, r3
 8000758:	f1c3 0220 	rsb	r2, r3, #32
 800075c:	409f      	lsls	r7, r3
 800075e:	fa20 f202 	lsr.w	r2, r0, r2
 8000762:	4317      	orrs	r7, r2
 8000764:	409c      	lsls	r4, r3
 8000766:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800076a:	fa1f f58c 	uxth.w	r5, ip
 800076e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000772:	0c22      	lsrs	r2, r4, #16
 8000774:	fb0e 7711 	mls	r7, lr, r1, r7
 8000778:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800077c:	fb01 f005 	mul.w	r0, r1, r5
 8000780:	4290      	cmp	r0, r2
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x62>
 8000784:	eb1c 0202 	adds.w	r2, ip, r2
 8000788:	f101 37ff 	add.w	r7, r1, #4294967295
 800078c:	f080 811c 	bcs.w	80009c8 <__udivmoddi4+0x290>
 8000790:	4290      	cmp	r0, r2
 8000792:	f240 8119 	bls.w	80009c8 <__udivmoddi4+0x290>
 8000796:	3902      	subs	r1, #2
 8000798:	4462      	add	r2, ip
 800079a:	1a12      	subs	r2, r2, r0
 800079c:	b2a4      	uxth	r4, r4
 800079e:	fbb2 f0fe 	udiv	r0, r2, lr
 80007a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007aa:	fb00 f505 	mul.w	r5, r0, r5
 80007ae:	42a5      	cmp	r5, r4
 80007b0:	d90a      	bls.n	80007c8 <__udivmoddi4+0x90>
 80007b2:	eb1c 0404 	adds.w	r4, ip, r4
 80007b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ba:	f080 8107 	bcs.w	80009cc <__udivmoddi4+0x294>
 80007be:	42a5      	cmp	r5, r4
 80007c0:	f240 8104 	bls.w	80009cc <__udivmoddi4+0x294>
 80007c4:	4464      	add	r4, ip
 80007c6:	3802      	subs	r0, #2
 80007c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007cc:	1b64      	subs	r4, r4, r5
 80007ce:	2100      	movs	r1, #0
 80007d0:	b11e      	cbz	r6, 80007da <__udivmoddi4+0xa2>
 80007d2:	40dc      	lsrs	r4, r3
 80007d4:	2300      	movs	r3, #0
 80007d6:	e9c6 4300 	strd	r4, r3, [r6]
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0xbc>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	f000 80ed 	beq.w	80009c2 <__udivmoddi4+0x28a>
 80007e8:	2100      	movs	r1, #0
 80007ea:	e9c6 0500 	strd	r0, r5, [r6]
 80007ee:	4608      	mov	r0, r1
 80007f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f4:	fab3 f183 	clz	r1, r3
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d149      	bne.n	8000890 <__udivmoddi4+0x158>
 80007fc:	42ab      	cmp	r3, r5
 80007fe:	d302      	bcc.n	8000806 <__udivmoddi4+0xce>
 8000800:	4282      	cmp	r2, r0
 8000802:	f200 80f8 	bhi.w	80009f6 <__udivmoddi4+0x2be>
 8000806:	1a84      	subs	r4, r0, r2
 8000808:	eb65 0203 	sbc.w	r2, r5, r3
 800080c:	2001      	movs	r0, #1
 800080e:	4617      	mov	r7, r2
 8000810:	2e00      	cmp	r6, #0
 8000812:	d0e2      	beq.n	80007da <__udivmoddi4+0xa2>
 8000814:	e9c6 4700 	strd	r4, r7, [r6]
 8000818:	e7df      	b.n	80007da <__udivmoddi4+0xa2>
 800081a:	b902      	cbnz	r2, 800081e <__udivmoddi4+0xe6>
 800081c:	deff      	udf	#255	; 0xff
 800081e:	fab2 f382 	clz	r3, r2
 8000822:	2b00      	cmp	r3, #0
 8000824:	f040 8090 	bne.w	8000948 <__udivmoddi4+0x210>
 8000828:	1a8a      	subs	r2, r1, r2
 800082a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082e:	fa1f fe8c 	uxth.w	lr, ip
 8000832:	2101      	movs	r1, #1
 8000834:	fbb2 f5f7 	udiv	r5, r2, r7
 8000838:	fb07 2015 	mls	r0, r7, r5, r2
 800083c:	0c22      	lsrs	r2, r4, #16
 800083e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000842:	fb0e f005 	mul.w	r0, lr, r5
 8000846:	4290      	cmp	r0, r2
 8000848:	d908      	bls.n	800085c <__udivmoddi4+0x124>
 800084a:	eb1c 0202 	adds.w	r2, ip, r2
 800084e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000852:	d202      	bcs.n	800085a <__udivmoddi4+0x122>
 8000854:	4290      	cmp	r0, r2
 8000856:	f200 80cb 	bhi.w	80009f0 <__udivmoddi4+0x2b8>
 800085a:	4645      	mov	r5, r8
 800085c:	1a12      	subs	r2, r2, r0
 800085e:	b2a4      	uxth	r4, r4
 8000860:	fbb2 f0f7 	udiv	r0, r2, r7
 8000864:	fb07 2210 	mls	r2, r7, r0, r2
 8000868:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086c:	fb0e fe00 	mul.w	lr, lr, r0
 8000870:	45a6      	cmp	lr, r4
 8000872:	d908      	bls.n	8000886 <__udivmoddi4+0x14e>
 8000874:	eb1c 0404 	adds.w	r4, ip, r4
 8000878:	f100 32ff 	add.w	r2, r0, #4294967295
 800087c:	d202      	bcs.n	8000884 <__udivmoddi4+0x14c>
 800087e:	45a6      	cmp	lr, r4
 8000880:	f200 80bb 	bhi.w	80009fa <__udivmoddi4+0x2c2>
 8000884:	4610      	mov	r0, r2
 8000886:	eba4 040e 	sub.w	r4, r4, lr
 800088a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800088e:	e79f      	b.n	80007d0 <__udivmoddi4+0x98>
 8000890:	f1c1 0720 	rsb	r7, r1, #32
 8000894:	408b      	lsls	r3, r1
 8000896:	fa22 fc07 	lsr.w	ip, r2, r7
 800089a:	ea4c 0c03 	orr.w	ip, ip, r3
 800089e:	fa05 f401 	lsl.w	r4, r5, r1
 80008a2:	fa20 f307 	lsr.w	r3, r0, r7
 80008a6:	40fd      	lsrs	r5, r7
 80008a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008ac:	4323      	orrs	r3, r4
 80008ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80008b2:	fa1f fe8c 	uxth.w	lr, ip
 80008b6:	fb09 5518 	mls	r5, r9, r8, r5
 80008ba:	0c1c      	lsrs	r4, r3, #16
 80008bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008c0:	fb08 f50e 	mul.w	r5, r8, lr
 80008c4:	42a5      	cmp	r5, r4
 80008c6:	fa02 f201 	lsl.w	r2, r2, r1
 80008ca:	fa00 f001 	lsl.w	r0, r0, r1
 80008ce:	d90b      	bls.n	80008e8 <__udivmoddi4+0x1b0>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008d8:	f080 8088 	bcs.w	80009ec <__udivmoddi4+0x2b4>
 80008dc:	42a5      	cmp	r5, r4
 80008de:	f240 8085 	bls.w	80009ec <__udivmoddi4+0x2b4>
 80008e2:	f1a8 0802 	sub.w	r8, r8, #2
 80008e6:	4464      	add	r4, ip
 80008e8:	1b64      	subs	r4, r4, r5
 80008ea:	b29d      	uxth	r5, r3
 80008ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80008f0:	fb09 4413 	mls	r4, r9, r3, r4
 80008f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008fc:	45a6      	cmp	lr, r4
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x1da>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f103 35ff 	add.w	r5, r3, #4294967295
 8000908:	d26c      	bcs.n	80009e4 <__udivmoddi4+0x2ac>
 800090a:	45a6      	cmp	lr, r4
 800090c:	d96a      	bls.n	80009e4 <__udivmoddi4+0x2ac>
 800090e:	3b02      	subs	r3, #2
 8000910:	4464      	add	r4, ip
 8000912:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000916:	fba3 9502 	umull	r9, r5, r3, r2
 800091a:	eba4 040e 	sub.w	r4, r4, lr
 800091e:	42ac      	cmp	r4, r5
 8000920:	46c8      	mov	r8, r9
 8000922:	46ae      	mov	lr, r5
 8000924:	d356      	bcc.n	80009d4 <__udivmoddi4+0x29c>
 8000926:	d053      	beq.n	80009d0 <__udivmoddi4+0x298>
 8000928:	b156      	cbz	r6, 8000940 <__udivmoddi4+0x208>
 800092a:	ebb0 0208 	subs.w	r2, r0, r8
 800092e:	eb64 040e 	sbc.w	r4, r4, lr
 8000932:	fa04 f707 	lsl.w	r7, r4, r7
 8000936:	40ca      	lsrs	r2, r1
 8000938:	40cc      	lsrs	r4, r1
 800093a:	4317      	orrs	r7, r2
 800093c:	e9c6 7400 	strd	r7, r4, [r6]
 8000940:	4618      	mov	r0, r3
 8000942:	2100      	movs	r1, #0
 8000944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000948:	f1c3 0120 	rsb	r1, r3, #32
 800094c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000950:	fa20 f201 	lsr.w	r2, r0, r1
 8000954:	fa25 f101 	lsr.w	r1, r5, r1
 8000958:	409d      	lsls	r5, r3
 800095a:	432a      	orrs	r2, r5
 800095c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fbb1 f0f7 	udiv	r0, r1, r7
 8000968:	fb07 1510 	mls	r5, r7, r0, r1
 800096c:	0c11      	lsrs	r1, r2, #16
 800096e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000972:	fb00 f50e 	mul.w	r5, r0, lr
 8000976:	428d      	cmp	r5, r1
 8000978:	fa04 f403 	lsl.w	r4, r4, r3
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x258>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f100 38ff 	add.w	r8, r0, #4294967295
 8000986:	d22f      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 8000988:	428d      	cmp	r5, r1
 800098a:	d92d      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 800098c:	3802      	subs	r0, #2
 800098e:	4461      	add	r1, ip
 8000990:	1b49      	subs	r1, r1, r5
 8000992:	b292      	uxth	r2, r2
 8000994:	fbb1 f5f7 	udiv	r5, r1, r7
 8000998:	fb07 1115 	mls	r1, r7, r5, r1
 800099c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009a0:	fb05 f10e 	mul.w	r1, r5, lr
 80009a4:	4291      	cmp	r1, r2
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x282>
 80009a8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80009b0:	d216      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 80009b2:	4291      	cmp	r1, r2
 80009b4:	d914      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 80009b6:	3d02      	subs	r5, #2
 80009b8:	4462      	add	r2, ip
 80009ba:	1a52      	subs	r2, r2, r1
 80009bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009c0:	e738      	b.n	8000834 <__udivmoddi4+0xfc>
 80009c2:	4631      	mov	r1, r6
 80009c4:	4630      	mov	r0, r6
 80009c6:	e708      	b.n	80007da <__udivmoddi4+0xa2>
 80009c8:	4639      	mov	r1, r7
 80009ca:	e6e6      	b.n	800079a <__udivmoddi4+0x62>
 80009cc:	4610      	mov	r0, r2
 80009ce:	e6fb      	b.n	80007c8 <__udivmoddi4+0x90>
 80009d0:	4548      	cmp	r0, r9
 80009d2:	d2a9      	bcs.n	8000928 <__udivmoddi4+0x1f0>
 80009d4:	ebb9 0802 	subs.w	r8, r9, r2
 80009d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009dc:	3b01      	subs	r3, #1
 80009de:	e7a3      	b.n	8000928 <__udivmoddi4+0x1f0>
 80009e0:	4645      	mov	r5, r8
 80009e2:	e7ea      	b.n	80009ba <__udivmoddi4+0x282>
 80009e4:	462b      	mov	r3, r5
 80009e6:	e794      	b.n	8000912 <__udivmoddi4+0x1da>
 80009e8:	4640      	mov	r0, r8
 80009ea:	e7d1      	b.n	8000990 <__udivmoddi4+0x258>
 80009ec:	46d0      	mov	r8, sl
 80009ee:	e77b      	b.n	80008e8 <__udivmoddi4+0x1b0>
 80009f0:	3d02      	subs	r5, #2
 80009f2:	4462      	add	r2, ip
 80009f4:	e732      	b.n	800085c <__udivmoddi4+0x124>
 80009f6:	4608      	mov	r0, r1
 80009f8:	e70a      	b.n	8000810 <__udivmoddi4+0xd8>
 80009fa:	4464      	add	r4, ip
 80009fc:	3802      	subs	r0, #2
 80009fe:	e742      	b.n	8000886 <__udivmoddi4+0x14e>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <arm_cmplx_mag_f32>:
#else
void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b08b      	sub	sp, #44	; 0x2c
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8000a14:	e030      	b.n	8000a78 <arm_cmplx_mag_f32+0x74>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	1d1a      	adds	r2, r3, #4
 8000a1a:	60fa      	str	r2, [r7, #12]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	623b      	str	r3, [r7, #32]
    imag = *pSrc++;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	1d1a      	adds	r2, r3, #4
 8000a24:	60fa      	str	r2, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	61fb      	str	r3, [r7, #28]

    /* store result in destination buffer. */
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 8000a2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a2e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000a32:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	1d1a      	adds	r2, r3, #4
 8000a42:	60ba      	str	r2, [r7, #8]
 8000a44:	edc7 7a06 	vstr	s15, [r7, #24]
 8000a48:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000a4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a56:	db07      	blt.n	8000a68 <arm_cmplx_mag_f32+0x64>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8000a58:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a5c:	eef1 7ae7 	vsqrt.f32	s15, s15
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	edc3 7a00 	vstr	s15, [r3]
  #endif
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8000a66:	e004      	b.n	8000a72 <arm_cmplx_mag_f32+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	f04f 0200 	mov.w	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000a70:	bf00      	nop

    /* Decrement loop counter */
    blkCnt--;
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	3b01      	subs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8000a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d1cb      	bne.n	8000a16 <arm_cmplx_mag_f32+0x12>
  }

}
 8000a7e:	bf00      	nop
 8000a80:	bf00      	nop
 8000a82:	372c      	adds	r7, #44	; 0x2c
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	460b      	mov	r3, r1
 8000a96:	607a      	str	r2, [r7, #4]
 8000a98:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
 8000a9e:	e043      	b.n	8000b28 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	089b      	lsrs	r3, r3, #2
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	089b      	lsrs	r3, r3, #2
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	4413      	add	r3, r2
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	441a      	add	r2, r3
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	68f9      	ldr	r1, [r7, #12]
 8000adc:	440b      	add	r3, r1
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	3301      	adds	r3, #1
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3301      	adds	r3, #1
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	441a      	add	r2, r3
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	68f9      	ldr	r1, [r7, #12]
 8000b0e:	440b      	add	r3, r1
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	3301      	adds	r3, #1
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	601a      	str	r2, [r3, #0]

    i += 2;
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3302      	adds	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8000b28:	897b      	ldrh	r3, [r7, #10]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d3b7      	bcc.n	8000aa0 <arm_bitreversal_32+0x14>
  }
}
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	3724      	adds	r7, #36	; 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b0a0      	sub	sp, #128	; 0x80
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8000b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	4413      	add	r3, r2
 8000b56:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8000b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b64:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8000b66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b68:	085b      	lsrs	r3, r3, #1
 8000b6a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8000b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8000b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000b7c:	4413      	add	r3, r2
 8000b7e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8000b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000b86:	e1b6      	b.n	8000ef6 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8000ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8000ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8000bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8000bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8000bb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8000bbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8000bc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8000bca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8000bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8000bd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8000bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8000be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8000be8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000bec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	1d1a      	adds	r2, r3, #4
 8000bf4:	603a      	str	r2, [r7, #0]
 8000bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfa:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8000bfe:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c02:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	1d1a      	adds	r2, r3, #4
 8000c0a:	603a      	str	r2, [r7, #0]
 8000c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c10:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8000c14:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000c18:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	1d1a      	adds	r2, r3, #4
 8000c20:	603a      	str	r2, [r7, #0]
 8000c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c26:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8000c2a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000c2e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	1d1a      	adds	r2, r3, #4
 8000c36:	603a      	str	r2, [r7, #0]
 8000c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c3c:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8000c40:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000c44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c4c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8000c50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c54:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c5c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8000c60:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000c64:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c6c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8000c70:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000c74:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c7c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 8000c80:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c84:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c8a:	1d1a      	adds	r2, r3, #4
 8000c8c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c92:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8000c96:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ca0:	1d1a      	adds	r2, r3, #4
 8000ca2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca8:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8000cac:	ed97 7a08 	vldr	s14, [r7, #32]
 8000cb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cb6:	1d1a      	adds	r2, r3, #4
 8000cb8:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cbe:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8000cc2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000cc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ccc:	1d1a      	adds	r2, r3, #4
 8000cce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cd4:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8000cd8:	ed97 7a02 	vldr	s14, [r7, #8]
 8000cdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ce4:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8000ce8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cec:	edd7 7a07 	vldr	s15, [r7, #28]
 8000cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cf4:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8000cf8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cfc:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d04:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8000d08:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d14:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8000d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d1a:	1d1a      	adds	r2, r3, #4
 8000d1c:	673a      	str	r2, [r7, #112]	; 0x70
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8000d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d24:	1d1a      	adds	r2, r3, #4
 8000d26:	673a      	str	r2, [r7, #112]	; 0x70
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8000d2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d30:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d38:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8000d3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d40:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d48:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 8000d4c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d50:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d58:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 8000d5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d60:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d68:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8000d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d6e:	1d1a      	adds	r2, r3, #4
 8000d70:	677a      	str	r2, [r7, #116]	; 0x74
 8000d72:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000d76:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d7e:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8000d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d84:	1d1a      	adds	r2, r3, #4
 8000d86:	677a      	str	r2, [r7, #116]	; 0x74
 8000d88:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000d8c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d94:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8000d98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d9c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 8000da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dac:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 8000db8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dbc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 8000dc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dcc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8000dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dda:	1d1a      	adds	r2, r3, #4
 8000ddc:	67ba      	str	r2, [r7, #120]	; 0x78
 8000dde:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000de2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dea:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8000dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000df0:	1d1a      	adds	r2, r3, #4
 8000df2:	67ba      	str	r2, [r7, #120]	; 0x78
 8000df4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000df8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e00:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8000e04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e06:	1d1a      	adds	r2, r3, #4
 8000e08:	673a      	str	r2, [r7, #112]	; 0x70
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8000e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e10:	1d1a      	adds	r2, r3, #4
 8000e12:	673a      	str	r2, [r7, #112]	; 0x70
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 8000e18:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000e1c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e24:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 8000e28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000e2c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e34:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8000e38:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000e3c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e44:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8000e48:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000e4c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e54:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8000e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e5a:	1d1a      	adds	r2, r3, #4
 8000e5c:	677a      	str	r2, [r7, #116]	; 0x74
 8000e5e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000e62:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e6a:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8000e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e70:	1d1a      	adds	r2, r3, #4
 8000e72:	677a      	str	r2, [r7, #116]	; 0x74
 8000e74:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000e78:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e80:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8000e84:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e88:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e90:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8000e94:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e98:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8000ea4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ea8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8000eb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eb8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8000ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ec6:	1d1a      	adds	r2, r3, #4
 8000ec8:	67ba      	str	r2, [r7, #120]	; 0x78
 8000eca:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000ece:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ed6:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8000eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000edc:	1d1a      	adds	r2, r3, #4
 8000ede:	67ba      	str	r2, [r7, #120]	; 0x78
 8000ee0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000ee4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eec:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8000ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f47f ae45 	bne.w	8000b88 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8000efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f00:	b299      	uxth	r1, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	2302      	movs	r3, #2
 8000f08:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000f0a:	f001 f80f 	bl	8001f2c <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8000f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f10:	b299      	uxth	r1, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	2302      	movs	r3, #2
 8000f18:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000f1a:	f001 f807 	bl	8001f2c <arm_radix8_butterfly_f32>
}
 8000f1e:	bf00      	nop
 8000f20:	3780      	adds	r7, #128	; 0x80
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b0ac      	sub	sp, #176	; 0xb0
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	085b      	lsrs	r3, r3, #1
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8000f3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8000f4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000f54:	4413      	add	r3, r2
 8000f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8000f5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000f64:	4413      	add	r3, r2
 8000f66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8000f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f72:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8000f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f78:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8000f7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f7e:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8000f80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f84:	3b04      	subs	r3, #4
 8000f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8000f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8000f94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f98:	3b04      	subs	r3, #4
 8000f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8000f9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000fa8:	4413      	add	r3, r2
 8000faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000fb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000fbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8000fc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fca:	085b      	lsrs	r3, r3, #1
 8000fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8000fd8:	2306      	movs	r3, #6
 8000fda:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	ed93 7a00 	vldr	s14, [r3]
 8000fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fee:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	ed93 7a00 	vldr	s14, [r3]
 8000ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ffc:	edd3 7a00 	vldr	s15, [r3]
 8001000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001004:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	3304      	adds	r3, #4
 800100c:	ed93 7a00 	vldr	s14, [r3]
 8001010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001014:	3304      	adds	r3, #4
 8001016:	edd3 7a00 	vldr	s15, [r3]
 800101a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	3304      	adds	r3, #4
 8001026:	ed93 7a00 	vldr	s14, [r3]
 800102a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800102e:	3304      	adds	r3, #4
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800103c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001040:	3304      	adds	r3, #4
 8001042:	ed93 7a00 	vldr	s14, [r3]
 8001046:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800104a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800104e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001052:	3304      	adds	r3, #4
 8001054:	edd3 7a00 	vldr	s15, [r3]
 8001058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800105c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800106c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001070:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001080:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800108c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80010a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010a4:	3304      	adds	r3, #4
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80010ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010b6:	3304      	adds	r3, #4
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c0:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80010c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010c8:	3304      	adds	r3, #4
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80010d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010da:	3304      	adds	r3, #4
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e4:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80010e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010ec:	ed93 7a00 	vldr	s14, [r3]
 80010f0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80010f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001104:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800110c:	ed93 7a00 	vldr	s14, [r3]
 8001110:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	1d1a      	adds	r2, r3, #4
 8001124:	603a      	str	r2, [r7, #0]
 8001126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800112e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001132:	3304      	adds	r3, #4
 8001134:	ed93 7a00 	vldr	s14, [r3]
 8001138:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800113c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001140:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001144:	3304      	adds	r3, #4
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	1d1a      	adds	r2, r3, #4
 800114e:	603a      	str	r2, [r7, #0]
 8001150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001154:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8001158:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800115c:	1d1a      	adds	r2, r3, #4
 800115e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001164:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8001166:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800116a:	1d1a      	adds	r2, r3, #4
 800116c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001172:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8001174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001178:	1d1a      	adds	r2, r3, #4
 800117a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8001182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001186:	1d1a      	adds	r2, r3, #4
 8001188:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800118c:	6a3a      	ldr	r2, [r7, #32]
 800118e:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8001190:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001194:	1d1a      	adds	r2, r3, #4
 8001196:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800119e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011a2:	1d1a      	adds	r2, r3, #4
 80011a4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80011ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80011b4:	4413      	add	r3, r2
 80011b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80011ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80011c2:	4413      	add	r3, r2
 80011c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80011c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80011d0:	4413      	add	r3, r2
 80011d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80011d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80011da:	3b02      	subs	r3, #2
 80011dc:	085b      	lsrs	r3, r3, #1
 80011de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80011e2:	e31c      	b.n	800181e <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	ed93 7a00 	vldr	s14, [r3]
 80011ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	ed93 7a00 	vldr	s14, [r3]
 8001200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	3304      	adds	r3, #4
 8001214:	ed93 7a00 	vldr	s14, [r3]
 8001218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800121c:	3304      	adds	r3, #4
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001226:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	3304      	adds	r3, #4
 800122e:	ed93 7a00 	vldr	s14, [r3]
 8001232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001236:	3304      	adds	r3, #4
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001240:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001244:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001248:	3304      	adds	r3, #4
 800124a:	ed93 7a00 	vldr	s14, [r3]
 800124e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001252:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001256:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800125a:	3304      	adds	r3, #4
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001264:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001268:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800126c:	edd3 7a00 	vldr	s15, [r3]
 8001270:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001274:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001278:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800127c:	edd3 7a00 	vldr	s15, [r3]
 8001280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001284:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001288:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001294:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001298:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a4:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 80012a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012ac:	3304      	adds	r3, #4
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80012b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012be:	3304      	adds	r3, #4
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c8:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 80012cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012d0:	3304      	adds	r3, #4
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80012da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012e2:	3304      	adds	r3, #4
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ec:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 80012f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012f4:	ed93 7a00 	vldr	s14, [r3]
 80012f8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001300:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001304:	edd3 7a00 	vldr	s15, [r3]
 8001308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130c:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001310:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001314:	ed93 7a00 	vldr	s14, [r3]
 8001318:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800131c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	1d1a      	adds	r2, r3, #4
 800132c:	603a      	str	r2, [r7, #0]
 800132e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001332:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001336:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800133a:	3304      	adds	r3, #4
 800133c:	ed93 7a00 	vldr	s14, [r3]
 8001340:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001344:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001348:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800134c:	3304      	adds	r3, #4
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	1d1a      	adds	r2, r3, #4
 8001356:	603a      	str	r2, [r7, #0]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8001360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001364:	3b04      	subs	r3, #4
 8001366:	ed93 7a00 	vldr	s14, [r3]
 800136a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800136e:	3b04      	subs	r3, #4
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001378:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800137c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001380:	3b04      	subs	r3, #4
 8001382:	ed93 7a00 	vldr	s14, [r3]
 8001386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800138a:	3b04      	subs	r3, #4
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001394:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8001398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ac:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 80013b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013b4:	ed93 7a00 	vldr	s14, [r3]
 80013b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 80013c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013cc:	ed93 7a00 	vldr	s14, [r3]
 80013d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013dc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80013e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013ec:	ed93 7a00 	vldr	s14, [r3]
 80013f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001400:	3b04      	subs	r3, #4
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	ee37 7a67 	vsub.f32	s14, s14, s15
 800140a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800140e:	3b04      	subs	r3, #4
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001418:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800141c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001420:	3b04      	subs	r3, #4
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800142a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800142e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001432:	3b04      	subs	r3, #4
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8001440:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800144c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001450:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8001460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001464:	ed93 7a00 	vldr	s14, [r3]
 8001468:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001474:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147c:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001480:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001484:	3b04      	subs	r3, #4
 8001486:	ed93 7a00 	vldr	s14, [r3]
 800148a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800148e:	3b04      	subs	r3, #4
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001498:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800149c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a0:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80014a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80014b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014c0:	1f1a      	subs	r2, r3, #4
 80014c2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80014c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ca:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80014ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014d2:	3b04      	subs	r3, #4
 80014d4:	ed93 7a00 	vldr	s14, [r3]
 80014d8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80014dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014e4:	3b04      	subs	r3, #4
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014ee:	1f1a      	subs	r2, r3, #4
 80014f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80014f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f8:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 80014fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001500:	1d1a      	adds	r2, r3, #4
 8001502:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800150a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800150e:	1d1a      	adds	r2, r3, #4
 8001510:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8001518:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800151c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001524:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8001528:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800152c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001534:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8001538:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800153c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001544:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8001548:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800154c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001554:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8001558:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800155c:	1d1a      	adds	r2, r3, #4
 800155e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001562:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001566:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800156a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156e:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8001572:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001576:	1d1a      	adds	r2, r3, #4
 8001578:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800157c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001580:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001588:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 800158c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001590:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001598:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 800159c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015a0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80015a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 80015ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015b0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80015b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 80015bc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80015c0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80015c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 80015cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015d0:	1f1a      	subs	r2, r3, #4
 80015d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80015d6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80015da:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80015de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e2:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 80015e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015ea:	1f1a      	subs	r2, r3, #4
 80015ec:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80015f0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80015f4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fc:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8001600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8001608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800160c:	3304      	adds	r3, #4
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8001612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800161a:	4413      	add	r3, r2
 800161c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8001620:	edd7 7a07 	vldr	s15, [r7, #28]
 8001624:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8001630:	edd7 7a08 	vldr	s15, [r7, #32]
 8001634:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8001640:	edd7 7a08 	vldr	s15, [r7, #32]
 8001644:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8001650:	edd7 7a07 	vldr	s15, [r7, #28]
 8001654:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8001660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001664:	1d1a      	adds	r2, r3, #4
 8001666:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800166a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800166e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001676:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 800167a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800167e:	1d1a      	adds	r2, r3, #4
 8001680:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001684:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001688:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800168c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001690:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8001694:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001698:	eef1 7a67 	vneg.f32	s15, s15
 800169c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80016a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 80016a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016ac:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80016b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 80016b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016bc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80016c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 80016c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016cc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80016d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 80016d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016dc:	1f1a      	subs	r2, r3, #4
 80016de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016e2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80016e6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ee:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 80016f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016f6:	1f1a      	subs	r2, r3, #4
 80016f8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016fc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001700:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001708:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 800170c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8001714:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001718:	3304      	adds	r3, #4
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 800171e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001726:	4413      	add	r3, r2
 8001728:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 800172c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001730:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001738:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 800173c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001740:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001748:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 800174c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001750:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001758:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 800175c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001760:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001768:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 800176c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001770:	1d1a      	adds	r2, r3, #4
 8001772:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001776:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800177a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800177e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001782:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8001786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800178a:	1d1a      	adds	r2, r3, #4
 800178c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001790:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001794:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179c:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 80017a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80017a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 80017b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017b4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80017b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017bc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 80017c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80017c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017cc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 80017d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80017d4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80017d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017dc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 80017e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017e4:	1f1a      	subs	r2, r3, #4
 80017e6:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80017ea:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80017ee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f6:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 80017fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017fe:	1f1a      	subs	r2, r3, #4
 8001800:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001804:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001808:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800180c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001810:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8001814:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001818:	3b01      	subs	r3, #1
 800181a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800181e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001822:	2b00      	cmp	r3, #0
 8001824:	f47f acde 	bne.w	80011e4 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	ed93 7a00 	vldr	s14, [r3]
 800182e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	ed93 7a00 	vldr	s14, [r3]
 8001844:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001850:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	3304      	adds	r3, #4
 8001858:	ed93 7a00 	vldr	s14, [r3]
 800185c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001860:	3304      	adds	r3, #4
 8001862:	edd3 7a00 	vldr	s15, [r3]
 8001866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	3304      	adds	r3, #4
 8001872:	ed93 7a00 	vldr	s14, [r3]
 8001876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800187a:	3304      	adds	r3, #4
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001884:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001888:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800188c:	3304      	adds	r3, #4
 800188e:	ed93 7a00 	vldr	s14, [r3]
 8001892:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001896:	ee37 7a27 	vadd.f32	s14, s14, s15
 800189a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800189e:	3304      	adds	r3, #4
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80018ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80018b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80018cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80018d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e8:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80018ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018f0:	3304      	adds	r3, #4
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80018fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001902:	3304      	adds	r3, #4
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190c:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001910:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001914:	3304      	adds	r3, #4
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800191e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001922:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001926:	3304      	adds	r3, #4
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001930:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001934:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001938:	ed93 7a00 	vldr	s14, [r3]
 800193c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001940:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001944:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001950:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001954:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001958:	ed93 7a00 	vldr	s14, [r3]
 800195c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001964:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	1d1a      	adds	r2, r3, #4
 8001970:	603a      	str	r2, [r7, #0]
 8001972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001976:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800197a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800197e:	3304      	adds	r3, #4
 8001980:	ed93 7a00 	vldr	s14, [r3]
 8001984:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800198c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001990:	3304      	adds	r3, #4
 8001992:	edd3 7a00 	vldr	s15, [r3]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	1d1a      	adds	r2, r3, #4
 800199a:	603a      	str	r2, [r7, #0]
 800199c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a0:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 80019a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 80019ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019b0:	3304      	adds	r3, #4
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 80019b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019ba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80019be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 80019c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019ca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80019ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 80019d6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019da:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80019de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 80019e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019ea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80019ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 80019f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019fa:	1d1a      	adds	r2, r3, #4
 80019fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001a00:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001a04:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0c:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001a10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a14:	1d1a      	adds	r2, r3, #4
 8001a16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001a1a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001a1e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a26:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8001a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8001a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a36:	3304      	adds	r3, #4
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8001a3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a40:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a48:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8001a4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a50:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8001a5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a60:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a68:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8001a6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a70:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8001a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a80:	1d1a      	adds	r2, r3, #4
 8001a82:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a86:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001a8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a92:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8001a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a9a:	1d1a      	adds	r2, r3, #4
 8001a9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001aa0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001aa4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aac:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8001ab0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8001ab8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001abc:	3304      	adds	r3, #4
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8001ac2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ace:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8001ad2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ade:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8001ae2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ae6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aee:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8001af2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8001b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b06:	1d1a      	adds	r2, r3, #4
 8001b08:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001b0c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001b10:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b18:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8001b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b20:	1d1a      	adds	r2, r3, #4
 8001b22:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001b26:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001b2a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b32:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8001b36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b3a:	b299      	uxth	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	2304      	movs	r3, #4
 8001b42:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001b44:	f000 f9f2 	bl	8001f2c <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8001b48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b4c:	b299      	uxth	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	2304      	movs	r3, #4
 8001b54:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001b56:	f000 f9e9 	bl	8001f2c <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8001b5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b5e:	b299      	uxth	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	2304      	movs	r3, #4
 8001b66:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b68:	f000 f9e0 	bl	8001f2c <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8001b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b70:	b299      	uxth	r1, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	2304      	movs	r3, #4
 8001b78:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001b7a:	f000 f9d7 	bl	8001f2c <arm_radix8_butterfly_f32>
}
 8001b7e:	bf00      	nop
 8001b80:	37b0      	adds	r7, #176	; 0xb0
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b088      	sub	sp, #32
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	4611      	mov	r1, r2
 8001b92:	461a      	mov	r2, r3
 8001b94:	460b      	mov	r3, r1
 8001b96:	71fb      	strb	r3, [r7, #7]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d117      	bne.n	8001bd8 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	3304      	adds	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	e00d      	b.n	8001bd0 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eef1 7a67 	vneg.f32	s15, s15
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	3308      	adds	r3, #8
 8001bc8:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d3ed      	bcc.n	8001bb4 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bde:	d040      	beq.n	8001c62 <arm_cfft_f32+0xdc>
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001be6:	d845      	bhi.n	8001c74 <arm_cfft_f32+0xee>
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bee:	d033      	beq.n	8001c58 <arm_cfft_f32+0xd2>
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bf6:	d83d      	bhi.n	8001c74 <arm_cfft_f32+0xee>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfe:	d026      	beq.n	8001c4e <arm_cfft_f32+0xc8>
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c06:	d835      	bhi.n	8001c74 <arm_cfft_f32+0xee>
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c0e:	d028      	beq.n	8001c62 <arm_cfft_f32+0xdc>
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c16:	d82d      	bhi.n	8001c74 <arm_cfft_f32+0xee>
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c1e:	d01b      	beq.n	8001c58 <arm_cfft_f32+0xd2>
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c26:	d825      	bhi.n	8001c74 <arm_cfft_f32+0xee>
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b80      	cmp	r3, #128	; 0x80
 8001c2c:	d00f      	beq.n	8001c4e <arm_cfft_f32+0xc8>
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b80      	cmp	r3, #128	; 0x80
 8001c32:	d81f      	bhi.n	8001c74 <arm_cfft_f32+0xee>
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2b40      	cmp	r3, #64	; 0x40
 8001c38:	d013      	beq.n	8001c62 <arm_cfft_f32+0xdc>
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b40      	cmp	r3, #64	; 0x40
 8001c3e:	d819      	bhi.n	8001c74 <arm_cfft_f32+0xee>
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b10      	cmp	r3, #16
 8001c44:	d003      	beq.n	8001c4e <arm_cfft_f32+0xc8>
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d005      	beq.n	8001c58 <arm_cfft_f32+0xd2>
 8001c4c:	e012      	b.n	8001c74 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8001c4e:	68b9      	ldr	r1, [r7, #8]
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f7fe ff74 	bl	8000b3e <arm_cfft_radix8by2_f32>
    break;
 8001c56:	e00d      	b.n	8001c74 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7ff f963 	bl	8000f26 <arm_cfft_radix8by4_f32>
    break;
 8001c60:	e008      	b.n	8001c74 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	b299      	uxth	r1, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	68b8      	ldr	r0, [r7, #8]
 8001c6e:	f000 f95d 	bl	8001f2c <arm_radix8_butterfly_f32>
    break;
 8001c72:	bf00      	nop
  }

  if ( bitReverseFlag )
 8001c74:	79bb      	ldrb	r3, [r7, #6]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8999      	ldrh	r1, [r3, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68b8      	ldr	r0, [r7, #8]
 8001c86:	f7fe ff01 	bl	8000a8c <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d130      	bne.n	8001cf2 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca2:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	e01c      	b.n	8001cea <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	1d1a      	adds	r2, r3, #4
 8001cb4:	61ba      	str	r2, [r7, #24]
 8001cb6:	ed93 7a00 	vldr	s14, [r3]
 8001cba:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	eeb1 7a67 	vneg.f32	s14, s15
 8001cd0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d3de      	bcc.n	8001cb0 <arm_cfft_f32+0x12a>
    }
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024);
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d0e:	801a      	strh	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <arm_cfft_init_2048_f32+0x44>)
 8001d18:	899a      	ldrh	r2, [r3, #12]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	819a      	strh	r2, [r3, #12]
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <arm_cfft_init_2048_f32+0x44>)
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <arm_cfft_init_2048_f32+0x44>)
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	0801d5d4 	.word	0x0801d5d4

08001d44 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024);
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d56:	801a      	strh	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <arm_cfft_init_1024_f32+0x44>)
 8001d60:	899a      	ldrh	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	819a      	strh	r2, [r3, #12]
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <arm_cfft_init_1024_f32+0x44>)
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <arm_cfft_init_1024_f32+0x44>)
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	0801d5c4 	.word	0x0801d5c4

08001d8c <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256);
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9e:	801a      	strh	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <arm_cfft_init_512_f32+0x44>)
 8001da8:	899a      	ldrh	r2, [r3, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	819a      	strh	r2, [r3, #12]
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <arm_cfft_init_512_f32+0x44>)
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <arm_cfft_init_512_f32+0x44>)
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	0801d5b4 	.word	0x0801d5b4

08001dd4 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256);
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de6:	801a      	strh	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <arm_cfft_init_256_f32+0x44>)
 8001df0:	899a      	ldrh	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	819a      	strh	r2, [r3, #12]
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <arm_cfft_init_256_f32+0x44>)
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <arm_cfft_init_256_f32+0x44>)
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	0801d5a4 	.word	0x0801d5a4

08001e1c <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64);
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	801a      	strh	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <arm_cfft_init_128_f32+0x40>)
 8001e36:	899a      	ldrh	r2, [r3, #12]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	819a      	strh	r2, [r3, #12]
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <arm_cfft_init_128_f32+0x40>)
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <arm_cfft_init_128_f32+0x40>)
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	0801d594 	.word	0x0801d594

08001e60 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64);
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2240      	movs	r2, #64	; 0x40
 8001e70:	801a      	strh	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <arm_cfft_init_64_f32+0x40>)
 8001e7a:	899a      	ldrh	r2, [r3, #12]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	819a      	strh	r2, [r3, #12]
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <arm_cfft_init_64_f32+0x40>)
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <arm_cfft_init_64_f32+0x40>)
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	0801d584 	.word	0x0801d584

08001ea4 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16);
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	801a      	strh	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <arm_cfft_init_32_f32+0x40>)
 8001ebe:	899a      	ldrh	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	819a      	strh	r2, [r3, #12]
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <arm_cfft_init_32_f32+0x40>)
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <arm_cfft_init_32_f32+0x40>)
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	0801d574 	.word	0x0801d574

08001ee8 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16);
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	801a      	strh	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <arm_cfft_init_16_f32+0x40>)
 8001f02:	899a      	ldrh	r2, [r3, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	819a      	strh	r2, [r3, #12]
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <arm_cfft_init_16_f32+0x40>)
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <arm_cfft_init_16_f32+0x40>)
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	0801d564 	.word	0x0801d564

08001f2c <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b0bd      	sub	sp, #244	; 0xf4
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	461a      	mov	r2, r3
 8001f38:	460b      	mov	r3, r1
 8001f3a:	817b      	strh	r3, [r7, #10]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <arm_radix8_butterfly_f32+0x3c>)
 8001f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8001f46:	897b      	ldrh	r3, [r7, #10]
 8001f48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8001f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8001f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f58:	08db      	lsrs	r3, r3, #3
 8001f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f64:	e002      	b.n	8001f6c <arm_radix8_butterfly_f32+0x40>
 8001f66:	bf00      	nop
 8001f68:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8001f6c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f74:	4413      	add	r3, r2
 8001f76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8001f7a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f82:	4413      	add	r3, r2
 8001f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8001f88:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f90:	4413      	add	r3, r2
 8001f92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8001f96:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8001fa4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fac:	4413      	add	r3, r2
 8001fae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8001fb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fba:	4413      	add	r3, r2
 8001fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8001fc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fc8:	4413      	add	r3, r2
 8001fca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001fce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	ed93 7a00 	vldr	s14, [r3]
 8001fdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fee:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8001ff2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	ed93 7a00 	vldr	s14, [r3]
 8002000:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4413      	add	r3, r2
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002012:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	ed93 7a00 	vldr	s14, [r3]
 8002024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4413      	add	r3, r2
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002036:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800203a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	ed93 7a00 	vldr	s14, [r3]
 8002048:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4413      	add	r3, r2
 8002052:	edd3 7a00 	vldr	s15, [r3]
 8002056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800205e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	ed93 7a00 	vldr	s14, [r3]
 800206c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4413      	add	r3, r2
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002082:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	ed93 7a00 	vldr	s14, [r3]
 8002090:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4413      	add	r3, r2
 800209a:	edd3 7a00 	vldr	s15, [r3]
 800209e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80020a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	ed93 7a00 	vldr	s14, [r3]
 80020b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4413      	add	r3, r2
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80020ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	ed93 7a00 	vldr	s14, [r3]
 80020d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4413      	add	r3, r2
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ea:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80020ee:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80020f2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80020f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020fa:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80020fe:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002102:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800210e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002112:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800211a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800211e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002122:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 800212e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800213c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002144:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8002148:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4413      	add	r3, r2
 8002152:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002156:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800215a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800215e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002162:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	3304      	adds	r3, #4
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4413      	add	r3, r2
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	3304      	adds	r3, #4
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4413      	add	r3, r2
 800217e:	edd3 7a00 	vldr	s15, [r3]
 8002182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002186:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800218a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	3304      	adds	r3, #4
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	ed93 7a00 	vldr	s14, [r3]
 800219a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	3304      	adds	r3, #4
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4413      	add	r3, r2
 80021a6:	edd3 7a00 	vldr	s15, [r3]
 80021aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ae:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80021b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	3304      	adds	r3, #4
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4413      	add	r3, r2
 80021be:	ed93 7a00 	vldr	s14, [r3]
 80021c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	3304      	adds	r3, #4
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4413      	add	r3, r2
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80021da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	3304      	adds	r3, #4
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4413      	add	r3, r2
 80021e6:	ed93 7a00 	vldr	s14, [r3]
 80021ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	3304      	adds	r3, #4
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4413      	add	r3, r2
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fe:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002202:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	3304      	adds	r3, #4
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4413      	add	r3, r2
 800220e:	ed93 7a00 	vldr	s14, [r3]
 8002212:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	3304      	adds	r3, #4
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4413      	add	r3, r2
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800222a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	3304      	adds	r3, #4
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4413      	add	r3, r2
 8002236:	ed93 7a00 	vldr	s14, [r3]
 800223a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	3304      	adds	r3, #4
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4413      	add	r3, r2
 8002246:	edd3 7a00 	vldr	s15, [r3]
 800224a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002252:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	3304      	adds	r3, #4
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4413      	add	r3, r2
 800225e:	ed93 7a00 	vldr	s14, [r3]
 8002262:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	3304      	adds	r3, #4
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4413      	add	r3, r2
 800226e:	edd3 7a00 	vldr	s15, [r3]
 8002272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002276:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800227a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	3304      	adds	r3, #4
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	ed93 7a00 	vldr	s14, [r3]
 800228a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	3304      	adds	r3, #4
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4413      	add	r3, r2
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800229e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 80022a2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80022a6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80022aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ae:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 80022b2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80022b6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80022ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022be:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 80022c2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80022c6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80022ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ce:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80022d2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80022d6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80022da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022de:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80022e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	3304      	adds	r3, #4
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4413      	add	r3, r2
 80022ee:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80022f2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80022f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80022fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	3304      	adds	r3, #4
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4413      	add	r3, r2
 800230a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800230e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002316:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800231a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002328:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800232c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002330:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8002334:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4413      	add	r3, r2
 800233e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002342:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800234e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	3304      	adds	r3, #4
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4413      	add	r3, r2
 800235a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800235e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002366:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800236a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	3304      	adds	r3, #4
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4413      	add	r3, r2
 8002376:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800237a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800237e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002382:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8002386:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800238a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800238e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002392:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800239e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80023a2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80023a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023aa:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80023ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 80023b6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80023ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80023be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80023c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ca:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80023ce:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80023d2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80023d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023da:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80023de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80023e6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80023ea:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80023ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80023f6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80023fa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80023fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002402:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8002406:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800240a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800240e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002412:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8002416:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800241a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800241e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002422:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8002426:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800242a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800242e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002432:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8002436:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800243a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800243e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002442:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8002446:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800244a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800244e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002452:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8002456:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800245a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800245e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002462:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8002466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002474:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8002480:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4413      	add	r3, r2
 800248a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800248e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002496:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800249a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80024a8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80024ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80024b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80024c2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80024c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ca:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80024ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	3304      	adds	r3, #4
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80024de:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80024e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80024ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	3304      	adds	r3, #4
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4413      	add	r3, r2
 80024f6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80024fa:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80024fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002502:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002506:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	3304      	adds	r3, #4
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4413      	add	r3, r2
 8002512:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002516:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800251a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800251e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002522:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	3304      	adds	r3, #4
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4413      	add	r3, r2
 800252e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002532:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253a:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800253e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002546:	4413      	add	r3, r2
 8002548:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 800254c:	897b      	ldrh	r3, [r7, #10]
 800254e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002552:	429a      	cmp	r2, r3
 8002554:	f4ff ad0a 	bcc.w	8001f6c <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8002558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255c:	2b07      	cmp	r3, #7
 800255e:	f240 84e3 	bls.w	8002f28 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8002568:	2301      	movs	r3, #1
 800256a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800256e:	893b      	ldrh	r3, [r7, #8]
 8002570:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002574:	4413      	add	r3, r2
 8002576:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8002578:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800257a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800257e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002582:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002584:	4413      	add	r3, r2
 8002586:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8002588:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800258a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800258c:	4413      	add	r3, r2
 800258e:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8002590:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002592:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002594:	4413      	add	r3, r2
 8002596:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8002598:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800259a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800259c:	4413      	add	r3, r2
 800259e:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 80025a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025a4:	4413      	add	r3, r2
 80025a6:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 80025a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025ac:	4413      	add	r3, r2
 80025ae:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 80025b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 80025be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80025ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 80025d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80025e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80025ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80025fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002606:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	3304      	adds	r3, #4
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	3304      	adds	r3, #4
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	4413      	add	r3, r2
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	3304      	adds	r3, #4
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002632:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	3304      	adds	r3, #4
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	4413      	add	r3, r2
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	3304      	adds	r3, #4
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800264e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	3304      	adds	r3, #4
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4413      	add	r3, r2
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 800265c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	3304      	adds	r3, #4
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 800266a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800266e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002672:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267a:	4413      	add	r3, r2
 800267c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8002680:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002688:	4413      	add	r3, r2
 800268a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800268e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002696:	4413      	add	r3, r2
 8002698:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800269c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80026a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a4:	4413      	add	r3, r2
 80026a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 80026aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b2:	4413      	add	r3, r2
 80026b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 80026b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c0:	4413      	add	r3, r2
 80026c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 80026c6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80026ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ce:	4413      	add	r3, r2
 80026d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80026d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4413      	add	r3, r2
 80026de:	ed93 7a00 	vldr	s14, [r3]
 80026e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4413      	add	r3, r2
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80026f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4413      	add	r3, r2
 8002702:	ed93 7a00 	vldr	s14, [r3]
 8002706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4413      	add	r3, r2
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002718:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800271c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4413      	add	r3, r2
 8002726:	ed93 7a00 	vldr	s14, [r3]
 800272a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4413      	add	r3, r2
 800274a:	ed93 7a00 	vldr	s14, [r3]
 800274e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4413      	add	r3, r2
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002760:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002764:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4413      	add	r3, r2
 800276e:	ed93 7a00 	vldr	s14, [r3]
 8002772:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4413      	add	r3, r2
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002784:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002788:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	ed93 7a00 	vldr	s14, [r3]
 8002796:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4413      	add	r3, r2
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80027ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4413      	add	r3, r2
 80027b6:	ed93 7a00 	vldr	s14, [r3]
 80027ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027cc:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80027d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4413      	add	r3, r2
 80027da:	ed93 7a00 	vldr	s14, [r3]
 80027de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	edd3 7a00 	vldr	s15, [r3]
 80027ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 80027f4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80027f8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80027fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002800:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8002804:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002808:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800280c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002810:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8002814:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002818:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800281c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002820:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8002824:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002828:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800282c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002830:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002834:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4413      	add	r3, r2
 800283e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002842:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800284a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800284e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002852:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800285a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800285e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	3304      	adds	r3, #4
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4413      	add	r3, r2
 800286a:	ed93 7a00 	vldr	s14, [r3]
 800286e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	3304      	adds	r3, #4
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4413      	add	r3, r2
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002882:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002886:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	3304      	adds	r3, #4
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4413      	add	r3, r2
 8002892:	ed93 7a00 	vldr	s14, [r3]
 8002896:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	3304      	adds	r3, #4
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4413      	add	r3, r2
 80028a2:	edd3 7a00 	vldr	s15, [r3]
 80028a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028aa:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80028ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	3304      	adds	r3, #4
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4413      	add	r3, r2
 80028ba:	ed93 7a00 	vldr	s14, [r3]
 80028be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	3304      	adds	r3, #4
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80028d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	3304      	adds	r3, #4
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4413      	add	r3, r2
 80028e2:	ed93 7a00 	vldr	s14, [r3]
 80028e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	3304      	adds	r3, #4
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4413      	add	r3, r2
 80028f2:	edd3 7a00 	vldr	s15, [r3]
 80028f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fa:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80028fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	3304      	adds	r3, #4
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	ed93 7a00 	vldr	s14, [r3]
 800290e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	3304      	adds	r3, #4
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4413      	add	r3, r2
 800291a:	edd3 7a00 	vldr	s15, [r3]
 800291e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002922:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002926:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	3304      	adds	r3, #4
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4413      	add	r3, r2
 8002932:	ed93 7a00 	vldr	s14, [r3]
 8002936:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	3304      	adds	r3, #4
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4413      	add	r3, r2
 8002942:	edd3 7a00 	vldr	s15, [r3]
 8002946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800294a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800294e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	3304      	adds	r3, #4
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	ed93 7a00 	vldr	s14, [r3]
 800295e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	3304      	adds	r3, #4
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4413      	add	r3, r2
 800296a:	edd3 7a00 	vldr	s15, [r3]
 800296e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002972:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002976:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	3304      	adds	r3, #4
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	ed93 7a00 	vldr	s14, [r3]
 8002986:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	3304      	adds	r3, #4
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4413      	add	r3, r2
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800299e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80029a2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80029a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029aa:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 80029ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80029b2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80029b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 80029be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80029c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80029c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ca:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 80029ce:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80029d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80029d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029da:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 80029de:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80029e2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80029e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ea:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 80029ee:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80029f2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80029f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029fa:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 80029fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	3304      	adds	r3, #4
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4413      	add	r3, r2
 8002a0a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a0e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a16:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8002a1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8002a2a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002a2e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a36:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8002a3a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002a3e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a46:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8002a4a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002a4e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a56:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8002a5a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002a5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a66:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8002a6a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002a6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a76:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8002a7a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002a7e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a86:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8002a8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a98:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002aa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	3304      	adds	r3, #4
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ab4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002abc:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8002ac0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002ac4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002acc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8002ad0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002ad4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002adc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8002ae0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002ae4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aec:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8002af0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002af4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8002b00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4413      	add	r3, r2
 8002b0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b16:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8002b1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	3304      	adds	r3, #4
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b32:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8002b36:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002b3a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b42:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8002b46:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002b4a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b52:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8002b56:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002b5a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b62:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8002b66:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002b6a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b72:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8002b76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4413      	add	r3, r2
 8002b80:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b84:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8002b90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	3304      	adds	r3, #4
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ba0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba8:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8002bac:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002bb0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8002bc4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002bc8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8002bdc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002be0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8002bf4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002bf8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c00:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c08:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8002c0c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002c10:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c18:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8002c1c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002c20:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c28:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8002c2c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002c30:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c38:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8002c3c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002c40:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c48:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8002c4c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002c50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c58:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8002c5c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002c60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c68:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8002c6c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002c70:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c78:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8002c7c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002c80:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c88:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8002c8c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002c90:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c98:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8002c9c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002ca0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8002cac:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002cb0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8002cbc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002cc0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8002ccc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002cd0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8002cdc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002ce0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8002cec:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002cf0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8002cfc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002d00:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d08:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8002d0c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002d10:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d18:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8002d1c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002d20:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d28:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8002d2c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002d30:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d38:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8002d3c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002d40:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d48:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8002d4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4413      	add	r3, r2
 8002d56:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d62:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8002d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4413      	add	r3, r2
 8002d72:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d76:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8002d82:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002d86:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8002d92:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002d96:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8002da2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002da6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dae:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8002db2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002db6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbe:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8002dc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8002dd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8002ddc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	3304      	adds	r3, #4
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dec:	edd7 7a04 	vldr	s15, [r7, #16]
 8002df0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8002df8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002dfc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e04:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8002e08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002e0c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e14:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8002e18:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002e1c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e24:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8002e28:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002e2c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e34:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8002e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4413      	add	r3, r2
 8002e42:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e46:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8002e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	3304      	adds	r3, #4
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e62:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8002e6e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002e72:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8002e7e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002e82:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8002e8e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002e92:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8002e9e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002ea2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eaa:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8002eae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ebc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8002ec8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	3304      	adds	r3, #4
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ed8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002edc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee0:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8002ee4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002ee8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002eec:	4413      	add	r3, r2
 8002eee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8002ef2:	897b      	ldrh	r3, [r7, #10]
 8002ef4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f4ff abba 	bcc.w	8002672 <arm_radix8_butterfly_f32+0x746>

         j++;
 8002efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f02:	3301      	adds	r3, #1
 8002f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8002f08:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f10:	429a      	cmp	r2, r3
 8002f12:	f4ff ab2c 	bcc.w	800256e <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8002f16:	893b      	ldrh	r3, [r7, #8]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8002f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f20:	2b07      	cmp	r3, #7
 8002f22:	f63f a813 	bhi.w	8001f4c <arm_radix8_butterfly_f32+0x20>
}
 8002f26:	e000      	b.n	8002f2a <arm_radix8_butterfly_f32+0xffe>
         break;
 8002f28:	bf00      	nop
}
 8002f2a:	bf00      	nop
 8002f2c:	37f4      	adds	r7, #244	; 0xf4
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop

08002f38 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b095      	sub	sp, #84	; 0x54
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8002f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8002f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8002f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8002f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 8002f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f74:	1d1a      	adds	r2, r3, #4
 8002f76:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8002f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7e:	1d1a      	adds	r2, r3, #4
 8002f80:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8002f86:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002f8a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f92:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8002f96:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002f9a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa2:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8002fa6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002faa:	edd7 7a08 	vldr	s15, [r7, #32]
 8002fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	1d1a      	adds	r2, r3, #4
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fc0:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8002fc4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002fc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	1d1a      	adds	r2, r3, #4
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fde:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8002fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	4413      	add	r3, r2
 8002fea:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8002fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fee:	3308      	adds	r3, #8
 8002ff0:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8002ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8002ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8002ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8003004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800300a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300c:	1d1a      	adds	r2, r3, #4
 800300e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8003014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003016:	1d1a      	adds	r2, r3, #4
 8003018:	64ba      	str	r2, [r7, #72]	; 0x48
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 800301e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003022:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800302a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800302e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003032:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800303a:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800303e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003042:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304a:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800304e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003052:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305a:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800305e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003062:	edd7 7a08 	vldr	s15, [r7, #32]
 8003066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306a:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800306e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003072:	edd7 7a08 	vldr	s15, [r7, #32]
 8003076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307a:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800307e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003082:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003086:	ee37 7a27 	vadd.f32	s14, s14, s15
 800308a:	edd7 7a07 	vldr	s15, [r7, #28]
 800308e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003092:	edd7 7a04 	vldr	s15, [r7, #16]
 8003096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	1d1a      	adds	r2, r3, #4
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a8:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 80030ac:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80030b0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80030b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80030bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80030c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	1d1a      	adds	r2, r3, #4
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d6:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 80030da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030dc:	3308      	adds	r3, #8
 80030de:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80030e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e2:	3b08      	subs	r3, #8
 80030e4:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80030e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e8:	3b01      	subs	r3, #1
 80030ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 80030ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f73f af7f 	bgt.w	8002ff2 <stage_rfft_f32+0xba>
}
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	3754      	adds	r7, #84	; 0x54
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8003102:	b480      	push	{r7}
 8003104:	b095      	sub	sp, #84	; 0x54
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	3b01      	subs	r3, #1
 8003122:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8003124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800312a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8003130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003132:	3308      	adds	r3, #8
 8003134:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8003136:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800313a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800313e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	1d1a      	adds	r2, r3, #4
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800314c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003150:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8003154:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003158:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800315c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	1d1a      	adds	r2, r3, #4
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800316a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800316e:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8003172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	4413      	add	r3, r2
 800317a:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 800317c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317e:	3308      	adds	r3, #8
 8003180:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 8003182:	e07c      	b.n	800327e <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8003184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 800318a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8003190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8003196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 800319c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800319e:	1d1a      	adds	r2, r3, #4
 80031a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80031a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a8:	1d1a      	adds	r2, r3, #4
 80031aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 80031b0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80031b4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80031b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 80031c0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80031c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80031c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031cc:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80031d0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80031d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031dc:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80031e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80031e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80031e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ec:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80031f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80031f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fc:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8003200:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003204:	edd7 7a08 	vldr	s15, [r7, #32]
 8003208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320c:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8003210:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003214:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003218:	ee37 7a27 	vadd.f32	s14, s14, s15
 800321c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003220:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003224:	edd7 7a06 	vldr	s15, [r7, #24]
 8003228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	1d1a      	adds	r2, r3, #4
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800323a:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800323e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003242:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003246:	ee37 7a67 	vsub.f32	s14, s14, s15
 800324a:	edd7 7a05 	vldr	s15, [r7, #20]
 800324e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003252:	edd7 7a04 	vldr	s15, [r7, #16]
 8003256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	1d1a      	adds	r2, r3, #4
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003268:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800326c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800326e:	3308      	adds	r3, #8
 8003270:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8003272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003274:	3b08      	subs	r3, #8
 8003276:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8003278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327a:	3b01      	subs	r3, #1
 800327c:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 800327e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003280:	2b00      	cmp	r3, #0
 8003282:	f73f af7f 	bgt.w	8003184 <merge_rfft_f32+0x82>
   }

}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	3754      	adds	r7, #84	; 0x54
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00b      	beq.n	80032c4 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f7ff ff26 	bl	8003102 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	2301      	movs	r3, #1
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	6978      	ldr	r0, [r7, #20]
 80032be:	f7fe fc62 	bl	8001b86 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 80032c2:	e00a      	b.n	80032da <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	2301      	movs	r3, #1
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	6978      	ldr	r0, [r7, #20]
 80032cc:	f7fe fc5b 	bl	8001b86 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7ff fe2f 	bl	8002f38 <stage_rfft_f32>
}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d102      	bne.n	80032f8 <arm_rfft_fast_init_32_f32+0x14>
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295
 80032f6:	e013      	b.n	8003320 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fdf4 	bl	8001ee8 <arm_cfft_init_16_f32>
 8003300:	4603      	mov	r3, r0
 8003302:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 800330c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003310:	e006      	b.n	8003320 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a03      	ldr	r2, [pc, #12]	; (8003328 <arm_rfft_fast_init_32_f32+0x44>)
 800331c:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	080155e4 	.word	0x080155e4

0800332c <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <arm_rfft_fast_init_64_f32+0x14>
 800333a:	f04f 33ff 	mov.w	r3, #4294967295
 800333e:	e013      	b.n	8003368 <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fdae 	bl	8001ea4 <arm_cfft_init_32_f32>
 8003348:	4603      	mov	r3, r0
 800334a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800334c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 8003354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003358:	e006      	b.n	8003368 <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2240      	movs	r2, #64	; 0x40
 800335e:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a03      	ldr	r2, [pc, #12]	; (8003370 <arm_rfft_fast_init_64_f32+0x44>)
 8003364:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	08015664 	.word	0x08015664

08003374 <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <arm_rfft_fast_init_128_f32+0x14>
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	e013      	b.n	80033b0 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe fd68 	bl	8001e60 <arm_cfft_init_64_f32>
 8003390:	4603      	mov	r3, r0
 8003392:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 800339c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a0:	e006      	b.n	80033b0 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a03      	ldr	r2, [pc, #12]	; (80033b8 <arm_rfft_fast_init_128_f32+0x44>)
 80033ac:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	08015764 	.word	0x08015764

080033bc <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <arm_rfft_fast_init_256_f32+0x14>
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295
 80033ce:	e014      	b.n	80033fa <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fd22 	bl	8001e1c <arm_cfft_init_128_f32>
 80033d8:	4603      	mov	r3, r0
 80033da:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80033dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 80033e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e8:	e007      	b.n	80033fa <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033f0:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a03      	ldr	r2, [pc, #12]	; (8003404 <arm_rfft_fast_init_256_f32+0x48>)
 80033f6:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	08015964 	.word	0x08015964

08003408 <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <arm_rfft_fast_init_512_f32+0x14>
 8003416:	f04f 33ff 	mov.w	r3, #4294967295
 800341a:	e014      	b.n	8003446 <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe fcd8 	bl	8001dd4 <arm_cfft_init_256_f32>
 8003424:	4603      	mov	r3, r0
 8003426:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 8003430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003434:	e007      	b.n	8003446 <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800343c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a03      	ldr	r2, [pc, #12]	; (8003450 <arm_rfft_fast_init_512_f32+0x48>)
 8003442:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	08015d64 	.word	0x08015d64

08003454 <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d102      	bne.n	8003468 <arm_rfft_fast_init_1024_f32+0x14>
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
 8003466:	e014      	b.n	8003492 <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fc8e 	bl	8001d8c <arm_cfft_init_512_f32>
 8003470:	4603      	mov	r3, r0
 8003472:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 800347c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003480:	e007      	b.n	8003492 <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003488:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a03      	ldr	r2, [pc, #12]	; (800349c <arm_rfft_fast_init_1024_f32+0x48>)
 800348e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	08016564 	.word	0x08016564

080034a0 <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d102      	bne.n	80034b4 <arm_rfft_fast_init_2048_f32+0x14>
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295
 80034b2:	e014      	b.n	80034de <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe fc44 	bl	8001d44 <arm_cfft_init_1024_f32>
 80034bc:	4603      	mov	r3, r0
 80034be:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80034c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 80034c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034cc:	e007      	b.n	80034de <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034d4:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a03      	ldr	r2, [pc, #12]	; (80034e8 <arm_rfft_fast_init_2048_f32+0x48>)
 80034da:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	08017564 	.word	0x08017564

080034ec <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <arm_rfft_fast_init_4096_f32+0x14>
 80034fa:	f04f 33ff 	mov.w	r3, #4294967295
 80034fe:	e014      	b.n	800352a <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe fbfa 	bl	8001cfc <arm_cfft_init_2048_f32>
 8003508:	4603      	mov	r3, r0
 800350a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800350c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 8003514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003518:	e007      	b.n	800352a <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003520:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a03      	ldr	r2, [pc, #12]	; (8003534 <arm_rfft_fast_init_4096_f32+0x48>)
 8003526:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	08019564 	.word	0x08019564

08003538 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354a:	d023      	beq.n	8003594 <arm_rfft_fast_init_f32+0x5c>
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003550:	dc50      	bgt.n	80035f4 <arm_rfft_fast_init_f32+0xbc>
 8003552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003556:	d023      	beq.n	80035a0 <arm_rfft_fast_init_f32+0x68>
 8003558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800355c:	dc4a      	bgt.n	80035f4 <arm_rfft_fast_init_f32+0xbc>
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003562:	d023      	beq.n	80035ac <arm_rfft_fast_init_f32+0x74>
 8003564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003568:	dc44      	bgt.n	80035f4 <arm_rfft_fast_init_f32+0xbc>
 800356a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356e:	d023      	beq.n	80035b8 <arm_rfft_fast_init_f32+0x80>
 8003570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003574:	dc3e      	bgt.n	80035f4 <arm_rfft_fast_init_f32+0xbc>
 8003576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357a:	d023      	beq.n	80035c4 <arm_rfft_fast_init_f32+0x8c>
 800357c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003580:	dc38      	bgt.n	80035f4 <arm_rfft_fast_init_f32+0xbc>
 8003582:	2b80      	cmp	r3, #128	; 0x80
 8003584:	d024      	beq.n	80035d0 <arm_rfft_fast_init_f32+0x98>
 8003586:	2b80      	cmp	r3, #128	; 0x80
 8003588:	dc34      	bgt.n	80035f4 <arm_rfft_fast_init_f32+0xbc>
 800358a:	2b20      	cmp	r3, #32
 800358c:	d02c      	beq.n	80035e8 <arm_rfft_fast_init_f32+0xb0>
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d024      	beq.n	80035dc <arm_rfft_fast_init_f32+0xa4>
 8003592:	e02f      	b.n	80035f4 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ffa9 	bl	80034ec <arm_rfft_fast_init_4096_f32>
 800359a:	4603      	mov	r3, r0
 800359c:	73fb      	strb	r3, [r7, #15]
    break;
 800359e:	e02c      	b.n	80035fa <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff ff7d 	bl	80034a0 <arm_rfft_fast_init_2048_f32>
 80035a6:	4603      	mov	r3, r0
 80035a8:	73fb      	strb	r3, [r7, #15]
    break;
 80035aa:	e026      	b.n	80035fa <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff51 	bl	8003454 <arm_rfft_fast_init_1024_f32>
 80035b2:	4603      	mov	r3, r0
 80035b4:	73fb      	strb	r3, [r7, #15]
    break;
 80035b6:	e020      	b.n	80035fa <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff25 	bl	8003408 <arm_rfft_fast_init_512_f32>
 80035be:	4603      	mov	r3, r0
 80035c0:	73fb      	strb	r3, [r7, #15]
    break;
 80035c2:	e01a      	b.n	80035fa <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fef9 	bl	80033bc <arm_rfft_fast_init_256_f32>
 80035ca:	4603      	mov	r3, r0
 80035cc:	73fb      	strb	r3, [r7, #15]
    break;
 80035ce:	e014      	b.n	80035fa <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff fecf 	bl	8003374 <arm_rfft_fast_init_128_f32>
 80035d6:	4603      	mov	r3, r0
 80035d8:	73fb      	strb	r3, [r7, #15]
    break;
 80035da:	e00e      	b.n	80035fa <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff fea5 	bl	800332c <arm_rfft_fast_init_64_f32>
 80035e2:	4603      	mov	r3, r0
 80035e4:	73fb      	strb	r3, [r7, #15]
    break;
 80035e6:	e008      	b.n	80035fa <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff fe7b 	bl	80032e4 <arm_rfft_fast_init_32_f32>
 80035ee:	4603      	mov	r3, r0
 80035f0:	73fb      	strb	r3, [r7, #15]
    break;
 80035f2:	e002      	b.n	80035fa <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 80035f4:	f04f 33ff 	mov.w	r3, #4294967295
 80035f8:	e001      	b.n	80035fe <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800360c:	f000 fd89 	bl	8004122 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003610:	f000 f842 	bl	8003698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003614:	f000 f9bc 	bl	8003990 <MX_GPIO_Init>
  MX_DMA_Init();
 8003618:	f000 f99c 	bl	8003954 <MX_DMA_Init>
  MX_ADC1_Init();
 800361c:	f000 f88e 	bl	800373c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8003620:	f000 f966 	bl	80038f0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003624:	f000 f8f0 	bl	8003808 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8003628:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800362c:	4814      	ldr	r0, [pc, #80]	; (8003680 <main+0x78>)
 800362e:	f7ff ff83 	bl	8003538 <arm_rfft_fast_init_f32>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003632:	217f      	movs	r1, #127	; 0x7f
 8003634:	4813      	ldr	r0, [pc, #76]	; (8003684 <main+0x7c>)
 8003636:	f002 f8ff 	bl	8005838 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, BUFFER_SIZE);
 800363a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800363e:	4912      	ldr	r1, [pc, #72]	; (8003688 <main+0x80>)
 8003640:	4810      	ldr	r0, [pc, #64]	; (8003684 <main+0x7c>)
 8003642:	f001 f925 	bl	8004890 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8003646:	4811      	ldr	r0, [pc, #68]	; (800368c <main+0x84>)
 8003648:	f004 f856 	bl	80076f8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (halfFlag) {
 800364c:	4b10      	ldr	r3, [pc, #64]	; (8003690 <main+0x88>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d006      	beq.n	8003664 <main+0x5c>
		  process_data(0, BUFFER_SIZE/2);
 8003656:	2180      	movs	r1, #128	; 0x80
 8003658:	2000      	movs	r0, #0
 800365a:	f000 fa79 	bl	8003b50 <process_data>
		  halfFlag = 0;
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <main+0x88>)
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
	  }

	  if (fullFlag) {
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <main+0x8c>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0ee      	beq.n	800364c <main+0x44>
		  process_data(BUFFER_SIZE/2, BUFFER_SIZE);
 800366e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003672:	2080      	movs	r0, #128	; 0x80
 8003674:	f000 fa6c 	bl	8003b50 <process_data>
		  fullFlag = 0;
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <main+0x8c>)
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
	  if (halfFlag) {
 800367e:	e7e5      	b.n	800364c <main+0x44>
 8003680:	20000408 	.word	0x20000408
 8003684:	20000078 	.word	0x20000078
 8003688:	20000204 	.word	0x20000204
 800368c:	20000124 	.word	0x20000124
 8003690:	20000404 	.word	0x20000404
 8003694:	20000405 	.word	0x20000405

08003698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b096      	sub	sp, #88	; 0x58
 800369c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800369e:	f107 0314 	add.w	r3, r7, #20
 80036a2:	2244      	movs	r2, #68	; 0x44
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f006 f894 	bl	80097d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036ac:	463b      	mov	r3, r7
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	60da      	str	r2, [r3, #12]
 80036b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80036ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80036be:	f002 fe4d 	bl	800635c <HAL_PWREx_ControlVoltageScaling>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80036c8:	f000 fb1e 	bl	8003d08 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80036cc:	2310      	movs	r3, #16
 80036ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80036d0:	2301      	movs	r3, #1
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80036d8:	2360      	movs	r3, #96	; 0x60
 80036da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036dc:	2302      	movs	r3, #2
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80036e0:	2301      	movs	r3, #1
 80036e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80036e4:	2301      	movs	r3, #1
 80036e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80036e8:	2328      	movs	r3, #40	; 0x28
 80036ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80036ec:	2307      	movs	r3, #7
 80036ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80036f0:	2302      	movs	r3, #2
 80036f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80036f4:	2302      	movs	r3, #2
 80036f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036f8:	f107 0314 	add.w	r3, r7, #20
 80036fc:	4618      	mov	r0, r3
 80036fe:	f002 fe83 	bl	8006408 <HAL_RCC_OscConfig>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003708:	f000 fafe 	bl	8003d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800370c:	230f      	movs	r3, #15
 800370e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003710:	2303      	movs	r3, #3
 8003712:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003714:	2300      	movs	r3, #0
 8003716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003720:	463b      	mov	r3, r7
 8003722:	2104      	movs	r1, #4
 8003724:	4618      	mov	r0, r3
 8003726:	f003 fa83 	bl	8006c30 <HAL_RCC_ClockConfig>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003730:	f000 faea 	bl	8003d08 <Error_Handler>
  }
}
 8003734:	bf00      	nop
 8003736:	3758      	adds	r7, #88	; 0x58
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003742:	463b      	mov	r3, r7
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	60da      	str	r2, [r3, #12]
 800374e:	611a      	str	r2, [r3, #16]
 8003750:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003752:	4b2a      	ldr	r3, [pc, #168]	; (80037fc <MX_ADC1_Init+0xc0>)
 8003754:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <MX_ADC1_Init+0xc4>)
 8003756:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003758:	4b28      	ldr	r3, [pc, #160]	; (80037fc <MX_ADC1_Init+0xc0>)
 800375a:	2200      	movs	r2, #0
 800375c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800375e:	4b27      	ldr	r3, [pc, #156]	; (80037fc <MX_ADC1_Init+0xc0>)
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <MX_ADC1_Init+0xc0>)
 8003766:	2200      	movs	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800376a:	4b24      	ldr	r3, [pc, #144]	; (80037fc <MX_ADC1_Init+0xc0>)
 800376c:	2200      	movs	r2, #0
 800376e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003770:	4b22      	ldr	r3, [pc, #136]	; (80037fc <MX_ADC1_Init+0xc0>)
 8003772:	2204      	movs	r2, #4
 8003774:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003776:	4b21      	ldr	r3, [pc, #132]	; (80037fc <MX_ADC1_Init+0xc0>)
 8003778:	2200      	movs	r2, #0
 800377a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800377c:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <MX_ADC1_Init+0xc0>)
 800377e:	2200      	movs	r2, #0
 8003780:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003782:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <MX_ADC1_Init+0xc0>)
 8003784:	2201      	movs	r2, #1
 8003786:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003788:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <MX_ADC1_Init+0xc0>)
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <MX_ADC1_Init+0xc0>)
 8003792:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8003796:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003798:	4b18      	ldr	r3, [pc, #96]	; (80037fc <MX_ADC1_Init+0xc0>)
 800379a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80037a0:	4b16      	ldr	r3, [pc, #88]	; (80037fc <MX_ADC1_Init+0xc0>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80037a8:	4b14      	ldr	r3, [pc, #80]	; (80037fc <MX_ADC1_Init+0xc0>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80037ae:	4b13      	ldr	r3, [pc, #76]	; (80037fc <MX_ADC1_Init+0xc0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037b6:	4811      	ldr	r0, [pc, #68]	; (80037fc <MX_ADC1_Init+0xc0>)
 80037b8:	f000 ff28 	bl	800460c <HAL_ADC_Init>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80037c2:	f000 faa1 	bl	8003d08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80037c6:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <MX_ADC1_Init+0xc8>)
 80037c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80037ca:	2306      	movs	r3, #6
 80037cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80037ce:	2306      	movs	r3, #6
 80037d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80037d2:	237f      	movs	r3, #127	; 0x7f
 80037d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80037d6:	2304      	movs	r3, #4
 80037d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037de:	463b      	mov	r3, r7
 80037e0:	4619      	mov	r1, r3
 80037e2:	4806      	ldr	r0, [pc, #24]	; (80037fc <MX_ADC1_Init+0xc0>)
 80037e4:	f001 faa0 	bl	8004d28 <HAL_ADC_ConfigChannel>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80037ee:	f000 fa8b 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037f2:	bf00      	nop
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000078 	.word	0x20000078
 8003800:	50040000 	.word	0x50040000
 8003804:	14f00020 	.word	0x14f00020

08003808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08e      	sub	sp, #56	; 0x38
 800380c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800380e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	605a      	str	r2, [r3, #4]
 8003818:	609a      	str	r2, [r3, #8]
 800381a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800381c:	f107 031c 	add.w	r3, r7, #28
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003828:	463b      	mov	r3, r7
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	60da      	str	r2, [r3, #12]
 8003834:	611a      	str	r2, [r3, #16]
 8003836:	615a      	str	r2, [r3, #20]
 8003838:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800383a:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <MX_TIM2_Init+0xe4>)
 800383c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003840:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8003842:	4b2a      	ldr	r3, [pc, #168]	; (80038ec <MX_TIM2_Init+0xe4>)
 8003844:	2203      	movs	r2, #3
 8003846:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003848:	4b28      	ldr	r3, [pc, #160]	; (80038ec <MX_TIM2_Init+0xe4>)
 800384a:	2200      	movs	r2, #0
 800384c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800384e:	4b27      	ldr	r3, [pc, #156]	; (80038ec <MX_TIM2_Init+0xe4>)
 8003850:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003854:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003856:	4b25      	ldr	r3, [pc, #148]	; (80038ec <MX_TIM2_Init+0xe4>)
 8003858:	2200      	movs	r2, #0
 800385a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800385c:	4b23      	ldr	r3, [pc, #140]	; (80038ec <MX_TIM2_Init+0xe4>)
 800385e:	2200      	movs	r2, #0
 8003860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003862:	4822      	ldr	r0, [pc, #136]	; (80038ec <MX_TIM2_Init+0xe4>)
 8003864:	f003 fef0 	bl	8007648 <HAL_TIM_Base_Init>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800386e:	f000 fa4b 	bl	8003d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800387c:	4619      	mov	r1, r3
 800387e:	481b      	ldr	r0, [pc, #108]	; (80038ec <MX_TIM2_Init+0xe4>)
 8003880:	f004 fa06 	bl	8007c90 <HAL_TIM_ConfigClockSource>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800388a:	f000 fa3d 	bl	8003d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800388e:	4817      	ldr	r0, [pc, #92]	; (80038ec <MX_TIM2_Init+0xe4>)
 8003890:	f003 ff86 	bl	80077a0 <HAL_TIM_PWM_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800389a:	f000 fa35 	bl	8003d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800389e:	2320      	movs	r3, #32
 80038a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038a6:	f107 031c 	add.w	r3, r7, #28
 80038aa:	4619      	mov	r1, r3
 80038ac:	480f      	ldr	r0, [pc, #60]	; (80038ec <MX_TIM2_Init+0xe4>)
 80038ae:	f004 fe67 	bl	8008580 <HAL_TIMEx_MasterConfigSynchronization>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80038b8:	f000 fa26 	bl	8003d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038bc:	2360      	movs	r3, #96	; 0x60
 80038be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038cc:	463b      	mov	r3, r7
 80038ce:	2200      	movs	r2, #0
 80038d0:	4619      	mov	r1, r3
 80038d2:	4806      	ldr	r0, [pc, #24]	; (80038ec <MX_TIM2_Init+0xe4>)
 80038d4:	f004 f8c8 	bl	8007a68 <HAL_TIM_PWM_ConfigChannel>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80038de:	f000 fa13 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038e2:	bf00      	nop
 80038e4:	3738      	adds	r7, #56	; 0x38
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000124 	.word	0x20000124

080038f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038f4:	4b15      	ldr	r3, [pc, #84]	; (800394c <MX_USART2_UART_Init+0x5c>)
 80038f6:	4a16      	ldr	r2, [pc, #88]	; (8003950 <MX_USART2_UART_Init+0x60>)
 80038f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038fa:	4b14      	ldr	r3, [pc, #80]	; (800394c <MX_USART2_UART_Init+0x5c>)
 80038fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <MX_USART2_UART_Init+0x5c>)
 8003904:	2200      	movs	r2, #0
 8003906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003908:	4b10      	ldr	r3, [pc, #64]	; (800394c <MX_USART2_UART_Init+0x5c>)
 800390a:	2200      	movs	r2, #0
 800390c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800390e:	4b0f      	ldr	r3, [pc, #60]	; (800394c <MX_USART2_UART_Init+0x5c>)
 8003910:	2200      	movs	r2, #0
 8003912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003914:	4b0d      	ldr	r3, [pc, #52]	; (800394c <MX_USART2_UART_Init+0x5c>)
 8003916:	220c      	movs	r2, #12
 8003918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800391a:	4b0c      	ldr	r3, [pc, #48]	; (800394c <MX_USART2_UART_Init+0x5c>)
 800391c:	2200      	movs	r2, #0
 800391e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <MX_USART2_UART_Init+0x5c>)
 8003922:	2200      	movs	r2, #0
 8003924:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <MX_USART2_UART_Init+0x5c>)
 8003928:	2200      	movs	r2, #0
 800392a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800392c:	4b07      	ldr	r3, [pc, #28]	; (800394c <MX_USART2_UART_Init+0x5c>)
 800392e:	2200      	movs	r2, #0
 8003930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8003932:	2300      	movs	r3, #0
 8003934:	2200      	movs	r2, #0
 8003936:	2100      	movs	r1, #0
 8003938:	4804      	ldr	r0, [pc, #16]	; (800394c <MX_USART2_UART_Init+0x5c>)
 800393a:	f005 feba 	bl	80096b2 <HAL_RS485Ex_Init>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003944:	f000 f9e0 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000170 	.word	0x20000170
 8003950:	40004400 	.word	0x40004400

08003954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800395a:	4b0c      	ldr	r3, [pc, #48]	; (800398c <MX_DMA_Init+0x38>)
 800395c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395e:	4a0b      	ldr	r2, [pc, #44]	; (800398c <MX_DMA_Init+0x38>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	6493      	str	r3, [r2, #72]	; 0x48
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <MX_DMA_Init+0x38>)
 8003968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	607b      	str	r3, [r7, #4]
 8003970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003972:	2200      	movs	r2, #0
 8003974:	2100      	movs	r1, #0
 8003976:	200b      	movs	r0, #11
 8003978:	f002 f8cb 	bl	8005b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800397c:	200b      	movs	r0, #11
 800397e:	f002 f8e4 	bl	8005b4a <HAL_NVIC_EnableIRQ>

}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000

08003990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <MX_GPIO_Init+0x2c>)
 8003998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399a:	4a08      	ldr	r2, [pc, #32]	; (80039bc <MX_GPIO_Init+0x2c>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <MX_GPIO_Init+0x2c>)
 80039a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000

080039c0 <receive_bit>:

/* USER CODE BEGIN 4 */
void receive_bit(int bit, int amount) {
 80039c0:	b5b0      	push	{r4, r5, r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
	if (amount == 0) {
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d06c      	beq.n	8003aaa <receive_bit+0xea>
		return;
	}
	for (int count = 0; count < floor(amount/15); count++) {
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	e00d      	b.n	80039f2 <receive_bit+0x32>
		received[receivedIndex] = bit;
 80039d6:	4b37      	ldr	r3, [pc, #220]	; (8003ab4 <receive_bit+0xf4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4937      	ldr	r1, [pc, #220]	; (8003ab8 <receive_bit+0xf8>)
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		receivedIndex++;
 80039e2:	4b34      	ldr	r3, [pc, #208]	; (8003ab4 <receive_bit+0xf4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3301      	adds	r3, #1
 80039e8:	4a32      	ldr	r2, [pc, #200]	; (8003ab4 <receive_bit+0xf4>)
 80039ea:	6013      	str	r3, [r2, #0]
	for (int count = 0; count < floor(amount/15); count++) {
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3301      	adds	r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f7fc fd96 	bl	8000524 <__aeabi_i2d>
 80039f8:	4604      	mov	r4, r0
 80039fa:	460d      	mov	r5, r1
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	4a2f      	ldr	r2, [pc, #188]	; (8003abc <receive_bit+0xfc>)
 8003a00:	fb82 1203 	smull	r1, r2, r2, r3
 8003a04:	441a      	add	r2, r3
 8003a06:	10d2      	asrs	r2, r2, #3
 8003a08:	17db      	asrs	r3, r3, #31
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fd89 	bl	8000524 <__aeabi_i2d>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4620      	mov	r0, r4
 8003a18:	4629      	mov	r1, r5
 8003a1a:	f7fc fe4d 	bl	80006b8 <__aeabi_dcmplt>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1d8      	bne.n	80039d6 <receive_bit+0x16>
	}
	if (receivedIndex > 7) {
 8003a24:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <receive_bit+0xf4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b07      	cmp	r3, #7
 8003a2a:	dd3f      	ble.n	8003aac <receive_bit+0xec>
		sprintf(msg, "Msg:\r\n");
 8003a2c:	4924      	ldr	r1, [pc, #144]	; (8003ac0 <receive_bit+0x100>)
 8003a2e:	4825      	ldr	r0, [pc, #148]	; (8003ac4 <receive_bit+0x104>)
 8003a30:	f005 feb0 	bl	8009794 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003a34:	4823      	ldr	r0, [pc, #140]	; (8003ac4 <receive_bit+0x104>)
 8003a36:	f7fc fbcb 	bl	80001d0 <strlen>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a42:	4920      	ldr	r1, [pc, #128]	; (8003ac4 <receive_bit+0x104>)
 8003a44:	4820      	ldr	r0, [pc, #128]	; (8003ac8 <receive_bit+0x108>)
 8003a46:	f004 fe1f 	bl	8008688 <HAL_UART_Transmit>

		for(int count = 0; count < 8; count++) {
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	e016      	b.n	8003a7e <receive_bit+0xbe>
			sprintf(msg, "%hu", received[count]);
 8003a50:	4a19      	ldr	r2, [pc, #100]	; (8003ab8 <receive_bit+0xf8>)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	491c      	ldr	r1, [pc, #112]	; (8003acc <receive_bit+0x10c>)
 8003a5c:	4819      	ldr	r0, [pc, #100]	; (8003ac4 <receive_bit+0x104>)
 8003a5e:	f005 fe99 	bl	8009794 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003a62:	4818      	ldr	r0, [pc, #96]	; (8003ac4 <receive_bit+0x104>)
 8003a64:	f7fc fbb4 	bl	80001d0 <strlen>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a70:	4914      	ldr	r1, [pc, #80]	; (8003ac4 <receive_bit+0x104>)
 8003a72:	4815      	ldr	r0, [pc, #84]	; (8003ac8 <receive_bit+0x108>)
 8003a74:	f004 fe08 	bl	8008688 <HAL_UART_Transmit>
		for(int count = 0; count < 8; count++) {
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b07      	cmp	r3, #7
 8003a82:	dde5      	ble.n	8003a50 <receive_bit+0x90>
		}
		sprintf(msg, "\r\n");
 8003a84:	4912      	ldr	r1, [pc, #72]	; (8003ad0 <receive_bit+0x110>)
 8003a86:	480f      	ldr	r0, [pc, #60]	; (8003ac4 <receive_bit+0x104>)
 8003a88:	f005 fe84 	bl	8009794 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003a8c:	480d      	ldr	r0, [pc, #52]	; (8003ac4 <receive_bit+0x104>)
 8003a8e:	f7fc fb9f 	bl	80001d0 <strlen>
 8003a92:	4603      	mov	r3, r0
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9a:	490a      	ldr	r1, [pc, #40]	; (8003ac4 <receive_bit+0x104>)
 8003a9c:	480a      	ldr	r0, [pc, #40]	; (8003ac8 <receive_bit+0x108>)
 8003a9e:	f004 fdf3 	bl	8008688 <HAL_UART_Transmit>

		receivedIndex = 0;
 8003aa2:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <receive_bit+0xf4>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	e000      	b.n	8003aac <receive_bit+0xec>
		return;
 8003aaa:	bf00      	nop
	}
}
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20005450 	.word	0x20005450
 8003ab8:	2000542c 	.word	0x2000542c
 8003abc:	88888889 	.word	0x88888889
 8003ac0:	0800a0f4 	.word	0x0800a0f4
 8003ac4:	200001f8 	.word	0x200001f8
 8003ac8:	20000170 	.word	0x20000170
 8003acc:	0800a0fc 	.word	0x0800a0fc
 8003ad0:	0800a100 	.word	0x0800a100

08003ad4 <bit_detect>:

void bit_detect(int freq) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	  if (freq > ONE_FREQ - 200 && freq < ONE_FREQ + 200){
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f641 2290 	movw	r2, #6800	; 0x1a90
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	dd09      	ble.n	8003afa <bit_detect+0x26>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8003aec:	da05      	bge.n	8003afa <bit_detect+0x26>
		  oneCount++;
 8003aee:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <bit_detect+0x74>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3301      	adds	r3, #1
 8003af4:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <bit_detect+0x74>)
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	e008      	b.n	8003b0c <bit_detect+0x38>
	  } else {
		  receive_bit(1, oneCount);
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <bit_detect+0x74>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4619      	mov	r1, r3
 8003b00:	2001      	movs	r0, #1
 8003b02:	f7ff ff5d 	bl	80039c0 <receive_bit>
		  oneCount = 0;
 8003b06:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <bit_detect+0x74>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
	  }
	  if (freq > ZERO_FREQ - 200 && freq < ZERO_FREQ + 200) {
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f241 62a8 	movw	r2, #5800	; 0x16a8
 8003b12:	4293      	cmp	r3, r2
 8003b14:	dd0a      	ble.n	8003b2c <bit_detect+0x58>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f641 0237 	movw	r2, #6199	; 0x1837
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	dc05      	bgt.n	8003b2c <bit_detect+0x58>
		  zeroCount++;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <bit_detect+0x78>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3301      	adds	r3, #1
 8003b26:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <bit_detect+0x78>)
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e009      	b.n	8003b40 <bit_detect+0x6c>
	  } else {
		  receive_bit(0, zeroCount);
 8003b2c:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <bit_detect+0x78>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4619      	mov	r1, r3
 8003b32:	2000      	movs	r0, #0
 8003b34:	f7ff ff44 	bl	80039c0 <receive_bit>
		  zeroCount = 0;
 8003b38:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <bit_detect+0x78>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
	  }
}
 8003b3e:	bf00      	nop
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20005458 	.word	0x20005458
 8003b4c:	20005454 	.word	0x20005454

08003b50 <process_data>:

void process_data(int start, int end) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	}
	*/
	float in;

	for (uint8_t count = start; count < end; count++) {
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	e08f      	b.n	8003c80 <process_data+0x130>
		// Convert to float
		//in = INT16_TO_FLOAT * ((float) buffer[count]);
		in = ((float) buffer[count]);
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	4a4c      	ldr	r2, [pc, #304]	; (8003c94 <process_data+0x144>)
 8003b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b72:	edc7 7a02 	vstr	s15, [r7, #8]

		// Fill FFT Buffer
		fftBufIn[fftIndex] = in;
 8003b76:	4b48      	ldr	r3, [pc, #288]	; (8003c98 <process_data+0x148>)
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	b21b      	sxth	r3, r3
 8003b7c:	4a47      	ldr	r2, [pc, #284]	; (8003c9c <process_data+0x14c>)
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	601a      	str	r2, [r3, #0]
		fftIndex++;
 8003b86:	4b44      	ldr	r3, [pc, #272]	; (8003c98 <process_data+0x148>)
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	b21b      	sxth	r3, r3
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	b21a      	sxth	r2, r3
 8003b94:	4b40      	ldr	r3, [pc, #256]	; (8003c98 <process_data+0x148>)
 8003b96:	801a      	strh	r2, [r3, #0]

		if (fftIndex == FFT_BUFFER_SIZE) {
 8003b98:	4b3f      	ldr	r3, [pc, #252]	; (8003c98 <process_data+0x148>)
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b21b      	sxth	r3, r3
 8003b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba2:	d16a      	bne.n	8003c7a <process_data+0x12a>
			// Perform FFT
			arm_rfft_fast_f32(&fftHandler, fftBufIn, fftBufOut, 0);
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	4a3e      	ldr	r2, [pc, #248]	; (8003ca0 <process_data+0x150>)
 8003ba8:	493c      	ldr	r1, [pc, #240]	; (8003c9c <process_data+0x14c>)
 8003baa:	483e      	ldr	r0, [pc, #248]	; (8003ca4 <process_data+0x154>)
 8003bac:	f7ff fb72 	bl	8003294 <arm_rfft_fast_f32>
			arm_cmplx_mag_f32(fftBufOut, fftMagOut, FFT_BUFFER_SIZE/2);
 8003bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bb4:	493c      	ldr	r1, [pc, #240]	; (8003ca8 <process_data+0x158>)
 8003bb6:	483a      	ldr	r0, [pc, #232]	; (8003ca0 <process_data+0x150>)
 8003bb8:	f7fc ff24 	bl	8000a04 <arm_cmplx_mag_f32>

			// Set FFT flag
			fftFlag = 1;
 8003bbc:	4b3b      	ldr	r3, [pc, #236]	; (8003cac <process_data+0x15c>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	701a      	strb	r2, [r3, #0]

			if (fftFlag) {
 8003bc2:	4b3a      	ldr	r3, [pc, #232]	; (8003cac <process_data+0x15c>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d053      	beq.n	8003c74 <process_data+0x124>
					  peakVal = 0.0f;
 8003bcc:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <process_data+0x160>)
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
					  peakHz = 0.0f;
 8003bd4:	4b37      	ldr	r3, [pc, #220]	; (8003cb4 <process_data+0x164>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	801a      	strh	r2, [r3, #0]

					  for (uint16_t index = 1; index < FFT_BUFFER_SIZE/2; index ++){
 8003bda:	2301      	movs	r3, #1
 8003bdc:	81bb      	strh	r3, [r7, #12]
 8003bde:	e02b      	b.n	8003c38 <process_data+0xe8>

						  if (fftMagOut[index] > peakVal) {
 8003be0:	89bb      	ldrh	r3, [r7, #12]
 8003be2:	4a31      	ldr	r2, [pc, #196]	; (8003ca8 <process_data+0x158>)
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	ed93 7a00 	vldr	s14, [r3]
 8003bec:	4b30      	ldr	r3, [pc, #192]	; (8003cb0 <process_data+0x160>)
 8003bee:	edd3 7a00 	vldr	s15, [r3]
 8003bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfa:	dd1a      	ble.n	8003c32 <process_data+0xe2>
							  peakVal = fftMagOut[index];
 8003bfc:	89bb      	ldrh	r3, [r7, #12]
 8003bfe:	4a2a      	ldr	r2, [pc, #168]	; (8003ca8 <process_data+0x158>)
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2a      	ldr	r2, [pc, #168]	; (8003cb0 <process_data+0x160>)
 8003c08:	6013      	str	r3, [r2, #0]
							  peakHz = (uint16_t) (index * SAMPLE_RATE_HZ / ((float) FFT_BUFFER_SIZE));
 8003c0a:	89bb      	ldrh	r3, [r7, #12]
 8003c0c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003c10:	fb02 f303 	mul.w	r3, r2, r3
 8003c14:	ee07 3a90 	vmov	s15, r3
 8003c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c1c:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003cb8 <process_data+0x168>
 8003c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c28:	ee17 3a90 	vmov	r3, s15
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <process_data+0x164>)
 8003c30:	801a      	strh	r2, [r3, #0]
					  for (uint16_t index = 1; index < FFT_BUFFER_SIZE/2; index ++){
 8003c32:	89bb      	ldrh	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	81bb      	strh	r3, [r7, #12]
 8003c38:	89bb      	ldrh	r3, [r7, #12]
 8003c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3e:	d3cf      	bcc.n	8003be0 <process_data+0x90>
						  }
					  }

					  sprintf(msg, "%hu\r\n", peakHz);
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <process_data+0x164>)
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	491d      	ldr	r1, [pc, #116]	; (8003cbc <process_data+0x16c>)
 8003c48:	481d      	ldr	r0, [pc, #116]	; (8003cc0 <process_data+0x170>)
 8003c4a:	f005 fda3 	bl	8009794 <siprintf>
					  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003c4e:	481c      	ldr	r0, [pc, #112]	; (8003cc0 <process_data+0x170>)
 8003c50:	f7fc fabe 	bl	80001d0 <strlen>
 8003c54:	4603      	mov	r3, r0
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5c:	4918      	ldr	r1, [pc, #96]	; (8003cc0 <process_data+0x170>)
 8003c5e:	4819      	ldr	r0, [pc, #100]	; (8003cc4 <process_data+0x174>)
 8003c60:	f004 fd12 	bl	8008688 <HAL_UART_Transmit>

					  bit_detect(peakHz);
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <process_data+0x164>)
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff33 	bl	8003ad4 <bit_detect>

					  fftFlag = 0;
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <process_data+0x15c>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
			}

			// Reset FFT array index;
			fftIndex = 0;
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <process_data+0x148>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	801a      	strh	r2, [r3, #0]
	for (uint8_t count = start; count < end; count++) {
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	f73f af6b 	bgt.w	8003b60 <process_data+0x10>
		}
	}

}
 8003c8a:	bf00      	nop
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20000204 	.word	0x20000204
 8003c98:	20005420 	.word	0x20005420
 8003c9c:	20000420 	.word	0x20000420
 8003ca0:	20002420 	.word	0x20002420
 8003ca4:	20000408 	.word	0x20000408
 8003ca8:	20004420 	.word	0x20004420
 8003cac:	20005422 	.word	0x20005422
 8003cb0:	20005424 	.word	0x20005424
 8003cb4:	20005428 	.word	0x20005428
 8003cb8:	45000000 	.word	0x45000000
 8003cbc:	0800a104 	.word	0x0800a104
 8003cc0:	200001f8 	.word	0x200001f8
 8003cc4:	20000170 	.word	0x20000170

08003cc8 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	halfFlag = 1;
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
	//process_data(0, BUFFER_SIZE/2);
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000404 	.word	0x20000404

08003ce8 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	fullFlag = 1;
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	701a      	strb	r2, [r3, #0]
	//process_data(BUFFER_SIZE/2, BUFFER_SIZE);
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000405 	.word	0x20000405

08003d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d0c:	b672      	cpsid	i
}
 8003d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d10:	e7fe      	b.n	8003d10 <Error_Handler+0x8>
	...

08003d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1a:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <HAL_MspInit+0x44>)
 8003d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1e:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <HAL_MspInit+0x44>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	6613      	str	r3, [r2, #96]	; 0x60
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <HAL_MspInit+0x44>)
 8003d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_MspInit+0x44>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	4a08      	ldr	r2, [pc, #32]	; (8003d58 <HAL_MspInit+0x44>)
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_MspInit+0x44>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000

08003d5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b09e      	sub	sp, #120	; 0x78
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d74:	f107 0310 	add.w	r3, r7, #16
 8003d78:	2254      	movs	r2, #84	; 0x54
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f005 fd29 	bl	80097d4 <memset>
  if(hadc->Instance==ADC1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a3f      	ldr	r2, [pc, #252]	; (8003e84 <HAL_ADC_MspInit+0x128>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d176      	bne.n	8003e7a <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003d8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003d92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d96:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003da0:	2310      	movs	r3, #16
 8003da2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003da4:	2307      	movs	r3, #7
 8003da6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003da8:	2302      	movs	r3, #2
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003dac:	2302      	movs	r3, #2
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003db6:	f107 0310 	add.w	r3, r7, #16
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f003 f95c 	bl	8007078 <HAL_RCCEx_PeriphCLKConfig>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003dc6:	f7ff ff9f 	bl	8003d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003dca:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <HAL_ADC_MspInit+0x12c>)
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	4a2e      	ldr	r2, [pc, #184]	; (8003e88 <HAL_ADC_MspInit+0x12c>)
 8003dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dd6:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <HAL_ADC_MspInit+0x12c>)
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de2:	4b29      	ldr	r3, [pc, #164]	; (8003e88 <HAL_ADC_MspInit+0x12c>)
 8003de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de6:	4a28      	ldr	r2, [pc, #160]	; (8003e88 <HAL_ADC_MspInit+0x12c>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dee:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <HAL_ADC_MspInit+0x12c>)
 8003df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003dfe:	230b      	movs	r3, #11
 8003e00:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e10:	f002 f92c 	bl	800606c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003e14:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <HAL_ADC_MspInit+0x130>)
 8003e16:	4a1e      	ldr	r2, [pc, #120]	; (8003e90 <HAL_ADC_MspInit+0x134>)
 8003e18:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003e1a:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <HAL_ADC_MspInit+0x130>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e20:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <HAL_ADC_MspInit+0x130>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e26:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <HAL_ADC_MspInit+0x130>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003e2c:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <HAL_ADC_MspInit+0x130>)
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e32:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <HAL_ADC_MspInit+0x130>)
 8003e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e3a:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <HAL_ADC_MspInit+0x130>)
 8003e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_ADC_MspInit+0x130>)
 8003e44:	2220      	movs	r2, #32
 8003e46:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003e48:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <HAL_ADC_MspInit+0x130>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e4e:	480f      	ldr	r0, [pc, #60]	; (8003e8c <HAL_ADC_MspInit+0x130>)
 8003e50:	f001 fe96 	bl	8005b80 <HAL_DMA_Init>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8003e5a:	f7ff ff55 	bl	8003d08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a0a      	ldr	r2, [pc, #40]	; (8003e8c <HAL_ADC_MspInit+0x130>)
 8003e62:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e64:	4a09      	ldr	r2, [pc, #36]	; (8003e8c <HAL_ADC_MspInit+0x130>)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	2012      	movs	r0, #18
 8003e70:	f001 fe4f 	bl	8005b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003e74:	2012      	movs	r0, #18
 8003e76:	f001 fe68 	bl	8005b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e7a:	bf00      	nop
 8003e7c:	3778      	adds	r7, #120	; 0x78
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	50040000 	.word	0x50040000
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	200000dc 	.word	0x200000dc
 8003e90:	40020008 	.word	0x40020008

08003e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d113      	bne.n	8003ece <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <HAL_TIM_Base_MspInit+0x44>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	4a0b      	ldr	r2, [pc, #44]	; (8003ed8 <HAL_TIM_Base_MspInit+0x44>)
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_TIM_Base_MspInit+0x44>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	201c      	movs	r0, #28
 8003ec4:	f001 fe25 	bl	8005b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ec8:	201c      	movs	r0, #28
 8003eca:	f001 fe3e 	bl	8005b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000

08003edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b09e      	sub	sp, #120	; 0x78
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ef4:	f107 0310 	add.w	r3, r7, #16
 8003ef8:	2254      	movs	r2, #84	; 0x54
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f005 fc69 	bl	80097d4 <memset>
  if(huart->Instance==USART2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a23      	ldr	r2, [pc, #140]	; (8003f94 <HAL_UART_MspInit+0xb8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d13e      	bne.n	8003f8a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003f10:	2300      	movs	r3, #0
 8003f12:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f14:	f107 0310 	add.w	r3, r7, #16
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f003 f8ad 	bl	8007078 <HAL_RCCEx_PeriphCLKConfig>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f24:	f7ff fef0 	bl	8003d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_UART_MspInit+0xbc>)
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2c:	4a1a      	ldr	r2, [pc, #104]	; (8003f98 <HAL_UART_MspInit+0xbc>)
 8003f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f32:	6593      	str	r3, [r2, #88]	; 0x58
 8003f34:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <HAL_UART_MspInit+0xbc>)
 8003f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f40:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <HAL_UART_MspInit+0xbc>)
 8003f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f44:	4a14      	ldr	r2, [pc, #80]	; (8003f98 <HAL_UART_MspInit+0xbc>)
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f4c:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <HAL_UART_MspInit+0xbc>)
 8003f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003f58:	230e      	movs	r3, #14
 8003f5a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f64:	2303      	movs	r3, #3
 8003f66:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f68:	2307      	movs	r3, #7
 8003f6a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003f70:	4619      	mov	r1, r3
 8003f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f76:	f002 f879 	bl	800606c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	2026      	movs	r0, #38	; 0x26
 8003f80:	f001 fdc7 	bl	8005b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f84:	2026      	movs	r0, #38	; 0x26
 8003f86:	f001 fde0 	bl	8005b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003f8a:	bf00      	nop
 8003f8c:	3778      	adds	r7, #120	; 0x78
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40004400 	.word	0x40004400
 8003f98:	40021000 	.word	0x40021000

08003f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fa0:	e7fe      	b.n	8003fa0 <NMI_Handler+0x4>

08003fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fa6:	e7fe      	b.n	8003fa6 <HardFault_Handler+0x4>

08003fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fac:	e7fe      	b.n	8003fac <MemManage_Handler+0x4>

08003fae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fb2:	e7fe      	b.n	8003fb2 <BusFault_Handler+0x4>

08003fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fb8:	e7fe      	b.n	8003fb8 <UsageFault_Handler+0x4>

08003fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fbe:	bf00      	nop
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fe8:	f000 f8f0 	bl	80041cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ff4:	4802      	ldr	r0, [pc, #8]	; (8004000 <DMA1_Channel1_IRQHandler+0x10>)
 8003ff6:	f001 ff5a 	bl	8005eae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ffa:	bf00      	nop
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	200000dc 	.word	0x200000dc

08004004 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004008:	4802      	ldr	r0, [pc, #8]	; (8004014 <ADC1_IRQHandler+0x10>)
 800400a:	f000 fcc5 	bl	8004998 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000078 	.word	0x20000078

08004018 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800401c:	4802      	ldr	r0, [pc, #8]	; (8004028 <TIM2_IRQHandler+0x10>)
 800401e:	f003 fc20 	bl	8007862 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000124 	.word	0x20000124

0800402c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004030:	4802      	ldr	r0, [pc, #8]	; (800403c <USART2_IRQHandler+0x10>)
 8004032:	f004 fbb3 	bl	800879c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000170 	.word	0x20000170

08004040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004048:	4a14      	ldr	r2, [pc, #80]	; (800409c <_sbrk+0x5c>)
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <_sbrk+0x60>)
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <_sbrk+0x64>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <_sbrk+0x64>)
 800405e:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <_sbrk+0x68>)
 8004060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <_sbrk+0x64>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4413      	add	r3, r2
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	429a      	cmp	r2, r3
 800406e:	d207      	bcs.n	8004080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004070:	f005 fbb8 	bl	80097e4 <__errno>
 8004074:	4603      	mov	r3, r0
 8004076:	220c      	movs	r2, #12
 8004078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
 800407e:	e009      	b.n	8004094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004080:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <_sbrk+0x64>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004086:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <_sbrk+0x64>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4413      	add	r3, r2
 800408e:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <_sbrk+0x64>)
 8004090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004092:	68fb      	ldr	r3, [r7, #12]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20010000 	.word	0x20010000
 80040a0:	00000400 	.word	0x00000400
 80040a4:	2000545c 	.word	0x2000545c
 80040a8:	200055b0 	.word	0x200055b0

080040ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <SystemInit+0x20>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	4a05      	ldr	r2, [pc, #20]	; (80040cc <SystemInit+0x20>)
 80040b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	e000ed00 	.word	0xe000ed00

080040d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80040d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004108 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80040d4:	f7ff ffea 	bl	80040ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80040d8:	480c      	ldr	r0, [pc, #48]	; (800410c <LoopForever+0x6>)
  ldr r1, =_edata
 80040da:	490d      	ldr	r1, [pc, #52]	; (8004110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040dc:	4a0d      	ldr	r2, [pc, #52]	; (8004114 <LoopForever+0xe>)
  movs r3, #0
 80040de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040e0:	e002      	b.n	80040e8 <LoopCopyDataInit>

080040e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040e6:	3304      	adds	r3, #4

080040e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040ec:	d3f9      	bcc.n	80040e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ee:	4a0a      	ldr	r2, [pc, #40]	; (8004118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80040f0:	4c0a      	ldr	r4, [pc, #40]	; (800411c <LoopForever+0x16>)
  movs r3, #0
 80040f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040f4:	e001      	b.n	80040fa <LoopFillZerobss>

080040f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040f8:	3204      	adds	r2, #4

080040fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040fc:	d3fb      	bcc.n	80040f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040fe:	f005 fb77 	bl	80097f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004102:	f7ff fa81 	bl	8003608 <main>

08004106 <LoopForever>:

LoopForever:
    b LoopForever
 8004106:	e7fe      	b.n	8004106 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004108:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 800410c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004110:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8004114:	0801d670 	.word	0x0801d670
  ldr r2, =_sbss
 8004118:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800411c:	200055ac 	.word	0x200055ac

08004120 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004120:	e7fe      	b.n	8004120 <CAN1_RX0_IRQHandler>

08004122 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800412c:	2003      	movs	r0, #3
 800412e:	f001 fce5 	bl	8005afc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004132:	200f      	movs	r0, #15
 8004134:	f000 f80e 	bl	8004154 <HAL_InitTick>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	71fb      	strb	r3, [r7, #7]
 8004142:	e001      	b.n	8004148 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004144:	f7ff fde6 	bl	8003d14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004148:	79fb      	ldrb	r3, [r7, #7]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004160:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <HAL_InitTick+0x6c>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d023      	beq.n	80041b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004168:	4b16      	ldr	r3, [pc, #88]	; (80041c4 <HAL_InitTick+0x70>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <HAL_InitTick+0x6c>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	4619      	mov	r1, r3
 8004172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004176:	fbb3 f3f1 	udiv	r3, r3, r1
 800417a:	fbb2 f3f3 	udiv	r3, r2, r3
 800417e:	4618      	mov	r0, r3
 8004180:	f001 fcf1 	bl	8005b66 <HAL_SYSTICK_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10f      	bne.n	80041aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b0f      	cmp	r3, #15
 800418e:	d809      	bhi.n	80041a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004190:	2200      	movs	r2, #0
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	f04f 30ff 	mov.w	r0, #4294967295
 8004198:	f001 fcbb 	bl	8005b12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800419c:	4a0a      	ldr	r2, [pc, #40]	; (80041c8 <HAL_InitTick+0x74>)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e007      	b.n	80041b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
 80041a8:	e004      	b.n	80041b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
 80041ae:	e001      	b.n	80041b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000008 	.word	0x20000008
 80041c4:	20000000 	.word	0x20000000
 80041c8:	20000004 	.word	0x20000004

080041cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_IncTick+0x20>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_IncTick+0x24>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4413      	add	r3, r2
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <HAL_IncTick+0x24>)
 80041de:	6013      	str	r3, [r2, #0]
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	20000008 	.word	0x20000008
 80041f0:	20005460 	.word	0x20005460

080041f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return uwTick;
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <HAL_GetTick+0x14>)
 80041fa:	681b      	ldr	r3, [r3, #0]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20005460 	.word	0x20005460

0800420c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	609a      	str	r2, [r3, #8]
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	609a      	str	r2, [r3, #8]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004268:	4618      	mov	r0, r3
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3360      	adds	r3, #96	; 0x60
 8004286:	461a      	mov	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <LL_ADC_SetOffset+0x44>)
 8004296:	4013      	ands	r3, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80042ac:	bf00      	nop
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	03fff000 	.word	0x03fff000

080042bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3360      	adds	r3, #96	; 0x60
 80042ca:	461a      	mov	r2, r3
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	3360      	adds	r3, #96	; 0x60
 80042f8:	461a      	mov	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	431a      	orrs	r2, r3
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3330      	adds	r3, #48	; 0x30
 8004354:	461a      	mov	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	0a1b      	lsrs	r3, r3, #8
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	f003 030c 	and.w	r3, r3, #12
 8004360:	4413      	add	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	211f      	movs	r1, #31
 8004370:	fa01 f303 	lsl.w	r3, r1, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	401a      	ands	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	0e9b      	lsrs	r3, r3, #26
 800437c:	f003 011f 	and.w	r1, r3, #31
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	fa01 f303 	lsl.w	r3, r1, r3
 800438a:	431a      	orrs	r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b087      	sub	sp, #28
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3314      	adds	r3, #20
 80043d2:	461a      	mov	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	0e5b      	lsrs	r3, r3, #25
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	4413      	add	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	0d1b      	lsrs	r3, r3, #20
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	2107      	movs	r1, #7
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	401a      	ands	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	0d1b      	lsrs	r3, r3, #20
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	fa01 f303 	lsl.w	r3, r1, r3
 8004406:	431a      	orrs	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800440c:	bf00      	nop
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004430:	43db      	mvns	r3, r3
 8004432:	401a      	ands	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f003 0318 	and.w	r3, r3, #24
 800443a:	4908      	ldr	r1, [pc, #32]	; (800445c <LL_ADC_SetChannelSingleDiff+0x44>)
 800443c:	40d9      	lsrs	r1, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	400b      	ands	r3, r1
 8004442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004446:	431a      	orrs	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	0007ffff 	.word	0x0007ffff

08004460 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004470:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6093      	str	r3, [r2, #8]
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004498:	d101      	bne.n	800449e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80044bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044e8:	d101      	bne.n	80044ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800450c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004510:	f043 0201 	orr.w	r2, r3, #1
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004534:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004538:	f043 0202 	orr.w	r2, r3, #2
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <LL_ADC_IsEnabled+0x18>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <LL_ADC_IsEnabled+0x1a>
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b02      	cmp	r3, #2
 8004584:	d101      	bne.n	800458a <LL_ADC_IsDisableOngoing+0x18>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <LL_ADC_IsDisableOngoing+0x1a>
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045ac:	f043 0204 	orr.w	r2, r3, #4
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d101      	bne.n	80045d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d101      	bne.n	80045fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e126      	b.n	8004874 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004630:	2b00      	cmp	r3, #0
 8004632:	d109      	bne.n	8004648 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff fb91 	bl	8003d5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff ff19 	bl	8004484 <LL_ADC_IsDeepPowerDownEnabled>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d004      	beq.n	8004662 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff feff 	bl	8004460 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ff34 	bl	80044d4 <LL_ADC_IsInternalRegulatorEnabled>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d115      	bne.n	800469e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff ff18 	bl	80044ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800467c:	4b7f      	ldr	r3, [pc, #508]	; (800487c <HAL_ADC_Init+0x270>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	099b      	lsrs	r3, r3, #6
 8004682:	4a7f      	ldr	r2, [pc, #508]	; (8004880 <HAL_ADC_Init+0x274>)
 8004684:	fba2 2303 	umull	r2, r3, r2, r3
 8004688:	099b      	lsrs	r3, r3, #6
 800468a:	3301      	adds	r3, #1
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004690:	e002      	b.n	8004698 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3b01      	subs	r3, #1
 8004696:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f9      	bne.n	8004692 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff ff16 	bl	80044d4 <LL_ADC_IsInternalRegulatorEnabled>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	f043 0210 	orr.w	r2, r3, #16
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	f043 0201 	orr.w	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff ff76 	bl	80045c0 <LL_ADC_REG_IsConversionOngoing>
 80046d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f040 80bf 	bne.w	8004862 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f040 80bb 	bne.w	8004862 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80046f4:	f043 0202 	orr.w	r2, r3, #2
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ff23 	bl	800454c <LL_ADC_IsEnabled>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10b      	bne.n	8004724 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800470c:	485d      	ldr	r0, [pc, #372]	; (8004884 <HAL_ADC_Init+0x278>)
 800470e:	f7ff ff1d 	bl	800454c <LL_ADC_IsEnabled>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d105      	bne.n	8004724 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4619      	mov	r1, r3
 800471e:	485a      	ldr	r0, [pc, #360]	; (8004888 <HAL_ADC_Init+0x27c>)
 8004720:	f7ff fd74 	bl	800420c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	7e5b      	ldrb	r3, [r3, #25]
 8004728:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800472e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004734:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800473a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004742:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d106      	bne.n	8004760 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	3b01      	subs	r3, #1
 8004758:	045b      	lsls	r3, r3, #17
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	4b42      	ldr	r3, [pc, #264]	; (800488c <HAL_ADC_Init+0x280>)
 8004784:	4013      	ands	r3, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	69b9      	ldr	r1, [r7, #24]
 800478c:	430b      	orrs	r3, r1
 800478e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff ff26 	bl	80045e6 <LL_ADC_INJ_IsConversionOngoing>
 800479a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d13d      	bne.n	800481e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d13a      	bne.n	800481e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047ac:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047b4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047c4:	f023 0302 	bic.w	r3, r3, #2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	69b9      	ldr	r1, [r7, #24]
 80047ce:	430b      	orrs	r3, r1
 80047d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d118      	bne.n	800480e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80047e6:	f023 0304 	bic.w	r3, r3, #4
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047f2:	4311      	orrs	r1, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047f8:	4311      	orrs	r1, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047fe:	430a      	orrs	r2, r1
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	611a      	str	r2, [r3, #16]
 800480c:	e007      	b.n	800481e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d10c      	bne.n	8004840 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	f023 010f 	bic.w	r1, r3, #15
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	1e5a      	subs	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	631a      	str	r2, [r3, #48]	; 0x30
 800483e:	e007      	b.n	8004850 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 020f 	bic.w	r2, r2, #15
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004854:	f023 0303 	bic.w	r3, r3, #3
 8004858:	f043 0201 	orr.w	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
 8004860:	e007      	b.n	8004872 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	f043 0210 	orr.w	r2, r3, #16
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004872:	7ffb      	ldrb	r3, [r7, #31]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000000 	.word	0x20000000
 8004880:	053e2d63 	.word	0x053e2d63
 8004884:	50040000 	.word	0x50040000
 8004888:	50040300 	.word	0x50040300
 800488c:	fff0c007 	.word	0xfff0c007

08004890 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fe8d 	bl	80045c0 <LL_ADC_REG_IsConversionOngoing>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d167      	bne.n	800497c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_ADC_Start_DMA+0x2a>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e063      	b.n	8004982 <HAL_ADC_Start_DMA+0xf2>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fe12 	bl	80054ec <ADC_Enable>
 80048c8:	4603      	mov	r3, r0
 80048ca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d14f      	bne.n	8004972 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d006      	beq.n	8004900 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f6:	f023 0206 	bic.w	r2, r3, #6
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	659a      	str	r2, [r3, #88]	; 0x58
 80048fe:	e002      	b.n	8004906 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490a:	4a20      	ldr	r2, [pc, #128]	; (800498c <HAL_ADC_Start_DMA+0xfc>)
 800490c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004912:	4a1f      	ldr	r2, [pc, #124]	; (8004990 <HAL_ADC_Start_DMA+0x100>)
 8004914:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491a:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <HAL_ADC_Start_DMA+0x104>)
 800491c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	221c      	movs	r2, #28
 8004924:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0210 	orr.w	r2, r2, #16
 800493c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0201 	orr.w	r2, r2, #1
 800494c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3340      	adds	r3, #64	; 0x40
 8004958:	4619      	mov	r1, r3
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f001 f9c7 	bl	8005cf0 <HAL_DMA_Start_IT>
 8004962:	4603      	mov	r3, r0
 8004964:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fe14 	bl	8004598 <LL_ADC_REG_StartConversion>
 8004970:	e006      	b.n	8004980 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800497a:	e001      	b.n	8004980 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800497c:	2302      	movs	r3, #2
 800497e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004980:	7dfb      	ldrb	r3, [r7, #23]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	080056b7 	.word	0x080056b7
 8004990:	0800578f 	.word	0x0800578f
 8004994:	080057ab 	.word	0x080057ab

08004998 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80049a0:	2300      	movs	r3, #0
 80049a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d017      	beq.n	80049ee <HAL_ADC_IRQHandler+0x56>
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d012      	beq.n	80049ee <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 ffb1 	bl	8005948 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2202      	movs	r2, #2
 80049ec:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d004      	beq.n	8004a02 <HAL_ADC_IRQHandler+0x6a>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d05e      	beq.n	8004aca <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d059      	beq.n	8004aca <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1a:	f003 0310 	and.w	r3, r3, #16
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d105      	bne.n	8004a2e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff fc73 	bl	800431e <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d03e      	beq.n	8004abc <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d135      	bne.n	8004abc <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d12e      	bne.n	8004abc <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fdac 	bl	80045c0 <LL_ADC_REG_IsConversionOngoing>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d11a      	bne.n	8004aa4 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 020c 	bic.w	r2, r2, #12
 8004a7c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d112      	bne.n	8004abc <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	f043 0201 	orr.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	655a      	str	r2, [r3, #84]	; 0x54
 8004aa2:	e00b      	b.n	8004abc <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa8:	f043 0210 	orr.w	r2, r3, #16
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab4:	f043 0201 	orr.w	r2, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff f913 	bl	8003ce8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	220c      	movs	r2, #12
 8004ac8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <HAL_ADC_IRQHandler+0x146>
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d072      	beq.n	8004bce <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d06d      	beq.n	8004bce <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d105      	bne.n	8004b0a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fc44 	bl	800439c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004b14:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff fbff 	bl	800431e <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b20:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d047      	beq.n	8004bc0 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_ADC_IRQHandler+0x1b2>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d03f      	beq.n	8004bc0 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d13a      	bne.n	8004bc0 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d133      	bne.n	8004bc0 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d12e      	bne.n	8004bc0 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff fd3d 	bl	80045e6 <LL_ADC_INJ_IsConversionOngoing>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d11a      	bne.n	8004ba8 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b80:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d112      	bne.n	8004bc0 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9e:	f043 0201 	orr.w	r2, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	655a      	str	r2, [r3, #84]	; 0x54
 8004ba6:	e00b      	b.n	8004bc0 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bac:	f043 0210 	orr.w	r2, r3, #16
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb8:	f043 0201 	orr.w	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fe99 	bl	80058f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2260      	movs	r2, #96	; 0x60
 8004bcc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d011      	beq.n	8004bfc <HAL_ADC_IRQHandler+0x264>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00c      	beq.n	8004bfc <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f886 	bl	8004d00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2280      	movs	r2, #128	; 0x80
 8004bfa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d012      	beq.n	8004c2c <HAL_ADC_IRQHandler+0x294>
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00d      	beq.n	8004c2c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c14:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fe7f 	bl	8005920 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d012      	beq.n	8004c5c <HAL_ADC_IRQHandler+0x2c4>
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00d      	beq.n	8004c5c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fe71 	bl	8005934 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c5a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d02a      	beq.n	8004cbc <HAL_ADC_IRQHandler+0x324>
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d025      	beq.n	8004cbc <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	61fb      	str	r3, [r7, #28]
 8004c7c:	e008      	b.n	8004c90 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d10e      	bne.n	8004cb4 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	f043 0202 	orr.w	r2, r3, #2
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f830 	bl	8004d14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2210      	movs	r2, #16
 8004cba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d018      	beq.n	8004cf8 <HAL_ADC_IRQHandler+0x360>
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d013      	beq.n	8004cf8 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce0:	f043 0208 	orr.w	r2, r3, #8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cf0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fe0a 	bl	800590c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004cf8:	bf00      	nop
 8004cfa:	3720      	adds	r7, #32
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b0b6      	sub	sp, #216	; 0xd8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x22>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e3bb      	b.n	80054c2 <HAL_ADC_ConfigChannel+0x79a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fc32 	bl	80045c0 <LL_ADC_REG_IsConversionOngoing>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f040 83a0 	bne.w	80054a4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b05      	cmp	r3, #5
 8004d72:	d824      	bhi.n	8004dbe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	3b02      	subs	r3, #2
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d81b      	bhi.n	8004db6 <HAL_ADC_ConfigChannel+0x8e>
 8004d7e:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <HAL_ADC_ConfigChannel+0x5c>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004d95 	.word	0x08004d95
 8004d88:	08004d9d 	.word	0x08004d9d
 8004d8c:	08004da5 	.word	0x08004da5
 8004d90:	08004dad 	.word	0x08004dad
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004d94:	230c      	movs	r3, #12
 8004d96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004d9a:	e010      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004d9c:	2312      	movs	r3, #18
 8004d9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004da2:	e00c      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004da4:	2318      	movs	r3, #24
 8004da6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004daa:	e008      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004db0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004db4:	e003      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004db6:	2306      	movs	r3, #6
 8004db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004dbc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004dcc:	f7ff faba 	bl	8004344 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff fbf3 	bl	80045c0 <LL_ADC_REG_IsConversionOngoing>
 8004dda:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fbff 	bl	80045e6 <LL_ADC_INJ_IsConversionOngoing>
 8004de8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004dec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f040 81a4 	bne.w	800513e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004df6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f040 819f 	bne.w	800513e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	6819      	ldr	r1, [r3, #0]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f7ff fad8 	bl	80043c2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	08db      	lsrs	r3, r3, #3
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d00a      	beq.n	8004e4a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6919      	ldr	r1, [r3, #16]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e44:	f7ff fa16 	bl	8004274 <LL_ADC_SetOffset>
 8004e48:	e179      	b.n	800513e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff fa33 	bl	80042bc <LL_ADC_GetOffsetChannel>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x14e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2100      	movs	r1, #0
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff fa28 	bl	80042bc <LL_ADC_GetOffsetChannel>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	0e9b      	lsrs	r3, r3, #26
 8004e70:	f003 021f 	and.w	r2, r3, #31
 8004e74:	e01e      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x18c>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff fa1d 	bl	80042bc <LL_ADC_GetOffsetChannel>
 8004e82:	4603      	mov	r3, r0
 8004e84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e8c:	fa93 f3a3 	rbit	r3, r3
 8004e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004e98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004ea4:	2320      	movs	r3, #32
 8004ea6:	e004      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004ea8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004eac:	fab3 f383 	clz	r3, r3
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d105      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x1a4>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	0e9b      	lsrs	r3, r3, #26
 8004ec6:	f003 031f 	and.w	r3, r3, #31
 8004eca:	e018      	b.n	8004efe <HAL_ADC_ConfigChannel+0x1d6>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ed8:	fa93 f3a3 	rbit	r3, r3
 8004edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004ee0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004ee8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004ef0:	2320      	movs	r3, #32
 8004ef2:	e004      	b.n	8004efe <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004ef4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ef8:	fab3 f383 	clz	r3, r3
 8004efc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d106      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2200      	movs	r2, #0
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff f9ec 	bl	80042e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2101      	movs	r1, #1
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff f9d0 	bl	80042bc <LL_ADC_GetOffsetChannel>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <HAL_ADC_ConfigChannel+0x214>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff f9c5 	bl	80042bc <LL_ADC_GetOffsetChannel>
 8004f32:	4603      	mov	r3, r0
 8004f34:	0e9b      	lsrs	r3, r3, #26
 8004f36:	f003 021f 	and.w	r2, r3, #31
 8004f3a:	e01e      	b.n	8004f7a <HAL_ADC_ConfigChannel+0x252>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2101      	movs	r1, #1
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff f9ba 	bl	80042bc <LL_ADC_GetOffsetChannel>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f52:	fa93 f3a3 	rbit	r3, r3
 8004f56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004f5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004f62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004f6a:	2320      	movs	r3, #32
 8004f6c:	e004      	b.n	8004f78 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004f6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f72:	fab3 f383 	clz	r3, r3
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d105      	bne.n	8004f92 <HAL_ADC_ConfigChannel+0x26a>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	0e9b      	lsrs	r3, r3, #26
 8004f8c:	f003 031f 	and.w	r3, r3, #31
 8004f90:	e018      	b.n	8004fc4 <HAL_ADC_ConfigChannel+0x29c>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f9e:	fa93 f3a3 	rbit	r3, r3
 8004fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004faa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004fae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004fb6:	2320      	movs	r3, #32
 8004fb8:	e004      	b.n	8004fc4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004fba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d106      	bne.n	8004fd6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2101      	movs	r1, #1
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff f989 	bl	80042e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2102      	movs	r1, #2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff f96d 	bl	80042bc <LL_ADC_GetOffsetChannel>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <HAL_ADC_ConfigChannel+0x2da>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff f962 	bl	80042bc <LL_ADC_GetOffsetChannel>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	0e9b      	lsrs	r3, r3, #26
 8004ffc:	f003 021f 	and.w	r2, r3, #31
 8005000:	e01e      	b.n	8005040 <HAL_ADC_ConfigChannel+0x318>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2102      	movs	r1, #2
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff f957 	bl	80042bc <LL_ADC_GetOffsetChannel>
 800500e:	4603      	mov	r3, r0
 8005010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005018:	fa93 f3a3 	rbit	r3, r3
 800501c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005024:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005028:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8005030:	2320      	movs	r3, #32
 8005032:	e004      	b.n	800503e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8005034:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005038:	fab3 f383 	clz	r3, r3
 800503c:	b2db      	uxtb	r3, r3
 800503e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x330>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	0e9b      	lsrs	r3, r3, #26
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	e014      	b.n	8005082 <HAL_ADC_ConfigChannel+0x35a>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005060:	fa93 f3a3 	rbit	r3, r3
 8005064:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800506c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8005074:	2320      	movs	r3, #32
 8005076:	e004      	b.n	8005082 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005078:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800507c:	fab3 f383 	clz	r3, r3
 8005080:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005082:	429a      	cmp	r2, r3
 8005084:	d106      	bne.n	8005094 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2200      	movs	r2, #0
 800508c:	2102      	movs	r1, #2
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff f92a 	bl	80042e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2103      	movs	r1, #3
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff f90e 	bl	80042bc <LL_ADC_GetOffsetChannel>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x398>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2103      	movs	r1, #3
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff f903 	bl	80042bc <LL_ADC_GetOffsetChannel>
 80050b6:	4603      	mov	r3, r0
 80050b8:	0e9b      	lsrs	r3, r3, #26
 80050ba:	f003 021f 	and.w	r2, r3, #31
 80050be:	e017      	b.n	80050f0 <HAL_ADC_ConfigChannel+0x3c8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2103      	movs	r1, #3
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff f8f8 	bl	80042bc <LL_ADC_GetOffsetChannel>
 80050cc:	4603      	mov	r3, r0
 80050ce:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050d2:	fa93 f3a3 	rbit	r3, r3
 80050d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80050d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050da:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80050dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80050e2:	2320      	movs	r3, #32
 80050e4:	e003      	b.n	80050ee <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80050e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050e8:	fab3 f383 	clz	r3, r3
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d105      	bne.n	8005108 <HAL_ADC_ConfigChannel+0x3e0>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	0e9b      	lsrs	r3, r3, #26
 8005102:	f003 031f 	and.w	r3, r3, #31
 8005106:	e011      	b.n	800512c <HAL_ADC_ConfigChannel+0x404>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005110:	fa93 f3a3 	rbit	r3, r3
 8005114:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005118:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800511a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005120:	2320      	movs	r3, #32
 8005122:	e003      	b.n	800512c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005126:	fab3 f383 	clz	r3, r3
 800512a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800512c:	429a      	cmp	r2, r3
 800512e:	d106      	bne.n	800513e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2200      	movs	r2, #0
 8005136:	2103      	movs	r1, #3
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff f8d5 	bl	80042e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff fa02 	bl	800454c <LL_ADC_IsEnabled>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	f040 8140 	bne.w	80053d0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6818      	ldr	r0, [r3, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6819      	ldr	r1, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	461a      	mov	r2, r3
 800515e:	f7ff f95b 	bl	8004418 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	4a8f      	ldr	r2, [pc, #572]	; (80053a4 <HAL_ADC_ConfigChannel+0x67c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	f040 8131 	bne.w	80053d0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10b      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x46e>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	0e9b      	lsrs	r3, r3, #26
 8005184:	3301      	adds	r3, #1
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	2b09      	cmp	r3, #9
 800518c:	bf94      	ite	ls
 800518e:	2301      	movls	r3, #1
 8005190:	2300      	movhi	r3, #0
 8005192:	b2db      	uxtb	r3, r3
 8005194:	e019      	b.n	80051ca <HAL_ADC_ConfigChannel+0x4a2>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800519e:	fa93 f3a3 	rbit	r3, r3
 80051a2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80051a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80051a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80051ae:	2320      	movs	r3, #32
 80051b0:	e003      	b.n	80051ba <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80051b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b4:	fab3 f383 	clz	r3, r3
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	3301      	adds	r3, #1
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	2b09      	cmp	r3, #9
 80051c2:	bf94      	ite	ls
 80051c4:	2301      	movls	r3, #1
 80051c6:	2300      	movhi	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d079      	beq.n	80052c2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d107      	bne.n	80051ea <HAL_ADC_ConfigChannel+0x4c2>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	0e9b      	lsrs	r3, r3, #26
 80051e0:	3301      	adds	r3, #1
 80051e2:	069b      	lsls	r3, r3, #26
 80051e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051e8:	e015      	b.n	8005216 <HAL_ADC_ConfigChannel+0x4ee>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f2:	fa93 f3a3 	rbit	r3, r3
 80051f6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80051f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051fa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80051fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8005202:	2320      	movs	r3, #32
 8005204:	e003      	b.n	800520e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8005206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005208:	fab3 f383 	clz	r3, r3
 800520c:	b2db      	uxtb	r3, r3
 800520e:	3301      	adds	r3, #1
 8005210:	069b      	lsls	r3, r3, #26
 8005212:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x50e>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	0e9b      	lsrs	r3, r3, #26
 8005228:	3301      	adds	r3, #1
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	2101      	movs	r1, #1
 8005230:	fa01 f303 	lsl.w	r3, r1, r3
 8005234:	e017      	b.n	8005266 <HAL_ADC_ConfigChannel+0x53e>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800523e:	fa93 f3a3 	rbit	r3, r3
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005246:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800524e:	2320      	movs	r3, #32
 8005250:	e003      	b.n	800525a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005254:	fab3 f383 	clz	r3, r3
 8005258:	b2db      	uxtb	r3, r3
 800525a:	3301      	adds	r3, #1
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	2101      	movs	r1, #1
 8005262:	fa01 f303 	lsl.w	r3, r1, r3
 8005266:	ea42 0103 	orr.w	r1, r2, r3
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <HAL_ADC_ConfigChannel+0x564>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	0e9b      	lsrs	r3, r3, #26
 800527c:	3301      	adds	r3, #1
 800527e:	f003 021f 	and.w	r2, r3, #31
 8005282:	4613      	mov	r3, r2
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	4413      	add	r3, r2
 8005288:	051b      	lsls	r3, r3, #20
 800528a:	e018      	b.n	80052be <HAL_ADC_ConfigChannel+0x596>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005294:	fa93 f3a3 	rbit	r3, r3
 8005298:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80052a4:	2320      	movs	r3, #32
 80052a6:	e003      	b.n	80052b0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	fab3 f383 	clz	r3, r3
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	3301      	adds	r3, #1
 80052b2:	f003 021f 	and.w	r2, r3, #31
 80052b6:	4613      	mov	r3, r2
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	4413      	add	r3, r2
 80052bc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052be:	430b      	orrs	r3, r1
 80052c0:	e081      	b.n	80053c6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d107      	bne.n	80052de <HAL_ADC_ConfigChannel+0x5b6>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	0e9b      	lsrs	r3, r3, #26
 80052d4:	3301      	adds	r3, #1
 80052d6:	069b      	lsls	r3, r3, #26
 80052d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052dc:	e015      	b.n	800530a <HAL_ADC_ConfigChannel+0x5e2>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	fa93 f3a3 	rbit	r3, r3
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80052f6:	2320      	movs	r3, #32
 80052f8:	e003      	b.n	8005302 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	fab3 f383 	clz	r3, r3
 8005300:	b2db      	uxtb	r3, r3
 8005302:	3301      	adds	r3, #1
 8005304:	069b      	lsls	r3, r3, #26
 8005306:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <HAL_ADC_ConfigChannel+0x602>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	0e9b      	lsrs	r3, r3, #26
 800531c:	3301      	adds	r3, #1
 800531e:	f003 031f 	and.w	r3, r3, #31
 8005322:	2101      	movs	r1, #1
 8005324:	fa01 f303 	lsl.w	r3, r1, r3
 8005328:	e017      	b.n	800535a <HAL_ADC_ConfigChannel+0x632>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	fa93 f3a3 	rbit	r3, r3
 8005336:	61bb      	str	r3, [r7, #24]
  return result;
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8005342:	2320      	movs	r3, #32
 8005344:	e003      	b.n	800534e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	fab3 f383 	clz	r3, r3
 800534c:	b2db      	uxtb	r3, r3
 800534e:	3301      	adds	r3, #1
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	2101      	movs	r1, #1
 8005356:	fa01 f303 	lsl.w	r3, r1, r3
 800535a:	ea42 0103 	orr.w	r1, r2, r3
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10d      	bne.n	8005386 <HAL_ADC_ConfigChannel+0x65e>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	0e9b      	lsrs	r3, r3, #26
 8005370:	3301      	adds	r3, #1
 8005372:	f003 021f 	and.w	r2, r3, #31
 8005376:	4613      	mov	r3, r2
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	4413      	add	r3, r2
 800537c:	3b1e      	subs	r3, #30
 800537e:	051b      	lsls	r3, r3, #20
 8005380:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005384:	e01e      	b.n	80053c4 <HAL_ADC_ConfigChannel+0x69c>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	fa93 f3a3 	rbit	r3, r3
 8005392:	60fb      	str	r3, [r7, #12]
  return result;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d104      	bne.n	80053a8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800539e:	2320      	movs	r3, #32
 80053a0:	e006      	b.n	80053b0 <HAL_ADC_ConfigChannel+0x688>
 80053a2:	bf00      	nop
 80053a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	fab3 f383 	clz	r3, r3
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	3301      	adds	r3, #1
 80053b2:	f003 021f 	and.w	r2, r3, #31
 80053b6:	4613      	mov	r3, r2
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	4413      	add	r3, r2
 80053bc:	3b1e      	subs	r3, #30
 80053be:	051b      	lsls	r3, r3, #20
 80053c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053ca:	4619      	mov	r1, r3
 80053cc:	f7fe fff9 	bl	80043c2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4b3d      	ldr	r3, [pc, #244]	; (80054cc <HAL_ADC_ConfigChannel+0x7a4>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d06c      	beq.n	80054b6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053dc:	483c      	ldr	r0, [pc, #240]	; (80054d0 <HAL_ADC_ConfigChannel+0x7a8>)
 80053de:	f7fe ff3b 	bl	8004258 <LL_ADC_GetCommonPathInternalCh>
 80053e2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a3a      	ldr	r2, [pc, #232]	; (80054d4 <HAL_ADC_ConfigChannel+0x7ac>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d127      	bne.n	8005440 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80053f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d121      	bne.n	8005440 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a35      	ldr	r2, [pc, #212]	; (80054d8 <HAL_ADC_ConfigChannel+0x7b0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d157      	bne.n	80054b6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005406:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800540a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800540e:	4619      	mov	r1, r3
 8005410:	482f      	ldr	r0, [pc, #188]	; (80054d0 <HAL_ADC_ConfigChannel+0x7a8>)
 8005412:	f7fe ff0e 	bl	8004232 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005416:	4b31      	ldr	r3, [pc, #196]	; (80054dc <HAL_ADC_ConfigChannel+0x7b4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	099b      	lsrs	r3, r3, #6
 800541c:	4a30      	ldr	r2, [pc, #192]	; (80054e0 <HAL_ADC_ConfigChannel+0x7b8>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	099b      	lsrs	r3, r3, #6
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	4613      	mov	r3, r2
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005430:	e002      	b.n	8005438 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	3b01      	subs	r3, #1
 8005436:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f9      	bne.n	8005432 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800543e:	e03a      	b.n	80054b6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a27      	ldr	r2, [pc, #156]	; (80054e4 <HAL_ADC_ConfigChannel+0x7bc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d113      	bne.n	8005472 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800544a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800544e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10d      	bne.n	8005472 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1f      	ldr	r2, [pc, #124]	; (80054d8 <HAL_ADC_ConfigChannel+0x7b0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d12a      	bne.n	80054b6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005460:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005468:	4619      	mov	r1, r3
 800546a:	4819      	ldr	r0, [pc, #100]	; (80054d0 <HAL_ADC_ConfigChannel+0x7a8>)
 800546c:	f7fe fee1 	bl	8004232 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005470:	e021      	b.n	80054b6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1c      	ldr	r2, [pc, #112]	; (80054e8 <HAL_ADC_ConfigChannel+0x7c0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d11c      	bne.n	80054b6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800547c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d116      	bne.n	80054b6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a12      	ldr	r2, [pc, #72]	; (80054d8 <HAL_ADC_ConfigChannel+0x7b0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d111      	bne.n	80054b6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005492:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005496:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800549a:	4619      	mov	r1, r3
 800549c:	480c      	ldr	r0, [pc, #48]	; (80054d0 <HAL_ADC_ConfigChannel+0x7a8>)
 800549e:	f7fe fec8 	bl	8004232 <LL_ADC_SetCommonPathInternalCh>
 80054a2:	e008      	b.n	80054b6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a8:	f043 0220 	orr.w	r2, r3, #32
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80054be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	37d8      	adds	r7, #216	; 0xd8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	80080000 	.word	0x80080000
 80054d0:	50040300 	.word	0x50040300
 80054d4:	c7520000 	.word	0xc7520000
 80054d8:	50040000 	.word	0x50040000
 80054dc:	20000000 	.word	0x20000000
 80054e0:	053e2d63 	.word	0x053e2d63
 80054e4:	cb840000 	.word	0xcb840000
 80054e8:	80000001 	.word	0x80000001

080054ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff f825 	bl	800454c <LL_ADC_IsEnabled>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d169      	bne.n	80055dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	4b36      	ldr	r3, [pc, #216]	; (80055e8 <ADC_Enable+0xfc>)
 8005510:	4013      	ands	r3, r2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00d      	beq.n	8005532 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	f043 0210 	orr.w	r2, r3, #16
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005526:	f043 0201 	orr.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e055      	b.n	80055de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f7fe ffe0 	bl	80044fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800553c:	482b      	ldr	r0, [pc, #172]	; (80055ec <ADC_Enable+0x100>)
 800553e:	f7fe fe8b 	bl	8004258 <LL_ADC_GetCommonPathInternalCh>
 8005542:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005544:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005548:	2b00      	cmp	r3, #0
 800554a:	d013      	beq.n	8005574 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800554c:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <ADC_Enable+0x104>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	099b      	lsrs	r3, r3, #6
 8005552:	4a28      	ldr	r2, [pc, #160]	; (80055f4 <ADC_Enable+0x108>)
 8005554:	fba2 2303 	umull	r2, r3, r2, r3
 8005558:	099b      	lsrs	r3, r3, #6
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	4613      	mov	r3, r2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005566:	e002      	b.n	800556e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	3b01      	subs	r3, #1
 800556c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f9      	bne.n	8005568 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005574:	f7fe fe3e 	bl	80041f4 <HAL_GetTick>
 8005578:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800557a:	e028      	b.n	80055ce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe ffe3 	bl	800454c <LL_ADC_IsEnabled>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d104      	bne.n	8005596 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe ffb3 	bl	80044fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005596:	f7fe fe2d 	bl	80041f4 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d914      	bls.n	80055ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d00d      	beq.n	80055ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b6:	f043 0210 	orr.w	r2, r3, #16
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c2:	f043 0201 	orr.w	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e007      	b.n	80055de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d1cf      	bne.n	800557c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	8000003f 	.word	0x8000003f
 80055ec:	50040300 	.word	0x50040300
 80055f0:	20000000 	.word	0x20000000
 80055f4:	053e2d63 	.word	0x053e2d63

080055f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f7fe ffb4 	bl	8004572 <LL_ADC_IsDisableOngoing>
 800560a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f7fe ff9b 	bl	800454c <LL_ADC_IsEnabled>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d047      	beq.n	80056ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d144      	bne.n	80056ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 030d 	and.w	r3, r3, #13
 800562c:	2b01      	cmp	r3, #1
 800562e:	d10c      	bne.n	800564a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f7fe ff75 	bl	8004524 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2203      	movs	r2, #3
 8005640:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005642:	f7fe fdd7 	bl	80041f4 <HAL_GetTick>
 8005646:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005648:	e029      	b.n	800569e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564e:	f043 0210 	orr.w	r2, r3, #16
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565a:	f043 0201 	orr.w	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e023      	b.n	80056ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005666:	f7fe fdc5 	bl	80041f4 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d914      	bls.n	800569e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00d      	beq.n	800569e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	f043 0210 	orr.w	r2, r3, #16
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005692:	f043 0201 	orr.w	r2, r3, #1
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e007      	b.n	80056ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1dc      	bne.n	8005666 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d14b      	bne.n	8005768 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d021      	beq.n	800572e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe fe15 	bl	800431e <LL_ADC_REG_IsTriggerSourceSWStart>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d032      	beq.n	8005760 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d12b      	bne.n	8005760 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d11f      	bne.n	8005760 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	f043 0201 	orr.w	r2, r3, #1
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	655a      	str	r2, [r3, #84]	; 0x54
 800572c:	e018      	b.n	8005760 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d111      	bne.n	8005760 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005740:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d105      	bne.n	8005760 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005758:	f043 0201 	orr.w	r2, r3, #1
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7fe fac1 	bl	8003ce8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005766:	e00e      	b.n	8005786 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7ff facd 	bl	8004d14 <HAL_ADC_ErrorCallback>
}
 800577a:	e004      	b.n	8005786 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4798      	blx	r3
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7fe fa93 	bl	8003cc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057a2:	bf00      	nop
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c8:	f043 0204 	orr.w	r2, r3, #4
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f7ff fa9f 	bl	8004d14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057d6:	bf00      	nop
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <LL_ADC_StartCalibration>:
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80057f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	609a      	str	r2, [r3, #8]
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <LL_ADC_IsCalibrationOnGoing>:
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005824:	d101      	bne.n	800582a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005842:	2300      	movs	r3, #0
 8005844:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_ADCEx_Calibration_Start+0x1c>
 8005850:	2302      	movs	r3, #2
 8005852:	e04d      	b.n	80058f0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff fecb 	bl	80055f8 <ADC_Disable>
 8005862:	4603      	mov	r3, r0
 8005864:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d136      	bne.n	80058da <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005870:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005874:	f023 0302 	bic.w	r3, r3, #2
 8005878:	f043 0202 	orr.w	r2, r3, #2
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff ffa9 	bl	80057de <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800588c:	e014      	b.n	80058b8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	3301      	adds	r3, #1
 8005892:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800589a:	d30d      	bcc.n	80058b8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a0:	f023 0312 	bic.w	r3, r3, #18
 80058a4:	f043 0210 	orr.w	r2, r3, #16
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e01b      	b.n	80058f0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff ffa7 	bl	8005810 <LL_ADC_IsCalibrationOnGoing>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e2      	bne.n	800588e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058cc:	f023 0303 	bic.w	r3, r3, #3
 80058d0:	f043 0201 	orr.w	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	655a      	str	r2, [r3, #84]	; 0x54
 80058d8:	e005      	b.n	80058e6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058de:	f043 0210 	orr.w	r2, r3, #16
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800596c:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <__NVIC_SetPriorityGrouping+0x44>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005978:	4013      	ands	r3, r2
 800597a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800598c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800598e:	4a04      	ldr	r2, [pc, #16]	; (80059a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	60d3      	str	r3, [r2, #12]
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	e000ed00 	.word	0xe000ed00

080059a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059a8:	4b04      	ldr	r3, [pc, #16]	; (80059bc <__NVIC_GetPriorityGrouping+0x18>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	0a1b      	lsrs	r3, r3, #8
 80059ae:	f003 0307 	and.w	r3, r3, #7
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	e000ed00 	.word	0xe000ed00

080059c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	db0b      	blt.n	80059ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	f003 021f 	and.w	r2, r3, #31
 80059d8:	4907      	ldr	r1, [pc, #28]	; (80059f8 <__NVIC_EnableIRQ+0x38>)
 80059da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	2001      	movs	r0, #1
 80059e2:	fa00 f202 	lsl.w	r2, r0, r2
 80059e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	e000e100 	.word	0xe000e100

080059fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	6039      	str	r1, [r7, #0]
 8005a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	db0a      	blt.n	8005a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	490c      	ldr	r1, [pc, #48]	; (8005a48 <__NVIC_SetPriority+0x4c>)
 8005a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a1a:	0112      	lsls	r2, r2, #4
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	440b      	add	r3, r1
 8005a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a24:	e00a      	b.n	8005a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	4908      	ldr	r1, [pc, #32]	; (8005a4c <__NVIC_SetPriority+0x50>)
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	3b04      	subs	r3, #4
 8005a34:	0112      	lsls	r2, r2, #4
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	440b      	add	r3, r1
 8005a3a:	761a      	strb	r2, [r3, #24]
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	e000e100 	.word	0xe000e100
 8005a4c:	e000ed00 	.word	0xe000ed00

08005a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b089      	sub	sp, #36	; 0x24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f1c3 0307 	rsb	r3, r3, #7
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	bf28      	it	cs
 8005a6e:	2304      	movcs	r3, #4
 8005a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3304      	adds	r3, #4
 8005a76:	2b06      	cmp	r3, #6
 8005a78:	d902      	bls.n	8005a80 <NVIC_EncodePriority+0x30>
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	3b03      	subs	r3, #3
 8005a7e:	e000      	b.n	8005a82 <NVIC_EncodePriority+0x32>
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a84:	f04f 32ff 	mov.w	r2, #4294967295
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	43da      	mvns	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	401a      	ands	r2, r3
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a98:	f04f 31ff 	mov.w	r1, #4294967295
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa2:	43d9      	mvns	r1, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aa8:	4313      	orrs	r3, r2
         );
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3724      	adds	r7, #36	; 0x24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ac8:	d301      	bcc.n	8005ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005aca:	2301      	movs	r3, #1
 8005acc:	e00f      	b.n	8005aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ace:	4a0a      	ldr	r2, [pc, #40]	; (8005af8 <SysTick_Config+0x40>)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ad6:	210f      	movs	r1, #15
 8005ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8005adc:	f7ff ff8e 	bl	80059fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ae0:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <SysTick_Config+0x40>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ae6:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <SysTick_Config+0x40>)
 8005ae8:	2207      	movs	r2, #7
 8005aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	e000e010 	.word	0xe000e010

08005afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff ff29 	bl	800595c <__NVIC_SetPriorityGrouping>
}
 8005b0a:	bf00      	nop
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b086      	sub	sp, #24
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	4603      	mov	r3, r0
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	607a      	str	r2, [r7, #4]
 8005b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b24:	f7ff ff3e 	bl	80059a4 <__NVIC_GetPriorityGrouping>
 8005b28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	6978      	ldr	r0, [r7, #20]
 8005b30:	f7ff ff8e 	bl	8005a50 <NVIC_EncodePriority>
 8005b34:	4602      	mov	r2, r0
 8005b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff ff5d 	bl	80059fc <__NVIC_SetPriority>
}
 8005b42:	bf00      	nop
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	4603      	mov	r3, r0
 8005b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff ff31 	bl	80059c0 <__NVIC_EnableIRQ>
}
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b082      	sub	sp, #8
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff ffa2 	bl	8005ab8 <SysTick_Config>
 8005b74:	4603      	mov	r3, r0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e098      	b.n	8005cc4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	4b4d      	ldr	r3, [pc, #308]	; (8005cd0 <HAL_DMA_Init+0x150>)
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d80f      	bhi.n	8005bbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	4b4b      	ldr	r3, [pc, #300]	; (8005cd4 <HAL_DMA_Init+0x154>)
 8005ba6:	4413      	add	r3, r2
 8005ba8:	4a4b      	ldr	r2, [pc, #300]	; (8005cd8 <HAL_DMA_Init+0x158>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	091b      	lsrs	r3, r3, #4
 8005bb0:	009a      	lsls	r2, r3, #2
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a48      	ldr	r2, [pc, #288]	; (8005cdc <HAL_DMA_Init+0x15c>)
 8005bba:	641a      	str	r2, [r3, #64]	; 0x40
 8005bbc:	e00e      	b.n	8005bdc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	4b46      	ldr	r3, [pc, #280]	; (8005ce0 <HAL_DMA_Init+0x160>)
 8005bc6:	4413      	add	r3, r2
 8005bc8:	4a43      	ldr	r2, [pc, #268]	; (8005cd8 <HAL_DMA_Init+0x158>)
 8005bca:	fba2 2303 	umull	r2, r3, r2, r3
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	009a      	lsls	r2, r3, #2
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a42      	ldr	r2, [pc, #264]	; (8005ce4 <HAL_DMA_Init+0x164>)
 8005bda:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c36:	d039      	beq.n	8005cac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	4a27      	ldr	r2, [pc, #156]	; (8005cdc <HAL_DMA_Init+0x15c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d11a      	bne.n	8005c78 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c42:	4b29      	ldr	r3, [pc, #164]	; (8005ce8 <HAL_DMA_Init+0x168>)
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	f003 031c 	and.w	r3, r3, #28
 8005c4e:	210f      	movs	r1, #15
 8005c50:	fa01 f303 	lsl.w	r3, r1, r3
 8005c54:	43db      	mvns	r3, r3
 8005c56:	4924      	ldr	r1, [pc, #144]	; (8005ce8 <HAL_DMA_Init+0x168>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c5c:	4b22      	ldr	r3, [pc, #136]	; (8005ce8 <HAL_DMA_Init+0x168>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6859      	ldr	r1, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c68:	f003 031c 	and.w	r3, r3, #28
 8005c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c70:	491d      	ldr	r1, [pc, #116]	; (8005ce8 <HAL_DMA_Init+0x168>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	600b      	str	r3, [r1, #0]
 8005c76:	e019      	b.n	8005cac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c78:	4b1c      	ldr	r3, [pc, #112]	; (8005cec <HAL_DMA_Init+0x16c>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c80:	f003 031c 	and.w	r3, r3, #28
 8005c84:	210f      	movs	r1, #15
 8005c86:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8a:	43db      	mvns	r3, r3
 8005c8c:	4917      	ldr	r1, [pc, #92]	; (8005cec <HAL_DMA_Init+0x16c>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c92:	4b16      	ldr	r3, [pc, #88]	; (8005cec <HAL_DMA_Init+0x16c>)
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6859      	ldr	r1, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9e:	f003 031c 	and.w	r3, r3, #28
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	4911      	ldr	r1, [pc, #68]	; (8005cec <HAL_DMA_Init+0x16c>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	40020407 	.word	0x40020407
 8005cd4:	bffdfff8 	.word	0xbffdfff8
 8005cd8:	cccccccd 	.word	0xcccccccd
 8005cdc:	40020000 	.word	0x40020000
 8005ce0:	bffdfbf8 	.word	0xbffdfbf8
 8005ce4:	40020400 	.word	0x40020400
 8005ce8:	400200a8 	.word	0x400200a8
 8005cec:	400204a8 	.word	0x400204a8

08005cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_DMA_Start_IT+0x20>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e04b      	b.n	8005da8 <HAL_DMA_Start_IT+0xb8>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d13a      	bne.n	8005d9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0201 	bic.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f95f 	bl	800600c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d008      	beq.n	8005d68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 020e 	orr.w	r2, r2, #14
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	e00f      	b.n	8005d88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0204 	bic.w	r2, r2, #4
 8005d76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 020a 	orr.w	r2, r2, #10
 8005d86:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	e005      	b.n	8005da6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005da2:	2302      	movs	r3, #2
 8005da4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d008      	beq.n	8005dda <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2204      	movs	r2, #4
 8005dcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e022      	b.n	8005e20 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 020e 	bic.w	r2, r2, #14
 8005de8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0201 	bic.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfe:	f003 021c 	and.w	r2, r3, #28
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	2101      	movs	r1, #1
 8005e08:	fa01 f202 	lsl.w	r2, r1, r2
 8005e0c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d005      	beq.n	8005e50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2204      	movs	r2, #4
 8005e48:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	73fb      	strb	r3, [r7, #15]
 8005e4e:	e029      	b.n	8005ea4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 020e 	bic.w	r2, r2, #14
 8005e5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0201 	bic.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e74:	f003 021c 	and.w	r2, r3, #28
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e82:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	4798      	blx	r3
    }
  }
  return status;
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eca:	f003 031c 	and.w	r3, r3, #28
 8005ece:	2204      	movs	r2, #4
 8005ed0:	409a      	lsls	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d026      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x7a>
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d021      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0320 	and.w	r3, r3, #32
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d107      	bne.n	8005f02 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0204 	bic.w	r2, r2, #4
 8005f00:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f06:	f003 021c 	and.w	r2, r3, #28
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	2104      	movs	r1, #4
 8005f10:	fa01 f202 	lsl.w	r2, r1, r2
 8005f14:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d071      	beq.n	8006002 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005f26:	e06c      	b.n	8006002 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2c:	f003 031c 	and.w	r3, r3, #28
 8005f30:	2202      	movs	r2, #2
 8005f32:	409a      	lsls	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d02e      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xec>
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d029      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10b      	bne.n	8005f6c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 020a 	bic.w	r2, r2, #10
 8005f62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f70:	f003 021c 	and.w	r2, r3, #28
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	2102      	movs	r1, #2
 8005f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f7e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d038      	beq.n	8006002 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005f98:	e033      	b.n	8006002 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9e:	f003 031c 	and.w	r3, r3, #28
 8005fa2:	2208      	movs	r2, #8
 8005fa4:	409a      	lsls	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d02a      	beq.n	8006004 <HAL_DMA_IRQHandler+0x156>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f003 0308 	and.w	r3, r3, #8
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d025      	beq.n	8006004 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 020e 	bic.w	r2, r2, #14
 8005fc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fcc:	f003 021c 	and.w	r2, r3, #28
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8005fda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006002:	bf00      	nop
 8006004:	bf00      	nop
}
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601e:	f003 021c 	and.w	r2, r3, #28
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	2101      	movs	r1, #1
 8006028:	fa01 f202 	lsl.w	r2, r1, r2
 800602c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2b10      	cmp	r3, #16
 800603c:	d108      	bne.n	8006050 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800604e:	e007      	b.n	8006060 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	60da      	str	r2, [r3, #12]
}
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800607a:	e148      	b.n	800630e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	2101      	movs	r1, #1
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	fa01 f303 	lsl.w	r3, r1, r3
 8006088:	4013      	ands	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 813a 	beq.w	8006308 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	2b01      	cmp	r3, #1
 800609e:	d005      	beq.n	80060ac <HAL_GPIO_Init+0x40>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f003 0303 	and.w	r3, r3, #3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d130      	bne.n	800610e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	2203      	movs	r2, #3
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	43db      	mvns	r3, r3
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4013      	ands	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060e2:	2201      	movs	r2, #1
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	43db      	mvns	r3, r3
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4013      	ands	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	091b      	lsrs	r3, r3, #4
 80060f8:	f003 0201 	and.w	r2, r3, #1
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	2b03      	cmp	r3, #3
 8006118:	d017      	beq.n	800614a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	2203      	movs	r2, #3
 8006126:	fa02 f303 	lsl.w	r3, r2, r3
 800612a:	43db      	mvns	r3, r3
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4013      	ands	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d123      	bne.n	800619e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	08da      	lsrs	r2, r3, #3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3208      	adds	r2, #8
 800615e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	220f      	movs	r2, #15
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	43db      	mvns	r3, r3
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4013      	ands	r3, r2
 8006178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	08da      	lsrs	r2, r3, #3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3208      	adds	r2, #8
 8006198:	6939      	ldr	r1, [r7, #16]
 800619a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	2203      	movs	r2, #3
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43db      	mvns	r3, r3
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4013      	ands	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f003 0203 	and.w	r2, r3, #3
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8094 	beq.w	8006308 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061e0:	4b52      	ldr	r3, [pc, #328]	; (800632c <HAL_GPIO_Init+0x2c0>)
 80061e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061e4:	4a51      	ldr	r2, [pc, #324]	; (800632c <HAL_GPIO_Init+0x2c0>)
 80061e6:	f043 0301 	orr.w	r3, r3, #1
 80061ea:	6613      	str	r3, [r2, #96]	; 0x60
 80061ec:	4b4f      	ldr	r3, [pc, #316]	; (800632c <HAL_GPIO_Init+0x2c0>)
 80061ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80061f8:	4a4d      	ldr	r2, [pc, #308]	; (8006330 <HAL_GPIO_Init+0x2c4>)
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	089b      	lsrs	r3, r3, #2
 80061fe:	3302      	adds	r3, #2
 8006200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f003 0303 	and.w	r3, r3, #3
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	220f      	movs	r2, #15
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	43db      	mvns	r3, r3
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4013      	ands	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006222:	d00d      	beq.n	8006240 <HAL_GPIO_Init+0x1d4>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a43      	ldr	r2, [pc, #268]	; (8006334 <HAL_GPIO_Init+0x2c8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d007      	beq.n	800623c <HAL_GPIO_Init+0x1d0>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a42      	ldr	r2, [pc, #264]	; (8006338 <HAL_GPIO_Init+0x2cc>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d101      	bne.n	8006238 <HAL_GPIO_Init+0x1cc>
 8006234:	2302      	movs	r3, #2
 8006236:	e004      	b.n	8006242 <HAL_GPIO_Init+0x1d6>
 8006238:	2307      	movs	r3, #7
 800623a:	e002      	b.n	8006242 <HAL_GPIO_Init+0x1d6>
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <HAL_GPIO_Init+0x1d6>
 8006240:	2300      	movs	r3, #0
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	f002 0203 	and.w	r2, r2, #3
 8006248:	0092      	lsls	r2, r2, #2
 800624a:	4093      	lsls	r3, r2
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006252:	4937      	ldr	r1, [pc, #220]	; (8006330 <HAL_GPIO_Init+0x2c4>)
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	089b      	lsrs	r3, r3, #2
 8006258:	3302      	adds	r3, #2
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006260:	4b36      	ldr	r3, [pc, #216]	; (800633c <HAL_GPIO_Init+0x2d0>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	43db      	mvns	r3, r3
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4013      	ands	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006284:	4a2d      	ldr	r2, [pc, #180]	; (800633c <HAL_GPIO_Init+0x2d0>)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800628a:	4b2c      	ldr	r3, [pc, #176]	; (800633c <HAL_GPIO_Init+0x2d0>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	43db      	mvns	r3, r3
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4013      	ands	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062ae:	4a23      	ldr	r2, [pc, #140]	; (800633c <HAL_GPIO_Init+0x2d0>)
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80062b4:	4b21      	ldr	r3, [pc, #132]	; (800633c <HAL_GPIO_Init+0x2d0>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	43db      	mvns	r3, r3
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4013      	ands	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80062d8:	4a18      	ldr	r2, [pc, #96]	; (800633c <HAL_GPIO_Init+0x2d0>)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80062de:	4b17      	ldr	r3, [pc, #92]	; (800633c <HAL_GPIO_Init+0x2d0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	43db      	mvns	r3, r3
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	4013      	ands	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4313      	orrs	r3, r2
 8006300:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006302:	4a0e      	ldr	r2, [pc, #56]	; (800633c <HAL_GPIO_Init+0x2d0>)
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	3301      	adds	r3, #1
 800630c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	fa22 f303 	lsr.w	r3, r2, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	f47f aeaf 	bne.w	800607c <HAL_GPIO_Init+0x10>
  }
}
 800631e:	bf00      	nop
 8006320:	bf00      	nop
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	40021000 	.word	0x40021000
 8006330:	40010000 	.word	0x40010000
 8006334:	48000400 	.word	0x48000400
 8006338:	48000800 	.word	0x48000800
 800633c:	40010400 	.word	0x40010400

08006340 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006344:	4b04      	ldr	r3, [pc, #16]	; (8006358 <HAL_PWREx_GetVoltageRange+0x18>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800634c:	4618      	mov	r0, r3
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40007000 	.word	0x40007000

0800635c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800636a:	d130      	bne.n	80063ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800636c:	4b23      	ldr	r3, [pc, #140]	; (80063fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006378:	d038      	beq.n	80063ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800637a:	4b20      	ldr	r3, [pc, #128]	; (80063fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006382:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006384:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006388:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800638a:	4b1d      	ldr	r3, [pc, #116]	; (8006400 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2232      	movs	r2, #50	; 0x32
 8006390:	fb02 f303 	mul.w	r3, r2, r3
 8006394:	4a1b      	ldr	r2, [pc, #108]	; (8006404 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	0c9b      	lsrs	r3, r3, #18
 800639c:	3301      	adds	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063a0:	e002      	b.n	80063a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063a8:	4b14      	ldr	r3, [pc, #80]	; (80063fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b4:	d102      	bne.n	80063bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1f2      	bne.n	80063a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063bc:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063c8:	d110      	bne.n	80063ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e00f      	b.n	80063ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80063ce:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063da:	d007      	beq.n	80063ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80063dc:	4b07      	ldr	r3, [pc, #28]	; (80063fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063e4:	4a05      	ldr	r2, [pc, #20]	; (80063fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40007000 	.word	0x40007000
 8006400:	20000000 	.word	0x20000000
 8006404:	431bde83 	.word	0x431bde83

08006408 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d102      	bne.n	800641c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	f000 bc02 	b.w	8006c20 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800641c:	4b96      	ldr	r3, [pc, #600]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 030c 	and.w	r3, r3, #12
 8006424:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006426:	4b94      	ldr	r3, [pc, #592]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0310 	and.w	r3, r3, #16
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 80e4 	beq.w	8006606 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d007      	beq.n	8006454 <HAL_RCC_OscConfig+0x4c>
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2b0c      	cmp	r3, #12
 8006448:	f040 808b 	bne.w	8006562 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b01      	cmp	r3, #1
 8006450:	f040 8087 	bne.w	8006562 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006454:	4b88      	ldr	r3, [pc, #544]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <HAL_RCC_OscConfig+0x64>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e3d9      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1a      	ldr	r2, [r3, #32]
 8006470:	4b81      	ldr	r3, [pc, #516]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	2b00      	cmp	r3, #0
 800647a:	d004      	beq.n	8006486 <HAL_RCC_OscConfig+0x7e>
 800647c:	4b7e      	ldr	r3, [pc, #504]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006484:	e005      	b.n	8006492 <HAL_RCC_OscConfig+0x8a>
 8006486:	4b7c      	ldr	r3, [pc, #496]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 8006488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006492:	4293      	cmp	r3, r2
 8006494:	d223      	bcs.n	80064de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fd8c 	bl	8006fb8 <RCC_SetFlashLatencyFromMSIRange>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e3ba      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064aa:	4b73      	ldr	r3, [pc, #460]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a72      	ldr	r2, [pc, #456]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80064b0:	f043 0308 	orr.w	r3, r3, #8
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	4b70      	ldr	r3, [pc, #448]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	496d      	ldr	r1, [pc, #436]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064c8:	4b6b      	ldr	r3, [pc, #428]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	021b      	lsls	r3, r3, #8
 80064d6:	4968      	ldr	r1, [pc, #416]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	604b      	str	r3, [r1, #4]
 80064dc:	e025      	b.n	800652a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064de:	4b66      	ldr	r3, [pc, #408]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a65      	ldr	r2, [pc, #404]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80064e4:	f043 0308 	orr.w	r3, r3, #8
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	4b63      	ldr	r3, [pc, #396]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	4960      	ldr	r1, [pc, #384]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064fc:	4b5e      	ldr	r3, [pc, #376]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	021b      	lsls	r3, r3, #8
 800650a:	495b      	ldr	r1, [pc, #364]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 800650c:	4313      	orrs	r3, r2
 800650e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fd4c 	bl	8006fb8 <RCC_SetFlashLatencyFromMSIRange>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e37a      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800652a:	f000 fc81 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 800652e:	4602      	mov	r2, r0
 8006530:	4b51      	ldr	r3, [pc, #324]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	091b      	lsrs	r3, r3, #4
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	4950      	ldr	r1, [pc, #320]	; (800667c <HAL_RCC_OscConfig+0x274>)
 800653c:	5ccb      	ldrb	r3, [r1, r3]
 800653e:	f003 031f 	and.w	r3, r3, #31
 8006542:	fa22 f303 	lsr.w	r3, r2, r3
 8006546:	4a4e      	ldr	r2, [pc, #312]	; (8006680 <HAL_RCC_OscConfig+0x278>)
 8006548:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800654a:	4b4e      	ldr	r3, [pc, #312]	; (8006684 <HAL_RCC_OscConfig+0x27c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f7fd fe00 	bl	8004154 <HAL_InitTick>
 8006554:	4603      	mov	r3, r0
 8006556:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d052      	beq.n	8006604 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	e35e      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d032      	beq.n	80065d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800656a:	4b43      	ldr	r3, [pc, #268]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a42      	ldr	r2, [pc, #264]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006576:	f7fd fe3d 	bl	80041f4 <HAL_GetTick>
 800657a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800657c:	e008      	b.n	8006590 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800657e:	f7fd fe39 	bl	80041f4 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e347      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006590:	4b39      	ldr	r3, [pc, #228]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0f0      	beq.n	800657e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800659c:	4b36      	ldr	r3, [pc, #216]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a35      	ldr	r2, [pc, #212]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80065a2:	f043 0308 	orr.w	r3, r3, #8
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	4b33      	ldr	r3, [pc, #204]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	4930      	ldr	r1, [pc, #192]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065ba:	4b2f      	ldr	r3, [pc, #188]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	492b      	ldr	r1, [pc, #172]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	604b      	str	r3, [r1, #4]
 80065ce:	e01a      	b.n	8006606 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80065d0:	4b29      	ldr	r3, [pc, #164]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a28      	ldr	r2, [pc, #160]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065dc:	f7fd fe0a 	bl	80041f4 <HAL_GetTick>
 80065e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065e4:	f7fd fe06 	bl	80041f4 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e314      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065f6:	4b20      	ldr	r3, [pc, #128]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f0      	bne.n	80065e4 <HAL_RCC_OscConfig+0x1dc>
 8006602:	e000      	b.n	8006606 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006604:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d073      	beq.n	80066fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	2b08      	cmp	r3, #8
 8006616:	d005      	beq.n	8006624 <HAL_RCC_OscConfig+0x21c>
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	2b0c      	cmp	r3, #12
 800661c:	d10e      	bne.n	800663c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b03      	cmp	r3, #3
 8006622:	d10b      	bne.n	800663c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006624:	4b14      	ldr	r3, [pc, #80]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d063      	beq.n	80066f8 <HAL_RCC_OscConfig+0x2f0>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d15f      	bne.n	80066f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e2f1      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006644:	d106      	bne.n	8006654 <HAL_RCC_OscConfig+0x24c>
 8006646:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a0b      	ldr	r2, [pc, #44]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 800664c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006650:	6013      	str	r3, [r2, #0]
 8006652:	e025      	b.n	80066a0 <HAL_RCC_OscConfig+0x298>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800665c:	d114      	bne.n	8006688 <HAL_RCC_OscConfig+0x280>
 800665e:	4b06      	ldr	r3, [pc, #24]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a05      	ldr	r2, [pc, #20]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 8006664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	4b03      	ldr	r3, [pc, #12]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a02      	ldr	r2, [pc, #8]	; (8006678 <HAL_RCC_OscConfig+0x270>)
 8006670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	e013      	b.n	80066a0 <HAL_RCC_OscConfig+0x298>
 8006678:	40021000 	.word	0x40021000
 800667c:	0801d5e4 	.word	0x0801d5e4
 8006680:	20000000 	.word	0x20000000
 8006684:	20000004 	.word	0x20000004
 8006688:	4ba0      	ldr	r3, [pc, #640]	; (800690c <HAL_RCC_OscConfig+0x504>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a9f      	ldr	r2, [pc, #636]	; (800690c <HAL_RCC_OscConfig+0x504>)
 800668e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	4b9d      	ldr	r3, [pc, #628]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a9c      	ldr	r2, [pc, #624]	; (800690c <HAL_RCC_OscConfig+0x504>)
 800669a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800669e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d013      	beq.n	80066d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a8:	f7fd fda4 	bl	80041f4 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066b0:	f7fd fda0 	bl	80041f4 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b64      	cmp	r3, #100	; 0x64
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e2ae      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066c2:	4b92      	ldr	r3, [pc, #584]	; (800690c <HAL_RCC_OscConfig+0x504>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0f0      	beq.n	80066b0 <HAL_RCC_OscConfig+0x2a8>
 80066ce:	e014      	b.n	80066fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d0:	f7fd fd90 	bl	80041f4 <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066d6:	e008      	b.n	80066ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066d8:	f7fd fd8c 	bl	80041f4 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b64      	cmp	r3, #100	; 0x64
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e29a      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066ea:	4b88      	ldr	r3, [pc, #544]	; (800690c <HAL_RCC_OscConfig+0x504>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1f0      	bne.n	80066d8 <HAL_RCC_OscConfig+0x2d0>
 80066f6:	e000      	b.n	80066fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d060      	beq.n	80067c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	2b04      	cmp	r3, #4
 800670a:	d005      	beq.n	8006718 <HAL_RCC_OscConfig+0x310>
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b0c      	cmp	r3, #12
 8006710:	d119      	bne.n	8006746 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2b02      	cmp	r3, #2
 8006716:	d116      	bne.n	8006746 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006718:	4b7c      	ldr	r3, [pc, #496]	; (800690c <HAL_RCC_OscConfig+0x504>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <HAL_RCC_OscConfig+0x328>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e277      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006730:	4b76      	ldr	r3, [pc, #472]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	061b      	lsls	r3, r3, #24
 800673e:	4973      	ldr	r1, [pc, #460]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006740:	4313      	orrs	r3, r2
 8006742:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006744:	e040      	b.n	80067c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d023      	beq.n	8006796 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800674e:	4b6f      	ldr	r3, [pc, #444]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a6e      	ldr	r2, [pc, #440]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675a:	f7fd fd4b 	bl	80041f4 <HAL_GetTick>
 800675e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006760:	e008      	b.n	8006774 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006762:	f7fd fd47 	bl	80041f4 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d901      	bls.n	8006774 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e255      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006774:	4b65      	ldr	r3, [pc, #404]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0f0      	beq.n	8006762 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006780:	4b62      	ldr	r3, [pc, #392]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	061b      	lsls	r3, r3, #24
 800678e:	495f      	ldr	r1, [pc, #380]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006790:	4313      	orrs	r3, r2
 8006792:	604b      	str	r3, [r1, #4]
 8006794:	e018      	b.n	80067c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006796:	4b5d      	ldr	r3, [pc, #372]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a5c      	ldr	r2, [pc, #368]	; (800690c <HAL_RCC_OscConfig+0x504>)
 800679c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a2:	f7fd fd27 	bl	80041f4 <HAL_GetTick>
 80067a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067aa:	f7fd fd23 	bl	80041f4 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e231      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067bc:	4b53      	ldr	r3, [pc, #332]	; (800690c <HAL_RCC_OscConfig+0x504>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1f0      	bne.n	80067aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d03c      	beq.n	800684e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01c      	beq.n	8006816 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067dc:	4b4b      	ldr	r3, [pc, #300]	; (800690c <HAL_RCC_OscConfig+0x504>)
 80067de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067e2:	4a4a      	ldr	r2, [pc, #296]	; (800690c <HAL_RCC_OscConfig+0x504>)
 80067e4:	f043 0301 	orr.w	r3, r3, #1
 80067e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ec:	f7fd fd02 	bl	80041f4 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067f4:	f7fd fcfe 	bl	80041f4 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e20c      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006806:	4b41      	ldr	r3, [pc, #260]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0ef      	beq.n	80067f4 <HAL_RCC_OscConfig+0x3ec>
 8006814:	e01b      	b.n	800684e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006816:	4b3d      	ldr	r3, [pc, #244]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800681c:	4a3b      	ldr	r2, [pc, #236]	; (800690c <HAL_RCC_OscConfig+0x504>)
 800681e:	f023 0301 	bic.w	r3, r3, #1
 8006822:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006826:	f7fd fce5 	bl	80041f4 <HAL_GetTick>
 800682a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800682c:	e008      	b.n	8006840 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800682e:	f7fd fce1 	bl	80041f4 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d901      	bls.n	8006840 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e1ef      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006840:	4b32      	ldr	r3, [pc, #200]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1ef      	bne.n	800682e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0304 	and.w	r3, r3, #4
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 80a6 	beq.w	80069a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800685c:	2300      	movs	r3, #0
 800685e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006860:	4b2a      	ldr	r3, [pc, #168]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10d      	bne.n	8006888 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800686c:	4b27      	ldr	r3, [pc, #156]	; (800690c <HAL_RCC_OscConfig+0x504>)
 800686e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006870:	4a26      	ldr	r2, [pc, #152]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006876:	6593      	str	r3, [r2, #88]	; 0x58
 8006878:	4b24      	ldr	r3, [pc, #144]	; (800690c <HAL_RCC_OscConfig+0x504>)
 800687a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006880:	60bb      	str	r3, [r7, #8]
 8006882:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006884:	2301      	movs	r3, #1
 8006886:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006888:	4b21      	ldr	r3, [pc, #132]	; (8006910 <HAL_RCC_OscConfig+0x508>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006890:	2b00      	cmp	r3, #0
 8006892:	d118      	bne.n	80068c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006894:	4b1e      	ldr	r3, [pc, #120]	; (8006910 <HAL_RCC_OscConfig+0x508>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a1d      	ldr	r2, [pc, #116]	; (8006910 <HAL_RCC_OscConfig+0x508>)
 800689a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800689e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068a0:	f7fd fca8 	bl	80041f4 <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a8:	f7fd fca4 	bl	80041f4 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e1b2      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ba:	4b15      	ldr	r3, [pc, #84]	; (8006910 <HAL_RCC_OscConfig+0x508>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0f0      	beq.n	80068a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d108      	bne.n	80068e0 <HAL_RCC_OscConfig+0x4d8>
 80068ce:	4b0f      	ldr	r3, [pc, #60]	; (800690c <HAL_RCC_OscConfig+0x504>)
 80068d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d4:	4a0d      	ldr	r2, [pc, #52]	; (800690c <HAL_RCC_OscConfig+0x504>)
 80068d6:	f043 0301 	orr.w	r3, r3, #1
 80068da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068de:	e029      	b.n	8006934 <HAL_RCC_OscConfig+0x52c>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b05      	cmp	r3, #5
 80068e6:	d115      	bne.n	8006914 <HAL_RCC_OscConfig+0x50c>
 80068e8:	4b08      	ldr	r3, [pc, #32]	; (800690c <HAL_RCC_OscConfig+0x504>)
 80068ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ee:	4a07      	ldr	r2, [pc, #28]	; (800690c <HAL_RCC_OscConfig+0x504>)
 80068f0:	f043 0304 	orr.w	r3, r3, #4
 80068f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068f8:	4b04      	ldr	r3, [pc, #16]	; (800690c <HAL_RCC_OscConfig+0x504>)
 80068fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fe:	4a03      	ldr	r2, [pc, #12]	; (800690c <HAL_RCC_OscConfig+0x504>)
 8006900:	f043 0301 	orr.w	r3, r3, #1
 8006904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006908:	e014      	b.n	8006934 <HAL_RCC_OscConfig+0x52c>
 800690a:	bf00      	nop
 800690c:	40021000 	.word	0x40021000
 8006910:	40007000 	.word	0x40007000
 8006914:	4b9a      	ldr	r3, [pc, #616]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691a:	4a99      	ldr	r2, [pc, #612]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 800691c:	f023 0301 	bic.w	r3, r3, #1
 8006920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006924:	4b96      	ldr	r3, [pc, #600]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692a:	4a95      	ldr	r2, [pc, #596]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 800692c:	f023 0304 	bic.w	r3, r3, #4
 8006930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d016      	beq.n	800696a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800693c:	f7fd fc5a 	bl	80041f4 <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006942:	e00a      	b.n	800695a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006944:	f7fd fc56 	bl	80041f4 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006952:	4293      	cmp	r3, r2
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e162      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800695a:	4b89      	ldr	r3, [pc, #548]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 800695c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0ed      	beq.n	8006944 <HAL_RCC_OscConfig+0x53c>
 8006968:	e015      	b.n	8006996 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696a:	f7fd fc43 	bl	80041f4 <HAL_GetTick>
 800696e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006970:	e00a      	b.n	8006988 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006972:	f7fd fc3f 	bl	80041f4 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006980:	4293      	cmp	r3, r2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e14b      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006988:	4b7d      	ldr	r3, [pc, #500]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 800698a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1ed      	bne.n	8006972 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006996:	7ffb      	ldrb	r3, [r7, #31]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d105      	bne.n	80069a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800699c:	4b78      	ldr	r3, [pc, #480]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 800699e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a0:	4a77      	ldr	r2, [pc, #476]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 80069a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d03c      	beq.n	8006a2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01c      	beq.n	80069f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069bc:	4b70      	ldr	r3, [pc, #448]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 80069be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069c2:	4a6f      	ldr	r2, [pc, #444]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 80069c4:	f043 0301 	orr.w	r3, r3, #1
 80069c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069cc:	f7fd fc12 	bl	80041f4 <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069d4:	f7fd fc0e 	bl	80041f4 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e11c      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069e6:	4b66      	ldr	r3, [pc, #408]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 80069e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0ef      	beq.n	80069d4 <HAL_RCC_OscConfig+0x5cc>
 80069f4:	e01b      	b.n	8006a2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069f6:	4b62      	ldr	r3, [pc, #392]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 80069f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069fc:	4a60      	ldr	r2, [pc, #384]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 80069fe:	f023 0301 	bic.w	r3, r3, #1
 8006a02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a06:	f7fd fbf5 	bl	80041f4 <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a0e:	f7fd fbf1 	bl	80041f4 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e0ff      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a20:	4b57      	ldr	r3, [pc, #348]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006a22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1ef      	bne.n	8006a0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 80f3 	beq.w	8006c1e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	f040 80c9 	bne.w	8006bd4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a42:	4b4f      	ldr	r3, [pc, #316]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f003 0203 	and.w	r2, r3, #3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d12c      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a60:	3b01      	subs	r3, #1
 8006a62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d123      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d11b      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d113      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a92:	085b      	lsrs	r3, r3, #1
 8006a94:	3b01      	subs	r3, #1
 8006a96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d109      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	085b      	lsrs	r3, r3, #1
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d06b      	beq.n	8006b88 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	2b0c      	cmp	r3, #12
 8006ab4:	d062      	beq.n	8006b7c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006ab6:	4b32      	ldr	r3, [pc, #200]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e0ac      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006ac6:	4b2e      	ldr	r3, [pc, #184]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a2d      	ldr	r2, [pc, #180]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006acc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ad0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ad2:	f7fd fb8f 	bl	80041f4 <HAL_GetTick>
 8006ad6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ad8:	e008      	b.n	8006aec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ada:	f7fd fb8b 	bl	80041f4 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d901      	bls.n	8006aec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e099      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aec:	4b24      	ldr	r3, [pc, #144]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1f0      	bne.n	8006ada <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006af8:	4b21      	ldr	r3, [pc, #132]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	4b21      	ldr	r3, [pc, #132]	; (8006b84 <HAL_RCC_OscConfig+0x77c>)
 8006afe:	4013      	ands	r3, r2
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b08:	3a01      	subs	r2, #1
 8006b0a:	0112      	lsls	r2, r2, #4
 8006b0c:	4311      	orrs	r1, r2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b12:	0212      	lsls	r2, r2, #8
 8006b14:	4311      	orrs	r1, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b1a:	0852      	lsrs	r2, r2, #1
 8006b1c:	3a01      	subs	r2, #1
 8006b1e:	0552      	lsls	r2, r2, #21
 8006b20:	4311      	orrs	r1, r2
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b26:	0852      	lsrs	r2, r2, #1
 8006b28:	3a01      	subs	r2, #1
 8006b2a:	0652      	lsls	r2, r2, #25
 8006b2c:	4311      	orrs	r1, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b32:	06d2      	lsls	r2, r2, #27
 8006b34:	430a      	orrs	r2, r1
 8006b36:	4912      	ldr	r1, [pc, #72]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b3c:	4b10      	ldr	r3, [pc, #64]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a0f      	ldr	r2, [pc, #60]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b48:	4b0d      	ldr	r3, [pc, #52]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	4a0c      	ldr	r2, [pc, #48]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b54:	f7fd fb4e 	bl	80041f4 <HAL_GetTick>
 8006b58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b5c:	f7fd fb4a 	bl	80041f4 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e058      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b6e:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <HAL_RCC_OscConfig+0x778>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0f0      	beq.n	8006b5c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b7a:	e050      	b.n	8006c1e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e04f      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
 8006b80:	40021000 	.word	0x40021000
 8006b84:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b88:	4b27      	ldr	r3, [pc, #156]	; (8006c28 <HAL_RCC_OscConfig+0x820>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d144      	bne.n	8006c1e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b94:	4b24      	ldr	r3, [pc, #144]	; (8006c28 <HAL_RCC_OscConfig+0x820>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a23      	ldr	r2, [pc, #140]	; (8006c28 <HAL_RCC_OscConfig+0x820>)
 8006b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ba0:	4b21      	ldr	r3, [pc, #132]	; (8006c28 <HAL_RCC_OscConfig+0x820>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	4a20      	ldr	r2, [pc, #128]	; (8006c28 <HAL_RCC_OscConfig+0x820>)
 8006ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006baa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bac:	f7fd fb22 	bl	80041f4 <HAL_GetTick>
 8006bb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb4:	f7fd fb1e 	bl	80041f4 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e02c      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc6:	4b18      	ldr	r3, [pc, #96]	; (8006c28 <HAL_RCC_OscConfig+0x820>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0f0      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x7ac>
 8006bd2:	e024      	b.n	8006c1e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	2b0c      	cmp	r3, #12
 8006bd8:	d01f      	beq.n	8006c1a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bda:	4b13      	ldr	r3, [pc, #76]	; (8006c28 <HAL_RCC_OscConfig+0x820>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a12      	ldr	r2, [pc, #72]	; (8006c28 <HAL_RCC_OscConfig+0x820>)
 8006be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be6:	f7fd fb05 	bl	80041f4 <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bec:	e008      	b.n	8006c00 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bee:	f7fd fb01 	bl	80041f4 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e00f      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c00:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <HAL_RCC_OscConfig+0x820>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1f0      	bne.n	8006bee <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006c0c:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <HAL_RCC_OscConfig+0x820>)
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	4905      	ldr	r1, [pc, #20]	; (8006c28 <HAL_RCC_OscConfig+0x820>)
 8006c12:	4b06      	ldr	r3, [pc, #24]	; (8006c2c <HAL_RCC_OscConfig+0x824>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	60cb      	str	r3, [r1, #12]
 8006c18:	e001      	b.n	8006c1e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	40021000 	.word	0x40021000
 8006c2c:	feeefffc 	.word	0xfeeefffc

08006c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0e7      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c44:	4b75      	ldr	r3, [pc, #468]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d910      	bls.n	8006c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c52:	4b72      	ldr	r3, [pc, #456]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f023 0207 	bic.w	r2, r3, #7
 8006c5a:	4970      	ldr	r1, [pc, #448]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c62:	4b6e      	ldr	r3, [pc, #440]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e0cf      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d010      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	4b66      	ldr	r3, [pc, #408]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d908      	bls.n	8006ca2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c90:	4b63      	ldr	r3, [pc, #396]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	4960      	ldr	r1, [pc, #384]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d04c      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d107      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cb6:	4b5a      	ldr	r3, [pc, #360]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d121      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e0a6      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d107      	bne.n	8006cde <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cce:	4b54      	ldr	r3, [pc, #336]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d115      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e09a      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d107      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ce6:	4b4e      	ldr	r3, [pc, #312]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d109      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e08e      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cf6:	4b4a      	ldr	r3, [pc, #296]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e086      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d06:	4b46      	ldr	r3, [pc, #280]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f023 0203 	bic.w	r2, r3, #3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	4943      	ldr	r1, [pc, #268]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d18:	f7fd fa6c 	bl	80041f4 <HAL_GetTick>
 8006d1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d1e:	e00a      	b.n	8006d36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d20:	f7fd fa68 	bl	80041f4 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e06e      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d36:	4b3a      	ldr	r3, [pc, #232]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 020c 	and.w	r2, r3, #12
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d1eb      	bne.n	8006d20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d010      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	4b31      	ldr	r3, [pc, #196]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d208      	bcs.n	8006d76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d64:	4b2e      	ldr	r3, [pc, #184]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	492b      	ldr	r1, [pc, #172]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d76:	4b29      	ldr	r3, [pc, #164]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d210      	bcs.n	8006da6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d84:	4b25      	ldr	r3, [pc, #148]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f023 0207 	bic.w	r2, r3, #7
 8006d8c:	4923      	ldr	r1, [pc, #140]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d94:	4b21      	ldr	r3, [pc, #132]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d001      	beq.n	8006da6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e036      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d008      	beq.n	8006dc4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006db2:	4b1b      	ldr	r3, [pc, #108]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	4918      	ldr	r1, [pc, #96]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d009      	beq.n	8006de4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dd0:	4b13      	ldr	r3, [pc, #76]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	4910      	ldr	r1, [pc, #64]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006de4:	f000 f824 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 8006de8:	4602      	mov	r2, r0
 8006dea:	4b0d      	ldr	r3, [pc, #52]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	091b      	lsrs	r3, r3, #4
 8006df0:	f003 030f 	and.w	r3, r3, #15
 8006df4:	490b      	ldr	r1, [pc, #44]	; (8006e24 <HAL_RCC_ClockConfig+0x1f4>)
 8006df6:	5ccb      	ldrb	r3, [r1, r3]
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006e00:	4a09      	ldr	r2, [pc, #36]	; (8006e28 <HAL_RCC_ClockConfig+0x1f8>)
 8006e02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e04:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <HAL_RCC_ClockConfig+0x1fc>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fd f9a3 	bl	8004154 <HAL_InitTick>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e12:	7afb      	ldrb	r3, [r7, #11]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40022000 	.word	0x40022000
 8006e20:	40021000 	.word	0x40021000
 8006e24:	0801d5e4 	.word	0x0801d5e4
 8006e28:	20000000 	.word	0x20000000
 8006e2c:	20000004 	.word	0x20000004

08006e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b089      	sub	sp, #36	; 0x24
 8006e34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e3e:	4b3e      	ldr	r3, [pc, #248]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 030c 	and.w	r3, r3, #12
 8006e46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e48:	4b3b      	ldr	r3, [pc, #236]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f003 0303 	and.w	r3, r3, #3
 8006e50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <HAL_RCC_GetSysClockFreq+0x34>
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b0c      	cmp	r3, #12
 8006e5c:	d121      	bne.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d11e      	bne.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e64:	4b34      	ldr	r3, [pc, #208]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0308 	and.w	r3, r3, #8
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d107      	bne.n	8006e80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e70:	4b31      	ldr	r3, [pc, #196]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e76:	0a1b      	lsrs	r3, r3, #8
 8006e78:	f003 030f 	and.w	r3, r3, #15
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	e005      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e80:	4b2d      	ldr	r3, [pc, #180]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	091b      	lsrs	r3, r3, #4
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e8c:	4a2b      	ldr	r2, [pc, #172]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10d      	bne.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ea0:	e00a      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	d102      	bne.n	8006eae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ea8:	4b25      	ldr	r3, [pc, #148]	; (8006f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	e004      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d101      	bne.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006eb4:	4b23      	ldr	r3, [pc, #140]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x114>)
 8006eb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b0c      	cmp	r3, #12
 8006ebc:	d134      	bne.n	8006f28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ebe:	4b1e      	ldr	r3, [pc, #120]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d003      	beq.n	8006ed6 <HAL_RCC_GetSysClockFreq+0xa6>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d003      	beq.n	8006edc <HAL_RCC_GetSysClockFreq+0xac>
 8006ed4:	e005      	b.n	8006ee2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ed6:	4b1a      	ldr	r3, [pc, #104]	; (8006f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ed8:	617b      	str	r3, [r7, #20]
      break;
 8006eda:	e005      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006edc:	4b19      	ldr	r3, [pc, #100]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x114>)
 8006ede:	617b      	str	r3, [r7, #20]
      break;
 8006ee0:	e002      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	617b      	str	r3, [r7, #20]
      break;
 8006ee6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ee8:	4b13      	ldr	r3, [pc, #76]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	091b      	lsrs	r3, r3, #4
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006ef6:	4b10      	ldr	r3, [pc, #64]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	0a1b      	lsrs	r3, r3, #8
 8006efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	fb03 f202 	mul.w	r2, r3, r2
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	0e5b      	lsrs	r3, r3, #25
 8006f14:	f003 0303 	and.w	r3, r3, #3
 8006f18:	3301      	adds	r3, #1
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f28:	69bb      	ldr	r3, [r7, #24]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3724      	adds	r7, #36	; 0x24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	0801d5fc 	.word	0x0801d5fc
 8006f40:	00f42400 	.word	0x00f42400
 8006f44:	007a1200 	.word	0x007a1200

08006f48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f4c:	4b03      	ldr	r3, [pc, #12]	; (8006f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	20000000 	.word	0x20000000

08006f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f64:	f7ff fff0 	bl	8006f48 <HAL_RCC_GetHCLKFreq>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	0a1b      	lsrs	r3, r3, #8
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	4904      	ldr	r1, [pc, #16]	; (8006f88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f76:	5ccb      	ldrb	r3, [r1, r3]
 8006f78:	f003 031f 	and.w	r3, r3, #31
 8006f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40021000 	.word	0x40021000
 8006f88:	0801d5f4 	.word	0x0801d5f4

08006f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f90:	f7ff ffda 	bl	8006f48 <HAL_RCC_GetHCLKFreq>
 8006f94:	4602      	mov	r2, r0
 8006f96:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	0adb      	lsrs	r3, r3, #11
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	4904      	ldr	r1, [pc, #16]	; (8006fb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fa2:	5ccb      	ldrb	r3, [r1, r3]
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	0801d5f4 	.word	0x0801d5f4

08006fb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006fc4:	4b2a      	ldr	r3, [pc, #168]	; (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006fd0:	f7ff f9b6 	bl	8006340 <HAL_PWREx_GetVoltageRange>
 8006fd4:	6178      	str	r0, [r7, #20]
 8006fd6:	e014      	b.n	8007002 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fd8:	4b25      	ldr	r3, [pc, #148]	; (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fdc:	4a24      	ldr	r2, [pc, #144]	; (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8006fe4:	4b22      	ldr	r3, [pc, #136]	; (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006ff0:	f7ff f9a6 	bl	8006340 <HAL_PWREx_GetVoltageRange>
 8006ff4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006ff6:	4b1e      	ldr	r3, [pc, #120]	; (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffa:	4a1d      	ldr	r2, [pc, #116]	; (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007000:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007008:	d10b      	bne.n	8007022 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b80      	cmp	r3, #128	; 0x80
 800700e:	d919      	bls.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2ba0      	cmp	r3, #160	; 0xa0
 8007014:	d902      	bls.n	800701c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007016:	2302      	movs	r3, #2
 8007018:	613b      	str	r3, [r7, #16]
 800701a:	e013      	b.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800701c:	2301      	movs	r3, #1
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	e010      	b.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b80      	cmp	r3, #128	; 0x80
 8007026:	d902      	bls.n	800702e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007028:	2303      	movs	r3, #3
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	e00a      	b.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b80      	cmp	r3, #128	; 0x80
 8007032:	d102      	bne.n	800703a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007034:	2302      	movs	r3, #2
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	e004      	b.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b70      	cmp	r3, #112	; 0x70
 800703e:	d101      	bne.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007040:	2301      	movs	r3, #1
 8007042:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007044:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f023 0207 	bic.w	r2, r3, #7
 800704c:	4909      	ldr	r1, [pc, #36]	; (8007074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	4313      	orrs	r3, r2
 8007052:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007054:	4b07      	ldr	r3, [pc, #28]	; (8007074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	429a      	cmp	r2, r3
 8007060:	d001      	beq.n	8007066 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	40021000 	.word	0x40021000
 8007074:	40022000 	.word	0x40022000

08007078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007080:	2300      	movs	r3, #0
 8007082:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007084:	2300      	movs	r3, #0
 8007086:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007090:	2b00      	cmp	r3, #0
 8007092:	d031      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007098:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800709c:	d01a      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800709e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80070a2:	d814      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d009      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80070a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070ac:	d10f      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80070ae:	4b5d      	ldr	r3, [pc, #372]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	4a5c      	ldr	r2, [pc, #368]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070b8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070ba:	e00c      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3304      	adds	r3, #4
 80070c0:	2100      	movs	r1, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 f9ce 	bl	8007464 <RCCEx_PLLSAI1_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070cc:	e003      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	74fb      	strb	r3, [r7, #19]
      break;
 80070d2:	e000      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80070d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070d6:	7cfb      	ldrb	r3, [r7, #19]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10b      	bne.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070dc:	4b51      	ldr	r3, [pc, #324]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ea:	494e      	ldr	r1, [pc, #312]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80070f2:	e001      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f4:	7cfb      	ldrb	r3, [r7, #19]
 80070f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 809e 	beq.w	8007242 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007106:	2300      	movs	r3, #0
 8007108:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800710a:	4b46      	ldr	r3, [pc, #280]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800710c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800710e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007116:	2301      	movs	r3, #1
 8007118:	e000      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800711a:	2300      	movs	r3, #0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00d      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007120:	4b40      	ldr	r3, [pc, #256]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007124:	4a3f      	ldr	r2, [pc, #252]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800712a:	6593      	str	r3, [r2, #88]	; 0x58
 800712c:	4b3d      	ldr	r3, [pc, #244]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800712e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007134:	60bb      	str	r3, [r7, #8]
 8007136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007138:	2301      	movs	r3, #1
 800713a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800713c:	4b3a      	ldr	r3, [pc, #232]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a39      	ldr	r2, [pc, #228]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007146:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007148:	f7fd f854 	bl	80041f4 <HAL_GetTick>
 800714c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800714e:	e009      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007150:	f7fd f850 	bl	80041f4 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d902      	bls.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	74fb      	strb	r3, [r7, #19]
        break;
 8007162:	e005      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007164:	4b30      	ldr	r3, [pc, #192]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0ef      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007170:	7cfb      	ldrb	r3, [r7, #19]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d15a      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007176:	4b2b      	ldr	r3, [pc, #172]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007180:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d01e      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	429a      	cmp	r2, r3
 8007190:	d019      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007192:	4b24      	ldr	r3, [pc, #144]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800719c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800719e:	4b21      	ldr	r3, [pc, #132]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a4:	4a1f      	ldr	r2, [pc, #124]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071ae:	4b1d      	ldr	r3, [pc, #116]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b4:	4a1b      	ldr	r2, [pc, #108]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80071be:	4a19      	ldr	r2, [pc, #100]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d016      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d0:	f7fd f810 	bl	80041f4 <HAL_GetTick>
 80071d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071d6:	e00b      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071d8:	f7fd f80c 	bl	80041f4 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d902      	bls.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	74fb      	strb	r3, [r7, #19]
            break;
 80071ee:	e006      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071f0:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0ec      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80071fe:	7cfb      	ldrb	r3, [r7, #19]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10b      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007204:	4b07      	ldr	r3, [pc, #28]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800720a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007212:	4904      	ldr	r1, [pc, #16]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007214:	4313      	orrs	r3, r2
 8007216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800721a:	e009      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800721c:	7cfb      	ldrb	r3, [r7, #19]
 800721e:	74bb      	strb	r3, [r7, #18]
 8007220:	e006      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007222:	bf00      	nop
 8007224:	40021000 	.word	0x40021000
 8007228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722c:	7cfb      	ldrb	r3, [r7, #19]
 800722e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007230:	7c7b      	ldrb	r3, [r7, #17]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d105      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007236:	4b8a      	ldr	r3, [pc, #552]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723a:	4a89      	ldr	r2, [pc, #548]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800723c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007240:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800724e:	4b84      	ldr	r3, [pc, #528]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007254:	f023 0203 	bic.w	r2, r3, #3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	4980      	ldr	r1, [pc, #512]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800725e:	4313      	orrs	r3, r2
 8007260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007270:	4b7b      	ldr	r3, [pc, #492]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007276:	f023 020c 	bic.w	r2, r3, #12
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	4978      	ldr	r1, [pc, #480]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007280:	4313      	orrs	r3, r2
 8007282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007292:	4b73      	ldr	r3, [pc, #460]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007298:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a0:	496f      	ldr	r1, [pc, #444]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072b4:	4b6a      	ldr	r3, [pc, #424]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ba:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c2:	4967      	ldr	r1, [pc, #412]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072d6:	4b62      	ldr	r3, [pc, #392]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e4:	495e      	ldr	r1, [pc, #376]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00a      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072f8:	4b59      	ldr	r3, [pc, #356]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	4956      	ldr	r1, [pc, #344]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007308:	4313      	orrs	r3, r2
 800730a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800731a:	4b51      	ldr	r3, [pc, #324]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800731c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007320:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007328:	494d      	ldr	r1, [pc, #308]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800732a:	4313      	orrs	r3, r2
 800732c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d028      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800733c:	4b48      	ldr	r3, [pc, #288]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800733e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007342:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	4945      	ldr	r1, [pc, #276]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800734c:	4313      	orrs	r3, r2
 800734e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800735a:	d106      	bne.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800735c:	4b40      	ldr	r3, [pc, #256]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	4a3f      	ldr	r2, [pc, #252]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007366:	60d3      	str	r3, [r2, #12]
 8007368:	e011      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007372:	d10c      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3304      	adds	r3, #4
 8007378:	2101      	movs	r1, #1
 800737a:	4618      	mov	r0, r3
 800737c:	f000 f872 	bl	8007464 <RCCEx_PLLSAI1_Config>
 8007380:	4603      	mov	r3, r0
 8007382:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007384:	7cfb      	ldrb	r3, [r7, #19]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800738a:	7cfb      	ldrb	r3, [r7, #19]
 800738c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d028      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800739a:	4b31      	ldr	r3, [pc, #196]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800739c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a8:	492d      	ldr	r1, [pc, #180]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073b8:	d106      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073ba:	4b29      	ldr	r3, [pc, #164]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	4a28      	ldr	r2, [pc, #160]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073c4:	60d3      	str	r3, [r2, #12]
 80073c6:	e011      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073d0:	d10c      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3304      	adds	r3, #4
 80073d6:	2101      	movs	r1, #1
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 f843 	bl	8007464 <RCCEx_PLLSAI1_Config>
 80073de:	4603      	mov	r3, r0
 80073e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073e2:	7cfb      	ldrb	r3, [r7, #19]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80073e8:	7cfb      	ldrb	r3, [r7, #19]
 80073ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01c      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073f8:	4b19      	ldr	r3, [pc, #100]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007406:	4916      	ldr	r1, [pc, #88]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007408:	4313      	orrs	r3, r2
 800740a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007416:	d10c      	bne.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3304      	adds	r3, #4
 800741c:	2102      	movs	r1, #2
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f820 	bl	8007464 <RCCEx_PLLSAI1_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007428:	7cfb      	ldrb	r3, [r7, #19]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800742e:	7cfb      	ldrb	r3, [r7, #19]
 8007430:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800743e:	4b08      	ldr	r3, [pc, #32]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007444:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800744c:	4904      	ldr	r1, [pc, #16]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800744e:	4313      	orrs	r3, r2
 8007450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007454:	7cbb      	ldrb	r3, [r7, #18]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	40021000 	.word	0x40021000

08007464 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007472:	4b74      	ldr	r3, [pc, #464]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d018      	beq.n	80074b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800747e:	4b71      	ldr	r3, [pc, #452]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f003 0203 	and.w	r2, r3, #3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	429a      	cmp	r2, r3
 800748c:	d10d      	bne.n	80074aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
       ||
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007496:	4b6b      	ldr	r3, [pc, #428]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	091b      	lsrs	r3, r3, #4
 800749c:	f003 0307 	and.w	r3, r3, #7
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
       ||
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d047      	beq.n	800753a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	73fb      	strb	r3, [r7, #15]
 80074ae:	e044      	b.n	800753a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d018      	beq.n	80074ea <RCCEx_PLLSAI1_Config+0x86>
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d825      	bhi.n	8007508 <RCCEx_PLLSAI1_Config+0xa4>
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d002      	beq.n	80074c6 <RCCEx_PLLSAI1_Config+0x62>
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d009      	beq.n	80074d8 <RCCEx_PLLSAI1_Config+0x74>
 80074c4:	e020      	b.n	8007508 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80074c6:	4b5f      	ldr	r3, [pc, #380]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d11d      	bne.n	800750e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074d6:	e01a      	b.n	800750e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074d8:	4b5a      	ldr	r3, [pc, #360]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d116      	bne.n	8007512 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074e8:	e013      	b.n	8007512 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80074ea:	4b56      	ldr	r3, [pc, #344]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10f      	bne.n	8007516 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80074f6:	4b53      	ldr	r3, [pc, #332]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d109      	bne.n	8007516 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007506:	e006      	b.n	8007516 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	73fb      	strb	r3, [r7, #15]
      break;
 800750c:	e004      	b.n	8007518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800750e:	bf00      	nop
 8007510:	e002      	b.n	8007518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007512:	bf00      	nop
 8007514:	e000      	b.n	8007518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007516:	bf00      	nop
    }

    if(status == HAL_OK)
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10d      	bne.n	800753a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800751e:	4b49      	ldr	r3, [pc, #292]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6819      	ldr	r1, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	3b01      	subs	r3, #1
 8007530:	011b      	lsls	r3, r3, #4
 8007532:	430b      	orrs	r3, r1
 8007534:	4943      	ldr	r1, [pc, #268]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007536:	4313      	orrs	r3, r2
 8007538:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d17c      	bne.n	800763a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007540:	4b40      	ldr	r3, [pc, #256]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a3f      	ldr	r2, [pc, #252]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007546:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800754a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800754c:	f7fc fe52 	bl	80041f4 <HAL_GetTick>
 8007550:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007552:	e009      	b.n	8007568 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007554:	f7fc fe4e 	bl	80041f4 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d902      	bls.n	8007568 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	73fb      	strb	r3, [r7, #15]
        break;
 8007566:	e005      	b.n	8007574 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007568:	4b36      	ldr	r3, [pc, #216]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1ef      	bne.n	8007554 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d15f      	bne.n	800763a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d110      	bne.n	80075a2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007580:	4b30      	ldr	r3, [pc, #192]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007588:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6892      	ldr	r2, [r2, #8]
 8007590:	0211      	lsls	r1, r2, #8
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	68d2      	ldr	r2, [r2, #12]
 8007596:	06d2      	lsls	r2, r2, #27
 8007598:	430a      	orrs	r2, r1
 800759a:	492a      	ldr	r1, [pc, #168]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 800759c:	4313      	orrs	r3, r2
 800759e:	610b      	str	r3, [r1, #16]
 80075a0:	e027      	b.n	80075f2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d112      	bne.n	80075ce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075a8:	4b26      	ldr	r3, [pc, #152]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80075b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	6892      	ldr	r2, [r2, #8]
 80075b8:	0211      	lsls	r1, r2, #8
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	6912      	ldr	r2, [r2, #16]
 80075be:	0852      	lsrs	r2, r2, #1
 80075c0:	3a01      	subs	r2, #1
 80075c2:	0552      	lsls	r2, r2, #21
 80075c4:	430a      	orrs	r2, r1
 80075c6:	491f      	ldr	r1, [pc, #124]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	610b      	str	r3, [r1, #16]
 80075cc:	e011      	b.n	80075f2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075ce:	4b1d      	ldr	r3, [pc, #116]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80075d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	6892      	ldr	r2, [r2, #8]
 80075de:	0211      	lsls	r1, r2, #8
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6952      	ldr	r2, [r2, #20]
 80075e4:	0852      	lsrs	r2, r2, #1
 80075e6:	3a01      	subs	r2, #1
 80075e8:	0652      	lsls	r2, r2, #25
 80075ea:	430a      	orrs	r2, r1
 80075ec:	4915      	ldr	r1, [pc, #84]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80075f2:	4b14      	ldr	r3, [pc, #80]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a13      	ldr	r2, [pc, #76]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075fe:	f7fc fdf9 	bl	80041f4 <HAL_GetTick>
 8007602:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007604:	e009      	b.n	800761a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007606:	f7fc fdf5 	bl	80041f4 <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	2b02      	cmp	r3, #2
 8007612:	d902      	bls.n	800761a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	73fb      	strb	r3, [r7, #15]
          break;
 8007618:	e005      	b.n	8007626 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800761a:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0ef      	beq.n	8007606 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007626:	7bfb      	ldrb	r3, [r7, #15]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d106      	bne.n	800763a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800762c:	4b05      	ldr	r3, [pc, #20]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 800762e:	691a      	ldr	r2, [r3, #16]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	4903      	ldr	r1, [pc, #12]	; (8007644 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007636:	4313      	orrs	r3, r2
 8007638:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	40021000 	.word	0x40021000

08007648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e049      	b.n	80076ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d106      	bne.n	8007674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7fc fc10 	bl	8003e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2202      	movs	r2, #2
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3304      	adds	r3, #4
 8007684:	4619      	mov	r1, r3
 8007686:	4610      	mov	r0, r2
 8007688:	f000 fbfe 	bl	8007e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b01      	cmp	r3, #1
 800770a:	d001      	beq.n	8007710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e03b      	b.n	8007788 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0201 	orr.w	r2, r2, #1
 8007726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a19      	ldr	r2, [pc, #100]	; (8007794 <HAL_TIM_Base_Start_IT+0x9c>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d009      	beq.n	8007746 <HAL_TIM_Base_Start_IT+0x4e>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800773a:	d004      	beq.n	8007746 <HAL_TIM_Base_Start_IT+0x4e>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a15      	ldr	r2, [pc, #84]	; (8007798 <HAL_TIM_Base_Start_IT+0xa0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d115      	bne.n	8007772 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	4b13      	ldr	r3, [pc, #76]	; (800779c <HAL_TIM_Base_Start_IT+0xa4>)
 800774e:	4013      	ands	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b06      	cmp	r3, #6
 8007756:	d015      	beq.n	8007784 <HAL_TIM_Base_Start_IT+0x8c>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800775e:	d011      	beq.n	8007784 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0201 	orr.w	r2, r2, #1
 800776e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007770:	e008      	b.n	8007784 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f042 0201 	orr.w	r2, r2, #1
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	e000      	b.n	8007786 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007784:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	40012c00 	.word	0x40012c00
 8007798:	40014000 	.word	0x40014000
 800779c:	00010007 	.word	0x00010007

080077a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e049      	b.n	8007846 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f841 	bl	800784e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3304      	adds	r3, #4
 80077dc:	4619      	mov	r1, r3
 80077de:	4610      	mov	r0, r2
 80077e0:	f000 fb52 	bl	8007e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d020      	beq.n	80078c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d01b      	beq.n	80078c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f06f 0202 	mvn.w	r2, #2
 8007896:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	f003 0303 	and.w	r3, r3, #3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 facc 	bl	8007e4a <HAL_TIM_IC_CaptureCallback>
 80078b2:	e005      	b.n	80078c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fabe 	bl	8007e36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 facf 	bl	8007e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d020      	beq.n	8007912 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d01b      	beq.n	8007912 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f06f 0204 	mvn.w	r2, #4
 80078e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 faa6 	bl	8007e4a <HAL_TIM_IC_CaptureCallback>
 80078fe:	e005      	b.n	800790c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fa98 	bl	8007e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 faa9 	bl	8007e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d020      	beq.n	800795e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f003 0308 	and.w	r3, r3, #8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d01b      	beq.n	800795e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f06f 0208 	mvn.w	r2, #8
 800792e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2204      	movs	r2, #4
 8007934:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fa80 	bl	8007e4a <HAL_TIM_IC_CaptureCallback>
 800794a:	e005      	b.n	8007958 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fa72 	bl	8007e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa83 	bl	8007e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2b00      	cmp	r3, #0
 8007966:	d020      	beq.n	80079aa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f003 0310 	and.w	r3, r3, #16
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01b      	beq.n	80079aa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f06f 0210 	mvn.w	r2, #16
 800797a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2208      	movs	r2, #8
 8007980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fa5a 	bl	8007e4a <HAL_TIM_IC_CaptureCallback>
 8007996:	e005      	b.n	80079a4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fa4c 	bl	8007e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fa5d 	bl	8007e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00c      	beq.n	80079ce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d007      	beq.n	80079ce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f06f 0201 	mvn.w	r2, #1
 80079c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fa2a 	bl	8007e22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00c      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d007      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fe37 	bl	8008660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00c      	beq.n	8007a16 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d007      	beq.n	8007a16 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fe2f 	bl	8008674 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00c      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d007      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fa1c 	bl	8007e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00c      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d007      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f06f 0220 	mvn.w	r2, #32
 8007a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fdf7 	bl	800864c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d101      	bne.n	8007a86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a82:	2302      	movs	r3, #2
 8007a84:	e0ff      	b.n	8007c86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b14      	cmp	r3, #20
 8007a92:	f200 80f0 	bhi.w	8007c76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a96:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9c:	08007af1 	.word	0x08007af1
 8007aa0:	08007c77 	.word	0x08007c77
 8007aa4:	08007c77 	.word	0x08007c77
 8007aa8:	08007c77 	.word	0x08007c77
 8007aac:	08007b31 	.word	0x08007b31
 8007ab0:	08007c77 	.word	0x08007c77
 8007ab4:	08007c77 	.word	0x08007c77
 8007ab8:	08007c77 	.word	0x08007c77
 8007abc:	08007b73 	.word	0x08007b73
 8007ac0:	08007c77 	.word	0x08007c77
 8007ac4:	08007c77 	.word	0x08007c77
 8007ac8:	08007c77 	.word	0x08007c77
 8007acc:	08007bb3 	.word	0x08007bb3
 8007ad0:	08007c77 	.word	0x08007c77
 8007ad4:	08007c77 	.word	0x08007c77
 8007ad8:	08007c77 	.word	0x08007c77
 8007adc:	08007bf5 	.word	0x08007bf5
 8007ae0:	08007c77 	.word	0x08007c77
 8007ae4:	08007c77 	.word	0x08007c77
 8007ae8:	08007c77 	.word	0x08007c77
 8007aec:	08007c35 	.word	0x08007c35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 fa2a 	bl	8007f50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0208 	orr.w	r2, r2, #8
 8007b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f022 0204 	bic.w	r2, r2, #4
 8007b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6999      	ldr	r1, [r3, #24]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	619a      	str	r2, [r3, #24]
      break;
 8007b2e:	e0a5      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fa86 	bl	8008048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699a      	ldr	r2, [r3, #24]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699a      	ldr	r2, [r3, #24]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6999      	ldr	r1, [r3, #24]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	021a      	lsls	r2, r3, #8
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	619a      	str	r2, [r3, #24]
      break;
 8007b70:	e084      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 fadf 	bl	800813c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69da      	ldr	r2, [r3, #28]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f042 0208 	orr.w	r2, r2, #8
 8007b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69da      	ldr	r2, [r3, #28]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0204 	bic.w	r2, r2, #4
 8007b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69d9      	ldr	r1, [r3, #28]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	61da      	str	r2, [r3, #28]
      break;
 8007bb0:	e064      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68b9      	ldr	r1, [r7, #8]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fb37 	bl	800822c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	69da      	ldr	r2, [r3, #28]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69da      	ldr	r2, [r3, #28]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69d9      	ldr	r1, [r3, #28]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	021a      	lsls	r2, r3, #8
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	61da      	str	r2, [r3, #28]
      break;
 8007bf2:	e043      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fb74 	bl	80082e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0208 	orr.w	r2, r2, #8
 8007c0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0204 	bic.w	r2, r2, #4
 8007c1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	691a      	ldr	r2, [r3, #16]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c32:	e023      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68b9      	ldr	r1, [r7, #8]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fbac 	bl	8008398 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	021a      	lsls	r2, r3, #8
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c74:	e002      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	75fb      	strb	r3, [r7, #23]
      break;
 8007c7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop

08007c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d101      	bne.n	8007cac <HAL_TIM_ConfigClockSource+0x1c>
 8007ca8:	2302      	movs	r3, #2
 8007caa:	e0b6      	b.n	8007e1a <HAL_TIM_ConfigClockSource+0x18a>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce8:	d03e      	beq.n	8007d68 <HAL_TIM_ConfigClockSource+0xd8>
 8007cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cee:	f200 8087 	bhi.w	8007e00 <HAL_TIM_ConfigClockSource+0x170>
 8007cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cf6:	f000 8086 	beq.w	8007e06 <HAL_TIM_ConfigClockSource+0x176>
 8007cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cfe:	d87f      	bhi.n	8007e00 <HAL_TIM_ConfigClockSource+0x170>
 8007d00:	2b70      	cmp	r3, #112	; 0x70
 8007d02:	d01a      	beq.n	8007d3a <HAL_TIM_ConfigClockSource+0xaa>
 8007d04:	2b70      	cmp	r3, #112	; 0x70
 8007d06:	d87b      	bhi.n	8007e00 <HAL_TIM_ConfigClockSource+0x170>
 8007d08:	2b60      	cmp	r3, #96	; 0x60
 8007d0a:	d050      	beq.n	8007dae <HAL_TIM_ConfigClockSource+0x11e>
 8007d0c:	2b60      	cmp	r3, #96	; 0x60
 8007d0e:	d877      	bhi.n	8007e00 <HAL_TIM_ConfigClockSource+0x170>
 8007d10:	2b50      	cmp	r3, #80	; 0x50
 8007d12:	d03c      	beq.n	8007d8e <HAL_TIM_ConfigClockSource+0xfe>
 8007d14:	2b50      	cmp	r3, #80	; 0x50
 8007d16:	d873      	bhi.n	8007e00 <HAL_TIM_ConfigClockSource+0x170>
 8007d18:	2b40      	cmp	r3, #64	; 0x40
 8007d1a:	d058      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0x13e>
 8007d1c:	2b40      	cmp	r3, #64	; 0x40
 8007d1e:	d86f      	bhi.n	8007e00 <HAL_TIM_ConfigClockSource+0x170>
 8007d20:	2b30      	cmp	r3, #48	; 0x30
 8007d22:	d064      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0x15e>
 8007d24:	2b30      	cmp	r3, #48	; 0x30
 8007d26:	d86b      	bhi.n	8007e00 <HAL_TIM_ConfigClockSource+0x170>
 8007d28:	2b20      	cmp	r3, #32
 8007d2a:	d060      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0x15e>
 8007d2c:	2b20      	cmp	r3, #32
 8007d2e:	d867      	bhi.n	8007e00 <HAL_TIM_ConfigClockSource+0x170>
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d05c      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0x15e>
 8007d34:	2b10      	cmp	r3, #16
 8007d36:	d05a      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0x15e>
 8007d38:	e062      	b.n	8007e00 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d4a:	f000 fbf9 	bl	8008540 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	609a      	str	r2, [r3, #8]
      break;
 8007d66:	e04f      	b.n	8007e08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d78:	f000 fbe2 	bl	8008540 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d8a:	609a      	str	r2, [r3, #8]
      break;
 8007d8c:	e03c      	b.n	8007e08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f000 fb56 	bl	800844c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2150      	movs	r1, #80	; 0x50
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 fbaf 	bl	800850a <TIM_ITRx_SetConfig>
      break;
 8007dac:	e02c      	b.n	8007e08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dba:	461a      	mov	r2, r3
 8007dbc:	f000 fb75 	bl	80084aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2160      	movs	r1, #96	; 0x60
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fb9f 	bl	800850a <TIM_ITRx_SetConfig>
      break;
 8007dcc:	e01c      	b.n	8007e08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f000 fb36 	bl	800844c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2140      	movs	r1, #64	; 0x40
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fb8f 	bl	800850a <TIM_ITRx_SetConfig>
      break;
 8007dec:	e00c      	b.n	8007e08 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4619      	mov	r1, r3
 8007df8:	4610      	mov	r0, r2
 8007dfa:	f000 fb86 	bl	800850a <TIM_ITRx_SetConfig>
      break;
 8007dfe:	e003      	b.n	8007e08 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	73fb      	strb	r3, [r7, #15]
      break;
 8007e04:	e000      	b.n	8007e08 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e52:	bf00      	nop
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
	...

08007e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a2a      	ldr	r2, [pc, #168]	; (8007f44 <TIM_Base_SetConfig+0xbc>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d003      	beq.n	8007ea8 <TIM_Base_SetConfig+0x20>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea6:	d108      	bne.n	8007eba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a21      	ldr	r2, [pc, #132]	; (8007f44 <TIM_Base_SetConfig+0xbc>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d00b      	beq.n	8007eda <TIM_Base_SetConfig+0x52>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec8:	d007      	beq.n	8007eda <TIM_Base_SetConfig+0x52>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a1e      	ldr	r2, [pc, #120]	; (8007f48 <TIM_Base_SetConfig+0xc0>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d003      	beq.n	8007eda <TIM_Base_SetConfig+0x52>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a1d      	ldr	r2, [pc, #116]	; (8007f4c <TIM_Base_SetConfig+0xc4>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d108      	bne.n	8007eec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a0c      	ldr	r2, [pc, #48]	; (8007f44 <TIM_Base_SetConfig+0xbc>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d007      	beq.n	8007f28 <TIM_Base_SetConfig+0xa0>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a0b      	ldr	r2, [pc, #44]	; (8007f48 <TIM_Base_SetConfig+0xc0>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d003      	beq.n	8007f28 <TIM_Base_SetConfig+0xa0>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a0a      	ldr	r2, [pc, #40]	; (8007f4c <TIM_Base_SetConfig+0xc4>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d103      	bne.n	8007f30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	615a      	str	r2, [r3, #20]
}
 8007f36:	bf00      	nop
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	40012c00 	.word	0x40012c00
 8007f48:	40014000 	.word	0x40014000
 8007f4c:	40014400 	.word	0x40014400

08007f50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	f023 0201 	bic.w	r2, r3, #1
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0303 	bic.w	r3, r3, #3
 8007f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	f023 0302 	bic.w	r3, r3, #2
 8007f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a24      	ldr	r2, [pc, #144]	; (800803c <TIM_OC1_SetConfig+0xec>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d007      	beq.n	8007fc0 <TIM_OC1_SetConfig+0x70>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a23      	ldr	r2, [pc, #140]	; (8008040 <TIM_OC1_SetConfig+0xf0>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d003      	beq.n	8007fc0 <TIM_OC1_SetConfig+0x70>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a22      	ldr	r2, [pc, #136]	; (8008044 <TIM_OC1_SetConfig+0xf4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d10c      	bne.n	8007fda <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f023 0308 	bic.w	r3, r3, #8
 8007fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f023 0304 	bic.w	r3, r3, #4
 8007fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a17      	ldr	r2, [pc, #92]	; (800803c <TIM_OC1_SetConfig+0xec>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d007      	beq.n	8007ff2 <TIM_OC1_SetConfig+0xa2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a16      	ldr	r2, [pc, #88]	; (8008040 <TIM_OC1_SetConfig+0xf0>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d003      	beq.n	8007ff2 <TIM_OC1_SetConfig+0xa2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a15      	ldr	r2, [pc, #84]	; (8008044 <TIM_OC1_SetConfig+0xf4>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d111      	bne.n	8008016 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	4313      	orrs	r3, r2
 800800a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4313      	orrs	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	621a      	str	r2, [r3, #32]
}
 8008030:	bf00      	nop
 8008032:	371c      	adds	r7, #28
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	40012c00 	.word	0x40012c00
 8008040:	40014000 	.word	0x40014000
 8008044:	40014400 	.word	0x40014400

08008048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	f023 0210 	bic.w	r2, r3, #16
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	021b      	lsls	r3, r3, #8
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4313      	orrs	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f023 0320 	bic.w	r3, r3, #32
 8008096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	011b      	lsls	r3, r3, #4
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a22      	ldr	r2, [pc, #136]	; (8008130 <TIM_OC2_SetConfig+0xe8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d10d      	bne.n	80080c8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a19      	ldr	r2, [pc, #100]	; (8008130 <TIM_OC2_SetConfig+0xe8>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d007      	beq.n	80080e0 <TIM_OC2_SetConfig+0x98>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a18      	ldr	r2, [pc, #96]	; (8008134 <TIM_OC2_SetConfig+0xec>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d003      	beq.n	80080e0 <TIM_OC2_SetConfig+0x98>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a17      	ldr	r2, [pc, #92]	; (8008138 <TIM_OC2_SetConfig+0xf0>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d113      	bne.n	8008108 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	621a      	str	r2, [r3, #32]
}
 8008122:	bf00      	nop
 8008124:	371c      	adds	r7, #28
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	40012c00 	.word	0x40012c00
 8008134:	40014000 	.word	0x40014000
 8008138:	40014400 	.word	0x40014400

0800813c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800816a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f023 0303 	bic.w	r3, r3, #3
 8008176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	4313      	orrs	r3, r2
 8008194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a21      	ldr	r2, [pc, #132]	; (8008220 <TIM_OC3_SetConfig+0xe4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d10d      	bne.n	80081ba <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	021b      	lsls	r3, r3, #8
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a18      	ldr	r2, [pc, #96]	; (8008220 <TIM_OC3_SetConfig+0xe4>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d007      	beq.n	80081d2 <TIM_OC3_SetConfig+0x96>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a17      	ldr	r2, [pc, #92]	; (8008224 <TIM_OC3_SetConfig+0xe8>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d003      	beq.n	80081d2 <TIM_OC3_SetConfig+0x96>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a16      	ldr	r2, [pc, #88]	; (8008228 <TIM_OC3_SetConfig+0xec>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d113      	bne.n	80081fa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	011b      	lsls	r3, r3, #4
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	621a      	str	r2, [r3, #32]
}
 8008214:	bf00      	nop
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	40012c00 	.word	0x40012c00
 8008224:	40014000 	.word	0x40014000
 8008228:	40014400 	.word	0x40014400

0800822c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800825a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800825e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	4313      	orrs	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800827a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	031b      	lsls	r3, r3, #12
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	4313      	orrs	r3, r2
 8008286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a14      	ldr	r2, [pc, #80]	; (80082dc <TIM_OC4_SetConfig+0xb0>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d007      	beq.n	80082a0 <TIM_OC4_SetConfig+0x74>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a13      	ldr	r2, [pc, #76]	; (80082e0 <TIM_OC4_SetConfig+0xb4>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d003      	beq.n	80082a0 <TIM_OC4_SetConfig+0x74>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a12      	ldr	r2, [pc, #72]	; (80082e4 <TIM_OC4_SetConfig+0xb8>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d109      	bne.n	80082b4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	019b      	lsls	r3, r3, #6
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	621a      	str	r2, [r3, #32]
}
 80082ce:	bf00      	nop
 80082d0:	371c      	adds	r7, #28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	40012c00 	.word	0x40012c00
 80082e0:	40014000 	.word	0x40014000
 80082e4:	40014400 	.word	0x40014400

080082e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a1b      	ldr	r3, [r3, #32]
 80082fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800832c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	041b      	lsls	r3, r3, #16
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	4313      	orrs	r3, r2
 8008338:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a13      	ldr	r2, [pc, #76]	; (800838c <TIM_OC5_SetConfig+0xa4>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d007      	beq.n	8008352 <TIM_OC5_SetConfig+0x6a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a12      	ldr	r2, [pc, #72]	; (8008390 <TIM_OC5_SetConfig+0xa8>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d003      	beq.n	8008352 <TIM_OC5_SetConfig+0x6a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a11      	ldr	r2, [pc, #68]	; (8008394 <TIM_OC5_SetConfig+0xac>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d109      	bne.n	8008366 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008358:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	021b      	lsls	r3, r3, #8
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	4313      	orrs	r3, r2
 8008364:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	621a      	str	r2, [r3, #32]
}
 8008380:	bf00      	nop
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	40012c00 	.word	0x40012c00
 8008390:	40014000 	.word	0x40014000
 8008394:	40014400 	.word	0x40014400

08008398 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	021b      	lsls	r3, r3, #8
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	051b      	lsls	r3, r3, #20
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a14      	ldr	r2, [pc, #80]	; (8008440 <TIM_OC6_SetConfig+0xa8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d007      	beq.n	8008404 <TIM_OC6_SetConfig+0x6c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a13      	ldr	r2, [pc, #76]	; (8008444 <TIM_OC6_SetConfig+0xac>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d003      	beq.n	8008404 <TIM_OC6_SetConfig+0x6c>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a12      	ldr	r2, [pc, #72]	; (8008448 <TIM_OC6_SetConfig+0xb0>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d109      	bne.n	8008418 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800840a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	029b      	lsls	r3, r3, #10
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	4313      	orrs	r3, r2
 8008416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	621a      	str	r2, [r3, #32]
}
 8008432:	bf00      	nop
 8008434:	371c      	adds	r7, #28
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	40012c00 	.word	0x40012c00
 8008444:	40014000 	.word	0x40014000
 8008448:	40014400 	.word	0x40014400

0800844c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	f023 0201 	bic.w	r2, r3, #1
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	011b      	lsls	r3, r3, #4
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	4313      	orrs	r3, r2
 8008480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f023 030a 	bic.w	r3, r3, #10
 8008488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	4313      	orrs	r3, r2
 8008490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	621a      	str	r2, [r3, #32]
}
 800849e:	bf00      	nop
 80084a0:	371c      	adds	r7, #28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b087      	sub	sp, #28
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6a1b      	ldr	r3, [r3, #32]
 80084c0:	f023 0210 	bic.w	r2, r3, #16
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	031b      	lsls	r3, r3, #12
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	4313      	orrs	r3, r2
 80084de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	621a      	str	r2, [r3, #32]
}
 80084fe:	bf00      	nop
 8008500:	371c      	adds	r7, #28
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800850a:	b480      	push	{r7}
 800850c:	b085      	sub	sp, #20
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4313      	orrs	r3, r2
 8008528:	f043 0307 	orr.w	r3, r3, #7
 800852c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	609a      	str	r2, [r3, #8]
}
 8008534:	bf00      	nop
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800855a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	021a      	lsls	r2, r3, #8
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	431a      	orrs	r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	4313      	orrs	r3, r2
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	609a      	str	r2, [r3, #8]
}
 8008574:	bf00      	nop
 8008576:	371c      	adds	r7, #28
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008590:	2b01      	cmp	r3, #1
 8008592:	d101      	bne.n	8008598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008594:	2302      	movs	r3, #2
 8008596:	e04f      	b.n	8008638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2202      	movs	r2, #2
 80085a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a21      	ldr	r2, [pc, #132]	; (8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d108      	bne.n	80085d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a14      	ldr	r2, [pc, #80]	; (8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d009      	beq.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008600:	d004      	beq.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a10      	ldr	r2, [pc, #64]	; (8008648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d10c      	bne.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008612:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	4313      	orrs	r3, r2
 800861c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	40012c00 	.word	0x40012c00
 8008648:	40014000 	.word	0x40014000

0800864c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08a      	sub	sp, #40	; 0x28
 800868c:	af02      	add	r7, sp, #8
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	4613      	mov	r3, r2
 8008696:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800869c:	2b20      	cmp	r3, #32
 800869e:	d178      	bne.n	8008792 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <HAL_UART_Transmit+0x24>
 80086a6:	88fb      	ldrh	r3, [r7, #6]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e071      	b.n	8008794 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2221      	movs	r2, #33	; 0x21
 80086bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086be:	f7fb fd99 	bl	80041f4 <HAL_GetTick>
 80086c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	88fa      	ldrh	r2, [r7, #6]
 80086c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	88fa      	ldrh	r2, [r7, #6]
 80086d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086dc:	d108      	bne.n	80086f0 <HAL_UART_Transmit+0x68>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d104      	bne.n	80086f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80086e6:	2300      	movs	r3, #0
 80086e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	61bb      	str	r3, [r7, #24]
 80086ee:	e003      	b.n	80086f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086f4:	2300      	movs	r3, #0
 80086f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80086f8:	e030      	b.n	800875c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2200      	movs	r2, #0
 8008702:	2180      	movs	r1, #128	; 0x80
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f000 fec9 	bl	800949c <UART_WaitOnFlagUntilTimeout>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d004      	beq.n	800871a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2220      	movs	r2, #32
 8008714:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e03c      	b.n	8008794 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10b      	bne.n	8008738 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	881a      	ldrh	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800872c:	b292      	uxth	r2, r2
 800872e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	3302      	adds	r3, #2
 8008734:	61bb      	str	r3, [r7, #24]
 8008736:	e008      	b.n	800874a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	781a      	ldrb	r2, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	b292      	uxth	r2, r2
 8008742:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	3301      	adds	r3, #1
 8008748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008750:	b29b      	uxth	r3, r3
 8008752:	3b01      	subs	r3, #1
 8008754:	b29a      	uxth	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008762:	b29b      	uxth	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1c8      	bne.n	80086fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	2200      	movs	r2, #0
 8008770:	2140      	movs	r1, #64	; 0x40
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f000 fe92 	bl	800949c <UART_WaitOnFlagUntilTimeout>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d004      	beq.n	8008788 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2220      	movs	r2, #32
 8008782:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e005      	b.n	8008794 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2220      	movs	r2, #32
 800878c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	e000      	b.n	8008794 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008792:	2302      	movs	r3, #2
  }
}
 8008794:	4618      	mov	r0, r3
 8008796:	3720      	adds	r7, #32
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b0ba      	sub	sp, #232	; 0xe8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80087c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80087ca:	4013      	ands	r3, r2
 80087cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80087d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d115      	bne.n	8008804 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80087d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087dc:	f003 0320 	and.w	r3, r3, #32
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00f      	beq.n	8008804 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80087e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087e8:	f003 0320 	and.w	r3, r3, #32
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d009      	beq.n	8008804 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 82ae 	beq.w	8008d56 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	4798      	blx	r3
      }
      return;
 8008802:	e2a8      	b.n	8008d56 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 8117 	beq.w	8008a3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800880e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800881a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800881e:	4b85      	ldr	r3, [pc, #532]	; (8008a34 <HAL_UART_IRQHandler+0x298>)
 8008820:	4013      	ands	r3, r2
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 810a 	beq.w	8008a3c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	d011      	beq.n	8008858 <HAL_UART_IRQHandler+0xbc>
 8008834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2201      	movs	r2, #1
 8008846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800884e:	f043 0201 	orr.w	r2, r3, #1
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d011      	beq.n	8008888 <HAL_UART_IRQHandler+0xec>
 8008864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2202      	movs	r2, #2
 8008876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800887e:	f043 0204 	orr.w	r2, r3, #4
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	d011      	beq.n	80088b8 <HAL_UART_IRQHandler+0x11c>
 8008894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00b      	beq.n	80088b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2204      	movs	r2, #4
 80088a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ae:	f043 0202 	orr.w	r2, r3, #2
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80088b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088bc:	f003 0308 	and.w	r3, r3, #8
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d017      	beq.n	80088f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c8:	f003 0320 	and.w	r3, r3, #32
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d105      	bne.n	80088dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80088d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00b      	beq.n	80088f4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2208      	movs	r2, #8
 80088e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ea:	f043 0208 	orr.w	r2, r3, #8
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d012      	beq.n	8008926 <HAL_UART_IRQHandler+0x18a>
 8008900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00c      	beq.n	8008926 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800891c:	f043 0220 	orr.w	r2, r3, #32
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 8214 	beq.w	8008d5a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008936:	f003 0320 	and.w	r3, r3, #32
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00d      	beq.n	800895a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800893e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008942:	f003 0320 	and.w	r3, r3, #32
 8008946:	2b00      	cmp	r3, #0
 8008948:	d007      	beq.n	800895a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896e:	2b40      	cmp	r3, #64	; 0x40
 8008970:	d005      	beq.n	800897e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008976:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800897a:	2b00      	cmp	r3, #0
 800897c:	d04f      	beq.n	8008a1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fdf3 	bl	800956a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898e:	2b40      	cmp	r3, #64	; 0x40
 8008990:	d141      	bne.n	8008a16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3308      	adds	r3, #8
 8008998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80089a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3308      	adds	r3, #8
 80089ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80089be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80089c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80089d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1d9      	bne.n	8008992 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d013      	beq.n	8008a0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089ea:	4a13      	ldr	r2, [pc, #76]	; (8008a38 <HAL_UART_IRQHandler+0x29c>)
 80089ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fd fa1a 	bl	8005e2c <HAL_DMA_Abort_IT>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d017      	beq.n	8008a2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a0c:	e00f      	b.n	8008a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f9b8 	bl	8008d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a14:	e00b      	b.n	8008a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f9b4 	bl	8008d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a1c:	e007      	b.n	8008a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f9b0 	bl	8008d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008a2c:	e195      	b.n	8008d5a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a2e:	bf00      	nop
    return;
 8008a30:	e193      	b.n	8008d5a <HAL_UART_IRQHandler+0x5be>
 8008a32:	bf00      	nop
 8008a34:	04000120 	.word	0x04000120
 8008a38:	08009633 	.word	0x08009633

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	f040 814e 	bne.w	8008ce2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a4a:	f003 0310 	and.w	r3, r3, #16
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 8147 	beq.w	8008ce2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a58:	f003 0310 	and.w	r3, r3, #16
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 8140 	beq.w	8008ce2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2210      	movs	r2, #16
 8008a68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a74:	2b40      	cmp	r3, #64	; 0x40
 8008a76:	f040 80b8 	bne.w	8008bea <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 8167 	beq.w	8008d5e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	f080 815f 	bcs.w	8008d5e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008aa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f040 8086 	bne.w	8008bc8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ac8:	e853 3f00 	ldrex	r3, [r3]
 8008acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008aea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1da      	bne.n	8008abc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b18:	f023 0301 	bic.w	r3, r3, #1
 8008b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3308      	adds	r3, #8
 8008b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e1      	bne.n	8008b06 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3308      	adds	r3, #8
 8008b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e3      	bne.n	8008b42 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b90:	e853 3f00 	ldrex	r3, [r3]
 8008b94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b98:	f023 0310 	bic.w	r3, r3, #16
 8008b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008baa:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bb2:	e841 2300 	strex	r3, r2, [r1]
 8008bb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1e4      	bne.n	8008b88 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fd f8f4 	bl	8005db0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f8d8 	bl	8008d98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008be8:	e0b9      	b.n	8008d5e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 80ab 	beq.w	8008d62 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8008c0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 80a6 	beq.w	8008d62 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c38:	647b      	str	r3, [r7, #68]	; 0x44
 8008c3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c40:	e841 2300 	strex	r3, r2, [r1]
 8008c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e4      	bne.n	8008c16 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	3308      	adds	r3, #8
 8008c52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	e853 3f00 	ldrex	r3, [r3]
 8008c5a:	623b      	str	r3, [r7, #32]
   return(result);
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	f023 0301 	bic.w	r3, r3, #1
 8008c62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c70:	633a      	str	r2, [r7, #48]	; 0x30
 8008c72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c78:	e841 2300 	strex	r3, r2, [r1]
 8008c7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e3      	bne.n	8008c4c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2220      	movs	r2, #32
 8008c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f023 0310 	bic.w	r3, r3, #16
 8008cac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008cba:	61fb      	str	r3, [r7, #28]
 8008cbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	69b9      	ldr	r1, [r7, #24]
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e4      	bne.n	8008c98 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f85c 	bl	8008d98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ce0:	e03f      	b.n	8008d62 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00e      	beq.n	8008d0c <HAL_UART_IRQHandler+0x570>
 8008cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d008      	beq.n	8008d0c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008d02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fd3b 	bl	8009780 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d0a:	e02d      	b.n	8008d68 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00e      	beq.n	8008d36 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d008      	beq.n	8008d36 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d01c      	beq.n	8008d66 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	4798      	blx	r3
    }
    return;
 8008d34:	e017      	b.n	8008d66 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d012      	beq.n	8008d68 <HAL_UART_IRQHandler+0x5cc>
 8008d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00c      	beq.n	8008d68 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fc85 	bl	800965e <UART_EndTransmit_IT>
    return;
 8008d54:	e008      	b.n	8008d68 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008d56:	bf00      	nop
 8008d58:	e006      	b.n	8008d68 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008d5a:	bf00      	nop
 8008d5c:	e004      	b.n	8008d68 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008d5e:	bf00      	nop
 8008d60:	e002      	b.n	8008d68 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008d62:	bf00      	nop
 8008d64:	e000      	b.n	8008d68 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008d66:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008d68:	37e8      	adds	r7, #232	; 0xe8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop

08008d70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008db4:	b08a      	sub	sp, #40	; 0x28
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	689a      	ldr	r2, [r3, #8]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	431a      	orrs	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	4bb4      	ldr	r3, [pc, #720]	; (80090b0 <UART_SetConfig+0x300>)
 8008de0:	4013      	ands	r3, r2
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	6812      	ldr	r2, [r2, #0]
 8008de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008de8:	430b      	orrs	r3, r1
 8008dea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4aa9      	ldr	r2, [pc, #676]	; (80090b4 <UART_SetConfig+0x304>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d004      	beq.n	8008e1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4aa0      	ldr	r2, [pc, #640]	; (80090b8 <UART_SetConfig+0x308>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d126      	bne.n	8008e88 <UART_SetConfig+0xd8>
 8008e3a:	4ba0      	ldr	r3, [pc, #640]	; (80090bc <UART_SetConfig+0x30c>)
 8008e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e40:	f003 0303 	and.w	r3, r3, #3
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d81b      	bhi.n	8008e80 <UART_SetConfig+0xd0>
 8008e48:	a201      	add	r2, pc, #4	; (adr r2, 8008e50 <UART_SetConfig+0xa0>)
 8008e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4e:	bf00      	nop
 8008e50:	08008e61 	.word	0x08008e61
 8008e54:	08008e71 	.word	0x08008e71
 8008e58:	08008e69 	.word	0x08008e69
 8008e5c:	08008e79 	.word	0x08008e79
 8008e60:	2301      	movs	r3, #1
 8008e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e66:	e080      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e6e:	e07c      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008e70:	2304      	movs	r3, #4
 8008e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e76:	e078      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008e78:	2308      	movs	r3, #8
 8008e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e7e:	e074      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008e80:	2310      	movs	r3, #16
 8008e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e86:	e070      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a8c      	ldr	r2, [pc, #560]	; (80090c0 <UART_SetConfig+0x310>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d138      	bne.n	8008f04 <UART_SetConfig+0x154>
 8008e92:	4b8a      	ldr	r3, [pc, #552]	; (80090bc <UART_SetConfig+0x30c>)
 8008e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e98:	f003 030c 	and.w	r3, r3, #12
 8008e9c:	2b0c      	cmp	r3, #12
 8008e9e:	d82d      	bhi.n	8008efc <UART_SetConfig+0x14c>
 8008ea0:	a201      	add	r2, pc, #4	; (adr r2, 8008ea8 <UART_SetConfig+0xf8>)
 8008ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea6:	bf00      	nop
 8008ea8:	08008edd 	.word	0x08008edd
 8008eac:	08008efd 	.word	0x08008efd
 8008eb0:	08008efd 	.word	0x08008efd
 8008eb4:	08008efd 	.word	0x08008efd
 8008eb8:	08008eed 	.word	0x08008eed
 8008ebc:	08008efd 	.word	0x08008efd
 8008ec0:	08008efd 	.word	0x08008efd
 8008ec4:	08008efd 	.word	0x08008efd
 8008ec8:	08008ee5 	.word	0x08008ee5
 8008ecc:	08008efd 	.word	0x08008efd
 8008ed0:	08008efd 	.word	0x08008efd
 8008ed4:	08008efd 	.word	0x08008efd
 8008ed8:	08008ef5 	.word	0x08008ef5
 8008edc:	2300      	movs	r3, #0
 8008ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ee2:	e042      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eea:	e03e      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008eec:	2304      	movs	r3, #4
 8008eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ef2:	e03a      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008ef4:	2308      	movs	r3, #8
 8008ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008efa:	e036      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008efc:	2310      	movs	r3, #16
 8008efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f02:	e032      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a6a      	ldr	r2, [pc, #424]	; (80090b4 <UART_SetConfig+0x304>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d12a      	bne.n	8008f64 <UART_SetConfig+0x1b4>
 8008f0e:	4b6b      	ldr	r3, [pc, #428]	; (80090bc <UART_SetConfig+0x30c>)
 8008f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008f18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f1c:	d01a      	beq.n	8008f54 <UART_SetConfig+0x1a4>
 8008f1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f22:	d81b      	bhi.n	8008f5c <UART_SetConfig+0x1ac>
 8008f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f28:	d00c      	beq.n	8008f44 <UART_SetConfig+0x194>
 8008f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f2e:	d815      	bhi.n	8008f5c <UART_SetConfig+0x1ac>
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d003      	beq.n	8008f3c <UART_SetConfig+0x18c>
 8008f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f38:	d008      	beq.n	8008f4c <UART_SetConfig+0x19c>
 8008f3a:	e00f      	b.n	8008f5c <UART_SetConfig+0x1ac>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f42:	e012      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008f44:	2302      	movs	r3, #2
 8008f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f4a:	e00e      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008f4c:	2304      	movs	r3, #4
 8008f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f52:	e00a      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008f54:	2308      	movs	r3, #8
 8008f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f5a:	e006      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008f5c:	2310      	movs	r3, #16
 8008f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f62:	e002      	b.n	8008f6a <UART_SetConfig+0x1ba>
 8008f64:	2310      	movs	r3, #16
 8008f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a51      	ldr	r2, [pc, #324]	; (80090b4 <UART_SetConfig+0x304>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d17a      	bne.n	800906a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f78:	2b08      	cmp	r3, #8
 8008f7a:	d824      	bhi.n	8008fc6 <UART_SetConfig+0x216>
 8008f7c:	a201      	add	r2, pc, #4	; (adr r2, 8008f84 <UART_SetConfig+0x1d4>)
 8008f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f82:	bf00      	nop
 8008f84:	08008fa9 	.word	0x08008fa9
 8008f88:	08008fc7 	.word	0x08008fc7
 8008f8c:	08008fb1 	.word	0x08008fb1
 8008f90:	08008fc7 	.word	0x08008fc7
 8008f94:	08008fb7 	.word	0x08008fb7
 8008f98:	08008fc7 	.word	0x08008fc7
 8008f9c:	08008fc7 	.word	0x08008fc7
 8008fa0:	08008fc7 	.word	0x08008fc7
 8008fa4:	08008fbf 	.word	0x08008fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fa8:	f7fd ffda 	bl	8006f60 <HAL_RCC_GetPCLK1Freq>
 8008fac:	61f8      	str	r0, [r7, #28]
        break;
 8008fae:	e010      	b.n	8008fd2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fb0:	4b44      	ldr	r3, [pc, #272]	; (80090c4 <UART_SetConfig+0x314>)
 8008fb2:	61fb      	str	r3, [r7, #28]
        break;
 8008fb4:	e00d      	b.n	8008fd2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fb6:	f7fd ff3b 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 8008fba:	61f8      	str	r0, [r7, #28]
        break;
 8008fbc:	e009      	b.n	8008fd2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fc2:	61fb      	str	r3, [r7, #28]
        break;
 8008fc4:	e005      	b.n	8008fd2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008fd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 8107 	beq.w	80091e8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	4413      	add	r3, r2
 8008fe4:	69fa      	ldr	r2, [r7, #28]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d305      	bcc.n	8008ff6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008ff0:	69fa      	ldr	r2, [r7, #28]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d903      	bls.n	8008ffe <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ffc:	e0f4      	b.n	80091e8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	2200      	movs	r2, #0
 8009002:	461c      	mov	r4, r3
 8009004:	4615      	mov	r5, r2
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	f04f 0300 	mov.w	r3, #0
 800900e:	022b      	lsls	r3, r5, #8
 8009010:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009014:	0222      	lsls	r2, r4, #8
 8009016:	68f9      	ldr	r1, [r7, #12]
 8009018:	6849      	ldr	r1, [r1, #4]
 800901a:	0849      	lsrs	r1, r1, #1
 800901c:	2000      	movs	r0, #0
 800901e:	4688      	mov	r8, r1
 8009020:	4681      	mov	r9, r0
 8009022:	eb12 0a08 	adds.w	sl, r2, r8
 8009026:	eb43 0b09 	adc.w	fp, r3, r9
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	603b      	str	r3, [r7, #0]
 8009032:	607a      	str	r2, [r7, #4]
 8009034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009038:	4650      	mov	r0, sl
 800903a:	4659      	mov	r1, fp
 800903c:	f7f7 fb64 	bl	8000708 <__aeabi_uldivmod>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4613      	mov	r3, r2
 8009046:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800904e:	d308      	bcc.n	8009062 <UART_SetConfig+0x2b2>
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009056:	d204      	bcs.n	8009062 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	69ba      	ldr	r2, [r7, #24]
 800905e:	60da      	str	r2, [r3, #12]
 8009060:	e0c2      	b.n	80091e8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009068:	e0be      	b.n	80091e8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009072:	d16a      	bne.n	800914a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8009074:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009078:	2b08      	cmp	r3, #8
 800907a:	d834      	bhi.n	80090e6 <UART_SetConfig+0x336>
 800907c:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <UART_SetConfig+0x2d4>)
 800907e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009082:	bf00      	nop
 8009084:	080090a9 	.word	0x080090a9
 8009088:	080090c9 	.word	0x080090c9
 800908c:	080090d1 	.word	0x080090d1
 8009090:	080090e7 	.word	0x080090e7
 8009094:	080090d7 	.word	0x080090d7
 8009098:	080090e7 	.word	0x080090e7
 800909c:	080090e7 	.word	0x080090e7
 80090a0:	080090e7 	.word	0x080090e7
 80090a4:	080090df 	.word	0x080090df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090a8:	f7fd ff5a 	bl	8006f60 <HAL_RCC_GetPCLK1Freq>
 80090ac:	61f8      	str	r0, [r7, #28]
        break;
 80090ae:	e020      	b.n	80090f2 <UART_SetConfig+0x342>
 80090b0:	efff69f3 	.word	0xefff69f3
 80090b4:	40008000 	.word	0x40008000
 80090b8:	40013800 	.word	0x40013800
 80090bc:	40021000 	.word	0x40021000
 80090c0:	40004400 	.word	0x40004400
 80090c4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090c8:	f7fd ff60 	bl	8006f8c <HAL_RCC_GetPCLK2Freq>
 80090cc:	61f8      	str	r0, [r7, #28]
        break;
 80090ce:	e010      	b.n	80090f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090d0:	4b4c      	ldr	r3, [pc, #304]	; (8009204 <UART_SetConfig+0x454>)
 80090d2:	61fb      	str	r3, [r7, #28]
        break;
 80090d4:	e00d      	b.n	80090f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090d6:	f7fd feab 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 80090da:	61f8      	str	r0, [r7, #28]
        break;
 80090dc:	e009      	b.n	80090f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090e2:	61fb      	str	r3, [r7, #28]
        break;
 80090e4:	e005      	b.n	80090f2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80090e6:	2300      	movs	r3, #0
 80090e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80090f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d077      	beq.n	80091e8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	005a      	lsls	r2, r3, #1
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	085b      	lsrs	r3, r3, #1
 8009102:	441a      	add	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	fbb2 f3f3 	udiv	r3, r2, r3
 800910c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b0f      	cmp	r3, #15
 8009112:	d916      	bls.n	8009142 <UART_SetConfig+0x392>
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800911a:	d212      	bcs.n	8009142 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	b29b      	uxth	r3, r3
 8009120:	f023 030f 	bic.w	r3, r3, #15
 8009124:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	085b      	lsrs	r3, r3, #1
 800912a:	b29b      	uxth	r3, r3
 800912c:	f003 0307 	and.w	r3, r3, #7
 8009130:	b29a      	uxth	r2, r3
 8009132:	8afb      	ldrh	r3, [r7, #22]
 8009134:	4313      	orrs	r3, r2
 8009136:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	8afa      	ldrh	r2, [r7, #22]
 800913e:	60da      	str	r2, [r3, #12]
 8009140:	e052      	b.n	80091e8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009148:	e04e      	b.n	80091e8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800914a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800914e:	2b08      	cmp	r3, #8
 8009150:	d827      	bhi.n	80091a2 <UART_SetConfig+0x3f2>
 8009152:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <UART_SetConfig+0x3a8>)
 8009154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009158:	0800917d 	.word	0x0800917d
 800915c:	08009185 	.word	0x08009185
 8009160:	0800918d 	.word	0x0800918d
 8009164:	080091a3 	.word	0x080091a3
 8009168:	08009193 	.word	0x08009193
 800916c:	080091a3 	.word	0x080091a3
 8009170:	080091a3 	.word	0x080091a3
 8009174:	080091a3 	.word	0x080091a3
 8009178:	0800919b 	.word	0x0800919b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800917c:	f7fd fef0 	bl	8006f60 <HAL_RCC_GetPCLK1Freq>
 8009180:	61f8      	str	r0, [r7, #28]
        break;
 8009182:	e014      	b.n	80091ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009184:	f7fd ff02 	bl	8006f8c <HAL_RCC_GetPCLK2Freq>
 8009188:	61f8      	str	r0, [r7, #28]
        break;
 800918a:	e010      	b.n	80091ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800918c:	4b1d      	ldr	r3, [pc, #116]	; (8009204 <UART_SetConfig+0x454>)
 800918e:	61fb      	str	r3, [r7, #28]
        break;
 8009190:	e00d      	b.n	80091ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009192:	f7fd fe4d 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 8009196:	61f8      	str	r0, [r7, #28]
        break;
 8009198:	e009      	b.n	80091ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800919a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800919e:	61fb      	str	r3, [r7, #28]
        break;
 80091a0:	e005      	b.n	80091ae <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80091a2:	2300      	movs	r3, #0
 80091a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80091ac:	bf00      	nop
    }

    if (pclk != 0U)
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d019      	beq.n	80091e8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	085a      	lsrs	r2, r3, #1
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	441a      	add	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	2b0f      	cmp	r3, #15
 80091cc:	d909      	bls.n	80091e2 <UART_SetConfig+0x432>
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d4:	d205      	bcs.n	80091e2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	b29a      	uxth	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60da      	str	r2, [r3, #12]
 80091e0:	e002      	b.n	80091e8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80091f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3728      	adds	r7, #40	; 0x28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009202:	bf00      	nop
 8009204:	00f42400 	.word	0x00f42400

08009208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	f003 0308 	and.w	r3, r3, #8
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00a      	beq.n	8009232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00a      	beq.n	8009254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	430a      	orrs	r2, r1
 8009252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00a      	beq.n	8009276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927a:	f003 0304 	and.w	r3, r3, #4
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	430a      	orrs	r2, r1
 8009296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929c:	f003 0310 	and.w	r3, r3, #16
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00a      	beq.n	80092ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	f003 0320 	and.w	r3, r3, #32
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	430a      	orrs	r2, r1
 80092da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01a      	beq.n	800931e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	430a      	orrs	r2, r1
 80092fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009306:	d10a      	bne.n	800931e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	605a      	str	r2, [r3, #4]
  }
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b098      	sub	sp, #96	; 0x60
 8009350:	af02      	add	r7, sp, #8
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800935c:	f7fa ff4a 	bl	80041f4 <HAL_GetTick>
 8009360:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0308 	and.w	r3, r3, #8
 800936c:	2b08      	cmp	r3, #8
 800936e:	d12e      	bne.n	80093ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009378:	2200      	movs	r2, #0
 800937a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f88c 	bl	800949c <UART_WaitOnFlagUntilTimeout>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d021      	beq.n	80093ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	e853 3f00 	ldrex	r3, [r3]
 8009396:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800939e:	653b      	str	r3, [r7, #80]	; 0x50
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	461a      	mov	r2, r3
 80093a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093a8:	647b      	str	r3, [r7, #68]	; 0x44
 80093aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e6      	bne.n	800938a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2220      	movs	r2, #32
 80093c0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e062      	b.n	8009494 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b04      	cmp	r3, #4
 80093da:	d149      	bne.n	8009470 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093e4:	2200      	movs	r2, #0
 80093e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f856 	bl	800949c <UART_WaitOnFlagUntilTimeout>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d03c      	beq.n	8009470 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	623b      	str	r3, [r7, #32]
   return(result);
 8009404:	6a3b      	ldr	r3, [r7, #32]
 8009406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800940a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009414:	633b      	str	r3, [r7, #48]	; 0x30
 8009416:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800941a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e6      	bne.n	80093f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3308      	adds	r3, #8
 800942e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	60fb      	str	r3, [r7, #12]
   return(result);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f023 0301 	bic.w	r3, r3, #1
 800943e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3308      	adds	r3, #8
 8009446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009448:	61fa      	str	r2, [r7, #28]
 800944a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944c:	69b9      	ldr	r1, [r7, #24]
 800944e:	69fa      	ldr	r2, [r7, #28]
 8009450:	e841 2300 	strex	r3, r2, [r1]
 8009454:	617b      	str	r3, [r7, #20]
   return(result);
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e5      	bne.n	8009428 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2220      	movs	r2, #32
 8009460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e011      	b.n	8009494 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2220      	movs	r2, #32
 8009474:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2220      	movs	r2, #32
 800947a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3758      	adds	r7, #88	; 0x58
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	4613      	mov	r3, r2
 80094aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ac:	e049      	b.n	8009542 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b4:	d045      	beq.n	8009542 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094b6:	f7fa fe9d 	bl	80041f4 <HAL_GetTick>
 80094ba:	4602      	mov	r2, r0
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d302      	bcc.n	80094cc <UART_WaitOnFlagUntilTimeout+0x30>
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e048      	b.n	8009562 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0304 	and.w	r3, r3, #4
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d031      	beq.n	8009542 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	f003 0308 	and.w	r3, r3, #8
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d110      	bne.n	800950e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2208      	movs	r2, #8
 80094f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 f838 	bl	800956a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2208      	movs	r2, #8
 80094fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e029      	b.n	8009562 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69db      	ldr	r3, [r3, #28]
 8009514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800951c:	d111      	bne.n	8009542 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 f81e 	bl	800956a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2220      	movs	r2, #32
 8009532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e00f      	b.n	8009562 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69da      	ldr	r2, [r3, #28]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	4013      	ands	r3, r2
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	429a      	cmp	r2, r3
 8009550:	bf0c      	ite	eq
 8009552:	2301      	moveq	r3, #1
 8009554:	2300      	movne	r3, #0
 8009556:	b2db      	uxtb	r3, r3
 8009558:	461a      	mov	r2, r3
 800955a:	79fb      	ldrb	r3, [r7, #7]
 800955c:	429a      	cmp	r2, r3
 800955e:	d0a6      	beq.n	80094ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800956a:	b480      	push	{r7}
 800956c:	b095      	sub	sp, #84	; 0x54
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957a:	e853 3f00 	ldrex	r3, [r3]
 800957e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009582:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	461a      	mov	r2, r3
 800958e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009590:	643b      	str	r3, [r7, #64]	; 0x40
 8009592:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009594:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009598:	e841 2300 	strex	r3, r2, [r1]
 800959c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1e6      	bne.n	8009572 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3308      	adds	r3, #8
 80095aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	e853 3f00 	ldrex	r3, [r3]
 80095b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	f023 0301 	bic.w	r3, r3, #1
 80095ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3308      	adds	r3, #8
 80095c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095cc:	e841 2300 	strex	r3, r2, [r1]
 80095d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1e5      	bne.n	80095a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d118      	bne.n	8009612 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	e853 3f00 	ldrex	r3, [r3]
 80095ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f023 0310 	bic.w	r3, r3, #16
 80095f4:	647b      	str	r3, [r7, #68]	; 0x44
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	461a      	mov	r2, r3
 80095fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095fe:	61bb      	str	r3, [r7, #24]
 8009600:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009602:	6979      	ldr	r1, [r7, #20]
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	e841 2300 	strex	r3, r2, [r1]
 800960a:	613b      	str	r3, [r7, #16]
   return(result);
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e6      	bne.n	80095e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2220      	movs	r2, #32
 8009616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009626:	bf00      	nop
 8009628:	3754      	adds	r7, #84	; 0x54
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f7ff fb97 	bl	8008d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009656:	bf00      	nop
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b088      	sub	sp, #32
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	e853 3f00 	ldrex	r3, [r3]
 8009672:	60bb      	str	r3, [r7, #8]
   return(result);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800967a:	61fb      	str	r3, [r7, #28]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	461a      	mov	r2, r3
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	61bb      	str	r3, [r7, #24]
 8009686:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	6979      	ldr	r1, [r7, #20]
 800968a:	69ba      	ldr	r2, [r7, #24]
 800968c:	e841 2300 	strex	r3, r2, [r1]
 8009690:	613b      	str	r3, [r7, #16]
   return(result);
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e6      	bne.n	8009666 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2220      	movs	r2, #32
 800969c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7ff fb63 	bl	8008d70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096aa:	bf00      	nop
 80096ac:	3720      	adds	r7, #32
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b086      	sub	sp, #24
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	607a      	str	r2, [r7, #4]
 80096be:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e056      	b.n	8009778 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d106      	bne.n	80096e0 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f7fa fbfe 	bl	8003edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2224      	movs	r2, #36	; 0x24
 80096e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 0201 	bic.w	r2, r2, #1
 80096f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f7ff fd82 	bl	8009208 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f7ff fb53 	bl	8008db0 <UART_SetConfig>
 800970a:	4603      	mov	r3, r0
 800970c:	2b01      	cmp	r3, #1
 800970e:	d101      	bne.n	8009714 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e031      	b.n	8009778 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	689a      	ldr	r2, [r3, #8]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009722:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	430a      	orrs	r2, r1
 8009736:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	055b      	lsls	r3, r3, #21
 800973c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	041b      	lsls	r3, r3, #16
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	4313      	orrs	r3, r2
 8009746:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8009752:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	6812      	ldr	r2, [r2, #0]
 800975a:	6979      	ldr	r1, [r7, #20]
 800975c:	430b      	orrs	r3, r1
 800975e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f042 0201 	orr.w	r2, r2, #1
 800976e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7ff fdeb 	bl	800934c <UART_CheckIdleState>
 8009776:	4603      	mov	r3, r0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <siprintf>:
 8009794:	b40e      	push	{r1, r2, r3}
 8009796:	b500      	push	{lr}
 8009798:	b09c      	sub	sp, #112	; 0x70
 800979a:	ab1d      	add	r3, sp, #116	; 0x74
 800979c:	9002      	str	r0, [sp, #8]
 800979e:	9006      	str	r0, [sp, #24]
 80097a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097a4:	4809      	ldr	r0, [pc, #36]	; (80097cc <siprintf+0x38>)
 80097a6:	9107      	str	r1, [sp, #28]
 80097a8:	9104      	str	r1, [sp, #16]
 80097aa:	4909      	ldr	r1, [pc, #36]	; (80097d0 <siprintf+0x3c>)
 80097ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b0:	9105      	str	r1, [sp, #20]
 80097b2:	6800      	ldr	r0, [r0, #0]
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	a902      	add	r1, sp, #8
 80097b8:	f000 f9a0 	bl	8009afc <_svfiprintf_r>
 80097bc:	9b02      	ldr	r3, [sp, #8]
 80097be:	2200      	movs	r2, #0
 80097c0:	701a      	strb	r2, [r3, #0]
 80097c2:	b01c      	add	sp, #112	; 0x70
 80097c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097c8:	b003      	add	sp, #12
 80097ca:	4770      	bx	lr
 80097cc:	20000058 	.word	0x20000058
 80097d0:	ffff0208 	.word	0xffff0208

080097d4 <memset>:
 80097d4:	4402      	add	r2, r0
 80097d6:	4603      	mov	r3, r0
 80097d8:	4293      	cmp	r3, r2
 80097da:	d100      	bne.n	80097de <memset+0xa>
 80097dc:	4770      	bx	lr
 80097de:	f803 1b01 	strb.w	r1, [r3], #1
 80097e2:	e7f9      	b.n	80097d8 <memset+0x4>

080097e4 <__errno>:
 80097e4:	4b01      	ldr	r3, [pc, #4]	; (80097ec <__errno+0x8>)
 80097e6:	6818      	ldr	r0, [r3, #0]
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	20000058 	.word	0x20000058

080097f0 <__libc_init_array>:
 80097f0:	b570      	push	{r4, r5, r6, lr}
 80097f2:	4d0d      	ldr	r5, [pc, #52]	; (8009828 <__libc_init_array+0x38>)
 80097f4:	4c0d      	ldr	r4, [pc, #52]	; (800982c <__libc_init_array+0x3c>)
 80097f6:	1b64      	subs	r4, r4, r5
 80097f8:	10a4      	asrs	r4, r4, #2
 80097fa:	2600      	movs	r6, #0
 80097fc:	42a6      	cmp	r6, r4
 80097fe:	d109      	bne.n	8009814 <__libc_init_array+0x24>
 8009800:	4d0b      	ldr	r5, [pc, #44]	; (8009830 <__libc_init_array+0x40>)
 8009802:	4c0c      	ldr	r4, [pc, #48]	; (8009834 <__libc_init_array+0x44>)
 8009804:	f000 fc6a 	bl	800a0dc <_init>
 8009808:	1b64      	subs	r4, r4, r5
 800980a:	10a4      	asrs	r4, r4, #2
 800980c:	2600      	movs	r6, #0
 800980e:	42a6      	cmp	r6, r4
 8009810:	d105      	bne.n	800981e <__libc_init_array+0x2e>
 8009812:	bd70      	pop	{r4, r5, r6, pc}
 8009814:	f855 3b04 	ldr.w	r3, [r5], #4
 8009818:	4798      	blx	r3
 800981a:	3601      	adds	r6, #1
 800981c:	e7ee      	b.n	80097fc <__libc_init_array+0xc>
 800981e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009822:	4798      	blx	r3
 8009824:	3601      	adds	r6, #1
 8009826:	e7f2      	b.n	800980e <__libc_init_array+0x1e>
 8009828:	0801d668 	.word	0x0801d668
 800982c:	0801d668 	.word	0x0801d668
 8009830:	0801d668 	.word	0x0801d668
 8009834:	0801d66c 	.word	0x0801d66c

08009838 <__retarget_lock_acquire_recursive>:
 8009838:	4770      	bx	lr

0800983a <__retarget_lock_release_recursive>:
 800983a:	4770      	bx	lr

0800983c <memcpy>:
 800983c:	440a      	add	r2, r1
 800983e:	4291      	cmp	r1, r2
 8009840:	f100 33ff 	add.w	r3, r0, #4294967295
 8009844:	d100      	bne.n	8009848 <memcpy+0xc>
 8009846:	4770      	bx	lr
 8009848:	b510      	push	{r4, lr}
 800984a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800984e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009852:	4291      	cmp	r1, r2
 8009854:	d1f9      	bne.n	800984a <memcpy+0xe>
 8009856:	bd10      	pop	{r4, pc}

08009858 <_free_r>:
 8009858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800985a:	2900      	cmp	r1, #0
 800985c:	d044      	beq.n	80098e8 <_free_r+0x90>
 800985e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009862:	9001      	str	r0, [sp, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	f1a1 0404 	sub.w	r4, r1, #4
 800986a:	bfb8      	it	lt
 800986c:	18e4      	addlt	r4, r4, r3
 800986e:	f000 f8df 	bl	8009a30 <__malloc_lock>
 8009872:	4a1e      	ldr	r2, [pc, #120]	; (80098ec <_free_r+0x94>)
 8009874:	9801      	ldr	r0, [sp, #4]
 8009876:	6813      	ldr	r3, [r2, #0]
 8009878:	b933      	cbnz	r3, 8009888 <_free_r+0x30>
 800987a:	6063      	str	r3, [r4, #4]
 800987c:	6014      	str	r4, [r2, #0]
 800987e:	b003      	add	sp, #12
 8009880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009884:	f000 b8da 	b.w	8009a3c <__malloc_unlock>
 8009888:	42a3      	cmp	r3, r4
 800988a:	d908      	bls.n	800989e <_free_r+0x46>
 800988c:	6825      	ldr	r5, [r4, #0]
 800988e:	1961      	adds	r1, r4, r5
 8009890:	428b      	cmp	r3, r1
 8009892:	bf01      	itttt	eq
 8009894:	6819      	ldreq	r1, [r3, #0]
 8009896:	685b      	ldreq	r3, [r3, #4]
 8009898:	1949      	addeq	r1, r1, r5
 800989a:	6021      	streq	r1, [r4, #0]
 800989c:	e7ed      	b.n	800987a <_free_r+0x22>
 800989e:	461a      	mov	r2, r3
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	b10b      	cbz	r3, 80098a8 <_free_r+0x50>
 80098a4:	42a3      	cmp	r3, r4
 80098a6:	d9fa      	bls.n	800989e <_free_r+0x46>
 80098a8:	6811      	ldr	r1, [r2, #0]
 80098aa:	1855      	adds	r5, r2, r1
 80098ac:	42a5      	cmp	r5, r4
 80098ae:	d10b      	bne.n	80098c8 <_free_r+0x70>
 80098b0:	6824      	ldr	r4, [r4, #0]
 80098b2:	4421      	add	r1, r4
 80098b4:	1854      	adds	r4, r2, r1
 80098b6:	42a3      	cmp	r3, r4
 80098b8:	6011      	str	r1, [r2, #0]
 80098ba:	d1e0      	bne.n	800987e <_free_r+0x26>
 80098bc:	681c      	ldr	r4, [r3, #0]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	6053      	str	r3, [r2, #4]
 80098c2:	440c      	add	r4, r1
 80098c4:	6014      	str	r4, [r2, #0]
 80098c6:	e7da      	b.n	800987e <_free_r+0x26>
 80098c8:	d902      	bls.n	80098d0 <_free_r+0x78>
 80098ca:	230c      	movs	r3, #12
 80098cc:	6003      	str	r3, [r0, #0]
 80098ce:	e7d6      	b.n	800987e <_free_r+0x26>
 80098d0:	6825      	ldr	r5, [r4, #0]
 80098d2:	1961      	adds	r1, r4, r5
 80098d4:	428b      	cmp	r3, r1
 80098d6:	bf04      	itt	eq
 80098d8:	6819      	ldreq	r1, [r3, #0]
 80098da:	685b      	ldreq	r3, [r3, #4]
 80098dc:	6063      	str	r3, [r4, #4]
 80098de:	bf04      	itt	eq
 80098e0:	1949      	addeq	r1, r1, r5
 80098e2:	6021      	streq	r1, [r4, #0]
 80098e4:	6054      	str	r4, [r2, #4]
 80098e6:	e7ca      	b.n	800987e <_free_r+0x26>
 80098e8:	b003      	add	sp, #12
 80098ea:	bd30      	pop	{r4, r5, pc}
 80098ec:	200055a4 	.word	0x200055a4

080098f0 <sbrk_aligned>:
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	4e0e      	ldr	r6, [pc, #56]	; (800992c <sbrk_aligned+0x3c>)
 80098f4:	460c      	mov	r4, r1
 80098f6:	6831      	ldr	r1, [r6, #0]
 80098f8:	4605      	mov	r5, r0
 80098fa:	b911      	cbnz	r1, 8009902 <sbrk_aligned+0x12>
 80098fc:	f000 fba6 	bl	800a04c <_sbrk_r>
 8009900:	6030      	str	r0, [r6, #0]
 8009902:	4621      	mov	r1, r4
 8009904:	4628      	mov	r0, r5
 8009906:	f000 fba1 	bl	800a04c <_sbrk_r>
 800990a:	1c43      	adds	r3, r0, #1
 800990c:	d00a      	beq.n	8009924 <sbrk_aligned+0x34>
 800990e:	1cc4      	adds	r4, r0, #3
 8009910:	f024 0403 	bic.w	r4, r4, #3
 8009914:	42a0      	cmp	r0, r4
 8009916:	d007      	beq.n	8009928 <sbrk_aligned+0x38>
 8009918:	1a21      	subs	r1, r4, r0
 800991a:	4628      	mov	r0, r5
 800991c:	f000 fb96 	bl	800a04c <_sbrk_r>
 8009920:	3001      	adds	r0, #1
 8009922:	d101      	bne.n	8009928 <sbrk_aligned+0x38>
 8009924:	f04f 34ff 	mov.w	r4, #4294967295
 8009928:	4620      	mov	r0, r4
 800992a:	bd70      	pop	{r4, r5, r6, pc}
 800992c:	200055a8 	.word	0x200055a8

08009930 <_malloc_r>:
 8009930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009934:	1ccd      	adds	r5, r1, #3
 8009936:	f025 0503 	bic.w	r5, r5, #3
 800993a:	3508      	adds	r5, #8
 800993c:	2d0c      	cmp	r5, #12
 800993e:	bf38      	it	cc
 8009940:	250c      	movcc	r5, #12
 8009942:	2d00      	cmp	r5, #0
 8009944:	4607      	mov	r7, r0
 8009946:	db01      	blt.n	800994c <_malloc_r+0x1c>
 8009948:	42a9      	cmp	r1, r5
 800994a:	d905      	bls.n	8009958 <_malloc_r+0x28>
 800994c:	230c      	movs	r3, #12
 800994e:	603b      	str	r3, [r7, #0]
 8009950:	2600      	movs	r6, #0
 8009952:	4630      	mov	r0, r6
 8009954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009958:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a2c <_malloc_r+0xfc>
 800995c:	f000 f868 	bl	8009a30 <__malloc_lock>
 8009960:	f8d8 3000 	ldr.w	r3, [r8]
 8009964:	461c      	mov	r4, r3
 8009966:	bb5c      	cbnz	r4, 80099c0 <_malloc_r+0x90>
 8009968:	4629      	mov	r1, r5
 800996a:	4638      	mov	r0, r7
 800996c:	f7ff ffc0 	bl	80098f0 <sbrk_aligned>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	4604      	mov	r4, r0
 8009974:	d155      	bne.n	8009a22 <_malloc_r+0xf2>
 8009976:	f8d8 4000 	ldr.w	r4, [r8]
 800997a:	4626      	mov	r6, r4
 800997c:	2e00      	cmp	r6, #0
 800997e:	d145      	bne.n	8009a0c <_malloc_r+0xdc>
 8009980:	2c00      	cmp	r4, #0
 8009982:	d048      	beq.n	8009a16 <_malloc_r+0xe6>
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	4631      	mov	r1, r6
 8009988:	4638      	mov	r0, r7
 800998a:	eb04 0903 	add.w	r9, r4, r3
 800998e:	f000 fb5d 	bl	800a04c <_sbrk_r>
 8009992:	4581      	cmp	r9, r0
 8009994:	d13f      	bne.n	8009a16 <_malloc_r+0xe6>
 8009996:	6821      	ldr	r1, [r4, #0]
 8009998:	1a6d      	subs	r5, r5, r1
 800999a:	4629      	mov	r1, r5
 800999c:	4638      	mov	r0, r7
 800999e:	f7ff ffa7 	bl	80098f0 <sbrk_aligned>
 80099a2:	3001      	adds	r0, #1
 80099a4:	d037      	beq.n	8009a16 <_malloc_r+0xe6>
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	442b      	add	r3, r5
 80099aa:	6023      	str	r3, [r4, #0]
 80099ac:	f8d8 3000 	ldr.w	r3, [r8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d038      	beq.n	8009a26 <_malloc_r+0xf6>
 80099b4:	685a      	ldr	r2, [r3, #4]
 80099b6:	42a2      	cmp	r2, r4
 80099b8:	d12b      	bne.n	8009a12 <_malloc_r+0xe2>
 80099ba:	2200      	movs	r2, #0
 80099bc:	605a      	str	r2, [r3, #4]
 80099be:	e00f      	b.n	80099e0 <_malloc_r+0xb0>
 80099c0:	6822      	ldr	r2, [r4, #0]
 80099c2:	1b52      	subs	r2, r2, r5
 80099c4:	d41f      	bmi.n	8009a06 <_malloc_r+0xd6>
 80099c6:	2a0b      	cmp	r2, #11
 80099c8:	d917      	bls.n	80099fa <_malloc_r+0xca>
 80099ca:	1961      	adds	r1, r4, r5
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	6025      	str	r5, [r4, #0]
 80099d0:	bf18      	it	ne
 80099d2:	6059      	strne	r1, [r3, #4]
 80099d4:	6863      	ldr	r3, [r4, #4]
 80099d6:	bf08      	it	eq
 80099d8:	f8c8 1000 	streq.w	r1, [r8]
 80099dc:	5162      	str	r2, [r4, r5]
 80099de:	604b      	str	r3, [r1, #4]
 80099e0:	4638      	mov	r0, r7
 80099e2:	f104 060b 	add.w	r6, r4, #11
 80099e6:	f000 f829 	bl	8009a3c <__malloc_unlock>
 80099ea:	f026 0607 	bic.w	r6, r6, #7
 80099ee:	1d23      	adds	r3, r4, #4
 80099f0:	1af2      	subs	r2, r6, r3
 80099f2:	d0ae      	beq.n	8009952 <_malloc_r+0x22>
 80099f4:	1b9b      	subs	r3, r3, r6
 80099f6:	50a3      	str	r3, [r4, r2]
 80099f8:	e7ab      	b.n	8009952 <_malloc_r+0x22>
 80099fa:	42a3      	cmp	r3, r4
 80099fc:	6862      	ldr	r2, [r4, #4]
 80099fe:	d1dd      	bne.n	80099bc <_malloc_r+0x8c>
 8009a00:	f8c8 2000 	str.w	r2, [r8]
 8009a04:	e7ec      	b.n	80099e0 <_malloc_r+0xb0>
 8009a06:	4623      	mov	r3, r4
 8009a08:	6864      	ldr	r4, [r4, #4]
 8009a0a:	e7ac      	b.n	8009966 <_malloc_r+0x36>
 8009a0c:	4634      	mov	r4, r6
 8009a0e:	6876      	ldr	r6, [r6, #4]
 8009a10:	e7b4      	b.n	800997c <_malloc_r+0x4c>
 8009a12:	4613      	mov	r3, r2
 8009a14:	e7cc      	b.n	80099b0 <_malloc_r+0x80>
 8009a16:	230c      	movs	r3, #12
 8009a18:	603b      	str	r3, [r7, #0]
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	f000 f80e 	bl	8009a3c <__malloc_unlock>
 8009a20:	e797      	b.n	8009952 <_malloc_r+0x22>
 8009a22:	6025      	str	r5, [r4, #0]
 8009a24:	e7dc      	b.n	80099e0 <_malloc_r+0xb0>
 8009a26:	605b      	str	r3, [r3, #4]
 8009a28:	deff      	udf	#255	; 0xff
 8009a2a:	bf00      	nop
 8009a2c:	200055a4 	.word	0x200055a4

08009a30 <__malloc_lock>:
 8009a30:	4801      	ldr	r0, [pc, #4]	; (8009a38 <__malloc_lock+0x8>)
 8009a32:	f7ff bf01 	b.w	8009838 <__retarget_lock_acquire_recursive>
 8009a36:	bf00      	nop
 8009a38:	200055a0 	.word	0x200055a0

08009a3c <__malloc_unlock>:
 8009a3c:	4801      	ldr	r0, [pc, #4]	; (8009a44 <__malloc_unlock+0x8>)
 8009a3e:	f7ff befc 	b.w	800983a <__retarget_lock_release_recursive>
 8009a42:	bf00      	nop
 8009a44:	200055a0 	.word	0x200055a0

08009a48 <__ssputs_r>:
 8009a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a4c:	688e      	ldr	r6, [r1, #8]
 8009a4e:	461f      	mov	r7, r3
 8009a50:	42be      	cmp	r6, r7
 8009a52:	680b      	ldr	r3, [r1, #0]
 8009a54:	4682      	mov	sl, r0
 8009a56:	460c      	mov	r4, r1
 8009a58:	4690      	mov	r8, r2
 8009a5a:	d82c      	bhi.n	8009ab6 <__ssputs_r+0x6e>
 8009a5c:	898a      	ldrh	r2, [r1, #12]
 8009a5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a62:	d026      	beq.n	8009ab2 <__ssputs_r+0x6a>
 8009a64:	6965      	ldr	r5, [r4, #20]
 8009a66:	6909      	ldr	r1, [r1, #16]
 8009a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a6c:	eba3 0901 	sub.w	r9, r3, r1
 8009a70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a74:	1c7b      	adds	r3, r7, #1
 8009a76:	444b      	add	r3, r9
 8009a78:	106d      	asrs	r5, r5, #1
 8009a7a:	429d      	cmp	r5, r3
 8009a7c:	bf38      	it	cc
 8009a7e:	461d      	movcc	r5, r3
 8009a80:	0553      	lsls	r3, r2, #21
 8009a82:	d527      	bpl.n	8009ad4 <__ssputs_r+0x8c>
 8009a84:	4629      	mov	r1, r5
 8009a86:	f7ff ff53 	bl	8009930 <_malloc_r>
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	b360      	cbz	r0, 8009ae8 <__ssputs_r+0xa0>
 8009a8e:	6921      	ldr	r1, [r4, #16]
 8009a90:	464a      	mov	r2, r9
 8009a92:	f7ff fed3 	bl	800983c <memcpy>
 8009a96:	89a3      	ldrh	r3, [r4, #12]
 8009a98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa0:	81a3      	strh	r3, [r4, #12]
 8009aa2:	6126      	str	r6, [r4, #16]
 8009aa4:	6165      	str	r5, [r4, #20]
 8009aa6:	444e      	add	r6, r9
 8009aa8:	eba5 0509 	sub.w	r5, r5, r9
 8009aac:	6026      	str	r6, [r4, #0]
 8009aae:	60a5      	str	r5, [r4, #8]
 8009ab0:	463e      	mov	r6, r7
 8009ab2:	42be      	cmp	r6, r7
 8009ab4:	d900      	bls.n	8009ab8 <__ssputs_r+0x70>
 8009ab6:	463e      	mov	r6, r7
 8009ab8:	6820      	ldr	r0, [r4, #0]
 8009aba:	4632      	mov	r2, r6
 8009abc:	4641      	mov	r1, r8
 8009abe:	f000 faab 	bl	800a018 <memmove>
 8009ac2:	68a3      	ldr	r3, [r4, #8]
 8009ac4:	1b9b      	subs	r3, r3, r6
 8009ac6:	60a3      	str	r3, [r4, #8]
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	4433      	add	r3, r6
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	2000      	movs	r0, #0
 8009ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad4:	462a      	mov	r2, r5
 8009ad6:	f000 fac9 	bl	800a06c <_realloc_r>
 8009ada:	4606      	mov	r6, r0
 8009adc:	2800      	cmp	r0, #0
 8009ade:	d1e0      	bne.n	8009aa2 <__ssputs_r+0x5a>
 8009ae0:	6921      	ldr	r1, [r4, #16]
 8009ae2:	4650      	mov	r0, sl
 8009ae4:	f7ff feb8 	bl	8009858 <_free_r>
 8009ae8:	230c      	movs	r3, #12
 8009aea:	f8ca 3000 	str.w	r3, [sl]
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009af4:	81a3      	strh	r3, [r4, #12]
 8009af6:	f04f 30ff 	mov.w	r0, #4294967295
 8009afa:	e7e9      	b.n	8009ad0 <__ssputs_r+0x88>

08009afc <_svfiprintf_r>:
 8009afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b00:	4698      	mov	r8, r3
 8009b02:	898b      	ldrh	r3, [r1, #12]
 8009b04:	061b      	lsls	r3, r3, #24
 8009b06:	b09d      	sub	sp, #116	; 0x74
 8009b08:	4607      	mov	r7, r0
 8009b0a:	460d      	mov	r5, r1
 8009b0c:	4614      	mov	r4, r2
 8009b0e:	d50e      	bpl.n	8009b2e <_svfiprintf_r+0x32>
 8009b10:	690b      	ldr	r3, [r1, #16]
 8009b12:	b963      	cbnz	r3, 8009b2e <_svfiprintf_r+0x32>
 8009b14:	2140      	movs	r1, #64	; 0x40
 8009b16:	f7ff ff0b 	bl	8009930 <_malloc_r>
 8009b1a:	6028      	str	r0, [r5, #0]
 8009b1c:	6128      	str	r0, [r5, #16]
 8009b1e:	b920      	cbnz	r0, 8009b2a <_svfiprintf_r+0x2e>
 8009b20:	230c      	movs	r3, #12
 8009b22:	603b      	str	r3, [r7, #0]
 8009b24:	f04f 30ff 	mov.w	r0, #4294967295
 8009b28:	e0d0      	b.n	8009ccc <_svfiprintf_r+0x1d0>
 8009b2a:	2340      	movs	r3, #64	; 0x40
 8009b2c:	616b      	str	r3, [r5, #20]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	9309      	str	r3, [sp, #36]	; 0x24
 8009b32:	2320      	movs	r3, #32
 8009b34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b38:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b3c:	2330      	movs	r3, #48	; 0x30
 8009b3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ce4 <_svfiprintf_r+0x1e8>
 8009b42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b46:	f04f 0901 	mov.w	r9, #1
 8009b4a:	4623      	mov	r3, r4
 8009b4c:	469a      	mov	sl, r3
 8009b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b52:	b10a      	cbz	r2, 8009b58 <_svfiprintf_r+0x5c>
 8009b54:	2a25      	cmp	r2, #37	; 0x25
 8009b56:	d1f9      	bne.n	8009b4c <_svfiprintf_r+0x50>
 8009b58:	ebba 0b04 	subs.w	fp, sl, r4
 8009b5c:	d00b      	beq.n	8009b76 <_svfiprintf_r+0x7a>
 8009b5e:	465b      	mov	r3, fp
 8009b60:	4622      	mov	r2, r4
 8009b62:	4629      	mov	r1, r5
 8009b64:	4638      	mov	r0, r7
 8009b66:	f7ff ff6f 	bl	8009a48 <__ssputs_r>
 8009b6a:	3001      	adds	r0, #1
 8009b6c:	f000 80a9 	beq.w	8009cc2 <_svfiprintf_r+0x1c6>
 8009b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b72:	445a      	add	r2, fp
 8009b74:	9209      	str	r2, [sp, #36]	; 0x24
 8009b76:	f89a 3000 	ldrb.w	r3, [sl]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 80a1 	beq.w	8009cc2 <_svfiprintf_r+0x1c6>
 8009b80:	2300      	movs	r3, #0
 8009b82:	f04f 32ff 	mov.w	r2, #4294967295
 8009b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b8a:	f10a 0a01 	add.w	sl, sl, #1
 8009b8e:	9304      	str	r3, [sp, #16]
 8009b90:	9307      	str	r3, [sp, #28]
 8009b92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b96:	931a      	str	r3, [sp, #104]	; 0x68
 8009b98:	4654      	mov	r4, sl
 8009b9a:	2205      	movs	r2, #5
 8009b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba0:	4850      	ldr	r0, [pc, #320]	; (8009ce4 <_svfiprintf_r+0x1e8>)
 8009ba2:	f7f6 fb1d 	bl	80001e0 <memchr>
 8009ba6:	9a04      	ldr	r2, [sp, #16]
 8009ba8:	b9d8      	cbnz	r0, 8009be2 <_svfiprintf_r+0xe6>
 8009baa:	06d0      	lsls	r0, r2, #27
 8009bac:	bf44      	itt	mi
 8009bae:	2320      	movmi	r3, #32
 8009bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bb4:	0711      	lsls	r1, r2, #28
 8009bb6:	bf44      	itt	mi
 8009bb8:	232b      	movmi	r3, #43	; 0x2b
 8009bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8009bc4:	d015      	beq.n	8009bf2 <_svfiprintf_r+0xf6>
 8009bc6:	9a07      	ldr	r2, [sp, #28]
 8009bc8:	4654      	mov	r4, sl
 8009bca:	2000      	movs	r0, #0
 8009bcc:	f04f 0c0a 	mov.w	ip, #10
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bd6:	3b30      	subs	r3, #48	; 0x30
 8009bd8:	2b09      	cmp	r3, #9
 8009bda:	d94d      	bls.n	8009c78 <_svfiprintf_r+0x17c>
 8009bdc:	b1b0      	cbz	r0, 8009c0c <_svfiprintf_r+0x110>
 8009bde:	9207      	str	r2, [sp, #28]
 8009be0:	e014      	b.n	8009c0c <_svfiprintf_r+0x110>
 8009be2:	eba0 0308 	sub.w	r3, r0, r8
 8009be6:	fa09 f303 	lsl.w	r3, r9, r3
 8009bea:	4313      	orrs	r3, r2
 8009bec:	9304      	str	r3, [sp, #16]
 8009bee:	46a2      	mov	sl, r4
 8009bf0:	e7d2      	b.n	8009b98 <_svfiprintf_r+0x9c>
 8009bf2:	9b03      	ldr	r3, [sp, #12]
 8009bf4:	1d19      	adds	r1, r3, #4
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	9103      	str	r1, [sp, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	bfbb      	ittet	lt
 8009bfe:	425b      	neglt	r3, r3
 8009c00:	f042 0202 	orrlt.w	r2, r2, #2
 8009c04:	9307      	strge	r3, [sp, #28]
 8009c06:	9307      	strlt	r3, [sp, #28]
 8009c08:	bfb8      	it	lt
 8009c0a:	9204      	strlt	r2, [sp, #16]
 8009c0c:	7823      	ldrb	r3, [r4, #0]
 8009c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8009c10:	d10c      	bne.n	8009c2c <_svfiprintf_r+0x130>
 8009c12:	7863      	ldrb	r3, [r4, #1]
 8009c14:	2b2a      	cmp	r3, #42	; 0x2a
 8009c16:	d134      	bne.n	8009c82 <_svfiprintf_r+0x186>
 8009c18:	9b03      	ldr	r3, [sp, #12]
 8009c1a:	1d1a      	adds	r2, r3, #4
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	9203      	str	r2, [sp, #12]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	bfb8      	it	lt
 8009c24:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c28:	3402      	adds	r4, #2
 8009c2a:	9305      	str	r3, [sp, #20]
 8009c2c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009cf4 <_svfiprintf_r+0x1f8>
 8009c30:	7821      	ldrb	r1, [r4, #0]
 8009c32:	2203      	movs	r2, #3
 8009c34:	4650      	mov	r0, sl
 8009c36:	f7f6 fad3 	bl	80001e0 <memchr>
 8009c3a:	b138      	cbz	r0, 8009c4c <_svfiprintf_r+0x150>
 8009c3c:	9b04      	ldr	r3, [sp, #16]
 8009c3e:	eba0 000a 	sub.w	r0, r0, sl
 8009c42:	2240      	movs	r2, #64	; 0x40
 8009c44:	4082      	lsls	r2, r0
 8009c46:	4313      	orrs	r3, r2
 8009c48:	3401      	adds	r4, #1
 8009c4a:	9304      	str	r3, [sp, #16]
 8009c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c50:	4825      	ldr	r0, [pc, #148]	; (8009ce8 <_svfiprintf_r+0x1ec>)
 8009c52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c56:	2206      	movs	r2, #6
 8009c58:	f7f6 fac2 	bl	80001e0 <memchr>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d038      	beq.n	8009cd2 <_svfiprintf_r+0x1d6>
 8009c60:	4b22      	ldr	r3, [pc, #136]	; (8009cec <_svfiprintf_r+0x1f0>)
 8009c62:	bb1b      	cbnz	r3, 8009cac <_svfiprintf_r+0x1b0>
 8009c64:	9b03      	ldr	r3, [sp, #12]
 8009c66:	3307      	adds	r3, #7
 8009c68:	f023 0307 	bic.w	r3, r3, #7
 8009c6c:	3308      	adds	r3, #8
 8009c6e:	9303      	str	r3, [sp, #12]
 8009c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c72:	4433      	add	r3, r6
 8009c74:	9309      	str	r3, [sp, #36]	; 0x24
 8009c76:	e768      	b.n	8009b4a <_svfiprintf_r+0x4e>
 8009c78:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	2001      	movs	r0, #1
 8009c80:	e7a6      	b.n	8009bd0 <_svfiprintf_r+0xd4>
 8009c82:	2300      	movs	r3, #0
 8009c84:	3401      	adds	r4, #1
 8009c86:	9305      	str	r3, [sp, #20]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	f04f 0c0a 	mov.w	ip, #10
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c94:	3a30      	subs	r2, #48	; 0x30
 8009c96:	2a09      	cmp	r2, #9
 8009c98:	d903      	bls.n	8009ca2 <_svfiprintf_r+0x1a6>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0c6      	beq.n	8009c2c <_svfiprintf_r+0x130>
 8009c9e:	9105      	str	r1, [sp, #20]
 8009ca0:	e7c4      	b.n	8009c2c <_svfiprintf_r+0x130>
 8009ca2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e7f0      	b.n	8009c8e <_svfiprintf_r+0x192>
 8009cac:	ab03      	add	r3, sp, #12
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	462a      	mov	r2, r5
 8009cb2:	4b0f      	ldr	r3, [pc, #60]	; (8009cf0 <_svfiprintf_r+0x1f4>)
 8009cb4:	a904      	add	r1, sp, #16
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	f3af 8000 	nop.w
 8009cbc:	1c42      	adds	r2, r0, #1
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	d1d6      	bne.n	8009c70 <_svfiprintf_r+0x174>
 8009cc2:	89ab      	ldrh	r3, [r5, #12]
 8009cc4:	065b      	lsls	r3, r3, #25
 8009cc6:	f53f af2d 	bmi.w	8009b24 <_svfiprintf_r+0x28>
 8009cca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ccc:	b01d      	add	sp, #116	; 0x74
 8009cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd2:	ab03      	add	r3, sp, #12
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	462a      	mov	r2, r5
 8009cd8:	4b05      	ldr	r3, [pc, #20]	; (8009cf0 <_svfiprintf_r+0x1f4>)
 8009cda:	a904      	add	r1, sp, #16
 8009cdc:	4638      	mov	r0, r7
 8009cde:	f000 f879 	bl	8009dd4 <_printf_i>
 8009ce2:	e7eb      	b.n	8009cbc <_svfiprintf_r+0x1c0>
 8009ce4:	0801d62c 	.word	0x0801d62c
 8009ce8:	0801d636 	.word	0x0801d636
 8009cec:	00000000 	.word	0x00000000
 8009cf0:	08009a49 	.word	0x08009a49
 8009cf4:	0801d632 	.word	0x0801d632

08009cf8 <_printf_common>:
 8009cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cfc:	4616      	mov	r6, r2
 8009cfe:	4699      	mov	r9, r3
 8009d00:	688a      	ldr	r2, [r1, #8]
 8009d02:	690b      	ldr	r3, [r1, #16]
 8009d04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	bfb8      	it	lt
 8009d0c:	4613      	movlt	r3, r2
 8009d0e:	6033      	str	r3, [r6, #0]
 8009d10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d14:	4607      	mov	r7, r0
 8009d16:	460c      	mov	r4, r1
 8009d18:	b10a      	cbz	r2, 8009d1e <_printf_common+0x26>
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	6033      	str	r3, [r6, #0]
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	0699      	lsls	r1, r3, #26
 8009d22:	bf42      	ittt	mi
 8009d24:	6833      	ldrmi	r3, [r6, #0]
 8009d26:	3302      	addmi	r3, #2
 8009d28:	6033      	strmi	r3, [r6, #0]
 8009d2a:	6825      	ldr	r5, [r4, #0]
 8009d2c:	f015 0506 	ands.w	r5, r5, #6
 8009d30:	d106      	bne.n	8009d40 <_printf_common+0x48>
 8009d32:	f104 0a19 	add.w	sl, r4, #25
 8009d36:	68e3      	ldr	r3, [r4, #12]
 8009d38:	6832      	ldr	r2, [r6, #0]
 8009d3a:	1a9b      	subs	r3, r3, r2
 8009d3c:	42ab      	cmp	r3, r5
 8009d3e:	dc26      	bgt.n	8009d8e <_printf_common+0x96>
 8009d40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d44:	1e13      	subs	r3, r2, #0
 8009d46:	6822      	ldr	r2, [r4, #0]
 8009d48:	bf18      	it	ne
 8009d4a:	2301      	movne	r3, #1
 8009d4c:	0692      	lsls	r2, r2, #26
 8009d4e:	d42b      	bmi.n	8009da8 <_printf_common+0xb0>
 8009d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d54:	4649      	mov	r1, r9
 8009d56:	4638      	mov	r0, r7
 8009d58:	47c0      	blx	r8
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	d01e      	beq.n	8009d9c <_printf_common+0xa4>
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	6922      	ldr	r2, [r4, #16]
 8009d62:	f003 0306 	and.w	r3, r3, #6
 8009d66:	2b04      	cmp	r3, #4
 8009d68:	bf02      	ittt	eq
 8009d6a:	68e5      	ldreq	r5, [r4, #12]
 8009d6c:	6833      	ldreq	r3, [r6, #0]
 8009d6e:	1aed      	subeq	r5, r5, r3
 8009d70:	68a3      	ldr	r3, [r4, #8]
 8009d72:	bf0c      	ite	eq
 8009d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d78:	2500      	movne	r5, #0
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	bfc4      	itt	gt
 8009d7e:	1a9b      	subgt	r3, r3, r2
 8009d80:	18ed      	addgt	r5, r5, r3
 8009d82:	2600      	movs	r6, #0
 8009d84:	341a      	adds	r4, #26
 8009d86:	42b5      	cmp	r5, r6
 8009d88:	d11a      	bne.n	8009dc0 <_printf_common+0xc8>
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	e008      	b.n	8009da0 <_printf_common+0xa8>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	4652      	mov	r2, sl
 8009d92:	4649      	mov	r1, r9
 8009d94:	4638      	mov	r0, r7
 8009d96:	47c0      	blx	r8
 8009d98:	3001      	adds	r0, #1
 8009d9a:	d103      	bne.n	8009da4 <_printf_common+0xac>
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da4:	3501      	adds	r5, #1
 8009da6:	e7c6      	b.n	8009d36 <_printf_common+0x3e>
 8009da8:	18e1      	adds	r1, r4, r3
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	2030      	movs	r0, #48	; 0x30
 8009dae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009db2:	4422      	add	r2, r4
 8009db4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dbc:	3302      	adds	r3, #2
 8009dbe:	e7c7      	b.n	8009d50 <_printf_common+0x58>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	4622      	mov	r2, r4
 8009dc4:	4649      	mov	r1, r9
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	47c0      	blx	r8
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d0e6      	beq.n	8009d9c <_printf_common+0xa4>
 8009dce:	3601      	adds	r6, #1
 8009dd0:	e7d9      	b.n	8009d86 <_printf_common+0x8e>
	...

08009dd4 <_printf_i>:
 8009dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd8:	7e0f      	ldrb	r7, [r1, #24]
 8009dda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ddc:	2f78      	cmp	r7, #120	; 0x78
 8009dde:	4691      	mov	r9, r2
 8009de0:	4680      	mov	r8, r0
 8009de2:	460c      	mov	r4, r1
 8009de4:	469a      	mov	sl, r3
 8009de6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009dea:	d807      	bhi.n	8009dfc <_printf_i+0x28>
 8009dec:	2f62      	cmp	r7, #98	; 0x62
 8009dee:	d80a      	bhi.n	8009e06 <_printf_i+0x32>
 8009df0:	2f00      	cmp	r7, #0
 8009df2:	f000 80d4 	beq.w	8009f9e <_printf_i+0x1ca>
 8009df6:	2f58      	cmp	r7, #88	; 0x58
 8009df8:	f000 80c0 	beq.w	8009f7c <_printf_i+0x1a8>
 8009dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e04:	e03a      	b.n	8009e7c <_printf_i+0xa8>
 8009e06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e0a:	2b15      	cmp	r3, #21
 8009e0c:	d8f6      	bhi.n	8009dfc <_printf_i+0x28>
 8009e0e:	a101      	add	r1, pc, #4	; (adr r1, 8009e14 <_printf_i+0x40>)
 8009e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e14:	08009e6d 	.word	0x08009e6d
 8009e18:	08009e81 	.word	0x08009e81
 8009e1c:	08009dfd 	.word	0x08009dfd
 8009e20:	08009dfd 	.word	0x08009dfd
 8009e24:	08009dfd 	.word	0x08009dfd
 8009e28:	08009dfd 	.word	0x08009dfd
 8009e2c:	08009e81 	.word	0x08009e81
 8009e30:	08009dfd 	.word	0x08009dfd
 8009e34:	08009dfd 	.word	0x08009dfd
 8009e38:	08009dfd 	.word	0x08009dfd
 8009e3c:	08009dfd 	.word	0x08009dfd
 8009e40:	08009f85 	.word	0x08009f85
 8009e44:	08009ead 	.word	0x08009ead
 8009e48:	08009f3f 	.word	0x08009f3f
 8009e4c:	08009dfd 	.word	0x08009dfd
 8009e50:	08009dfd 	.word	0x08009dfd
 8009e54:	08009fa7 	.word	0x08009fa7
 8009e58:	08009dfd 	.word	0x08009dfd
 8009e5c:	08009ead 	.word	0x08009ead
 8009e60:	08009dfd 	.word	0x08009dfd
 8009e64:	08009dfd 	.word	0x08009dfd
 8009e68:	08009f47 	.word	0x08009f47
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	1d1a      	adds	r2, r3, #4
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	602a      	str	r2, [r5, #0]
 8009e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e09f      	b.n	8009fc0 <_printf_i+0x1ec>
 8009e80:	6820      	ldr	r0, [r4, #0]
 8009e82:	682b      	ldr	r3, [r5, #0]
 8009e84:	0607      	lsls	r7, r0, #24
 8009e86:	f103 0104 	add.w	r1, r3, #4
 8009e8a:	6029      	str	r1, [r5, #0]
 8009e8c:	d501      	bpl.n	8009e92 <_printf_i+0xbe>
 8009e8e:	681e      	ldr	r6, [r3, #0]
 8009e90:	e003      	b.n	8009e9a <_printf_i+0xc6>
 8009e92:	0646      	lsls	r6, r0, #25
 8009e94:	d5fb      	bpl.n	8009e8e <_printf_i+0xba>
 8009e96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e9a:	2e00      	cmp	r6, #0
 8009e9c:	da03      	bge.n	8009ea6 <_printf_i+0xd2>
 8009e9e:	232d      	movs	r3, #45	; 0x2d
 8009ea0:	4276      	negs	r6, r6
 8009ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ea6:	485a      	ldr	r0, [pc, #360]	; (800a010 <_printf_i+0x23c>)
 8009ea8:	230a      	movs	r3, #10
 8009eaa:	e012      	b.n	8009ed2 <_printf_i+0xfe>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	6820      	ldr	r0, [r4, #0]
 8009eb0:	1d19      	adds	r1, r3, #4
 8009eb2:	6029      	str	r1, [r5, #0]
 8009eb4:	0605      	lsls	r5, r0, #24
 8009eb6:	d501      	bpl.n	8009ebc <_printf_i+0xe8>
 8009eb8:	681e      	ldr	r6, [r3, #0]
 8009eba:	e002      	b.n	8009ec2 <_printf_i+0xee>
 8009ebc:	0641      	lsls	r1, r0, #25
 8009ebe:	d5fb      	bpl.n	8009eb8 <_printf_i+0xe4>
 8009ec0:	881e      	ldrh	r6, [r3, #0]
 8009ec2:	4853      	ldr	r0, [pc, #332]	; (800a010 <_printf_i+0x23c>)
 8009ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ec6:	bf0c      	ite	eq
 8009ec8:	2308      	moveq	r3, #8
 8009eca:	230a      	movne	r3, #10
 8009ecc:	2100      	movs	r1, #0
 8009ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ed2:	6865      	ldr	r5, [r4, #4]
 8009ed4:	60a5      	str	r5, [r4, #8]
 8009ed6:	2d00      	cmp	r5, #0
 8009ed8:	bfa2      	ittt	ge
 8009eda:	6821      	ldrge	r1, [r4, #0]
 8009edc:	f021 0104 	bicge.w	r1, r1, #4
 8009ee0:	6021      	strge	r1, [r4, #0]
 8009ee2:	b90e      	cbnz	r6, 8009ee8 <_printf_i+0x114>
 8009ee4:	2d00      	cmp	r5, #0
 8009ee6:	d04b      	beq.n	8009f80 <_printf_i+0x1ac>
 8009ee8:	4615      	mov	r5, r2
 8009eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8009eee:	fb03 6711 	mls	r7, r3, r1, r6
 8009ef2:	5dc7      	ldrb	r7, [r0, r7]
 8009ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ef8:	4637      	mov	r7, r6
 8009efa:	42bb      	cmp	r3, r7
 8009efc:	460e      	mov	r6, r1
 8009efe:	d9f4      	bls.n	8009eea <_printf_i+0x116>
 8009f00:	2b08      	cmp	r3, #8
 8009f02:	d10b      	bne.n	8009f1c <_printf_i+0x148>
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	07de      	lsls	r6, r3, #31
 8009f08:	d508      	bpl.n	8009f1c <_printf_i+0x148>
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	6861      	ldr	r1, [r4, #4]
 8009f0e:	4299      	cmp	r1, r3
 8009f10:	bfde      	ittt	le
 8009f12:	2330      	movle	r3, #48	; 0x30
 8009f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f1c:	1b52      	subs	r2, r2, r5
 8009f1e:	6122      	str	r2, [r4, #16]
 8009f20:	f8cd a000 	str.w	sl, [sp]
 8009f24:	464b      	mov	r3, r9
 8009f26:	aa03      	add	r2, sp, #12
 8009f28:	4621      	mov	r1, r4
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	f7ff fee4 	bl	8009cf8 <_printf_common>
 8009f30:	3001      	adds	r0, #1
 8009f32:	d14a      	bne.n	8009fca <_printf_i+0x1f6>
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	b004      	add	sp, #16
 8009f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	f043 0320 	orr.w	r3, r3, #32
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	4833      	ldr	r0, [pc, #204]	; (800a014 <_printf_i+0x240>)
 8009f48:	2778      	movs	r7, #120	; 0x78
 8009f4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	6829      	ldr	r1, [r5, #0]
 8009f52:	061f      	lsls	r7, r3, #24
 8009f54:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f58:	d402      	bmi.n	8009f60 <_printf_i+0x18c>
 8009f5a:	065f      	lsls	r7, r3, #25
 8009f5c:	bf48      	it	mi
 8009f5e:	b2b6      	uxthmi	r6, r6
 8009f60:	07df      	lsls	r7, r3, #31
 8009f62:	bf48      	it	mi
 8009f64:	f043 0320 	orrmi.w	r3, r3, #32
 8009f68:	6029      	str	r1, [r5, #0]
 8009f6a:	bf48      	it	mi
 8009f6c:	6023      	strmi	r3, [r4, #0]
 8009f6e:	b91e      	cbnz	r6, 8009f78 <_printf_i+0x1a4>
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	f023 0320 	bic.w	r3, r3, #32
 8009f76:	6023      	str	r3, [r4, #0]
 8009f78:	2310      	movs	r3, #16
 8009f7a:	e7a7      	b.n	8009ecc <_printf_i+0xf8>
 8009f7c:	4824      	ldr	r0, [pc, #144]	; (800a010 <_printf_i+0x23c>)
 8009f7e:	e7e4      	b.n	8009f4a <_printf_i+0x176>
 8009f80:	4615      	mov	r5, r2
 8009f82:	e7bd      	b.n	8009f00 <_printf_i+0x12c>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	6826      	ldr	r6, [r4, #0]
 8009f88:	6961      	ldr	r1, [r4, #20]
 8009f8a:	1d18      	adds	r0, r3, #4
 8009f8c:	6028      	str	r0, [r5, #0]
 8009f8e:	0635      	lsls	r5, r6, #24
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	d501      	bpl.n	8009f98 <_printf_i+0x1c4>
 8009f94:	6019      	str	r1, [r3, #0]
 8009f96:	e002      	b.n	8009f9e <_printf_i+0x1ca>
 8009f98:	0670      	lsls	r0, r6, #25
 8009f9a:	d5fb      	bpl.n	8009f94 <_printf_i+0x1c0>
 8009f9c:	8019      	strh	r1, [r3, #0]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	6123      	str	r3, [r4, #16]
 8009fa2:	4615      	mov	r5, r2
 8009fa4:	e7bc      	b.n	8009f20 <_printf_i+0x14c>
 8009fa6:	682b      	ldr	r3, [r5, #0]
 8009fa8:	1d1a      	adds	r2, r3, #4
 8009faa:	602a      	str	r2, [r5, #0]
 8009fac:	681d      	ldr	r5, [r3, #0]
 8009fae:	6862      	ldr	r2, [r4, #4]
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f7f6 f914 	bl	80001e0 <memchr>
 8009fb8:	b108      	cbz	r0, 8009fbe <_printf_i+0x1ea>
 8009fba:	1b40      	subs	r0, r0, r5
 8009fbc:	6060      	str	r0, [r4, #4]
 8009fbe:	6863      	ldr	r3, [r4, #4]
 8009fc0:	6123      	str	r3, [r4, #16]
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fc8:	e7aa      	b.n	8009f20 <_printf_i+0x14c>
 8009fca:	6923      	ldr	r3, [r4, #16]
 8009fcc:	462a      	mov	r2, r5
 8009fce:	4649      	mov	r1, r9
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	47d0      	blx	sl
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	d0ad      	beq.n	8009f34 <_printf_i+0x160>
 8009fd8:	6823      	ldr	r3, [r4, #0]
 8009fda:	079b      	lsls	r3, r3, #30
 8009fdc:	d413      	bmi.n	800a006 <_printf_i+0x232>
 8009fde:	68e0      	ldr	r0, [r4, #12]
 8009fe0:	9b03      	ldr	r3, [sp, #12]
 8009fe2:	4298      	cmp	r0, r3
 8009fe4:	bfb8      	it	lt
 8009fe6:	4618      	movlt	r0, r3
 8009fe8:	e7a6      	b.n	8009f38 <_printf_i+0x164>
 8009fea:	2301      	movs	r3, #1
 8009fec:	4632      	mov	r2, r6
 8009fee:	4649      	mov	r1, r9
 8009ff0:	4640      	mov	r0, r8
 8009ff2:	47d0      	blx	sl
 8009ff4:	3001      	adds	r0, #1
 8009ff6:	d09d      	beq.n	8009f34 <_printf_i+0x160>
 8009ff8:	3501      	adds	r5, #1
 8009ffa:	68e3      	ldr	r3, [r4, #12]
 8009ffc:	9903      	ldr	r1, [sp, #12]
 8009ffe:	1a5b      	subs	r3, r3, r1
 800a000:	42ab      	cmp	r3, r5
 800a002:	dcf2      	bgt.n	8009fea <_printf_i+0x216>
 800a004:	e7eb      	b.n	8009fde <_printf_i+0x20a>
 800a006:	2500      	movs	r5, #0
 800a008:	f104 0619 	add.w	r6, r4, #25
 800a00c:	e7f5      	b.n	8009ffa <_printf_i+0x226>
 800a00e:	bf00      	nop
 800a010:	0801d63d 	.word	0x0801d63d
 800a014:	0801d64e 	.word	0x0801d64e

0800a018 <memmove>:
 800a018:	4288      	cmp	r0, r1
 800a01a:	b510      	push	{r4, lr}
 800a01c:	eb01 0402 	add.w	r4, r1, r2
 800a020:	d902      	bls.n	800a028 <memmove+0x10>
 800a022:	4284      	cmp	r4, r0
 800a024:	4623      	mov	r3, r4
 800a026:	d807      	bhi.n	800a038 <memmove+0x20>
 800a028:	1e43      	subs	r3, r0, #1
 800a02a:	42a1      	cmp	r1, r4
 800a02c:	d008      	beq.n	800a040 <memmove+0x28>
 800a02e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a032:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a036:	e7f8      	b.n	800a02a <memmove+0x12>
 800a038:	4402      	add	r2, r0
 800a03a:	4601      	mov	r1, r0
 800a03c:	428a      	cmp	r2, r1
 800a03e:	d100      	bne.n	800a042 <memmove+0x2a>
 800a040:	bd10      	pop	{r4, pc}
 800a042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a04a:	e7f7      	b.n	800a03c <memmove+0x24>

0800a04c <_sbrk_r>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	4d06      	ldr	r5, [pc, #24]	; (800a068 <_sbrk_r+0x1c>)
 800a050:	2300      	movs	r3, #0
 800a052:	4604      	mov	r4, r0
 800a054:	4608      	mov	r0, r1
 800a056:	602b      	str	r3, [r5, #0]
 800a058:	f7f9 fff2 	bl	8004040 <_sbrk>
 800a05c:	1c43      	adds	r3, r0, #1
 800a05e:	d102      	bne.n	800a066 <_sbrk_r+0x1a>
 800a060:	682b      	ldr	r3, [r5, #0]
 800a062:	b103      	cbz	r3, 800a066 <_sbrk_r+0x1a>
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	bd38      	pop	{r3, r4, r5, pc}
 800a068:	2000559c 	.word	0x2000559c

0800a06c <_realloc_r>:
 800a06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a070:	4680      	mov	r8, r0
 800a072:	4614      	mov	r4, r2
 800a074:	460e      	mov	r6, r1
 800a076:	b921      	cbnz	r1, 800a082 <_realloc_r+0x16>
 800a078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a07c:	4611      	mov	r1, r2
 800a07e:	f7ff bc57 	b.w	8009930 <_malloc_r>
 800a082:	b92a      	cbnz	r2, 800a090 <_realloc_r+0x24>
 800a084:	f7ff fbe8 	bl	8009858 <_free_r>
 800a088:	4625      	mov	r5, r4
 800a08a:	4628      	mov	r0, r5
 800a08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a090:	f000 f81b 	bl	800a0ca <_malloc_usable_size_r>
 800a094:	4284      	cmp	r4, r0
 800a096:	4607      	mov	r7, r0
 800a098:	d802      	bhi.n	800a0a0 <_realloc_r+0x34>
 800a09a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a09e:	d812      	bhi.n	800a0c6 <_realloc_r+0x5a>
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	f7ff fc44 	bl	8009930 <_malloc_r>
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d0ed      	beq.n	800a08a <_realloc_r+0x1e>
 800a0ae:	42bc      	cmp	r4, r7
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	bf28      	it	cs
 800a0b6:	463a      	movcs	r2, r7
 800a0b8:	f7ff fbc0 	bl	800983c <memcpy>
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4640      	mov	r0, r8
 800a0c0:	f7ff fbca 	bl	8009858 <_free_r>
 800a0c4:	e7e1      	b.n	800a08a <_realloc_r+0x1e>
 800a0c6:	4635      	mov	r5, r6
 800a0c8:	e7df      	b.n	800a08a <_realloc_r+0x1e>

0800a0ca <_malloc_usable_size_r>:
 800a0ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ce:	1f18      	subs	r0, r3, #4
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	bfbc      	itt	lt
 800a0d4:	580b      	ldrlt	r3, [r1, r0]
 800a0d6:	18c0      	addlt	r0, r0, r3
 800a0d8:	4770      	bx	lr
	...

0800a0dc <_init>:
 800a0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0de:	bf00      	nop
 800a0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0e2:	bc08      	pop	{r3}
 800a0e4:	469e      	mov	lr, r3
 800a0e6:	4770      	bx	lr

0800a0e8 <_fini>:
 800a0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ea:	bf00      	nop
 800a0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ee:	bc08      	pop	{r3}
 800a0f0:	469e      	mov	lr, r3
 800a0f2:	4770      	bx	lr
